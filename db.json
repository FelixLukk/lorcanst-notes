{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1619105644541},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"0e70852db0bed7f0dfb9dc01c99ddf95de36c2bc","modified":1619105670721},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"source/_posts/SpringBoot高级教程.md","hash":"2522ae261733a8ba9e9b7814dff62bc5a97acc87","modified":1608897039300},{"_id":"source/_posts/SpringBoot入门简介.md","hash":"c14ee94d81085992be0866bea6df04360aae7007","modified":1620775162608}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-04-22T15:34:04.541Z","updated":"2021-04-22T15:34:04.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknt2epsm00003k0m8hy5auru","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Spring Boot入门","_content":"\n# 一、Spring Boot入门\n\n## 1、Spring Boot简介\n\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n\n## 2、微服务\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务，可以通过HTTP的方式进行互通\n\n单体应用：ALL IN ONE\n\n微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元\n\n## 3、环境准备\n\n环境约束\n\n- jdk1.8\n- maven 3.x :maven3.3以上\n- IDEA2017\n- SpringBoot 1.5.9RELEASE\n\n### 1、MAVEN设置\n\n```xml\n<!-- 配置JDK版本 -->\n<profile>    \n    <id>jdk18</id>    \n    <activation>    \n        <activeByDefault>true</activeByDefault>    \n        <jdk>1.8</jdk>    \n    </activation>    \n    <properties>    \n        <maven.compiler.source>1.8</maven.compiler.source>    \n        <maven.compiler.target>1.8</maven.compiler.target>    \n        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    \n    </properties>     \n</profile>\n   <!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，\n        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。\n        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下\n    -->\n    <!-- <mirror>\n        <id>spring-libs-milestone</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Spring Milestones</name>\n        <url>http://repo.spring.io/libs-milestone</url>\n    </mirror> -->\n\n    <!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  -->\n    <mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n\n    <!-- 备选镜像，也是可以通过 url 去查找确定一下，\n        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  -->\n    <mirror>\n        <id>central-repository</id>\n        <mirrorOf>*</mirrorOf>\n        typor<name>Central Repository</name>\n        <url>http://central.maven.org/maven2/</url>\n    </mirror>  \n```\n\n### 2、IDEA设置\n\n​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件\n\n​\t快捷键：\n\n​\tCtrl+D 复制一行\n\n​\tCtrl+Y 删除一行\n\n​\tCtrl+P 参数提示\n\n​\tCtrl+Alt+V 自动补齐方法\n\n​\tCtrl+N 查找类方法\n\n​\tAlt+Ins 构造器、getter/setter toString\n\n​\tCtrl+O 重载方法提示\n\n​\tAlt+Enter 提示导入类etc\n\n​\tShift+F6 :文件重命名\n\n## 4、Spring Boot的Hello World\n\n### 1、创建一个Maven工程\n\n\n\n### 2、导入Spring Boot的相关依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n```\n\n### 3、编写个主程序\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n### 4、编写相应的Controller和Service\n\n```java\n@Controller\npublic class HelloController {\n\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public  String  hello(){\n        return \"hello world\";\n    }\n}\n```\n\n### 5、运行主程序测试\n\n访问 localhost:8080/hello\n\n### 6、简化部署\n\n在pom.xml文件中，导入build插件\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 5、HelloWorld深度理解\n\n### 1.POM.xml文件\n\n#### 1、父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n```\n\n这个父项目**spring-boot-starter-parent**又依赖一个父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n```\n\n下面有个属性，定义了对应的版本号\n\n```xml\n<properties>\n    <activemq.version>5.15.3</activemq.version>\n    <antlr2.version>2.7.7</antlr2.version>\n    <appengine-sdk.version>1.9.63</appengine-sdk.version>\n    <artemis.version>2.4.0</artemis.version>\n    <aspectj.version>1.8.13</aspectj.version>\n    <assertj.version>3.9.1</assertj.version>\n    <atomikos.version>4.0.6</atomikos.version>\n    <bitronix.version>2.1.4</bitronix.version>\n    <build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>\n    。。。。。。。\n```\n\nSpring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明\n\n#### 2、启动器\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件\n\n**spring boot**将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。\n\n### 2、主程序入口\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n**@SpringBootApplication:** 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用\n\n进入SpringBootApplication注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n```\n\n**@SpringBootConfiguration**：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类\n\n**@Configuration**:配置类上，来标注这个注解；\n配置类 ---- 配置文件，也是容器中的一个组件（@Component）\n**@EnableAutoConfiguration**:开启自动配置功能\n以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动\n配置功能；这样自动配置才能生效。 \n\n```java\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration { \n```\n\n**@AutoConfigurationPackage**:自动配置包\n**@Import({Registrar.class})**：底层注解，给容器导入组件；\n将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； \n\n**@Import({AutoConfigurationImportSelector.class})：**\n给容器导入组件？ \n\nAutoConfigurationImportSelector：导入组件选择器 \n\n将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；\n\n会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置\n好这些组件。 \n\n![1.configuration](E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg)\n\n```java\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\nAnnotationAttributes attributes) {\n\tList<String> configurations =\nSpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),\nthis.getBeanClassLoader());\n\tAssert.notEmpty(configurations, \"No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\");\n\treturn configurations;\n} \n```\n\n`SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),`\n`this.getBeanClassLoader());` \n\nSpring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；\n\n将这些值作为自动配置类导入到容器中，自动配置就生效了。 ![2.factories](E:\\工作文档\\SpringBoot\\images\\2.factories.jpg)\n\nJ2EE的整体解决方案\n\norg\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar \n\n## 6、使用Spring Initializer创建一个快速向导 \n\n1.IDE支持使用Spring Initializer\n\n自己选择需要的组件:例如web\n\n默认生成的SpringBoot项目 \n\n- 主程序已经生成好了，我们只需要完成我们的逻辑\n\n\n- resources文件夹目录结构\n\n  - static:保存所有的静态文件；js css images\n\n  - templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可\n\n    以使用模板引擎（freemarker.thymeleaf）;\n\n  - application.properties:Spring Boot的默认配置，例如 server.port=9000 \n\n# 二、配置文件 \n\n## 1、配置文件 \n\nSpring Boot使用全局配置文件，配置文件名是固定的；\n\n- application.properties\n- application.yml \n\n配置文件作用：修改Spring Boot在底层封装好的默认值；\n\nYAML（YAML AIN'T Markup Language）\n\n是一个标记语言\n\n又不是一个标记语言 \n\n**标记语言：**\n\n以前的配置文件；大多数使用的是 xxx.xml文件；\n\n以数据为中心，比json、xml等更适合做配置文件\n\nYAML：配置例子 \n\n```yaml\nserver:\n\tport: 9000 \n```\n\nXML: \n\n```xml\n<server>\n\t<port>9000</port>\n</server> \n```\n\n## 2、YAML语法 \n\n### 1、基本语法 \n\nk:(空格)v:表示一堆键值对（空格必须有）；\n\n以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 \n\n```yaml\nserver:\n\tport: 9000\n\tpath: /hello \n```\n\n属性和值也是大小写敏感 \n\n### 2、值的写法\n\n**字面量：普通的值（数字，字符串，布尔）** \n\nk: v:字面直接来写；\n\n字符串默认不用加上单引号或者双引号\n\n\"\":**双引号** 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思\n\n`name:\"zhangsan\\n lisi\"` 输出：`zhangsan换行 lisi`\n\n'':**单引号** 会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n`name:'zhangsan\\n lisi'` 输出：`zhangsan\\n lisi` \n\n**对象、Map（属性和值）键值对** \n\nk :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进\n\n对象还是k:v的方式 \n\n```yaml\nfrends:\n\tlastName: zhangsan\n\tage: 20 \n```\n\n行内写法 \n\n```yaml\nfriends: {lastName: zhangsan,age: 18} \n```\n\n**数组（List、Set）:**\n用-表示数组中的一个元素 \n\n```yaml\npets:\n ‐ cat\n ‐ dog\n ‐ pig \n```\n\n行内写法 \n\n```yaml\npets: [cat,dog,pig] \n```\n\n**组合变量**\n\n多个组合到一起 \n\n## 3、配置文件值注入 \n\n### 1、@ConfigurationProperties\n\n1、application.yml 配置文件 \n\n```yaml\nperson:\n  age: 18\n  boss: false\n  birth: 2017/12/12\n  maps: {k1: v1,k2: 12}\n  lists:\n   - lisi\n   - zhaoliu\n  dog:\n    name: wangwang\n    age: 2\n  last-name: wanghuahua\n```\n\n`application.properties` 配置文件（二选一） \n\n```properties\nidea配置文件utf-8\nproperties 默认GBK\nperson.age=12\nperson.boss=false\nperson.last-name=张三\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n所以中文输出乱码，改进settings-->file encoding -->[property-->utf-8 ,勾选转成ascii] \n\njavaBean \n\n```java\n/**\n* 将配置文件的配置每个属性的值，映射到组件中\n* @ConfigurationProperties:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；\n* prefix = \"person\" 配置文件爱你的那个属性进行一一映射\n* *\n只有这个组件是容器中的组件，才能提供到容器中\n*/\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n导入配置文件处理器，以后编写配置就有提示了 \n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring‐boot‐configuration‐processor</artifactId>\n\t<optional>true</optional>\n</dependency> \n```\n### 2、@Value注解\n\n更改javaBean中的注解\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    @Value(\"${person.last-name}\")\n    private String lastName;\n    @Value(\"#{11*2}\")\n    private Integer age;\n    @Value(\"true\")\n    private Boolean boss;\n```\n\n|          | @ConfigurationProperties | @Value |\n| :------: | :----------------------: | :----: |\n|    功能    |        批量注入配置文件属性        |  单个指定  |\n| 松散绑定(语法) |            支持            |  不支持   |\n|   spEL   |           不支持            |   支持   |\n| JSR303校验 |            支持            |  不支持   |\n|   复杂类型   |            支持            |  不支持   |\n\n> 松散语法：javaBean中last-name(或者lastName) -->application.properties中的last-name;\n>\n> spEL语法：#{11*2} \n>\n> JSR303：@Value会直接忽略，校验规则\n\nJSR303校验：\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"person\")\n@Validated\npublic class Person {\n    @Email\n    private String lastName;\n```\n\n复杂类型栗子：\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n   // @Value(\"${person.maps}\")\n    private Map<String,Object> maps;\n```\n\n以上会报错，不支持复杂类型\n\n**使用场景分析**\n\n​\t如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；\n\n如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties\n\n举栗子：\n\n1、编写新的Controller文件\n\n```java\n@RestController\npublic class HelloController {\n\n    @Value(\"${person.last-name}\")\n    private String name;\n    @RequestMapping(\"/hello\")\n    public  String sayHello(){\n        return \"Hello\"+ name;\n    }\n}\n```\n\n2、配置文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n3、测试运行\n\n访问 localhost:9000/hello\n\n结果为`Hello 李四`\n\n### 3、其他注解\n **@PropertySource**\n\n作用：加载指定的properties配置文件\n\n1、新建一个person.properties文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n2、在javaBean中加入@PropertySource注解\n\n```java\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n```\n\n**@ImportResource**\n\n作用：导入Spring配置文件，并且让这个配置文件生效\n\n1、新建一个Spring的配置文件，bean.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"HelloService\" class=\"com.wdjr.springboot.service.HelloService\"></bean>\n</beans>\n```\n\n2、编写测试类，检查容器是否加载Spring配置文件写的bean\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"HelloService\");\n    System.out.println(b);\n}\n```\n\n> import org.springframework.context.ApplicationContext;\n\n3、运行检测\n\n结果为false，没有加载配置的内容\n\n4、使用@ImportResource注解\n\n将@ImportResource标注在主配置类上\n\n```java\n@ImportResource(locations={\"classpath:beans.xml\"})\n@SpringBootApplication\npublic class SpringBoot02ConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot02ConfigApplication.class, args);\n    }\n}\n```\n\n5、再次运行检测\n\n结果为true\n\n缺点：每次指定xml文件太麻烦\n\nSpringBoot推荐给容器添加组件的方式：\n\n1、配置类=====Spring的xml配置文件（old）\n\n2、全注解方式@Configuration+@Bean（new）\n\n![4.MyAppConfig](E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg)\n\n\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来代替之前的Spring配置文件\n *\n * 在配置文件中用<bean></bean>标签添加组件\n */\n\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器这个组件id就是方法名\n    @Bean\n    public HelloService helloService01(){\n        System.out.println(\"配置类给容器添加了HelloService组件\");\n        return new HelloService();\n    }\n}\n```\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"helloService01\");\n    System.out.println(b);\n}\n```\n\n *容器这个组件id就是方法名* \n\n## 4、配置文件占位符\n\n#### 1、随机数\n\n```properties\n${random.value} 、${random.int}、${random.long}\n${random.int(10)}、${random.int[100,200]}\n```\n\n#### 2、获取配置值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.last-name}'s wanghuahu\nperson.dog.age=15\n```\n\n存在以下两种情况\n\n没有声明`person.last-name`会报错，新声明的需要加默认值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}'s wanghuahu\nperson.dog.age=15\n```\n\n结果：输出`hello's wanghuahua`\n\n## 5、Profile\n\n### 1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml\n\n- application.properties\n- application-dev.properties\n- application-prod.properties\n\n默认使用application.properties\n\napplication.properties配置文件指定\n\n```properties\nspring.profiles.active=dev\n```\n\n### 2、YAML文档块\n\n```yaml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: dev\n\n---\n\nserver:\n  port: 9000\nspring:\n  profiles: dev\n\n---\nserver:\n  port: 80\nspring:\n  profiles: prod\n\n```\n\n### 3、激活指定profile\n\n1、在配置文件中激活\n\n2、命令行：\n\n--spring.profiles.active=dev\n\n![5.comandLine](E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg)\n\n优先级大于配置文件\n\n打包 成jar后\n\n`java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev`\n\n虚拟机参数\n\n`-Dspring.profiles.active=dev`\n\n## 6、加载配置文件位置\n\nSpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n- file:./config/\n- file./\n- classpath:/config/\n- classpath:/\n\n优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置\n\n也可以通过spring.config.location来改变默认配置\n\n> ```\n> server.servlet.context-path=/boot03\n> ```\n\n注：spring boot1x 是server.context.path=/boot02\n\n\n\n![7.priority](E:\\工作文档\\SpringBoot\\images\\7.priority.jpg)\n\n还可以通过spring.config.location来改变配置文件的位置\n\n项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置\n\n`java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties`\n\n运维比较有用，从外部加载，不用修改别的文件\n\n## 7.引入外部配置\n\n**SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补**\n\n1. 命令行参数\n\n   java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --server.port=9005 --server.context-path=/abc\n\n   中间一个空格\n\n2. 来自java:comp/env的JNDI属性\n\n3. java系统属性（System.getProperties()）\n\n4. 操作系统环境变量\n\n5. RandomValuePropertySource配置的random.*属性值\n\n   \n\n   **优先加载profile,    由jar包外到jar包内**\n\n6. **jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n7. **jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n8. **jar包外部的application.properties或application.yml(带Spring.profile)配置文件**\n\n9. **jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n   \n\n10. @Configuration注解类的@PropertySource\n\n11. 通过SpringApplication.setDefaultProperties指定的默认属性\n\n[官方文档](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n## 8、自动配置\n\n配置文件到底怎么写？\n\n[Spring的所有配置参数](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties)\n\n自动配置原理很关键\n\n### 1、自动配置原理\n\n1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration\n\n2）、@EnableAutoConfiguration 作用：\n\n- 利用AutoConfigurationImportSelector给容器中导入一些组件？\n- 可以查看selectImports()方法的内容\n- 获取候选的配置\n\n```java\nList<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n```\n\n\n- 扫描类路径下的\n```java\n  SpringFactoriesLoader.loadFactoryNames(）\n  扫描所有jar包类路径下的 MATA-INF/spring.factories\n  把扫描到的这些文件的内容包装成properties对象\n  从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中\n```\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；\n\n3）、每一个自动配置类进行自动配置功能；\n\n4）、以**HttpEncodingAutoConfiguration** 为例\n\n```java\n@Configuration //表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties({HttpEncodingProperties.class})//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中\n@ConditionalOnWebApplication//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；\n(\n    type = Type.SERVLET\n)\n@ConditionalOnClass({CharacterEncodingFilter.class})//判断当前项目有没有这个类，解决乱码的过滤器\n@ConditionalOnProperty(\n    prefix = \"spring.http.encoding\",\n    value = {\"enabled\"},\n    matchIfMissing = true\n)//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效\npublic class HttpEncodingAutoConfiguration {\n   //给容器添加组件，这个组件的值需要从properties属性中获取\n    private final HttpEncodingProperties properties;\n\t//只有一个有参数构造器情况下，参数的值就会从容器中拿\n    public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n        filter.setEncoding(this.properties.getCharset().name());\n        filter.setForceRequestEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));\n        filter.setForceResponseEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));\n        return filter;\n    }\n\n```\n\n5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类\n\n```java\n@ConfigurationProperties(prefix = \"spring.http.encoding\")//从配置文件中的值进行绑定和bean属性进行绑定\npublic class HttpEncodingProperties {\n```\n\n根据当前不同条件判断，决定这个配置类是否生效？\n\n一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的\n\n\n\n### 2、所有的自动配置组件\n\n每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；\n\n作用：用他们做自动配置\n\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n\n```\n\n### 3、精髓：\n\n1）、SpringBoot启动会加载大量的自动配置类\n\n2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；\n\n3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）\n\n4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值\n\nxxxAutoConfiguration:自动配置类；\n\n给容器中添加组件\n\nxxxProperties:封装配置文件中的属性；\n\n跟之前的Person类一样，配置文件中值加入bean中\n\n### 4、细节\n\n#### 1、@Conditional派生注解 \n\n> 利用Spring注解版原生的@Conditional作用\n\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional派生注解                | 作用（判断是否满足当前指定条件）               |\n| ------------------------------- | ------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                |\n| @ConditionalOnBean              | 容器中存在指定Bean                    |\n| @ConditionalOnMissBean          | 容器中不存在指定Bean                   |\n| @ConditionalOnExpression        | 满足spEL表达式                      |\n| @ConditionalOnClass             | 系统中有指定的类                       |\n| @ConditionalOnMissClass         | 系统中没有指定的类                      |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean,或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                |\n| @ConditionalOnResource          | 类路径下是否存在指定的资源文件                |\n| @ConditionalOnWebApplication    | 当前是web环境                       |\n| @ConditionalOnNotWebApplication | 当前不是web环境                      |\n| @ConditionalOnJndi              | JNDI存在指定项                      |\n\n#### 2、自动配置报告\n\n自动配置类必须在一定条件下生效\n\n我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效\n\n```properties\ndebug=true\n```\n\n自动配置报告\n\n```java\n============================\n\nCONDITIONS EVALUATION REPORT\n============================\n\n\nPositive matches:（启动的，匹配成功的）\n-----------------\n\n   CodecsAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n        ......\n        \n Negative matches:（没有启动的，没有匹配成功的）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n.....\n```\n\n# 三、日志\n\n> Spring Boot2对日志有更改\n\n### 1、日志框架\n\n小张：开发一个大型系统；\n\n1、System.out.println(\"\");将关键数据打印在控制台；去掉？卸载文件中\n\n2、框架记录系统的一些运行信息；日志框架zhanglog.jar\n\n3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?\n\n4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;\n\n5、JDBC--数据库驱动；\n\n​\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;\n\n​\t给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；\n\n市面上的日志框架\n\n| 日志抽象层                                                   | 日志实现                                        |\n| ------------------------------------------------------------ | ----------------------------------------------- |\n| ~~JCL(Jakarta Commons Logging)~~ SLF4j(Simple Logging Facade for Java) ~~jboss-logging~~ | Log4j ~~JUL(java.util.logging)~~ Log4j2 Logback |\n|                                                              |                                                 |\n\n左边的抽象，右边的实现\n\nSLF4J  -- Logback\n\nSpring Boot:底层是Spring框架，Spring默认框架是JCL；\n\n​\tSpringBoot选用SLF4J和logback\n\n### 2、SLF4J使用\n\n#### 1、如何在系统中使用SLF4j\n\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n应该给系统里面导入slf4j的jar包和logback的实现jar\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(\"Hello World\");\n  }\n}\n```\n\n![8.slf4j](E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg)\n\n每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架本身的配置文件**；\n\n#### 2、遗留问题\n\na系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis\n\n统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；\n\n核心：\n\n1、将系统中其他日志框架排除出去；\n\n2、用中间包来替换原有的日志框架/\n\n3、导入slf4j的其他实现\n\n### 3、SpingBoot日志框架解析\n\n打开IDEA ，打开pom文件的依赖图形化显示\n\n![9.IDEAdependencies](E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg)\n\nSpringBoot的基础框架\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\nSpringBoot的日志功能\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n![10.slf4jandlogback](E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg)\n\n总结：\n\n1. SpringBoot底层也是使用SLF4J+log4jback\n\n2. SpringBoot也把其他日志替换成了slf4j\n\n3. 起着commons.loggings的名字其实new的SLF4J替换中间包\n\n   SpringBoot2中改成了bridge\n\n4. 如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层\n\n### 4、日志的使用\n\n#### 1、默认配置\n\ntrace-debug-info-warn-error\n\n可以调整需要的日志级别进行输出，不用注释语句。\n\n```java\n//记录器\nLogger logger = LoggerFactory.getLogger(getClass());\n@Test\npublic void contextLoads() {\n\n    //日志的级别\n    //从低到高\n    //可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效\n    logger.trace(\"这是trace日志\");\n    logger.debug(\"这是debug信息\");\n    //SpringBoot默认给的是info级别，如果没指定就是默认的root级别\n    logger.info(\"这是info日志\");\n    logger.warn(\"这是warn信息\");\n    logger.error(\"这是Error信息\");\n}\n```\n\n调整指定包的日志级别在配置文件中进行配置\n\n```properties\nlogging.level.com.wdjr=trace\n```\n\n日志输出格式\n\n```properties\n#控制台输出的日志格式 \n#%d：日期\n#%thread：线程号 \n#%-5level：靠左 级别 \n#%logger{50}：全类名50字符限制,否则按照句号分割\n#%msg：消息+换行\n#%n：换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n```\n\nSpringBoot修改日志的默认配置\n\n```properties\nlogging.level.com.wdjr=trace\n#不指定path就是当前目录下生成springboot.log\n#logging.file=springboot.log\n#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认\nlogging.path=/spring/log\n#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n#指定文件中日志输出的格式\nlogging.pattern.file=xxx\n```\n\n#### 2、指定配置\n\n给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置\n\n| logging System         | Customization                                                |\n| ---------------------- | ------------------------------------------------------------ |\n| Logback                | logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy |\n| Log4J2                 | log4j2-spring.xml or log4j2.xml                              |\n| JDK(Java Util Logging) | logging.properties                                           |\n\nlogback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载\n\n```xml\n<springProfile name=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n<springProfile name!=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n```\n\n如何调试开发环境,输入命令行参数\n\n--spring.profiles.active=dev\n\n如果不带后面的xx-spring.xml就会报错\n\n### 3、切换日志框架\n\n可以根据slf4j的日志适配图，进行相关切换；\n\n#### 1、log4j\n\nslf4j+log4j的方式；\n\n![11.log4j](E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg)\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>logback-classic</artifactId>\n            <groupId>ch.qos.logback</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n```\n\n不推荐使用仅作为演示\n\n#### 2、log4j2\n\n切换为log4j2\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n# 四、web开发\n\n## 1、简介\n\n使用SpringBoot;\n\n1)、创建SpringBoot应用，选中我们需要的模块；\n\n2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来\n\n3)、自己编写业务代码\n\n**自动配置原理？**\n\n这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx\n\n```java\nxxxAutoConfiguration:帮我们给容器中自动配置组件\nxxxProperties:配置类来封装配置文件的内容\n```\n\n## 2、静态资源文件映射规则\n\n```java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware, InitializingBean {\n    //可以设置和静态资源相关的参数，缓存时间等\n```\n\n```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n   if (!this.resourceProperties.isAddMappings()) {\n      logger.debug(\"Default resource handling disabled\");\n      return;\n   }\n   Integer cachePeriod = this.resourceProperties.getCachePeriod();\n   if (!registry.hasMappingForPattern(\"/webjars/**\")) {\n      customizeResourceHandlerRegistration(registry\n            .addResourceHandler(\"/webjars/**\")\n            .addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n            .setCachePeriod(cachePeriod));\n   }\n   String staticPathPattern = this.mvcProperties.getStaticPathPattern();\n   if (!registry.hasMappingForPattern(staticPathPattern)) {\n      customizeResourceHandlerRegistration(\n            registry.addResourceHandler(staticPathPattern)\n                  .addResourceLocations(\n                        this.resourceProperties.getStaticLocations())\n                  .setCachePeriod(cachePeriod));\n   }\n}\n```\n\n### 1、webjar\n\n1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；\n\n​\twebjars：以jar包的方式引入静态资源\n\nhttp://www.webjars.org/\n\n![12.jquery](E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\n\n### 2、本地资源\n\n```\nprivate String staticPathPattern = \"/**\";\n```\n\n访问任何资源\n\n2、会在这几文件夹下去找静态路径（静态资源文件夹）\n\n```\n\"classpath:/META-INF/resources/\", \n\"classpath:/resources/\",\n\"classpath:/static/\", \n\"classpath:/public/\",\n\"/\";当前项目的根路径\n```\n\n![13.static](E:\\工作文档\\SpringBoot\\images\\13.static.jpg)\n\nlocalhost:8080/abc ==>去静态资源文件夹中找abc\n\n![14.static-css](E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg)\n\n3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；\n\nlocalhost:8080/  -->index页面\n\n```JAVA\n@Bean\npublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n      ResourceProperties resourceProperties) {\n   return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n         this.mvcProperties.getStaticPathPattern());\n}\n```\n\n4、喜欢的图标，即网站title的图标favicon\n\n```java\n@Configuration\n@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\npublic static class FaviconConfiguration {\n\n   private final ResourceProperties resourceProperties;\n\n   public FaviconConfiguration(ResourceProperties resourceProperties) {\n      this.resourceProperties = resourceProperties;\n   }\n\n   @Bean\n   public SimpleUrlHandlerMapping faviconHandlerMapping() {\n      SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n       //把任何favicon的图标都在静态文件夹下找\n      mapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\n            faviconRequestHandler()));\n      return mapping;\n   }\n\n   @Bean\n   public ResourceHttpRequestHandler faviconRequestHandler() {\n      ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n      requestHandler\n            .setLocations(this.resourceProperties.getFaviconLocations());\n      return requestHandler;\n   }\n\n}\n```\n\n可以在配置文件配置静态资源文件夹\n\n```properties\nspring.resources.static-locations=classpath:xxxx\n```\n\n## 3、模板引擎\n\n将html和数据 结合到一起 输出组装处理好的新文件\n\nSpringBoot推荐Thymeleaf;语法简单，功能强大\n\n### 1、引入thymeleaf 3\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n默认导入thymeleaf2，版本太低 所以使用thymeleaf3.\n\n[官方导入办法](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3)\n\n```xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <!--thymeleaf 3的导入-->\n    <thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n    <!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  -->\n    <!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  -->\n    <thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n</properties>\n```\n\n### 2、Thymeleaf使用和语法\n\n```java\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\npublic class ThymeleafProperties {\n\n   private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n\n   private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n\n   public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n\n   public static final String DEFAULT_SUFFIX = \".html\";\n   //只要把HTML文件方法类路径下的template文件夹下，就会自动导入\n```\n\n只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；\n\n使用：\n\n1、导入thymeleaf的名称空间\n\n```html\n<html xmlns:th=\"http://www.thymeleaf.org\">    \n```\n\n2、使用thymeleaf语法；\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>success</title>\n</head>\n<body>\n<h1>success</h1>\n<!--th:text 将div里面的文本内容设置为-->\n<div th:text=\"${Lion}\">\n前端数据\n</div>\n</body>\n</html>\n```\n\n3、语法规则\n\n1）、th:text=\"${hello}\"可以使用任意标签 替换原生的任何属性\n\n**在SpringBoot的环境下**\n\n```html\n<div id=\"testid\" class=\"testcalss\" th:id=\"${Lion}\" th:class=\"${Lion}\" th:text=\"${Lion}\">\n\t前端数据\n</div>\n```\n\n![15.thtmeleaf-th01](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg)\n\n**直接访问HTML页面**\n\n![15.thtmeleaf-th02](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg)\n\n**2)、内联写法注意需要在body上加上 th:inline=\"text\"敲黑板**\n\n不然不起作用\n\n```html\n<body class=\"text-center\" th:inline=\"text\"></body>\n```\n\nth标签的访问优先级\n\nOrder Feature Attributes\n\n### 3、语法规则\n\n|      | 功能                            | 标签                                 | 功能和jsp对比                             |\n| ---- | ------------------------------- | ------------------------------------ | ----------------------------------------- |\n| 1    | Fragment inclusion              | th:insert th:replace                 | include(片段包含)                         |\n| 2    | Fragment iteration              | th:each                              | c:forEach(遍历)                           |\n| 3    | Conditional evaluation          | th:if th:unless th:switch th:case    | c:if(条件判断)                            |\n| 4    | Local variable definition       | th:object  th:with                   | c:set(声明变量)                           |\n| 5    | General attribute modification  | th:attr th:attrprepend th:attrappend | 属性修改支持前面和后面追加内容            |\n| 6    | Specific attribute modification | th:value th:href th:src ...          | 修改任意属性值                            |\n| 7    | Text (tag body modification)    | th:text th:utext                     | 修改标签体内容utext：不转义字符<h1>大标题 |\n| 8    | Fragment specification          | th:fragment                          | 声明片段                                  |\n| 9    | Fragment removal                | th:remove                            |                                           |\n\n \n\n```properties\nSimple expressions:(表达式语法)\n    Variable Expressions: ${...}\n    \t1、获取对象属性、调用方法\n    \t2、使用内置基本对象：\n    \t    #ctx : the context object.\n            #vars: the context variables.\n            #locale : the context locale.\n            #request : (only in Web Contexts) the HttpServletRequest object.\n            #response : (only in Web Contexts) the HttpServletResponse object.\n            #session : (only in Web Contexts) the HttpSession object.\n            #servletContext : (only in Web Contexts) the ServletContext object.\n         3、内置一些工具对象\n        \t#execInfo : information about the template being processed.\n        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they\n            would be obtained using #{…} syntax.\n            #uris : methods for escaping parts of URLs/URIs\n            #conversions : methods for executing the configured conversion service (if any).\n            #dates : methods for java.util.Date objects: formatting, component extraction, etc.\n            #calendars : analogous to #dates , but for java.util.Calendar objects.\n            #numbers : methods for formatting numeric objects.\n            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.\n            #objects : methods for objects in general.\n            #bools : methods for boolean evaluation.\n            #arrays : methods for arrays.\n            #lists : methods for lists.\n            #sets : methods for sets.\n            #maps : methods for maps.\n            #aggregates : methods for creating aggregates on arrays or collections.\n            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).\n    Selection Variable Expressions: *{...} //选择表达式：和${}功能一样，补充功能\n   # 配合th:object使用，object=${object} 以后获取就可以使用*{a}  相当于${object.a}\n  \t    <div th:object=\"${session.user}\">\n            <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n            <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n            <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n\t\t</div>\n    Message Expressions: #{...} //获取国际化内容\n    Link URL Expressions: @{...} //定义URL链接\n    \t#<a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\">view</a>\n    Fragment Expressions: ~{...}//片段文档\n    \nLiterals（字面量）\n    Text literals: 'one text' , 'Another one!' ,…\n    Number literals: 0 , 34 , 3.0 , 12.3 ,…\n    Boolean literals: true , false\n    Null literal: null\n    Literal tokens: one , sometext , main ,…\nText operations:(文本操作)\n    String concatenation: +\n    Literal substitutions: |The name is ${name}|\nArithmetic operations:（数学运算）\n    Binary operators: + , - , * , / , %\n    Minus sign (unary operator): -\nBoolean operations:（布尔运算）\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality:（比较运算）\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\n    Equality operators: == , != ( eq , ne )\nConditional operators:（条件运算）\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:（空操作）\n\tNo-Operation: _\n```\n\ninline写法\n\n```html\n[[]] -->th:text\n[()] -->th:utext\n```\n\n\n\n## 4、SpringMVC自动配置\n\n### 1、SpringMVC的自动导入\n\n[Spring框架](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications)\n\n自动配置好了mvc：\n\n以下是SpringBoot对SpringMVC的默认\n\nSpring Boot provides auto-configuration for Spring MVC that works well with most applications.\n\nThe auto-configuration adds the following features on top of Spring’s defaults:\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n  - 自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)\n  - `ContentNegotiatingViewResolver`组合所有视图解析器\n  - 如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来\n\n- Support for serving static resources, including support for WebJars (see below).静态资源\n\n- Static `index.html` support.\n\n- Custom `Favicon` support (see below).\n\n- 自动注册 了`Converter`, `GenericConverter`, `Formatter` beans.\n\n  - `Converter`：类型转换 文本转为字面量\n\n  - `Formatter` ：格式化器 转换后格式转换\n\n    ```java\n    @Bean\n    @ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件配置入职格式化的规则\n    public Formatter<Date> dateFormatter() {\n       return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\n    }\n    ```\n\n    自己添加的格式化转换器，只需要放在容器中即可\n\n- Support for `HttpMessageConverters` (see below).\n\n  - `HttpMessageConverters` ：转换HTTP转换和响应：User - json\n\n  - `HttpMessageConverters` ：是从容器中确定；获取所有的`HttpMessageConverters`  ，将自己的组件注册在容器中@Bean \n\n  - If you need to add or customize converters you can use Spring Boot’s `HttpMessageConverters` class:\n\n    ```java\n    import org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n    import org.springframework.context.annotation.*;\n    import org.springframework.http.converter.*;\n    \n    @Configuration\n    public class MyConfiguration {\n    \n        @Bean\n        public HttpMessageConverters customConverters() {\n            HttpMessageConverter<?> additional = ...\n            HttpMessageConverter<?> another = ...\n            return new HttpMessageConverters(additional, another);\n        }\n    \n    }\n    ```\n\n- Automatic registration of `MessageCodesResolver` (see below).\n\n  - 定义错误代码生成规则\n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\n\n  - ```java\n    @Override\n    protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n       try {\n          return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n       }\n       catch (NoSuchBeanDefinitionException ex) {\n          return super.getConfigurableWebBindingInitializer();\n       }\n    }\n    ```\n\n    在beanFactory：中可以自己创建一个，初始化webDataBinder\n\n    请求数据 ==》javaBean\n\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.16.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\n\n思想：修改默认配置\n\n### 2、扩展SpringMVC\n\n编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用\n\n```java\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n1）、WebMvcAutoConfiguration是SpringMVC的自动配置\n\n2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)\n\n```java\n@Configuration\npublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n    private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\n\n\t//从容器中获取所有webMVCconfigurer\n\t@Autowired(required = false)\n\tpublic void setConfigurers(List<WebMvcConfigurer> configurers) {\n\t\tif (!CollectionUtils.isEmpty(configurers)) {\n\t\t\tthis.configurers.addWebMvcConfigurers(configurers);\n            \n            \t@Override\n                protected void addViewControllers(ViewControllerRegistry registry) {\n                    this.configurers.addViewControllers(registry);\n                }\n            //一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）\n            \t@Override\n               // public void addViewControllers(ViewControllerRegistry registry) {\n                   // for (WebMvcConfigurer delegate : this.delegates) {\n\t\t\t\t //delegate.addViewControllers(registry);\n                    //}\n                }\n\t\t}\n\t}\n    \n```\n\n\n\n3）、自己的配置被调用\n\n效果：SpringMVC的自动配置和我们的扩展配置都会起作用\n\n### 3、全面接管mvc\n\n不需要SpringBoot对SpringMVC的自动配置。\n\n```java\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n\n\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n例如静态资源访问，不推荐全面接管\n\n原理：\n\n为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了\n\n1）、核心配置\n\n```java\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n}\n```\n\n2）、DelegatingWebMvcConfiguration\n\n```java\n@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n```\n\n3）、WebMvcAutoConfiguration\n\n```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n      WebMvcConfigurerAdapter.class })\n//容器没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n      ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\n4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；\n\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能\n\n\n\n## 5、修改SpringMVC默认配置\n\n模式:\n\n​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n​\t2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。\n\n## 6、RestfulCRUD\n\n### 1、默认访问首页\n\n在config/MyConfig.java中编写配置类\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/login.html\").setViewName(\"login\");\n        }\n    };\n    return adapter;\n}\n```\n\n静态资源引用\n\n```html\n<link href=\"#\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n```\n\n### 2、国际化\n\n1、编写国际化配置文件\n\n2、使用ResourceBundleMessageSource管理国际化资源文件\n\n3、在页面中使用fmt:message，取出国际化内容\n\n#### 1、浏览器切换国际化\n\n步骤\n\n1、编写国际化配置文件，抽取页面需要的显示的国际化消息\n\n![16.national](E:\\工作文档\\SpringBoot\\images\\16.national.jpg)\n\n2、SpringBoot自动配置好了国际化配置的资源文件\n\n```java\n@ConfigurationProperties(prefix = \"spring.messages\")\npublic class MessageSourceAutoConfiguration {\n    //我们的配置文件可以直接放在类路径下叫messages.properties\n    private String basename = \"messages\";\n    @Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n            //设置国际化文件的基础名，去掉语言国家代码\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t}\n\t\tif (this.encoding != null) {\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t}\n```\n\n3、对IDEA的编码进行设置\n\n![17.encoding](E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg)\n\n4、login进行标签插入\n\n```html\n<!DOCTYPE html>\n<!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ -->\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"author\" content=\"\" />\n    <link rel=\"icon\" href=\"https://getbootstrap.com/favicon.ico\" />\n\n    <title>登录页面</title>\n\n    <!-- Bootstrap core CSS -->\n    <link href=\"#\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n\n    <!-- Custom styles for this template -->\n    <link href=\"./login_files/signin.css\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n  </head>\n\n  <body class=\"text-center\">\n    <form class=\"form-signin\">\n      <img class=\"mb-4\" src=\"./login_files/bootstrap-solid.svg\" th:src=\"@{/img/bootstrap-solid.svg}\" alt=\"\" width=\"72\" height=\"72\" />\n      <h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\n      <label  class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\n      <input type=\"text\"  name=\"username\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\"/>\n      <label for=\"inputPassword\" class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\n      <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\" />\n      <div class=\"checkbox mb-3\">\n        <label>\n          <input type=\"checkbox\" value=\"remember-me\" /> [[#{login.remember}]]\n        </label>\n      </div>\n      <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\n      <p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n    </form>\n  \n\n</body></html>\n```\n\n效果根据浏览器语言的信息切换国际化\n\n原理：\n\n国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；\n\n```java\n@Bean\n@ConditionalOnMissingBean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\npublic LocaleResolver localeResolver() {\n    if (this.mvcProperties\n        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n        return new FixedLocaleResolver(this.mvcProperties.getLocale());\n    }\n    AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n    localeResolver.setDefaultLocale(this.mvcProperties.getLocale());\n    return localeResolver;\n}            \n\n```\n\n默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）\n\n![18.accept-language](E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg)\n\n#### 2、点击链接切换国际化\n\n自己编写localResolver，加到容器中\n\n1、更改HTML代码\n\n```html\n<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=zh_CN}\">中文</a>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=en_US}\">English</a>\n```\n\n2、新建一个MyLocaleResolver.class\n\n```java\npublic class MyLocaleResolver implements LocaleResolver {\n\n    //解析区域信息\n    @Override\n    public Locale resolveLocale(HttpServletRequest request) {\n        String l = request.getParameter(\"lg\");\n        Locale locale = Locale.getDefault();\n        if(!StringUtils.isEmpty(l)){\n            String[] split = l.split(\"_\");\n            locale = new Locale(split[0], split[1]);\n        }\n        return locale;\n    }\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n\n    }\n}\n```\n\n3、将MyLocaleResolver加入到容器中\n\n```java\n@Bean\npublic LocaleResolver localeResolver(){\n    return new MyLocalResolver();\n}\n```\n\n4、启动演示\n\n### 3、登录拦截器\n\n#### 1、登录\n\n开发技巧\n\n​\t1、清除模板缓存\n\n​\t2、Ctrl+F9刷新\n\n1、新建一个LoginController\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功\n            return \"list\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n2、登录错误消息显示\n\n```html\n<!--判断-->\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\n```\n\n3、表单重复提交\n\n表单重复提交事件 --》重定向来到成功页面--》模板引擎解析\n\n```java\nif(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n    //登录成功,防止重复提交\n    return \"redirect:/main.html\";\n}else{\n    map.put(\"msg\", \"用户名密码错误\");\n    return \"login\";\n}\n```\n\n模板引擎解析\n\n```java\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n    registry.addViewController(\"/\").setViewName(\"login\");\n    registry.addViewController(\"/index.html\").setViewName(\"login\");\n    registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n}\n```\n\n### 4、拦截器\n\n作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）\n\n1、在component下新建一个LoginHandlerInterceptor拦截器\n\n```java\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\n\n    //目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        Object user = request.getSession().getAttribute(\"loginUser\");\n        if(user!=null){\n            //已经登录\n            return true;\n        }\n        //未经过验证\n        request.setAttribute(\"msg\", \"没权限请先登录\");\n        request.getRequestDispatcher(\"/index.html\").forward(request, response);\n\n        return false;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n```\n\n2、在MyMvcConfig配置中重写拦截器方法，加入到容器中\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/index.html\").setViewName(\"login\");\n            registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n        }\n        //注册拦截器\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            //静态资源 css js img 已经做好了静态资源映射\n            registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\").\n                    excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\n        }\n    };\n    return adapter;\n}\n```\n\n3、在LoginHandler中添加登录成功写入session\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map,\n                        HttpSession session){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功,防止重复提交\n            session.setAttribute(\"loginUser\", username);\n            return \"redirect:/main.html\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n### 5、CRUD-员工列表\n\n实验要求：\n\n1）、RestfulCRUD：CRUD满足Rest风格\n\nURI:/资源名称/资源标识+HTTP操作\n\n|      | 普通CRUD                | RestfulCRUD       |\n| ---- | ----------------------- | ----------------- |\n| 查询 | getEmp                  | emp -- GET        |\n| 添加 | addEmp?xxx              | emp --POST        |\n| 修改 | updateEmp?id=xxx&xxx=xx | emp/{id} -- PUT   |\n| 删除 | deleteEmp?id=1          | emp/{id} --DELETE |\n\n2、实验的请求架构\n\n|                | 请求URI  | 请求方式 |\n| -------------- | -------- | -------- |\n| 查询所有员工   | emps     | GET      |\n| 查询某个员工   | emp/{id} | GET      |\n| 添加页面       | emp      | GET      |\n| 添加员工       | emp      | POST     |\n| 修改页面(回显) | emp/{id} | GET      |\n| 修改员工       | emp/{id} | PUT      |\n| 删除员工       | emp/{id} | DELETE   |\n\n3、员工列表\n\n#### 1、公共页面抽取\n\n使用方法\n\n```html\n1、抽取公共片段\n<!--footer.html-->\n<div id=\"footid\" th:fragment=\"copy\">xxx</div>\n2、引入公共片段\n<!--test.html-->\n<div th:insert=~{footer::copy}></div>\n~{templatename::selector} 模板名::选择器  footer::#footid\n~{templatename::fragmentname} 模板名::片段名称 footer::copy\n行内写法可以加~{xx::xx} 标签体可以 xx::xx\n```\n\n\n\n**三种引用方式**\n\n**th:insert** :加个外层标签 +1\n\n**th:replace** :完全替换 1\n\n**th:include**：就替换里面的内容 -1\n\n公共页面\n\n```html\n<body>\n\t...\n    <div th:insert=\"footer :: copy\"></div>\n    <div th:replace=\"footer :: copy\"></div>\n    <div th:include=\"footer :: copy\"></div>\n</body>\n```\n\n结果\n\n```html\n<body>\n...\n    <!-- th:insert -->\n    <div>\n        <footer>\n            &copy; 2011 The Good Thymes Virtual Grocery\n        </footer>\n    </div>\n    <!--th:replace-->\n    <footer>\n   \t\t&copy; 2011 The Good Thymes Virtual Grocery\n    </footer>\n    <!--th:include-->\n    <div>\n        &copy; 2011 The Good Thymes Virtual Grocery\n    </div>\n</body>\n```\n\n用此种方法将公共页面引入\n\n#### 2、列表高亮\n\n引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html\n\n模板引入变量名\n\ndashboard\n\n```html\n<a class=\"nav-link active\"\n   th:class=\"${activeUri}=='main.html'?'nav-link active':'nav-link'\"\n   href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/main.html}\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\"><path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline></svg>\n    Dashboard <span class=\"sr-only\">(current)</span>\n</a>\n```\n\n员工管理\n\n```html\n<li class=\"nav-item\">\n    <a class=\"nav-link\"\n       th:class=\"${activeUri}=='emps'?'nav-link active':'nav-link'\"\n       href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/emps}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-users\"><path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path><path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path></svg>\n        员工管理\n    </a>\n```\n\n引入模板的时候传入参数\n\ndashboard.html引入\n\n```html\n<!--引入侧边栏-->\n   <div th:replace=\"commons/bar :: sidebar(activeUri='main.html')\"></div>\n```\n\nlist.html引入\n\n```html\n<!--引入侧边栏-->\n<div th:replace=\"commons/bar::sidebar(activeUri='emps')\"></div>\n```\n\n### 6、列表数据显示（查）\n\n#### 1、传入员工对象\n\nEmployeeController类,传入员工对象\n\n```java\n@Controller\npublic class EmployeeController {\n\n    @Autowired\n    EmployeeDao employeeDao;\n    /**\n     * 查询所有员工返回列表页面\n     */\n    @GetMapping(value = \"/emps\")\n    public String list(Model model){\n\n        Collection<Employee> employees = employeeDao.getAll();\n        model.addAttribute(\"emps\",employees);\n        return \"emp/list\";\n    }\n}\n```\n\n#### 2、 遍历对象\n\nlist.html中 使用模板的 `th:each`方法\n\n```html\ntable class=\"table table-striped table-sm\">\n    <thead>\n    <tr>\n        <th>#</th>\n        <th>lastName</th>\n        <th>email</th>\n        <th>gender</th>\n        <th>department</th>\n        <th>birth</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n        <tr th:each=\"emp:${emps}\">\n            <td th:text=\"${emp.id}\">1</td>\n            <td th:text=\"${emp.lastName}\">1</td>\n            <td th:text=\"${emp.email}\">1</td>\n            <td th:text=\"${emp.gender}\">1</td>\n            <td th:text=\"${emp.department.departmentName}\">1</td>\n            <td th:text=\"${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">1</td>\n            <td>\n                <button class=\"btn btn-sm btn-primary\">编辑</button>\n                <button class=\"btn btn-sm btn-danger\">删除</button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n#### 3、效果显示\n\n![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)\n\n\n\n### 7、员工添加（增）\n\n功能：点击添加按钮，出现新增页面\n\n#### 1、新增页面\n\n```html\n<form>\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\"  placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label for=\"exampleFormControlSelect1\">department</label>\n        <select class=\"form-control\" id=\"exampleFormControlSelect1\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <!--Birth-->\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n#### 2、页面跳转\n\n在EmployeeController中添加addEmpPage方法\n\n```java\n/**\n * 添加员工\n */\n@GetMapping(value = \"/emp\")\npublic String toAddPage(Model model){\n    //来到添加页面,查出所有部门显示\n    Collection<Department> depts = departmentDao.getDepartments();\n    model.addAttribute(\"depts\",depts);\n    return \"emp/add\";\n}\n```\n\n关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息\n\n#### 3、添加功能完成\n\n新建一个PostMapping\n\n> ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；\n\n1、新建一个postMapping的方法用来接受页面的添加POST请求\n\n```java\n/**\n * 员工添加\n */\n@PostMapping(value = \"/emp\")\npublic String addEmp(Employee employee){\n\n    employeeDao.save(employee);\n    //来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址\n    return \"redirect:/emps\";\n}\n```\n\n2、修改添加页面，添加name属性\n\n```html\n<form th:action=\"@{/emp}\" method=\"post\">\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label >department</label>\n        <select class=\"form-control\"  name=\"department.id\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n1、部门对象问题？\n\n```html\n<select class=\"form-control\"  name=\"department.id\">\n```\n\n2、日期格式化？\n\n属性中添加 date-formate 默认是 / \n\n```java\n@Bean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")\npublic Formatter<Date> dateFormatter() {\n   return new DateFormatter(this.mvcProperties.getDateFormat());\n}\n\n@Override\npublic MessageCodesResolver getMessageCodesResolver() {\n   if (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n      DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n      resolver.setMessageCodeFormatter(\n            this.mvcProperties.getMessageCodesResolverFormat());\n      return resolver;\n   }\n   return null;\n}\n```\n\n```properties\nspring.mvc.date-format=yyyy-MM-dd\n```\n\n### 8、员工编辑（改）\n\n思路使用add页面，并且数据回显，然后区分添加，PUT请求\n\n#### 1、修改按钮\n\n在list.html的`编辑`按钮加上链接\n\n```html\n<td>\n    <a  href=\"#\" th:href=\"@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-primary\">编辑</a>\n    <button class=\"btn btn-sm btn-danger\">删除</button>\n</td>\n```\n\n#### 2、编写跳转页面\n\n跳转到员工编辑页面的Controller\n\n```java\n/**\n * 员工编辑页面\n */\n@GetMapping(value = \"/emp/{id}\")\npublic String toEditPage(@PathVariable(\"id\") Integer id ,Model model){\n    Employee emp = employeeDao.getEmpById(id);\n    Collection<Department> departments = departmentDao.getDepartments();\n    model.addAttribute(\"emp\",emp);\n    model.addAttribute(\"depts\",departments);\n    return \"emp/add\";\n}\n   \n```\n\n#### 3、对页面修改\n\n对add页面进行修改\n\n1）、添加回显\n\n2）、添加判断是否emp!=null（区分add or edit）\n\n3）、添加put请求 --两个input的hidden标签\n\n```html\n <form th:action=\"@{/emp}\" method=\"post\">\n        <!--发送put请求-->\n        <!--1.SpringMVC配置HiddenHttpMethodFilter\n            2.页面创建一个post表单\n            3.创建一个 input name_method 值就是我们请求的方式-->\n        <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\">\n\n        <input type=\"hidden\" name=\"id\" th:value=\"${emp.id}\" th:if=\"${emp!=null}\">\n        <!-- LastName -->\n        <div class=\"form-group\">\n            <label for=\"LastName\">LastName</label>\n            <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\" th:value=\"${emp!=null}?${emp.lastName}\">\n        </div>\n        <!-- Email -->\n        <div class=\"form-group\">\n            <label for=\"Email\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\" th:value=\"${emp!=null}?${emp.email}\">\n        </div>\n        <!--gender-->\n        <div class=\"form-group\">\n            <label >Gender</label><br/>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender}==1\">\n                <label class=\"form-check-label\" >男</label>\n            </div>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender}==0\">\n                <label class=\"form-check-label\" >女</label>\n            </div>\n        </div>\n        <!-- department -->\n        <div class=\"form-group\">\n            <label >department</label>\n            <select class=\"form-control\"  name=\"department.id\" >\n                <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"birthDate\">Birth</label>\n            <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\" th:value=\"${emp!=null}?${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?'修改':'添加'\">添 加</button>\n    </form>\n</main>\n```\n### 9、员工删除（删）\n\n#### 1、新建Contoller\n\n```java\n/**\n * 员工删除\n */\n@DeleteMapping(value = \"/emp/{id}\")\npublic String deleteEmp(@PathVariable(\"id\") Integer id){\n    employeeDao.deleteEmpById(id);\n    return \"redirect:/emps\";\n}\n```\n\n#### 2、修改删除标签\n\n```html\n<button th:attr=\"del_uri=@{/emp/}+${emp.id}\"  class=\"btn btn-sm btn-danger deleteBtn\">\n    删除\n</button>\n```\n\n#### 3、写Form表单\n\nform表单卸载外面，input 中 name=\"_method\" value=\"delete\" 模拟delete请求\n\n```html\n                </tbody>\n            </table>\n        </div>\n    </main>\n    <form id=\"deleteEmpForm\" method=\"post\">\n        <input type=\"hidden\" name=\"_method\" value=\"delete\">\n    </form>\n</div>\n```\n\n#### 4、写JS提交\n\n```javascript\n<script>\n    $(\".deleteBtn\").click(function () {\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\n        return false;\n    })\n</script>\n```\n\n> return false;禁用btn提交效果\n\n## 7、错误机制的处理\n\n### 1、默认的错误处理机制\n\n默认错误页面\n\n![20.error](E:\\工作文档\\SpringBoot\\images\\20.error.jpg)\n\n原理参照\n\nErrorMvcAutoConfiguration:错误处理的自动配置\n\n```\norg\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class\n\n```\n\n- DefaultErrorAttributes\n\n  帮我们在页面共享信息\n\n  ```java\n  @Override\n  public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n        boolean includeStackTrace) {\n     Map<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\n     errorAttributes.put(\"timestamp\", new Date());\n     addStatus(errorAttributes, requestAttributes);\n     addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n     addPath(errorAttributes, requestAttributes);\n     return errorAttributes;\n  }\n  ```\n\n- BasicErrorController\n\n  ```java\n  @Controller\n  @RequestMapping(\"${server.error.path:${error.path:/error}}\")\n  public class BasicErrorController extends AbstractErrorController {\n      //产生HTML数据\n      @RequestMapping(produces = \"text/html\")\n  \tpublic ModelAndView errorHtml(HttpServletRequest request,\n  \t\t\tHttpServletResponse response) {\n  \t\tHttpStatus status = getStatus(request);\n  \t\tMap<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\n  \t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n  \t\tresponse.setStatus(status.value());\n  \t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n  \t\treturn (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\n  \t}\n  \t//产生Json数据\n  \t@RequestMapping\n  \t@ResponseBody\n  \tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n  \t\tMap<String, Object> body = getErrorAttributes(request,\n  \t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n  \t\tHttpStatus status = getStatus(request);\n  \t\treturn new ResponseEntity<Map<String, Object>>(body, status);\n  \t}\n  ```\n\n- ErrorPageCustomizer\n\n  ```java\n  @Value(\"${error.path:/error}\")\n  private String path = \"/error\";//系统出现错误以后来到error请求进行处理，(web.xml)\n  ```\n\n- DefaultErrorViewResolver\n\n  ```java\n  @Override\n  public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n        Map<String, Object> model) {\n     ModelAndView modelAndView = resolve(String.valueOf(status), model);\n     if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n     }\n     return modelAndView;\n  }\n  \n  private ModelAndView resolve(String viewName, Map<String, Object> model) {\n      //默认SpringBoot可以找到一个页面？error/状态码\n     String errorViewName = \"error/\" + viewName;\n      //如果模板引擎可以解析地址，就返回模板引擎解析\n     TemplateAvailabilityProvider provider = this.templateAvailabilityProviders\n           .getProvider(errorViewName, this.applicationContext);\n     if (provider != null) {\n         //有模板引擎就返回到errorViewName指定的视图地址\n        return new ModelAndView(errorViewName, model);\n     }\n      //自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html\n     return resolveResource(errorViewName, model);\n  }\n  ```\n\n一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller\n\n1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图\n\n```java\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n      if (modelAndView != null) {\n         return modelAndView;\n      }\n   }\n   return null;\n}\n```\n\nl浏览器发送请求 accpt:text/html\n\n客户端请求：accept:/*\n\n### 2、如何定制错误响应\n\n​\t1）、如何定制错误的页面\n\n​\t\t1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html\n\n​\t\t有精确的404和4xx优先选择404\n\n​\t\t页面获得的数据\n\n​\t\t\ttimestamp：时间戳\n\n​\t\t\tstatus：状态码\n\n​\t\t\terror：错误提示\n\n​\t\t\texception：异常对象\n\n​\t\t\tmessage：异常信息\n\n​\t\t\terrors:JSR303有关\n\n​\t\t2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值\n\n​\t\t3.没有放模板引擎，没放静态，会显示默认的错误\n\n​\t2）、如何定义错误的数据\n\n\n\n举例子：新建4xx和5xx文件\n\n![21.error-static](E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg)\n\n\n\n```html\n<body >\n    <p>status: [[${status}]]</p>\n    <p>timestamp: [[${timestamp}]]</p>\n    <p>error: [[${error}]]</p>\n    <p>message: [[${message}]]</p>\n    <p>exception: [[${exception}]]</p>\n</body>\n```\n\n![22.4xxhtml](E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg)\n\n### 3、如何定制Json数据\n\n#### 1、仅发送json数据\n\n```java\npublic class UserNotExitsException extends  RuntimeException {\n    public UserNotExitsException(){\n        super(\"用户不存在\");\n    }\n}\n```\n\n```java\n/**\n * 异常处理器\n */\n@ControllerAdvice\npublic class MyExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExitsException.class)\n    public Map<String ,Object> handlerException(Exception e){\n        Map<String ,Object> map =new HashMap<>();\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        return map;\n    }\n}\n```\n\n无法自适应 都是返回的json数据\n\n#### 2、转发到error自适应处理\n\n```java\n@ExceptionHandler(UserNotExitsException.class)\npublic String handlerException(Exception e, HttpServletRequest request){\n    Map<String ,Object> map =new HashMap<>();\n    //传入自己的状态码\n    request.setAttribute(\"javax.servlet.error.status_code\", 432);\n    map.put(\"code\", \"user not exist\");\n    map.put(\"message\", e.getMessage());\n    //转发到error\n    return \"forward:/error\";\n}\n```\n\n程序默认获取状态码\n\n```java\nprotected HttpStatus getStatus(HttpServletRequest request) {\n   Integer statusCode = (Integer) request\n         .getAttribute(\"javax.servlet.error.status_code\");\n   if (statusCode == null) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n   try {\n      return HttpStatus.valueOf(statusCode);\n   }\n   catch (Exception ex) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n```\n\n没有自己写的自定义异常数据\n\n#### 3、自适应和定制数据传入\n\nSpring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；\n\n1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；\n\n2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\n\n容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理\n\n```java\npublic class MyErrorAttributes extends DefaultErrorAttributes {\n    @Override\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(\"company\", \"wdjr\");\n        return map;\n    }\n}\n```\n\n异常处理：把map方法请求域中\n\n```java\n    @ExceptionHandler(UserNotExitsException.class)\n    public String handlerException(Exception e, HttpServletRequest request){\n        Map<String ,Object> map =new HashMap<>();\n        //传入自己的状态码\n        request.setAttribute(\"javax.servlet.error.status_code\", 432);\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        request.setAttribute(\"ext\", map);\n        //转发到error\n        return \"forward:/error\";\n    }\n}\n```\n\n在上面的MyErrorAttributes类中加上\n\n```java\n//我们的异常处理器\nMap<String,Object> ext = (Map<String, Object>) requestAttributes.getAttribute(\"ext\", 0);\nmap.put(\"ext\", ext);\n```\n\n## 8、配置嵌入式servlet容器\n\n### 1、定制和修改Servlet容器\n\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\n\n![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)\n\n问题？\n\n1）、如何定制和修改Servlet容器；\n\n1、 修改Server相关的配置文件 application.properties\n\n```properties\n#通用的servlet容器配置\nserver.xxx\n#tomcat的配置\nserver.tomcat.xxxx\n```\n\n2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置\n\n```java\n@Bean\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\n    return new EmbeddedServletContainerCustomizer() {\n        //定制嵌入式Servlet的容器相关规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.setPort(8999);\n        }\n    };\n}\n```\n\n其实同理，都是实现EmbeddedServletContainerCustomizer\n\n### 2、注册Servlet三大组件\n\n三大组件 Servlet Filter Listener\n\n由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml\n\n注册三大组件\n\n#### ServletRegistrationBean\n\n```java\n@Bean\npublic ServletRegistrationBean myServlet(){\n    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new MyServlet(),\"/servlet\");\n    return servletRegistrationBean;\n}\n```\n\nMyServlet\n\n```java\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().write(\"Hello Servlet\");\n    }\n}\n```\n\n#### FilterRegistrationBean\n\n```java\n@Bean\npublic FilterRegistrationBean myFilter(){\n    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n    filterRegistrationBean.setFilter(new MyFilter());\n    filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\n    return filterRegistrationBean;\n}\n```\n\nMyFilter\n\n```java\npublic class MyFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"MyFilter process\");\n        chain.doFilter(request, response);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n#### ServletListenerRegistrationBean\n\n```java\n@Bean\npublic ServletListenerRegistrationBean myListener(){\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\n    return registrationBean;\n}\n```\n\nMyListener\n\n```java\npublic class MyListener implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\".........web应用启动..........\");\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        System.out.println(\".........web应用销毁..........\");\n    }\n}\n```\n\n\n\nSpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;\n\n```java\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n   public ServletRegistrationBean dispatcherServletRegistration(\n         DispatcherServlet dispatcherServlet) {\n      ServletRegistrationBean registration = new ServletRegistrationBean(\n            dispatcherServlet, this.serverProperties.getServletMapping());\n       //默认拦截 /所有请求 包括静态资源 不包括jsp\n       //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n      registration.setLoadOnStartup(\n            this.webMvcProperties.getServlet().getLoadOnStartup());\n      if (this.multipartConfig != null) {\n         registration.setMultipartConfig(this.multipartConfig);\n      }\n      return registration;\n   }\n\n}\n```\n\n### 3、切换其他的Servlet容器\n\n在ServerProperties中\n\n```java\nprivate final Tomcat tomcat = new Tomcat();\n\nprivate final Jetty jetty = new Jetty();\n\nprivate final Undertow undertow = new Undertow();\n```\n\ntomcat(默认支持)\n\njetty（长连接）\n\nundertow（多并发）\n\n切换容器 仅仅需要修改pom文件的依赖就可以\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jetty</artifactId>\n        </dependency>\n<!--        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-undertow</artifactId>\n        </dependency>-->\n```\n\n### 4、嵌入式Servlet容器自动配置原理\n\n```java\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration {\n    @Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })//当前是否引入tomcat依赖\n    //判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n```\n\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\n\n```java\npublic interface EmbeddedServletContainerFactory {\n\t//获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n}\n```\n\n继承关系\n\n![24.EmdServletFactory](E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg)\n\n2）、EmbeddedServletContainer:(嵌入式的Servlet容器)\n\n![25.EmdServletContainer](E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg)\n\n3）、TomcatEmbeddedServletContainerFactory为例 \n\n```java\n@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) {\n   Tomcat tomcat = new Tomcat();\n    //配置tomcat的基本环节\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\n         : createTempDir(\"tomcat\"));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n    //将配置好的tomcat传入进去；并且启动tomcat容器\n   return getTomcatEmbeddedServletContainer(tomcat);\n}\n```\n\n4）、嵌入式配置修改\n\n```\nServerProperties、EmbeddedServletContainerCustomizer\n```\n\nEmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？\n\n怎么修改？\n\n\n\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\n\n```java\n@Override\npublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n      BeanDefinitionRegistry registry) {\n   if (this.beanFactory == null) {\n      return;\n   }\n   registerSyntheticBeanIfMissing(registry,\n         \"embeddedServletContainerCustomizerBeanPostProcessor\",\n         EmbeddedServletContainerCustomizerBeanPostProcessor.class);\n   registerSyntheticBeanIfMissing(registry,\n         \"errorPageRegistrarBeanPostProcessor\",\n         ErrorPageRegistrarBeanPostProcessor.class);\n}\n```\n\n```java\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException {\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   }\n   return bean;\n}\n\nprivate void postProcessBeforeInitialization(\n    ConfigurableEmbeddedServletContainer bean) {\n    //获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\n        customizer.customize(bean);\n    }\n}\n\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n    if (this.customizers == null) {\n        // Look up does not include the parent context\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n            this.beanFactory\n            //从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer\n            //定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers = Collections.unmodifiableList(this.customizers);\n    }\n    return this.customizers;\n}\n```\n\nServerProperties也是EmbeddedServletContainerCustomizer定制器\n\n步骤：\n\n1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat\n\nEmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\n\n2）、容器中某个组件要创建对象就要通过后置处理器；\n\n```java\nEmbeddedServletContainerCustomizerBeanPostProcessor\n```\n\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\n\n3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法\n\n### 5、嵌入式Servlet容器启动原理\n\n什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;\n\n获取嵌入式的容器工厂\n\n1）、SpringBoot应用启动Run方法\n\n2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext\n\n```JAVA\nif (contextClass == null) {\n   try {\n      contextClass = Class.forName(this.webEnvironment\n            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);\n   }\n```\n\n3）、refresh(context);刷新创建好的IOC容器\n\n```java\ntry {\n   // Allows post-processing of the bean factory in context subclasses.\n   postProcessBeanFactory(beanFactory);\n\n   // Invoke factory processors registered as beans in the context.\n   invokeBeanFactoryPostProcessors(beanFactory);\n\n   // Register bean processors that intercept bean creation.\n   registerBeanPostProcessors(beanFactory);\n\n   // Initialize message source for this context.\n   initMessageSource();\n\n   // Initialize event multicaster for this context.\n   initApplicationEventMulticaster();\n\n   // Initialize other special beans in specific context subclasses.\n   onRefresh();\n\n   // Check for listener beans and register them.\n   registerListeners();\n\n   // Instantiate all remaining (non-lazy-init) singletons.\n   finishBeanFactoryInitialization(beanFactory);\n\n   // Last step: publish corresponding event.\n   finishRefresh();\n}\n```\n\n4）、 onRefresh();web的ioc容器重写了onRefresh方法\n\n5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer\n\n6）、获取嵌入式的Servlet容器工厂；\n\n```java\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\n```\n\n从ioc容器中获取EmbeddedServletContainerFactory组件；\n\n```java\n@Bean\npublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\nreturn new TomcatEmbeddedServletContainerFactory();\n}\n```\nTomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；\n\n7）、使用容器工厂获取嵌入式的Servlet容器\n\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\n\n先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来\n\nioc启动创建Servlet容器\n\n## 9、使用外置的Servlet容器\n\n嵌入式的Servlet容器：应用达成jar包\n\n​\t优点：简单、便携\n\n​\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）\n\n外置的Servlet容器：外面安装Tomcat是以war包的方式打包。\n\n### 1、IDEA操作外部Servlet\n\n1、创建程序为war程序\n\n![26.tomcat1](E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg)\n\n2、选择版本\n\n![27.tomcat2](E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg)\n\n3、添加tomcat\n\n![28.tomcat3](E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg)\n\n4、选择tomcat\n\n![30.tomcat4](E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg)\n\n5、选择本地的Tomcat\n\n![31.tomcat5](E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg)\n\n6、配置tomcat路径\n\n![32.tomcat6](E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg)\n\n7、添加服务器\n\n![33.tomcat7](E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg)\n\n8、添加exploded的war配置，应用OK tomcat配置完成\n\n![34.tomcat8](E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg)\n\n二、配置webapp文件夹\n\n1、点击配置\n\n![35.tomcat9](E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg)\n\n2、添加webapp目录\n\n![36.tomcat10](E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg)\n\n3、默认配置就可以\n\n![37.tomcat11](E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg)\n\n4、配置web.xml文件\n\n![38.tomcat12](E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg)\n\n5、文档目录结构\n\n![39.tomcat13](E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg)\n\n### 2、运行一个示例\n\n1、项目目录\n\n![40.demo1](E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg)\n\n2、配置文件写视图解析前后缀\n\n```properties\nspring.mvc.view.prefix=/WEB-INF/jsp/\n\nspring.mvc.view.suffix=.jsp\n```\n\n3、HelloController\n\n```java\n@Controller\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        model.addAttribute(\"message\",\"这是Controller传过来的message\");\n        return \"success\";\n    }\n}\n```\n\n4、success.jsp\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Success</title>\n</head>\n<body>\n<h1>Success</h1>\nmessage:${message}\n</body>\n</html>\n```\n\n5、运行结果\n\n![41.demo2](E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg)\n\n步骤\n\n1、必须创建一个war项目；\n\n2、将嵌入式的Tomcat指定为provided\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\n3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法\n\n```java\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        //传入SpringBoot的主程序，\n        return application.sources(SpringBoot04WebJspApplication.class);\n    }\n\n}\n```\n\n4、启动服务器就可以；\n\n### 3、原理\n\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；\n\nwar包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器\n\nservlet3.0规范\n\n 8.2.4 共享库和运行时插件\n\n规则：\n\n1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例\n\n2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名\n\n3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类\n\n\n\n流程：\n\n1、启动Tomcat服务器\n\n2、spring web模块里有这个文件\n\n![42.servletContainerInit](E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg)\n\n```java\norg.springframework.web.SpringServletContainerInitializer\n```\n\n3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set<Class<?>>;为这些感兴趣类创建实例\n\n4、每个创建好的WebApplicationInitializer调用自己的onStratup\n\n5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\n\n6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext\n\n```java\nprotected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {\n    SpringApplicationBuilder builder = this.createSpringApplicationBuilder();\n    //环境构建器\n    StandardServletEnvironment environment = new StandardServletEnvironment();\n    environment.initPropertySources(servletContext, (ServletConfig)null);\n    builder.environment(environment);\n    builder.main(this.getClass());\n    ApplicationContext parent = this.getExistingRootWebApplicationContext(servletContext);\n    if (parent != null) {\n        this.logger.info(\"Root context already created (using as parent).\");\n        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)null);\n        builder.initializers(new ApplicationContextInitializer[]{new ParentContextApplicationContextInitializer(parent)});\n    }\n\t\n    builder.initializers(new ApplicationContextInitializer[]{new ServletContextApplicationContextInitializer(servletContext)});\n    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    //调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来\n    builder = this.configure(builder);\n    //创建一个spring应用\n    SpringApplication application = builder.build();\n    if (application.getSources().isEmpty() && AnnotationUtils.findAnnotation(this.getClass(), Configuration.class) != null) {\n        application.getSources().add(this.getClass());\n    }\n\n    Assert.state(!application.getSources().isEmpty(), \"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation\");\n    if (this.registerErrorPageFilter) {\n        application.getSources().add(ErrorPageFilterConfiguration.class);\n    }\n\t//最后启动Spring容器\n    return this.run(application);\n}\n```\n\n7、Spring的应用就启动完了并且创建IOC容器；\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   listeners.starting();\n   try {\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner = printBanner(environment);\n      context = createApplicationContext();\n      analyzers = new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n# 五、Docker\n\n## 1、简介\n\nDocker是一个开源的应用容器引擎\n\n将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；\n\n## 2、Docker的核心概念\n\ndocker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）\n\ndocker客户端（Client）:操作docker主机\n\ndocker仓库（Registry）：用来保存打包好的软件镜像\n\ndocker镜像（Image）:软件打好包的镜像，放到docker的仓库中\n\ndocker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）\n\ndocker的步骤：\n\n​\t1、安装Docker\n\n​\t2、去Docker仓库找到这个软件对应的镜像；\n\n​\t3、使用Docker运行的这个镜像，镜像就会生成一个容器\n\n​\t4、对容器的启动停止，就是对软件的启动和停止\n\n## 3、安装Docker\n\n### 1、安装Linux\n\n[安装vxbox并且安装ubuntu](http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1)\n\n### 2、在linux上安装docker\n\n```shell\n1、查看centos版本\n# uname -r\n3.10.0-693.el7.x86_64\n要求：大于3.10\n如果小于的话升级*（选做）\n# yum update\n2、安装docker\n# yum install docker\n3、启动docker\n# systemctl start docker\n# docker -v\n4、开机启动docker\n# systemctl enable docker\n5、停止docker\n# systemctl stop docker\n```\n\n## 4、docker的常用操作\n\n### 1、镜像操作\n\n1、搜索\n\n```shell\ndocker search mysql\n```\n\n默认去docker hub网站查找![44.docker1](E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg)\n\n2、拉取\n\n```shell\n默认最新版本\n# docekr pull mysql\n安装指定版本\n# docker pull mysql:5.5\n```\n\n3、查看\n\n```shell\ndocker images\n```\n\n4、删除\n\n```\ndocker rmi imageid\n```\n\n### 2、容器操作\n\n软件的镜像（qq.exe） -- 运行镜像 -- 产生一个容器（正在运行的软件）\n\n```shell\n1、搜索镜像\n# docker search tomcat\n2、拉取镜像\n# docker pull tomcat\n3、根据镜像启动容器\n[root@lion ~]# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB\n[root@lion ~]# docker run --name mytomcat -d tomcat:latest\n2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249\n4、查看那个进程正在进行\n[root@lion ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat\n5、停止运行中容器\n[root@lion ~]# docker stop 2f0348702f5f\n2f0348702f5f\n6、查看所有容器\n[root@lion ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat\n7、启动容器\n[root@lion ~]# docker start 2f0348702f5f\n8、删除docker容器\n[root@lion ~]# docker rm 2f0348702f5f\n2f0348702f5f\n9、端口映射\n[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat\n692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29\n虚拟机:8888\n容器的:8080\n-d:后台运行\n-p:主机端口映射到容器端口\n浏览器：192.168.179.129:8888\n10、docker的日志\n[root@lion ~]# docker logs 692c408c2201\n11、多个启动\n[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat\n浏览器：192.168.179.129:9000\n```\n\n更多命令参考docker镜像文档\n\n### 3、安装Mysql\n\n```shell\ndocker pull mysql\ndocker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql\n```\n\n# 六、数据访问\n\n## 1、整合JDBC数据源\n\n1、新建项目 spring-boot-06-data-jdbc\n\n- WEB\n- Mysql\n- JDBC\n- SpringBoot1.5\n\n2、编写配置文件appliction.yml\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n3、编写测试类测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBoot06DataJdbcApplicationTests {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Test\n    public void contextLoads() throws SQLException {\n        System.out.println(dataSource.getClass());\n\n        Connection connection = dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }\n\n}\n```\n\n4、测试结果\n\n```\nclass org.apache.tomcat.jdbc.pool.DataSource\nProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]\n```\n\n数据源相关配置都在DataSourceProperties属性里\n\n自动配置原理\n\nE:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc\n\n### 1、DataSource\n\n参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源\n\n### 2、SpringBoot默认支持\n\n```\nTomcat数据源\nHikariDataSource\ndbcp.BasicDataSource\ndbcp2.BasicDataSource\n```\n\n### 3、自定义数据源\n\n```java\n */\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name = \"spring.datasource.type\")\nstatic class Generic {\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) {\n       //使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源\n      return properties.initializeDataSourceBuilder().build();\n   }\n\n}\n```\n\n### 4、运行sql建表\n\n在DataSourceAutoConfiguration中**DataSourceInitializer**类\n\n监听器\n\n作用：\n\n1）、postConstruct -》runSchemaScript 运行建表sql文件\n\n2）、runDataScript运行插入数据的sql语句；\n\n默认只需要将文件命名为：\n\n```sql\nschema-*.sql data-*.sql\n默认规则：schema.sql ,schema-all.sql;\n```\n\n**举个栗子**\n\n创建department表\n\n1、department.sql\n\n```sql\n/*\nNavicat MySQL Data Transfer\n\nSource Server         : 192.168.179.131\nSource Server Version : 50719\nSource Host           : 192.168.179.131:3306\nSource Database       : jdbc\n\nTarget Server Type    : MYSQL\nTarget Server Version : 50719\nFile Encoding         : 65001\n\nDate: 2018-05-14 14:28:52\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- Table structure for department\n-- ----------------------------\nDROP TABLE IF EXISTS `department`;\nCREATE TABLE `department` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `departmentName` varchar(255) DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```\n\n2、将department.sql命名为schema-all.sql\n\n![45.schema-all](E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg)\n\n3、运行测试类\n\n自定义sql的文件名，department.sql在配置文件中\n\n```yaml\nschema:\n  - classpath:department.sql\n```\n\n-----\n\n### 5、操作JdbcTemplate\n\n**FBI warning**:将department.sql删除或者改名，因为运行文件会将表中数据清除\n\n1、新建一个Controller\n\n```java\n@Controller\npublic class HelloController {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @ResponseBody\n    @GetMapping(\"/hello\")\n    public Map<String ,Object> hello(){\n\n        List<Map<String, Object>> list = jdbcTemplate.queryForList(\"select * from department\");\n        return list.get(0);\n    }\n}\n```\n\n2、表中添加数据\n\n![46.department](E:\\工作文档\\SpringBoot\\images\\46.department.jpg)\n\n\n\n3、访问请求查询数据\n\n![47.hello](E:\\工作文档\\SpringBoot\\images\\47.hello.jpg)\n\n\n\n## 2、自定义数据源\n\n1、导入Druid的依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n\n```\n\n2、修改配置文件\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n已经替换了原来的tomcat数据源\n\n3、配置Druid数据源配置\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\t# 初始化大小，最小，最大  \n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    # 配置获取连接等待超时的时间  \n    maxWait: 60000\n    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 \n    timeBetweenEvictionRunsMillis: 60000\n    # 配置一个连接在池中最小生存的时间，单位是毫秒 \n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    # 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    userGlobalDataSourceStat: true\n    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录  \n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n4、Druid配置监控\n\n```java\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n        return  new DruidDataSource();\n    }\n\n    //配置Druid的监控\n    //1、配置一个管理后台\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(),\"/druid/*\");\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"loginUsername\", \"admin\");\n        initParams.put(\"loginPassword\", \"123456\");\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n    //2、配置监控的filter\n    @Bean\n    public FilterRegistrationBean webstatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"exclusions\", \"*.js,*.css,/druid/*\");\n        bean.setInitParameters(initParams);\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n        return bean;\n    }\n\n}\n```\n\n5、运行测试，访问 localhost:9000/druid\n\n![48.druid](E:\\工作文档\\SpringBoot\\images\\48.druid.jpg)\n\n输入刚才调好的用户名密码即可访问\n\n## 3、整合Mybatis\n\n1、新建工程，SpringBoot1.5+web+JDBC+Mysql\n\n导入依赖\n\n```xml\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.2</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n\n2、导入配置文件中关于Druid的配置\n\n​\t2.1、导入依赖\n\n​\t2.2、配置文件application.yml（指定用户名密码...配置Druid的配置参数，修改sql文件加载的默认名）\n\n​\t2.3、将Druid组件加入到容器中（监控）重点\n\n​\t具体同上\n\n3、创建数据表department和employee表\n\n​\t3.1、根据sql文件，新建两张表\n\n​\t3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）\n\n```yaml\nspring:\n  datasource:\n    schema:\n      - classpath:sql/department.sql\n      - classpath:sql/employeee.sql\n```\n\n​\t3.3、运行程序检查数据库是否创建成功\n\n4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） \n\n在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类\n\n```yaml\nmybatis:\n  configuration:\n    map-underscore-to-camel-case: true\n```\n\n```java\n//类名冲突所以全类名\n@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig {\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer(){\n\n        return new ConfigurationCustomizer() {\n            @Override\n            public void customize(Configuration configuration) {\n                configuration.setMapUnderscoreToCamelCase(true);\n            }\n        };\n    }\n}\n```\n\n### 注解方式\n\n5、新建mapper\n\n```yaml\n//指定是一个mapper\n@Mapper\npublic interface DepartmentMapper {\n\n    @Insert(\"insert into department(dept_name) value(#{deptName})\")\n    public int insertDept(Department department);\n\n    @Delete(\"delete from department where id=#{id}\")\n    public int deleteDeptById(Integer id);\n\n    @Update(\"update department set dept_Name=#{deptName} where id=#{id}\")\n    public int updateDept(Department department);\n\n    @Select(\"select * from department where id=#{id}\")\n    public Department getDeptById(Integer id);\n\n}\n```\n\n6、编写controller测试\n\n```java\n@RestController\npublic class DeptController {\n\n    @Autowired\n    DepartmentMapper departmentMapper;\n\n    @RequestMapping(\"/getDept/{id}\")\n    public Department getDepartment(@PathVariable(\"id\") Integer id){\n        return departmentMapper.getDeptById(id);\n    }\n\n    @RequestMapping(\"/delDept/{id}\")\n    public int delDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.deleteDeptById(id);\n    }\n\n    @RequestMapping(\"/update/{id}\")\n    public int updateDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.updateDept(new Department(id, \"开发部\"));\n    }\n\n    @GetMapping(\"/insert\")\n    public int insertDept(Department department){\n        return departmentMapper.insertDept(department);\n    }\n}\n```\n\n问题：\n\nmapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文\n\n件夹下的mapper\n\n```java\n//主配置类或者mybatis配置类\n@MapperScan(value = \"com.wdjr.springboot.mapper\")\n```\n\n### 配置文件方式\n\n1、新建文件\n\n![50.mybatisxml](E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg)\n\n2、新建mybatis的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n\n3、新建Employee的接口方法\n\n```java\npublic interface EmployeeMapper {\n\n    public Employee getEmpById(Integer id);\n\n    public void insetEmp(Employee employee);\n}\n```\n\n4、新建Employee的mapper.xml的映射文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.wdjr.springboot.mapper.EmployeeMapper\">\n    <select id=\"getEmpById\" resultType=\"com.wdjr.springboot.bean.Employee\">\n      select * from employee where id=#{id}\n   </select>\n\n    <insert id=\"insetEmp\">\n        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})\n    </insert>\n</mapper>\n```\n\n5、修改application.yml配置文件\n\n```yaml\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml\n  mapper-locations: classpath:mybatis/mapper/*.xml\n```\n\n6、新建一个Controller访问方法\n\n```java\n@RestController\npublic class EmployeeController {\n    @Autowired\n    EmployeeMapper employeeMapper;\n\n    @RequestMapping(\"/getEmp/{id}\")\n    public Employee getEmp(@PathVariable(\"id\") Integer id){\n        return employeeMapper.getEmpById(id);\n    }\n\n    @GetMapping(\"/insertEmp\")\n    public Employee insertEmp(Employee employee){\n        employeeMapper.insetEmp(employee);\n        return employee;\n    }\n}\n```\n## 4、JPA数据访问\n\n新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC\n\n目录结构\n\n![51.JPA](E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg)\n\n\n\n1、新建一个实体类User\n\n```java\n//使用JPA注解配置映射关系\n@Entity//告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name=\"tbl_user\") //@Table来指定和那个数据表对应，如果省略默认表明就是user;\n\npublic class User {\n\n    @Id //这是一个主键\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增组件\n    private Integer id ;\n\n    @Column(name=\"last_name\",length = 50) //这是和数据表对应的一个列\n    private String lastName;\n    @Column//省略默认列名就是属性名\n    private String email;\n    @Column\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n2、新建一个UserRepository来继承jpa的绝大多数功能\n\n```java\n//继承jpaRepository\npublic interface UserRepository extends JpaRepository<User,Integer> {\n\n}\n```\n\n3、编写配置文件application.yml\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://192.168.179.131/jpa\n    username: root\n    password: Welcome_1\n    driver-class-name: com.mysql.jdbc.Driver\n  jpa:\n    hibernate:\n    #更新或创建\n      ddl-auto: update\n    show-sql: true\n```\n\n4、编写Controller测试\n\n```java\n@RestController\npublic class UserController {\n    @Autowired\n    UserRepository userRepository;\n\n    @GetMapping(\"/user/{id}\")\n    public User getUser(@PathVariable(\"id\") Integer id){\n        User user = userRepository.findOne(id);\n        return user;\n    }\n\n    @GetMapping(\"/insert\")\n    public User insertUser(User user){\n        User user1 = userRepository.save(user);\n        return  user1;\n    }\n}\n```\n\n# 七、启动配置原理\n\n几个重要的事件回调机制\n\n加载配置文件META-INF/spring.factories\n\n​\tApplicationContextInitializer\n\n​\tSpringApplicationRunListener\n\nioc容器中\n\n​\tApplicationRunner\n\n​\tCommandLineRunner\n\n启动流程\n\n## 1、创建SpringApplicaiotn对象   \n\n```java\nprivate void initialize(Object[] sources) {\n    //保存主配置类\n   if (sources != null && sources.length > 0) {\n      this.sources.addAll(Arrays.asList(sources));\n   }\n    //判断当前是否是个web应用\n   this.webEnvironment = deduceWebEnvironment();\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来\n   setInitializers((Collection) getSpringFactoriesInstances(\n         ApplicationContextInitializer.class));\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来\n   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    //决定哪一个是主程序\n   this.mainApplicationClass = deduceMainApplicationClass();\n}\n```\n\nApplicationInitializer\n\n![52.applicationCotextInitializer](E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg)\n\n ApplicationListener\n\n![53.Listener](E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg)\n\n## 2、运行Run方法\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n    //获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n    //回调所有的SpringApplicationRunListener.starting()方法\n   listeners.starting();\n   try {\n       //封装命令行参数\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n       //准备环境\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n       //创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成\n       //打印SpringBoot图标\n      Banner printedBanner = printBanner(environment);\n       //创建ApplicationContext，决定创建web的ioc容器还是普通的ioc\n      context = createApplicationContext();\n       //异常分析\n      analyzers = new FailureAnalyzers(context);\n       //重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法\n       \n       //回调所有的SpringApplicationRunListener的contextPrepare()\n       //告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       //重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat\n       //扫描 创建加载所有组件的地方\n      refreshContext(context);\n       //从ioc中获取所有的ApplicationRunner和CommandLineRunner\n       //ApplicationRunner先回调\n      afterRefresh(context, applicationArguments);\n       //所有的SpringApplicationRunListener回调finished方法\n      listeners.finished(context, null);\n       //保存应用状态\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n       //整个springboot启动完成以后返回启动的ioc容器\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n## 3、事件监听机制\n\n新建listener监听\n\n文件目录\n\n![54.listener2](E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg)\n\n\n\n1、HelloApplicationContextInitializer\n\n```java\n//泛型监听ioc容器\npublic class HelloApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        System.out.println(\"ApplicationContextInitializer...跑起来了.....\"+applicationContext);\n    }\n}\n```\n\n2、HelloSpringApplicationRunListener\n\n加构造器\n\n```java\npublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener {\n\n    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){\n\n    }\n\n    @Override\n    public void starting() {\n        System.out.println(\"监听容器开始......\");\n    }\n\n    @Override\n    public void environmentPrepared(ConfigurableEnvironment environment) {\n        System.out.println(\"环境准备好了......\"+environment.getSystemProperties().get(\"os.name\"));\n    }\n\n    @Override\n    public void contextPrepared(ConfigurableApplicationContext context) {\n        System.out.println(\"ioc容器准备好了......\");\n    }\n\n    @Override\n    public void contextLoaded(ConfigurableApplicationContext context) {\n        System.out.println(\"容器环境已经加载完成......\");\n    }\n\n    @Override\n    public void finished(ConfigurableApplicationContext context, Throwable exception) {\n        System.out.println(\"全部加载完成......\");\n    }\n}\n```\n\n3、HelloApplicationRunner\n\n```java\n@Component\npublic class HelloApplicationRunner implements ApplicationRunner {\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        System.out.println(\"ApplicationRunner.....run....\");\n    }\n}\n```\n\n4、HelloCommandLineRunner\n\n```java\n@Component\npublic class HelloCommandLineRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"CommandLineRunner......run.....\"+Arrays.asList(args));\n    }\n}\n```\n\n事件运行方法\n\nHelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入\n\n```\n# Initializers\norg.springframework.context.ApplicationContextInitializer=\\\ncom.wdjr.springboot.listener.HelloApplicationContextInitializer\n\norg.springframework.boot.SpringApplicationRunListener=\\\ncom.wdjr.springboot.listener.HelloSpringApplicationRunListener\n```\n\nHelloApplicationRunner和HelloCommandLineRunner ioc加入\n\n@Component\n\n# 八、SpringBoot的自定义starter\n\nstarter：场景启动器\n\n1、场景需要使用什么依赖？\n\n2、如何编写自动配置\n\n```java\n@Configuration //指定这个类是一个配置类\n@ConditionalOnXXX //在指定条件下成立的情况下自动配置类生效\n@AutoConfigureAfter //指定自动配置类的顺序\n@Bean //给容器中添加组件\n\n@ConfigurationProperties //结合相关xxxProperties类来绑定相关的配置\n@EnableConfigurationProperties //让xxxProperties生效加到容器中\n\n自动配置类要能加载\n将需要启动就加载的自动配置类，配置在META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\n```\n\n3、模式\n\n启动器空的jar只需要做依赖管理导入；\n\n专门写一个自动配置模块；\n\n启动器依赖自动配置，别人只需要引入starter\n\nxxx-spring-boot-starter\n\n### 新建一个starter\n\n> 绕的你怀疑人生\n\n#### 1、新建一个空项目工程\n\n![56.starter01](E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg)\n\n2、项目命名\n\n![57.starter02](E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg)\n\n\n\n3、导入module\n\n![58.starter03](E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg)\n\n4、新建一个Maven工程\n\n![59.starter04](E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg)\n\n5、项目命名\n\n![60.starter05](E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg)\n\n\n\n![61.starter06](E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg)\n\n6、在新建一个autoconfiguration类的spring\n\n![62.starter07](E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg)\n\n7、项目命名\n\n![63.starter08](E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg)\n\n8、无需导入依赖\n\n![64.starter09](E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg)\n\n9、next\n\n![65.starter10](E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg)\n\n最后配置完成\n\n#### 2、编写starter\n\n##### autoconfigurer\n\n对**lxy-spring-boot-starter-autoconfigurer**进行删减\n\n目录\n\n![66.starter-build01](E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg)\n\n2、pom文件修改\n\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n    </dependencies>\n\n\n</project>\n```\n\n3、编写相关的类\n\n![67.starter-build02](E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg)\n\n4、HelloProperties\n\n```java\npackage com.lxy.starter;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"lxy.hello\")\npublic class HelloProperties {\n    private String prefix;\n    private String suffix;\n\n    public String getPrefix() {\n        return prefix;\n    }\n\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    public String getSuffix() {\n        return suffix;\n    }\n\n    public void setSuffix(String suffix) {\n        this.suffix = suffix;\n    }\n}\n```\n\n5、HelloService\n\n```java\npackage com.lxy.starter;\n\npublic class HelloService {\n\n    HelloProperties helloProperties;\n\n    public HelloProperties getHelloProperties() {\n        return helloProperties;\n    }\n\n    public void setHelloProperties(HelloProperties helloProperties) {\n        this.helloProperties = helloProperties;\n    }\n\n    public String sayHello(String name){\n        return helloProperties.getPrefix()+name+helloProperties.getSuffix();\n    }\n}\n```\n\n6、HelloServiceAutoConfiguration\n\n\n\n```java\npackage com.lxy.starter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloServiceAutoConfiguration {\n\n    @Autowired\n    HelloProperties helloProperties;\n    @Bean\n    public HelloService helloService(){\n        HelloService service = new HelloService();\n        service.setHelloProperties(helloProperties);\n        return service;\n    }\n\n}\n```\n\n7、配置文件\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.lxy.starter.HelloServiceAutoConfiguration\n```\n\n8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter-autoconfigurer</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </dependency>\n</dependencies>\n```\n\n9、install生成\n\n![68.starter-build03](E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg)\n\n#### 3、测试\n\n新建一个springboot 1.5+web\n\n1、引入starter\n\n```xml\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n</dependencies>\n```\n\n2、新建一个Controller用来测试\n\n```java\n@RestController\npublic class HelloController {\n\n    @Autowired\n    HelloService helloService;\n\n    @GetMapping\n    public  String hello(){\n        return helloService.sayHello(\"test\");\n    }\n}\n```\n\n3、编写配置文件制定前缀和后缀名\n\n```properties\nlxy.hello.prefix=Starter-\nlxy.hello.suffix=-Success\n```\n\n4、运行访问http://localhost:8080/hello\n\n![70.starter-build05](E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg)\n\n成功爽啊","source":"_posts/SpringBoot入门简介.md","raw":"---\ntitle: Spring Boot入门\n---\n\n# 一、Spring Boot入门\n\n## 1、Spring Boot简介\n\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n\n## 2、微服务\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务，可以通过HTTP的方式进行互通\n\n单体应用：ALL IN ONE\n\n微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元\n\n## 3、环境准备\n\n环境约束\n\n- jdk1.8\n- maven 3.x :maven3.3以上\n- IDEA2017\n- SpringBoot 1.5.9RELEASE\n\n### 1、MAVEN设置\n\n```xml\n<!-- 配置JDK版本 -->\n<profile>    \n    <id>jdk18</id>    \n    <activation>    \n        <activeByDefault>true</activeByDefault>    \n        <jdk>1.8</jdk>    \n    </activation>    \n    <properties>    \n        <maven.compiler.source>1.8</maven.compiler.source>    \n        <maven.compiler.target>1.8</maven.compiler.target>    \n        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    \n    </properties>     \n</profile>\n   <!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，\n        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。\n        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下\n    -->\n    <!-- <mirror>\n        <id>spring-libs-milestone</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Spring Milestones</name>\n        <url>http://repo.spring.io/libs-milestone</url>\n    </mirror> -->\n\n    <!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  -->\n    <mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n\n    <!-- 备选镜像，也是可以通过 url 去查找确定一下，\n        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  -->\n    <mirror>\n        <id>central-repository</id>\n        <mirrorOf>*</mirrorOf>\n        typor<name>Central Repository</name>\n        <url>http://central.maven.org/maven2/</url>\n    </mirror>  \n```\n\n### 2、IDEA设置\n\n​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件\n\n​\t快捷键：\n\n​\tCtrl+D 复制一行\n\n​\tCtrl+Y 删除一行\n\n​\tCtrl+P 参数提示\n\n​\tCtrl+Alt+V 自动补齐方法\n\n​\tCtrl+N 查找类方法\n\n​\tAlt+Ins 构造器、getter/setter toString\n\n​\tCtrl+O 重载方法提示\n\n​\tAlt+Enter 提示导入类etc\n\n​\tShift+F6 :文件重命名\n\n## 4、Spring Boot的Hello World\n\n### 1、创建一个Maven工程\n\n\n\n### 2、导入Spring Boot的相关依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n```\n\n### 3、编写个主程序\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n### 4、编写相应的Controller和Service\n\n```java\n@Controller\npublic class HelloController {\n\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public  String  hello(){\n        return \"hello world\";\n    }\n}\n```\n\n### 5、运行主程序测试\n\n访问 localhost:8080/hello\n\n### 6、简化部署\n\n在pom.xml文件中，导入build插件\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 5、HelloWorld深度理解\n\n### 1.POM.xml文件\n\n#### 1、父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n```\n\n这个父项目**spring-boot-starter-parent**又依赖一个父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n```\n\n下面有个属性，定义了对应的版本号\n\n```xml\n<properties>\n    <activemq.version>5.15.3</activemq.version>\n    <antlr2.version>2.7.7</antlr2.version>\n    <appengine-sdk.version>1.9.63</appengine-sdk.version>\n    <artemis.version>2.4.0</artemis.version>\n    <aspectj.version>1.8.13</aspectj.version>\n    <assertj.version>3.9.1</assertj.version>\n    <atomikos.version>4.0.6</atomikos.version>\n    <bitronix.version>2.1.4</bitronix.version>\n    <build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>\n    。。。。。。。\n```\n\nSpring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明\n\n#### 2、启动器\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件\n\n**spring boot**将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。\n\n### 2、主程序入口\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n**@SpringBootApplication:** 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用\n\n进入SpringBootApplication注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n```\n\n**@SpringBootConfiguration**：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类\n\n**@Configuration**:配置类上，来标注这个注解；\n配置类 ---- 配置文件，也是容器中的一个组件（@Component）\n**@EnableAutoConfiguration**:开启自动配置功能\n以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动\n配置功能；这样自动配置才能生效。 \n\n```java\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration { \n```\n\n**@AutoConfigurationPackage**:自动配置包\n**@Import({Registrar.class})**：底层注解，给容器导入组件；\n将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； \n\n**@Import({AutoConfigurationImportSelector.class})：**\n给容器导入组件？ \n\nAutoConfigurationImportSelector：导入组件选择器 \n\n将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；\n\n会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置\n好这些组件。 \n\n![1.configuration](E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg)\n\n```java\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\nAnnotationAttributes attributes) {\n\tList<String> configurations =\nSpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),\nthis.getBeanClassLoader());\n\tAssert.notEmpty(configurations, \"No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\");\n\treturn configurations;\n} \n```\n\n`SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),`\n`this.getBeanClassLoader());` \n\nSpring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；\n\n将这些值作为自动配置类导入到容器中，自动配置就生效了。 ![2.factories](E:\\工作文档\\SpringBoot\\images\\2.factories.jpg)\n\nJ2EE的整体解决方案\n\norg\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar \n\n## 6、使用Spring Initializer创建一个快速向导 \n\n1.IDE支持使用Spring Initializer\n\n自己选择需要的组件:例如web\n\n默认生成的SpringBoot项目 \n\n- 主程序已经生成好了，我们只需要完成我们的逻辑\n\n\n- resources文件夹目录结构\n\n  - static:保存所有的静态文件；js css images\n\n  - templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可\n\n    以使用模板引擎（freemarker.thymeleaf）;\n\n  - application.properties:Spring Boot的默认配置，例如 server.port=9000 \n\n# 二、配置文件 \n\n## 1、配置文件 \n\nSpring Boot使用全局配置文件，配置文件名是固定的；\n\n- application.properties\n- application.yml \n\n配置文件作用：修改Spring Boot在底层封装好的默认值；\n\nYAML（YAML AIN'T Markup Language）\n\n是一个标记语言\n\n又不是一个标记语言 \n\n**标记语言：**\n\n以前的配置文件；大多数使用的是 xxx.xml文件；\n\n以数据为中心，比json、xml等更适合做配置文件\n\nYAML：配置例子 \n\n```yaml\nserver:\n\tport: 9000 \n```\n\nXML: \n\n```xml\n<server>\n\t<port>9000</port>\n</server> \n```\n\n## 2、YAML语法 \n\n### 1、基本语法 \n\nk:(空格)v:表示一堆键值对（空格必须有）；\n\n以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 \n\n```yaml\nserver:\n\tport: 9000\n\tpath: /hello \n```\n\n属性和值也是大小写敏感 \n\n### 2、值的写法\n\n**字面量：普通的值（数字，字符串，布尔）** \n\nk: v:字面直接来写；\n\n字符串默认不用加上单引号或者双引号\n\n\"\":**双引号** 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思\n\n`name:\"zhangsan\\n lisi\"` 输出：`zhangsan换行 lisi`\n\n'':**单引号** 会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n`name:'zhangsan\\n lisi'` 输出：`zhangsan\\n lisi` \n\n**对象、Map（属性和值）键值对** \n\nk :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进\n\n对象还是k:v的方式 \n\n```yaml\nfrends:\n\tlastName: zhangsan\n\tage: 20 \n```\n\n行内写法 \n\n```yaml\nfriends: {lastName: zhangsan,age: 18} \n```\n\n**数组（List、Set）:**\n用-表示数组中的一个元素 \n\n```yaml\npets:\n ‐ cat\n ‐ dog\n ‐ pig \n```\n\n行内写法 \n\n```yaml\npets: [cat,dog,pig] \n```\n\n**组合变量**\n\n多个组合到一起 \n\n## 3、配置文件值注入 \n\n### 1、@ConfigurationProperties\n\n1、application.yml 配置文件 \n\n```yaml\nperson:\n  age: 18\n  boss: false\n  birth: 2017/12/12\n  maps: {k1: v1,k2: 12}\n  lists:\n   - lisi\n   - zhaoliu\n  dog:\n    name: wangwang\n    age: 2\n  last-name: wanghuahua\n```\n\n`application.properties` 配置文件（二选一） \n\n```properties\nidea配置文件utf-8\nproperties 默认GBK\nperson.age=12\nperson.boss=false\nperson.last-name=张三\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n所以中文输出乱码，改进settings-->file encoding -->[property-->utf-8 ,勾选转成ascii] \n\njavaBean \n\n```java\n/**\n* 将配置文件的配置每个属性的值，映射到组件中\n* @ConfigurationProperties:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；\n* prefix = \"person\" 配置文件爱你的那个属性进行一一映射\n* *\n只有这个组件是容器中的组件，才能提供到容器中\n*/\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n导入配置文件处理器，以后编写配置就有提示了 \n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring‐boot‐configuration‐processor</artifactId>\n\t<optional>true</optional>\n</dependency> \n```\n### 2、@Value注解\n\n更改javaBean中的注解\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    @Value(\"${person.last-name}\")\n    private String lastName;\n    @Value(\"#{11*2}\")\n    private Integer age;\n    @Value(\"true\")\n    private Boolean boss;\n```\n\n|          | @ConfigurationProperties | @Value |\n| :------: | :----------------------: | :----: |\n|    功能    |        批量注入配置文件属性        |  单个指定  |\n| 松散绑定(语法) |            支持            |  不支持   |\n|   spEL   |           不支持            |   支持   |\n| JSR303校验 |            支持            |  不支持   |\n|   复杂类型   |            支持            |  不支持   |\n\n> 松散语法：javaBean中last-name(或者lastName) -->application.properties中的last-name;\n>\n> spEL语法：#{11*2} \n>\n> JSR303：@Value会直接忽略，校验规则\n\nJSR303校验：\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"person\")\n@Validated\npublic class Person {\n    @Email\n    private String lastName;\n```\n\n复杂类型栗子：\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n   // @Value(\"${person.maps}\")\n    private Map<String,Object> maps;\n```\n\n以上会报错，不支持复杂类型\n\n**使用场景分析**\n\n​\t如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；\n\n如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties\n\n举栗子：\n\n1、编写新的Controller文件\n\n```java\n@RestController\npublic class HelloController {\n\n    @Value(\"${person.last-name}\")\n    private String name;\n    @RequestMapping(\"/hello\")\n    public  String sayHello(){\n        return \"Hello\"+ name;\n    }\n}\n```\n\n2、配置文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n3、测试运行\n\n访问 localhost:9000/hello\n\n结果为`Hello 李四`\n\n### 3、其他注解\n **@PropertySource**\n\n作用：加载指定的properties配置文件\n\n1、新建一个person.properties文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n2、在javaBean中加入@PropertySource注解\n\n```java\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n```\n\n**@ImportResource**\n\n作用：导入Spring配置文件，并且让这个配置文件生效\n\n1、新建一个Spring的配置文件，bean.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"HelloService\" class=\"com.wdjr.springboot.service.HelloService\"></bean>\n</beans>\n```\n\n2、编写测试类，检查容器是否加载Spring配置文件写的bean\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"HelloService\");\n    System.out.println(b);\n}\n```\n\n> import org.springframework.context.ApplicationContext;\n\n3、运行检测\n\n结果为false，没有加载配置的内容\n\n4、使用@ImportResource注解\n\n将@ImportResource标注在主配置类上\n\n```java\n@ImportResource(locations={\"classpath:beans.xml\"})\n@SpringBootApplication\npublic class SpringBoot02ConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot02ConfigApplication.class, args);\n    }\n}\n```\n\n5、再次运行检测\n\n结果为true\n\n缺点：每次指定xml文件太麻烦\n\nSpringBoot推荐给容器添加组件的方式：\n\n1、配置类=====Spring的xml配置文件（old）\n\n2、全注解方式@Configuration+@Bean（new）\n\n![4.MyAppConfig](E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg)\n\n\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来代替之前的Spring配置文件\n *\n * 在配置文件中用<bean></bean>标签添加组件\n */\n\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器这个组件id就是方法名\n    @Bean\n    public HelloService helloService01(){\n        System.out.println(\"配置类给容器添加了HelloService组件\");\n        return new HelloService();\n    }\n}\n```\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"helloService01\");\n    System.out.println(b);\n}\n```\n\n *容器这个组件id就是方法名* \n\n## 4、配置文件占位符\n\n#### 1、随机数\n\n```properties\n${random.value} 、${random.int}、${random.long}\n${random.int(10)}、${random.int[100,200]}\n```\n\n#### 2、获取配置值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.last-name}'s wanghuahu\nperson.dog.age=15\n```\n\n存在以下两种情况\n\n没有声明`person.last-name`会报错，新声明的需要加默认值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}'s wanghuahu\nperson.dog.age=15\n```\n\n结果：输出`hello's wanghuahua`\n\n## 5、Profile\n\n### 1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml\n\n- application.properties\n- application-dev.properties\n- application-prod.properties\n\n默认使用application.properties\n\napplication.properties配置文件指定\n\n```properties\nspring.profiles.active=dev\n```\n\n### 2、YAML文档块\n\n```yaml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: dev\n\n---\n\nserver:\n  port: 9000\nspring:\n  profiles: dev\n\n---\nserver:\n  port: 80\nspring:\n  profiles: prod\n\n```\n\n### 3、激活指定profile\n\n1、在配置文件中激活\n\n2、命令行：\n\n--spring.profiles.active=dev\n\n![5.comandLine](E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg)\n\n优先级大于配置文件\n\n打包 成jar后\n\n`java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev`\n\n虚拟机参数\n\n`-Dspring.profiles.active=dev`\n\n## 6、加载配置文件位置\n\nSpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n- file:./config/\n- file./\n- classpath:/config/\n- classpath:/\n\n优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置\n\n也可以通过spring.config.location来改变默认配置\n\n> ```\n> server.servlet.context-path=/boot03\n> ```\n\n注：spring boot1x 是server.context.path=/boot02\n\n\n\n![7.priority](E:\\工作文档\\SpringBoot\\images\\7.priority.jpg)\n\n还可以通过spring.config.location来改变配置文件的位置\n\n项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置\n\n`java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties`\n\n运维比较有用，从外部加载，不用修改别的文件\n\n## 7.引入外部配置\n\n**SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补**\n\n1. 命令行参数\n\n   java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --server.port=9005 --server.context-path=/abc\n\n   中间一个空格\n\n2. 来自java:comp/env的JNDI属性\n\n3. java系统属性（System.getProperties()）\n\n4. 操作系统环境变量\n\n5. RandomValuePropertySource配置的random.*属性值\n\n   \n\n   **优先加载profile,    由jar包外到jar包内**\n\n6. **jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n7. **jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n8. **jar包外部的application.properties或application.yml(带Spring.profile)配置文件**\n\n9. **jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n   \n\n10. @Configuration注解类的@PropertySource\n\n11. 通过SpringApplication.setDefaultProperties指定的默认属性\n\n[官方文档](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n## 8、自动配置\n\n配置文件到底怎么写？\n\n[Spring的所有配置参数](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties)\n\n自动配置原理很关键\n\n### 1、自动配置原理\n\n1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration\n\n2）、@EnableAutoConfiguration 作用：\n\n- 利用AutoConfigurationImportSelector给容器中导入一些组件？\n- 可以查看selectImports()方法的内容\n- 获取候选的配置\n\n```java\nList<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n```\n\n\n- 扫描类路径下的\n```java\n  SpringFactoriesLoader.loadFactoryNames(）\n  扫描所有jar包类路径下的 MATA-INF/spring.factories\n  把扫描到的这些文件的内容包装成properties对象\n  从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中\n```\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；\n\n3）、每一个自动配置类进行自动配置功能；\n\n4）、以**HttpEncodingAutoConfiguration** 为例\n\n```java\n@Configuration //表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties({HttpEncodingProperties.class})//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中\n@ConditionalOnWebApplication//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；\n(\n    type = Type.SERVLET\n)\n@ConditionalOnClass({CharacterEncodingFilter.class})//判断当前项目有没有这个类，解决乱码的过滤器\n@ConditionalOnProperty(\n    prefix = \"spring.http.encoding\",\n    value = {\"enabled\"},\n    matchIfMissing = true\n)//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效\npublic class HttpEncodingAutoConfiguration {\n   //给容器添加组件，这个组件的值需要从properties属性中获取\n    private final HttpEncodingProperties properties;\n\t//只有一个有参数构造器情况下，参数的值就会从容器中拿\n    public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n        filter.setEncoding(this.properties.getCharset().name());\n        filter.setForceRequestEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));\n        filter.setForceResponseEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));\n        return filter;\n    }\n\n```\n\n5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类\n\n```java\n@ConfigurationProperties(prefix = \"spring.http.encoding\")//从配置文件中的值进行绑定和bean属性进行绑定\npublic class HttpEncodingProperties {\n```\n\n根据当前不同条件判断，决定这个配置类是否生效？\n\n一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的\n\n\n\n### 2、所有的自动配置组件\n\n每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；\n\n作用：用他们做自动配置\n\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n\n```\n\n### 3、精髓：\n\n1）、SpringBoot启动会加载大量的自动配置类\n\n2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；\n\n3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）\n\n4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值\n\nxxxAutoConfiguration:自动配置类；\n\n给容器中添加组件\n\nxxxProperties:封装配置文件中的属性；\n\n跟之前的Person类一样，配置文件中值加入bean中\n\n### 4、细节\n\n#### 1、@Conditional派生注解 \n\n> 利用Spring注解版原生的@Conditional作用\n\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional派生注解                | 作用（判断是否满足当前指定条件）               |\n| ------------------------------- | ------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                |\n| @ConditionalOnBean              | 容器中存在指定Bean                    |\n| @ConditionalOnMissBean          | 容器中不存在指定Bean                   |\n| @ConditionalOnExpression        | 满足spEL表达式                      |\n| @ConditionalOnClass             | 系统中有指定的类                       |\n| @ConditionalOnMissClass         | 系统中没有指定的类                      |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean,或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                |\n| @ConditionalOnResource          | 类路径下是否存在指定的资源文件                |\n| @ConditionalOnWebApplication    | 当前是web环境                       |\n| @ConditionalOnNotWebApplication | 当前不是web环境                      |\n| @ConditionalOnJndi              | JNDI存在指定项                      |\n\n#### 2、自动配置报告\n\n自动配置类必须在一定条件下生效\n\n我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效\n\n```properties\ndebug=true\n```\n\n自动配置报告\n\n```java\n============================\n\nCONDITIONS EVALUATION REPORT\n============================\n\n\nPositive matches:（启动的，匹配成功的）\n-----------------\n\n   CodecsAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n        ......\n        \n Negative matches:（没有启动的，没有匹配成功的）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n.....\n```\n\n# 三、日志\n\n> Spring Boot2对日志有更改\n\n### 1、日志框架\n\n小张：开发一个大型系统；\n\n1、System.out.println(\"\");将关键数据打印在控制台；去掉？卸载文件中\n\n2、框架记录系统的一些运行信息；日志框架zhanglog.jar\n\n3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?\n\n4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;\n\n5、JDBC--数据库驱动；\n\n​\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;\n\n​\t给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；\n\n市面上的日志框架\n\n| 日志抽象层                                                   | 日志实现                                        |\n| ------------------------------------------------------------ | ----------------------------------------------- |\n| ~~JCL(Jakarta Commons Logging)~~ SLF4j(Simple Logging Facade for Java) ~~jboss-logging~~ | Log4j ~~JUL(java.util.logging)~~ Log4j2 Logback |\n|                                                              |                                                 |\n\n左边的抽象，右边的实现\n\nSLF4J  -- Logback\n\nSpring Boot:底层是Spring框架，Spring默认框架是JCL；\n\n​\tSpringBoot选用SLF4J和logback\n\n### 2、SLF4J使用\n\n#### 1、如何在系统中使用SLF4j\n\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n应该给系统里面导入slf4j的jar包和logback的实现jar\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(\"Hello World\");\n  }\n}\n```\n\n![8.slf4j](E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg)\n\n每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架本身的配置文件**；\n\n#### 2、遗留问题\n\na系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis\n\n统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；\n\n核心：\n\n1、将系统中其他日志框架排除出去；\n\n2、用中间包来替换原有的日志框架/\n\n3、导入slf4j的其他实现\n\n### 3、SpingBoot日志框架解析\n\n打开IDEA ，打开pom文件的依赖图形化显示\n\n![9.IDEAdependencies](E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg)\n\nSpringBoot的基础框架\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\nSpringBoot的日志功能\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n![10.slf4jandlogback](E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg)\n\n总结：\n\n1. SpringBoot底层也是使用SLF4J+log4jback\n\n2. SpringBoot也把其他日志替换成了slf4j\n\n3. 起着commons.loggings的名字其实new的SLF4J替换中间包\n\n   SpringBoot2中改成了bridge\n\n4. 如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层\n\n### 4、日志的使用\n\n#### 1、默认配置\n\ntrace-debug-info-warn-error\n\n可以调整需要的日志级别进行输出，不用注释语句。\n\n```java\n//记录器\nLogger logger = LoggerFactory.getLogger(getClass());\n@Test\npublic void contextLoads() {\n\n    //日志的级别\n    //从低到高\n    //可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效\n    logger.trace(\"这是trace日志\");\n    logger.debug(\"这是debug信息\");\n    //SpringBoot默认给的是info级别，如果没指定就是默认的root级别\n    logger.info(\"这是info日志\");\n    logger.warn(\"这是warn信息\");\n    logger.error(\"这是Error信息\");\n}\n```\n\n调整指定包的日志级别在配置文件中进行配置\n\n```properties\nlogging.level.com.wdjr=trace\n```\n\n日志输出格式\n\n```properties\n#控制台输出的日志格式 \n#%d：日期\n#%thread：线程号 \n#%-5level：靠左 级别 \n#%logger{50}：全类名50字符限制,否则按照句号分割\n#%msg：消息+换行\n#%n：换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n```\n\nSpringBoot修改日志的默认配置\n\n```properties\nlogging.level.com.wdjr=trace\n#不指定path就是当前目录下生成springboot.log\n#logging.file=springboot.log\n#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认\nlogging.path=/spring/log\n#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n#指定文件中日志输出的格式\nlogging.pattern.file=xxx\n```\n\n#### 2、指定配置\n\n给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置\n\n| logging System         | Customization                                                |\n| ---------------------- | ------------------------------------------------------------ |\n| Logback                | logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy |\n| Log4J2                 | log4j2-spring.xml or log4j2.xml                              |\n| JDK(Java Util Logging) | logging.properties                                           |\n\nlogback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载\n\n```xml\n<springProfile name=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n<springProfile name!=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n```\n\n如何调试开发环境,输入命令行参数\n\n--spring.profiles.active=dev\n\n如果不带后面的xx-spring.xml就会报错\n\n### 3、切换日志框架\n\n可以根据slf4j的日志适配图，进行相关切换；\n\n#### 1、log4j\n\nslf4j+log4j的方式；\n\n![11.log4j](E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg)\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>logback-classic</artifactId>\n            <groupId>ch.qos.logback</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n```\n\n不推荐使用仅作为演示\n\n#### 2、log4j2\n\n切换为log4j2\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n# 四、web开发\n\n## 1、简介\n\n使用SpringBoot;\n\n1)、创建SpringBoot应用，选中我们需要的模块；\n\n2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来\n\n3)、自己编写业务代码\n\n**自动配置原理？**\n\n这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx\n\n```java\nxxxAutoConfiguration:帮我们给容器中自动配置组件\nxxxProperties:配置类来封装配置文件的内容\n```\n\n## 2、静态资源文件映射规则\n\n```java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware, InitializingBean {\n    //可以设置和静态资源相关的参数，缓存时间等\n```\n\n```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n   if (!this.resourceProperties.isAddMappings()) {\n      logger.debug(\"Default resource handling disabled\");\n      return;\n   }\n   Integer cachePeriod = this.resourceProperties.getCachePeriod();\n   if (!registry.hasMappingForPattern(\"/webjars/**\")) {\n      customizeResourceHandlerRegistration(registry\n            .addResourceHandler(\"/webjars/**\")\n            .addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n            .setCachePeriod(cachePeriod));\n   }\n   String staticPathPattern = this.mvcProperties.getStaticPathPattern();\n   if (!registry.hasMappingForPattern(staticPathPattern)) {\n      customizeResourceHandlerRegistration(\n            registry.addResourceHandler(staticPathPattern)\n                  .addResourceLocations(\n                        this.resourceProperties.getStaticLocations())\n                  .setCachePeriod(cachePeriod));\n   }\n}\n```\n\n### 1、webjar\n\n1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；\n\n​\twebjars：以jar包的方式引入静态资源\n\nhttp://www.webjars.org/\n\n![12.jquery](E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\n\n### 2、本地资源\n\n```\nprivate String staticPathPattern = \"/**\";\n```\n\n访问任何资源\n\n2、会在这几文件夹下去找静态路径（静态资源文件夹）\n\n```\n\"classpath:/META-INF/resources/\", \n\"classpath:/resources/\",\n\"classpath:/static/\", \n\"classpath:/public/\",\n\"/\";当前项目的根路径\n```\n\n![13.static](E:\\工作文档\\SpringBoot\\images\\13.static.jpg)\n\nlocalhost:8080/abc ==>去静态资源文件夹中找abc\n\n![14.static-css](E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg)\n\n3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；\n\nlocalhost:8080/  -->index页面\n\n```JAVA\n@Bean\npublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n      ResourceProperties resourceProperties) {\n   return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n         this.mvcProperties.getStaticPathPattern());\n}\n```\n\n4、喜欢的图标，即网站title的图标favicon\n\n```java\n@Configuration\n@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\npublic static class FaviconConfiguration {\n\n   private final ResourceProperties resourceProperties;\n\n   public FaviconConfiguration(ResourceProperties resourceProperties) {\n      this.resourceProperties = resourceProperties;\n   }\n\n   @Bean\n   public SimpleUrlHandlerMapping faviconHandlerMapping() {\n      SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n       //把任何favicon的图标都在静态文件夹下找\n      mapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\n            faviconRequestHandler()));\n      return mapping;\n   }\n\n   @Bean\n   public ResourceHttpRequestHandler faviconRequestHandler() {\n      ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n      requestHandler\n            .setLocations(this.resourceProperties.getFaviconLocations());\n      return requestHandler;\n   }\n\n}\n```\n\n可以在配置文件配置静态资源文件夹\n\n```properties\nspring.resources.static-locations=classpath:xxxx\n```\n\n## 3、模板引擎\n\n将html和数据 结合到一起 输出组装处理好的新文件\n\nSpringBoot推荐Thymeleaf;语法简单，功能强大\n\n### 1、引入thymeleaf 3\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n默认导入thymeleaf2，版本太低 所以使用thymeleaf3.\n\n[官方导入办法](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3)\n\n```xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <!--thymeleaf 3的导入-->\n    <thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n    <!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  -->\n    <!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  -->\n    <thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n</properties>\n```\n\n### 2、Thymeleaf使用和语法\n\n```java\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\npublic class ThymeleafProperties {\n\n   private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n\n   private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n\n   public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n\n   public static final String DEFAULT_SUFFIX = \".html\";\n   //只要把HTML文件方法类路径下的template文件夹下，就会自动导入\n```\n\n只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；\n\n使用：\n\n1、导入thymeleaf的名称空间\n\n```html\n<html xmlns:th=\"http://www.thymeleaf.org\">    \n```\n\n2、使用thymeleaf语法；\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>success</title>\n</head>\n<body>\n<h1>success</h1>\n<!--th:text 将div里面的文本内容设置为-->\n<div th:text=\"${Lion}\">\n前端数据\n</div>\n</body>\n</html>\n```\n\n3、语法规则\n\n1）、th:text=\"${hello}\"可以使用任意标签 替换原生的任何属性\n\n**在SpringBoot的环境下**\n\n```html\n<div id=\"testid\" class=\"testcalss\" th:id=\"${Lion}\" th:class=\"${Lion}\" th:text=\"${Lion}\">\n\t前端数据\n</div>\n```\n\n![15.thtmeleaf-th01](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg)\n\n**直接访问HTML页面**\n\n![15.thtmeleaf-th02](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg)\n\n**2)、内联写法注意需要在body上加上 th:inline=\"text\"敲黑板**\n\n不然不起作用\n\n```html\n<body class=\"text-center\" th:inline=\"text\"></body>\n```\n\nth标签的访问优先级\n\nOrder Feature Attributes\n\n### 3、语法规则\n\n|      | 功能                            | 标签                                 | 功能和jsp对比                             |\n| ---- | ------------------------------- | ------------------------------------ | ----------------------------------------- |\n| 1    | Fragment inclusion              | th:insert th:replace                 | include(片段包含)                         |\n| 2    | Fragment iteration              | th:each                              | c:forEach(遍历)                           |\n| 3    | Conditional evaluation          | th:if th:unless th:switch th:case    | c:if(条件判断)                            |\n| 4    | Local variable definition       | th:object  th:with                   | c:set(声明变量)                           |\n| 5    | General attribute modification  | th:attr th:attrprepend th:attrappend | 属性修改支持前面和后面追加内容            |\n| 6    | Specific attribute modification | th:value th:href th:src ...          | 修改任意属性值                            |\n| 7    | Text (tag body modification)    | th:text th:utext                     | 修改标签体内容utext：不转义字符<h1>大标题 |\n| 8    | Fragment specification          | th:fragment                          | 声明片段                                  |\n| 9    | Fragment removal                | th:remove                            |                                           |\n\n \n\n```properties\nSimple expressions:(表达式语法)\n    Variable Expressions: ${...}\n    \t1、获取对象属性、调用方法\n    \t2、使用内置基本对象：\n    \t    #ctx : the context object.\n            #vars: the context variables.\n            #locale : the context locale.\n            #request : (only in Web Contexts) the HttpServletRequest object.\n            #response : (only in Web Contexts) the HttpServletResponse object.\n            #session : (only in Web Contexts) the HttpSession object.\n            #servletContext : (only in Web Contexts) the ServletContext object.\n         3、内置一些工具对象\n        \t#execInfo : information about the template being processed.\n        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they\n            would be obtained using #{…} syntax.\n            #uris : methods for escaping parts of URLs/URIs\n            #conversions : methods for executing the configured conversion service (if any).\n            #dates : methods for java.util.Date objects: formatting, component extraction, etc.\n            #calendars : analogous to #dates , but for java.util.Calendar objects.\n            #numbers : methods for formatting numeric objects.\n            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.\n            #objects : methods for objects in general.\n            #bools : methods for boolean evaluation.\n            #arrays : methods for arrays.\n            #lists : methods for lists.\n            #sets : methods for sets.\n            #maps : methods for maps.\n            #aggregates : methods for creating aggregates on arrays or collections.\n            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).\n    Selection Variable Expressions: *{...} //选择表达式：和${}功能一样，补充功能\n   # 配合th:object使用，object=${object} 以后获取就可以使用*{a}  相当于${object.a}\n  \t    <div th:object=\"${session.user}\">\n            <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n            <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n            <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n\t\t</div>\n    Message Expressions: #{...} //获取国际化内容\n    Link URL Expressions: @{...} //定义URL链接\n    \t#<a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\">view</a>\n    Fragment Expressions: ~{...}//片段文档\n    \nLiterals（字面量）\n    Text literals: 'one text' , 'Another one!' ,…\n    Number literals: 0 , 34 , 3.0 , 12.3 ,…\n    Boolean literals: true , false\n    Null literal: null\n    Literal tokens: one , sometext , main ,…\nText operations:(文本操作)\n    String concatenation: +\n    Literal substitutions: |The name is ${name}|\nArithmetic operations:（数学运算）\n    Binary operators: + , - , * , / , %\n    Minus sign (unary operator): -\nBoolean operations:（布尔运算）\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality:（比较运算）\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\n    Equality operators: == , != ( eq , ne )\nConditional operators:（条件运算）\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:（空操作）\n\tNo-Operation: _\n```\n\ninline写法\n\n```html\n[[]] -->th:text\n[()] -->th:utext\n```\n\n\n\n## 4、SpringMVC自动配置\n\n### 1、SpringMVC的自动导入\n\n[Spring框架](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications)\n\n自动配置好了mvc：\n\n以下是SpringBoot对SpringMVC的默认\n\nSpring Boot provides auto-configuration for Spring MVC that works well with most applications.\n\nThe auto-configuration adds the following features on top of Spring’s defaults:\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n  - 自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)\n  - `ContentNegotiatingViewResolver`组合所有视图解析器\n  - 如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来\n\n- Support for serving static resources, including support for WebJars (see below).静态资源\n\n- Static `index.html` support.\n\n- Custom `Favicon` support (see below).\n\n- 自动注册 了`Converter`, `GenericConverter`, `Formatter` beans.\n\n  - `Converter`：类型转换 文本转为字面量\n\n  - `Formatter` ：格式化器 转换后格式转换\n\n    ```java\n    @Bean\n    @ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件配置入职格式化的规则\n    public Formatter<Date> dateFormatter() {\n       return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\n    }\n    ```\n\n    自己添加的格式化转换器，只需要放在容器中即可\n\n- Support for `HttpMessageConverters` (see below).\n\n  - `HttpMessageConverters` ：转换HTTP转换和响应：User - json\n\n  - `HttpMessageConverters` ：是从容器中确定；获取所有的`HttpMessageConverters`  ，将自己的组件注册在容器中@Bean \n\n  - If you need to add or customize converters you can use Spring Boot’s `HttpMessageConverters` class:\n\n    ```java\n    import org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n    import org.springframework.context.annotation.*;\n    import org.springframework.http.converter.*;\n    \n    @Configuration\n    public class MyConfiguration {\n    \n        @Bean\n        public HttpMessageConverters customConverters() {\n            HttpMessageConverter<?> additional = ...\n            HttpMessageConverter<?> another = ...\n            return new HttpMessageConverters(additional, another);\n        }\n    \n    }\n    ```\n\n- Automatic registration of `MessageCodesResolver` (see below).\n\n  - 定义错误代码生成规则\n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\n\n  - ```java\n    @Override\n    protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n       try {\n          return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n       }\n       catch (NoSuchBeanDefinitionException ex) {\n          return super.getConfigurableWebBindingInitializer();\n       }\n    }\n    ```\n\n    在beanFactory：中可以自己创建一个，初始化webDataBinder\n\n    请求数据 ==》javaBean\n\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.16.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\n\n思想：修改默认配置\n\n### 2、扩展SpringMVC\n\n编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用\n\n```java\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n1）、WebMvcAutoConfiguration是SpringMVC的自动配置\n\n2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)\n\n```java\n@Configuration\npublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n    private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\n\n\t//从容器中获取所有webMVCconfigurer\n\t@Autowired(required = false)\n\tpublic void setConfigurers(List<WebMvcConfigurer> configurers) {\n\t\tif (!CollectionUtils.isEmpty(configurers)) {\n\t\t\tthis.configurers.addWebMvcConfigurers(configurers);\n            \n            \t@Override\n                protected void addViewControllers(ViewControllerRegistry registry) {\n                    this.configurers.addViewControllers(registry);\n                }\n            //一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）\n            \t@Override\n               // public void addViewControllers(ViewControllerRegistry registry) {\n                   // for (WebMvcConfigurer delegate : this.delegates) {\n\t\t\t\t //delegate.addViewControllers(registry);\n                    //}\n                }\n\t\t}\n\t}\n    \n```\n\n\n\n3）、自己的配置被调用\n\n效果：SpringMVC的自动配置和我们的扩展配置都会起作用\n\n### 3、全面接管mvc\n\n不需要SpringBoot对SpringMVC的自动配置。\n\n```java\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n\n\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n例如静态资源访问，不推荐全面接管\n\n原理：\n\n为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了\n\n1）、核心配置\n\n```java\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n}\n```\n\n2）、DelegatingWebMvcConfiguration\n\n```java\n@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n```\n\n3）、WebMvcAutoConfiguration\n\n```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n      WebMvcConfigurerAdapter.class })\n//容器没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n      ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\n4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；\n\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能\n\n\n\n## 5、修改SpringMVC默认配置\n\n模式:\n\n​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n​\t2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。\n\n## 6、RestfulCRUD\n\n### 1、默认访问首页\n\n在config/MyConfig.java中编写配置类\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/login.html\").setViewName(\"login\");\n        }\n    };\n    return adapter;\n}\n```\n\n静态资源引用\n\n```html\n<link href=\"#\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n```\n\n### 2、国际化\n\n1、编写国际化配置文件\n\n2、使用ResourceBundleMessageSource管理国际化资源文件\n\n3、在页面中使用fmt:message，取出国际化内容\n\n#### 1、浏览器切换国际化\n\n步骤\n\n1、编写国际化配置文件，抽取页面需要的显示的国际化消息\n\n![16.national](E:\\工作文档\\SpringBoot\\images\\16.national.jpg)\n\n2、SpringBoot自动配置好了国际化配置的资源文件\n\n```java\n@ConfigurationProperties(prefix = \"spring.messages\")\npublic class MessageSourceAutoConfiguration {\n    //我们的配置文件可以直接放在类路径下叫messages.properties\n    private String basename = \"messages\";\n    @Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n            //设置国际化文件的基础名，去掉语言国家代码\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t}\n\t\tif (this.encoding != null) {\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t}\n```\n\n3、对IDEA的编码进行设置\n\n![17.encoding](E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg)\n\n4、login进行标签插入\n\n```html\n<!DOCTYPE html>\n<!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ -->\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"author\" content=\"\" />\n    <link rel=\"icon\" href=\"https://getbootstrap.com/favicon.ico\" />\n\n    <title>登录页面</title>\n\n    <!-- Bootstrap core CSS -->\n    <link href=\"#\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n\n    <!-- Custom styles for this template -->\n    <link href=\"./login_files/signin.css\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n  </head>\n\n  <body class=\"text-center\">\n    <form class=\"form-signin\">\n      <img class=\"mb-4\" src=\"./login_files/bootstrap-solid.svg\" th:src=\"@{/img/bootstrap-solid.svg}\" alt=\"\" width=\"72\" height=\"72\" />\n      <h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\n      <label  class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\n      <input type=\"text\"  name=\"username\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\"/>\n      <label for=\"inputPassword\" class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\n      <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\" />\n      <div class=\"checkbox mb-3\">\n        <label>\n          <input type=\"checkbox\" value=\"remember-me\" /> [[#{login.remember}]]\n        </label>\n      </div>\n      <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\n      <p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n    </form>\n  \n\n</body></html>\n```\n\n效果根据浏览器语言的信息切换国际化\n\n原理：\n\n国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；\n\n```java\n@Bean\n@ConditionalOnMissingBean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\npublic LocaleResolver localeResolver() {\n    if (this.mvcProperties\n        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n        return new FixedLocaleResolver(this.mvcProperties.getLocale());\n    }\n    AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n    localeResolver.setDefaultLocale(this.mvcProperties.getLocale());\n    return localeResolver;\n}            \n\n```\n\n默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）\n\n![18.accept-language](E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg)\n\n#### 2、点击链接切换国际化\n\n自己编写localResolver，加到容器中\n\n1、更改HTML代码\n\n```html\n<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=zh_CN}\">中文</a>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=en_US}\">English</a>\n```\n\n2、新建一个MyLocaleResolver.class\n\n```java\npublic class MyLocaleResolver implements LocaleResolver {\n\n    //解析区域信息\n    @Override\n    public Locale resolveLocale(HttpServletRequest request) {\n        String l = request.getParameter(\"lg\");\n        Locale locale = Locale.getDefault();\n        if(!StringUtils.isEmpty(l)){\n            String[] split = l.split(\"_\");\n            locale = new Locale(split[0], split[1]);\n        }\n        return locale;\n    }\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n\n    }\n}\n```\n\n3、将MyLocaleResolver加入到容器中\n\n```java\n@Bean\npublic LocaleResolver localeResolver(){\n    return new MyLocalResolver();\n}\n```\n\n4、启动演示\n\n### 3、登录拦截器\n\n#### 1、登录\n\n开发技巧\n\n​\t1、清除模板缓存\n\n​\t2、Ctrl+F9刷新\n\n1、新建一个LoginController\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功\n            return \"list\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n2、登录错误消息显示\n\n```html\n<!--判断-->\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\n```\n\n3、表单重复提交\n\n表单重复提交事件 --》重定向来到成功页面--》模板引擎解析\n\n```java\nif(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n    //登录成功,防止重复提交\n    return \"redirect:/main.html\";\n}else{\n    map.put(\"msg\", \"用户名密码错误\");\n    return \"login\";\n}\n```\n\n模板引擎解析\n\n```java\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n    registry.addViewController(\"/\").setViewName(\"login\");\n    registry.addViewController(\"/index.html\").setViewName(\"login\");\n    registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n}\n```\n\n### 4、拦截器\n\n作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）\n\n1、在component下新建一个LoginHandlerInterceptor拦截器\n\n```java\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\n\n    //目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        Object user = request.getSession().getAttribute(\"loginUser\");\n        if(user!=null){\n            //已经登录\n            return true;\n        }\n        //未经过验证\n        request.setAttribute(\"msg\", \"没权限请先登录\");\n        request.getRequestDispatcher(\"/index.html\").forward(request, response);\n\n        return false;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n```\n\n2、在MyMvcConfig配置中重写拦截器方法，加入到容器中\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/index.html\").setViewName(\"login\");\n            registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n        }\n        //注册拦截器\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            //静态资源 css js img 已经做好了静态资源映射\n            registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\").\n                    excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\n        }\n    };\n    return adapter;\n}\n```\n\n3、在LoginHandler中添加登录成功写入session\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map,\n                        HttpSession session){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功,防止重复提交\n            session.setAttribute(\"loginUser\", username);\n            return \"redirect:/main.html\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n### 5、CRUD-员工列表\n\n实验要求：\n\n1）、RestfulCRUD：CRUD满足Rest风格\n\nURI:/资源名称/资源标识+HTTP操作\n\n|      | 普通CRUD                | RestfulCRUD       |\n| ---- | ----------------------- | ----------------- |\n| 查询 | getEmp                  | emp -- GET        |\n| 添加 | addEmp?xxx              | emp --POST        |\n| 修改 | updateEmp?id=xxx&xxx=xx | emp/{id} -- PUT   |\n| 删除 | deleteEmp?id=1          | emp/{id} --DELETE |\n\n2、实验的请求架构\n\n|                | 请求URI  | 请求方式 |\n| -------------- | -------- | -------- |\n| 查询所有员工   | emps     | GET      |\n| 查询某个员工   | emp/{id} | GET      |\n| 添加页面       | emp      | GET      |\n| 添加员工       | emp      | POST     |\n| 修改页面(回显) | emp/{id} | GET      |\n| 修改员工       | emp/{id} | PUT      |\n| 删除员工       | emp/{id} | DELETE   |\n\n3、员工列表\n\n#### 1、公共页面抽取\n\n使用方法\n\n```html\n1、抽取公共片段\n<!--footer.html-->\n<div id=\"footid\" th:fragment=\"copy\">xxx</div>\n2、引入公共片段\n<!--test.html-->\n<div th:insert=~{footer::copy}></div>\n~{templatename::selector} 模板名::选择器  footer::#footid\n~{templatename::fragmentname} 模板名::片段名称 footer::copy\n行内写法可以加~{xx::xx} 标签体可以 xx::xx\n```\n\n\n\n**三种引用方式**\n\n**th:insert** :加个外层标签 +1\n\n**th:replace** :完全替换 1\n\n**th:include**：就替换里面的内容 -1\n\n公共页面\n\n```html\n<body>\n\t...\n    <div th:insert=\"footer :: copy\"></div>\n    <div th:replace=\"footer :: copy\"></div>\n    <div th:include=\"footer :: copy\"></div>\n</body>\n```\n\n结果\n\n```html\n<body>\n...\n    <!-- th:insert -->\n    <div>\n        <footer>\n            &copy; 2011 The Good Thymes Virtual Grocery\n        </footer>\n    </div>\n    <!--th:replace-->\n    <footer>\n   \t\t&copy; 2011 The Good Thymes Virtual Grocery\n    </footer>\n    <!--th:include-->\n    <div>\n        &copy; 2011 The Good Thymes Virtual Grocery\n    </div>\n</body>\n```\n\n用此种方法将公共页面引入\n\n#### 2、列表高亮\n\n引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html\n\n模板引入变量名\n\ndashboard\n\n```html\n<a class=\"nav-link active\"\n   th:class=\"${activeUri}=='main.html'?'nav-link active':'nav-link'\"\n   href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/main.html}\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\"><path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline></svg>\n    Dashboard <span class=\"sr-only\">(current)</span>\n</a>\n```\n\n员工管理\n\n```html\n<li class=\"nav-item\">\n    <a class=\"nav-link\"\n       th:class=\"${activeUri}=='emps'?'nav-link active':'nav-link'\"\n       href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/emps}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-users\"><path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path><path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path></svg>\n        员工管理\n    </a>\n```\n\n引入模板的时候传入参数\n\ndashboard.html引入\n\n```html\n<!--引入侧边栏-->\n   <div th:replace=\"commons/bar :: sidebar(activeUri='main.html')\"></div>\n```\n\nlist.html引入\n\n```html\n<!--引入侧边栏-->\n<div th:replace=\"commons/bar::sidebar(activeUri='emps')\"></div>\n```\n\n### 6、列表数据显示（查）\n\n#### 1、传入员工对象\n\nEmployeeController类,传入员工对象\n\n```java\n@Controller\npublic class EmployeeController {\n\n    @Autowired\n    EmployeeDao employeeDao;\n    /**\n     * 查询所有员工返回列表页面\n     */\n    @GetMapping(value = \"/emps\")\n    public String list(Model model){\n\n        Collection<Employee> employees = employeeDao.getAll();\n        model.addAttribute(\"emps\",employees);\n        return \"emp/list\";\n    }\n}\n```\n\n#### 2、 遍历对象\n\nlist.html中 使用模板的 `th:each`方法\n\n```html\ntable class=\"table table-striped table-sm\">\n    <thead>\n    <tr>\n        <th>#</th>\n        <th>lastName</th>\n        <th>email</th>\n        <th>gender</th>\n        <th>department</th>\n        <th>birth</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n        <tr th:each=\"emp:${emps}\">\n            <td th:text=\"${emp.id}\">1</td>\n            <td th:text=\"${emp.lastName}\">1</td>\n            <td th:text=\"${emp.email}\">1</td>\n            <td th:text=\"${emp.gender}\">1</td>\n            <td th:text=\"${emp.department.departmentName}\">1</td>\n            <td th:text=\"${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">1</td>\n            <td>\n                <button class=\"btn btn-sm btn-primary\">编辑</button>\n                <button class=\"btn btn-sm btn-danger\">删除</button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n#### 3、效果显示\n\n![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)\n\n\n\n### 7、员工添加（增）\n\n功能：点击添加按钮，出现新增页面\n\n#### 1、新增页面\n\n```html\n<form>\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\"  placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label for=\"exampleFormControlSelect1\">department</label>\n        <select class=\"form-control\" id=\"exampleFormControlSelect1\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <!--Birth-->\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n#### 2、页面跳转\n\n在EmployeeController中添加addEmpPage方法\n\n```java\n/**\n * 添加员工\n */\n@GetMapping(value = \"/emp\")\npublic String toAddPage(Model model){\n    //来到添加页面,查出所有部门显示\n    Collection<Department> depts = departmentDao.getDepartments();\n    model.addAttribute(\"depts\",depts);\n    return \"emp/add\";\n}\n```\n\n关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息\n\n#### 3、添加功能完成\n\n新建一个PostMapping\n\n> ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；\n\n1、新建一个postMapping的方法用来接受页面的添加POST请求\n\n```java\n/**\n * 员工添加\n */\n@PostMapping(value = \"/emp\")\npublic String addEmp(Employee employee){\n\n    employeeDao.save(employee);\n    //来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址\n    return \"redirect:/emps\";\n}\n```\n\n2、修改添加页面，添加name属性\n\n```html\n<form th:action=\"@{/emp}\" method=\"post\">\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label >department</label>\n        <select class=\"form-control\"  name=\"department.id\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n1、部门对象问题？\n\n```html\n<select class=\"form-control\"  name=\"department.id\">\n```\n\n2、日期格式化？\n\n属性中添加 date-formate 默认是 / \n\n```java\n@Bean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")\npublic Formatter<Date> dateFormatter() {\n   return new DateFormatter(this.mvcProperties.getDateFormat());\n}\n\n@Override\npublic MessageCodesResolver getMessageCodesResolver() {\n   if (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n      DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n      resolver.setMessageCodeFormatter(\n            this.mvcProperties.getMessageCodesResolverFormat());\n      return resolver;\n   }\n   return null;\n}\n```\n\n```properties\nspring.mvc.date-format=yyyy-MM-dd\n```\n\n### 8、员工编辑（改）\n\n思路使用add页面，并且数据回显，然后区分添加，PUT请求\n\n#### 1、修改按钮\n\n在list.html的`编辑`按钮加上链接\n\n```html\n<td>\n    <a  href=\"#\" th:href=\"@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-primary\">编辑</a>\n    <button class=\"btn btn-sm btn-danger\">删除</button>\n</td>\n```\n\n#### 2、编写跳转页面\n\n跳转到员工编辑页面的Controller\n\n```java\n/**\n * 员工编辑页面\n */\n@GetMapping(value = \"/emp/{id}\")\npublic String toEditPage(@PathVariable(\"id\") Integer id ,Model model){\n    Employee emp = employeeDao.getEmpById(id);\n    Collection<Department> departments = departmentDao.getDepartments();\n    model.addAttribute(\"emp\",emp);\n    model.addAttribute(\"depts\",departments);\n    return \"emp/add\";\n}\n   \n```\n\n#### 3、对页面修改\n\n对add页面进行修改\n\n1）、添加回显\n\n2）、添加判断是否emp!=null（区分add or edit）\n\n3）、添加put请求 --两个input的hidden标签\n\n```html\n <form th:action=\"@{/emp}\" method=\"post\">\n        <!--发送put请求-->\n        <!--1.SpringMVC配置HiddenHttpMethodFilter\n            2.页面创建一个post表单\n            3.创建一个 input name_method 值就是我们请求的方式-->\n        <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\">\n\n        <input type=\"hidden\" name=\"id\" th:value=\"${emp.id}\" th:if=\"${emp!=null}\">\n        <!-- LastName -->\n        <div class=\"form-group\">\n            <label for=\"LastName\">LastName</label>\n            <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\" th:value=\"${emp!=null}?${emp.lastName}\">\n        </div>\n        <!-- Email -->\n        <div class=\"form-group\">\n            <label for=\"Email\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\" th:value=\"${emp!=null}?${emp.email}\">\n        </div>\n        <!--gender-->\n        <div class=\"form-group\">\n            <label >Gender</label><br/>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender}==1\">\n                <label class=\"form-check-label\" >男</label>\n            </div>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender}==0\">\n                <label class=\"form-check-label\" >女</label>\n            </div>\n        </div>\n        <!-- department -->\n        <div class=\"form-group\">\n            <label >department</label>\n            <select class=\"form-control\"  name=\"department.id\" >\n                <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"birthDate\">Birth</label>\n            <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\" th:value=\"${emp!=null}?${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?'修改':'添加'\">添 加</button>\n    </form>\n</main>\n```\n### 9、员工删除（删）\n\n#### 1、新建Contoller\n\n```java\n/**\n * 员工删除\n */\n@DeleteMapping(value = \"/emp/{id}\")\npublic String deleteEmp(@PathVariable(\"id\") Integer id){\n    employeeDao.deleteEmpById(id);\n    return \"redirect:/emps\";\n}\n```\n\n#### 2、修改删除标签\n\n```html\n<button th:attr=\"del_uri=@{/emp/}+${emp.id}\"  class=\"btn btn-sm btn-danger deleteBtn\">\n    删除\n</button>\n```\n\n#### 3、写Form表单\n\nform表单卸载外面，input 中 name=\"_method\" value=\"delete\" 模拟delete请求\n\n```html\n                </tbody>\n            </table>\n        </div>\n    </main>\n    <form id=\"deleteEmpForm\" method=\"post\">\n        <input type=\"hidden\" name=\"_method\" value=\"delete\">\n    </form>\n</div>\n```\n\n#### 4、写JS提交\n\n```javascript\n<script>\n    $(\".deleteBtn\").click(function () {\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\n        return false;\n    })\n</script>\n```\n\n> return false;禁用btn提交效果\n\n## 7、错误机制的处理\n\n### 1、默认的错误处理机制\n\n默认错误页面\n\n![20.error](E:\\工作文档\\SpringBoot\\images\\20.error.jpg)\n\n原理参照\n\nErrorMvcAutoConfiguration:错误处理的自动配置\n\n```\norg\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class\n\n```\n\n- DefaultErrorAttributes\n\n  帮我们在页面共享信息\n\n  ```java\n  @Override\n  public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n        boolean includeStackTrace) {\n     Map<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\n     errorAttributes.put(\"timestamp\", new Date());\n     addStatus(errorAttributes, requestAttributes);\n     addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n     addPath(errorAttributes, requestAttributes);\n     return errorAttributes;\n  }\n  ```\n\n- BasicErrorController\n\n  ```java\n  @Controller\n  @RequestMapping(\"${server.error.path:${error.path:/error}}\")\n  public class BasicErrorController extends AbstractErrorController {\n      //产生HTML数据\n      @RequestMapping(produces = \"text/html\")\n  \tpublic ModelAndView errorHtml(HttpServletRequest request,\n  \t\t\tHttpServletResponse response) {\n  \t\tHttpStatus status = getStatus(request);\n  \t\tMap<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\n  \t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n  \t\tresponse.setStatus(status.value());\n  \t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n  \t\treturn (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\n  \t}\n  \t//产生Json数据\n  \t@RequestMapping\n  \t@ResponseBody\n  \tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n  \t\tMap<String, Object> body = getErrorAttributes(request,\n  \t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n  \t\tHttpStatus status = getStatus(request);\n  \t\treturn new ResponseEntity<Map<String, Object>>(body, status);\n  \t}\n  ```\n\n- ErrorPageCustomizer\n\n  ```java\n  @Value(\"${error.path:/error}\")\n  private String path = \"/error\";//系统出现错误以后来到error请求进行处理，(web.xml)\n  ```\n\n- DefaultErrorViewResolver\n\n  ```java\n  @Override\n  public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n        Map<String, Object> model) {\n     ModelAndView modelAndView = resolve(String.valueOf(status), model);\n     if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n     }\n     return modelAndView;\n  }\n  \n  private ModelAndView resolve(String viewName, Map<String, Object> model) {\n      //默认SpringBoot可以找到一个页面？error/状态码\n     String errorViewName = \"error/\" + viewName;\n      //如果模板引擎可以解析地址，就返回模板引擎解析\n     TemplateAvailabilityProvider provider = this.templateAvailabilityProviders\n           .getProvider(errorViewName, this.applicationContext);\n     if (provider != null) {\n         //有模板引擎就返回到errorViewName指定的视图地址\n        return new ModelAndView(errorViewName, model);\n     }\n      //自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html\n     return resolveResource(errorViewName, model);\n  }\n  ```\n\n一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller\n\n1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图\n\n```java\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n      if (modelAndView != null) {\n         return modelAndView;\n      }\n   }\n   return null;\n}\n```\n\nl浏览器发送请求 accpt:text/html\n\n客户端请求：accept:/*\n\n### 2、如何定制错误响应\n\n​\t1）、如何定制错误的页面\n\n​\t\t1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html\n\n​\t\t有精确的404和4xx优先选择404\n\n​\t\t页面获得的数据\n\n​\t\t\ttimestamp：时间戳\n\n​\t\t\tstatus：状态码\n\n​\t\t\terror：错误提示\n\n​\t\t\texception：异常对象\n\n​\t\t\tmessage：异常信息\n\n​\t\t\terrors:JSR303有关\n\n​\t\t2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值\n\n​\t\t3.没有放模板引擎，没放静态，会显示默认的错误\n\n​\t2）、如何定义错误的数据\n\n\n\n举例子：新建4xx和5xx文件\n\n![21.error-static](E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg)\n\n\n\n```html\n<body >\n    <p>status: [[${status}]]</p>\n    <p>timestamp: [[${timestamp}]]</p>\n    <p>error: [[${error}]]</p>\n    <p>message: [[${message}]]</p>\n    <p>exception: [[${exception}]]</p>\n</body>\n```\n\n![22.4xxhtml](E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg)\n\n### 3、如何定制Json数据\n\n#### 1、仅发送json数据\n\n```java\npublic class UserNotExitsException extends  RuntimeException {\n    public UserNotExitsException(){\n        super(\"用户不存在\");\n    }\n}\n```\n\n```java\n/**\n * 异常处理器\n */\n@ControllerAdvice\npublic class MyExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExitsException.class)\n    public Map<String ,Object> handlerException(Exception e){\n        Map<String ,Object> map =new HashMap<>();\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        return map;\n    }\n}\n```\n\n无法自适应 都是返回的json数据\n\n#### 2、转发到error自适应处理\n\n```java\n@ExceptionHandler(UserNotExitsException.class)\npublic String handlerException(Exception e, HttpServletRequest request){\n    Map<String ,Object> map =new HashMap<>();\n    //传入自己的状态码\n    request.setAttribute(\"javax.servlet.error.status_code\", 432);\n    map.put(\"code\", \"user not exist\");\n    map.put(\"message\", e.getMessage());\n    //转发到error\n    return \"forward:/error\";\n}\n```\n\n程序默认获取状态码\n\n```java\nprotected HttpStatus getStatus(HttpServletRequest request) {\n   Integer statusCode = (Integer) request\n         .getAttribute(\"javax.servlet.error.status_code\");\n   if (statusCode == null) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n   try {\n      return HttpStatus.valueOf(statusCode);\n   }\n   catch (Exception ex) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n```\n\n没有自己写的自定义异常数据\n\n#### 3、自适应和定制数据传入\n\nSpring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；\n\n1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；\n\n2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\n\n容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理\n\n```java\npublic class MyErrorAttributes extends DefaultErrorAttributes {\n    @Override\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(\"company\", \"wdjr\");\n        return map;\n    }\n}\n```\n\n异常处理：把map方法请求域中\n\n```java\n    @ExceptionHandler(UserNotExitsException.class)\n    public String handlerException(Exception e, HttpServletRequest request){\n        Map<String ,Object> map =new HashMap<>();\n        //传入自己的状态码\n        request.setAttribute(\"javax.servlet.error.status_code\", 432);\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        request.setAttribute(\"ext\", map);\n        //转发到error\n        return \"forward:/error\";\n    }\n}\n```\n\n在上面的MyErrorAttributes类中加上\n\n```java\n//我们的异常处理器\nMap<String,Object> ext = (Map<String, Object>) requestAttributes.getAttribute(\"ext\", 0);\nmap.put(\"ext\", ext);\n```\n\n## 8、配置嵌入式servlet容器\n\n### 1、定制和修改Servlet容器\n\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\n\n![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)\n\n问题？\n\n1）、如何定制和修改Servlet容器；\n\n1、 修改Server相关的配置文件 application.properties\n\n```properties\n#通用的servlet容器配置\nserver.xxx\n#tomcat的配置\nserver.tomcat.xxxx\n```\n\n2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置\n\n```java\n@Bean\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\n    return new EmbeddedServletContainerCustomizer() {\n        //定制嵌入式Servlet的容器相关规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.setPort(8999);\n        }\n    };\n}\n```\n\n其实同理，都是实现EmbeddedServletContainerCustomizer\n\n### 2、注册Servlet三大组件\n\n三大组件 Servlet Filter Listener\n\n由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml\n\n注册三大组件\n\n#### ServletRegistrationBean\n\n```java\n@Bean\npublic ServletRegistrationBean myServlet(){\n    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new MyServlet(),\"/servlet\");\n    return servletRegistrationBean;\n}\n```\n\nMyServlet\n\n```java\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().write(\"Hello Servlet\");\n    }\n}\n```\n\n#### FilterRegistrationBean\n\n```java\n@Bean\npublic FilterRegistrationBean myFilter(){\n    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n    filterRegistrationBean.setFilter(new MyFilter());\n    filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\n    return filterRegistrationBean;\n}\n```\n\nMyFilter\n\n```java\npublic class MyFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"MyFilter process\");\n        chain.doFilter(request, response);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n#### ServletListenerRegistrationBean\n\n```java\n@Bean\npublic ServletListenerRegistrationBean myListener(){\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\n    return registrationBean;\n}\n```\n\nMyListener\n\n```java\npublic class MyListener implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\".........web应用启动..........\");\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        System.out.println(\".........web应用销毁..........\");\n    }\n}\n```\n\n\n\nSpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;\n\n```java\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n   public ServletRegistrationBean dispatcherServletRegistration(\n         DispatcherServlet dispatcherServlet) {\n      ServletRegistrationBean registration = new ServletRegistrationBean(\n            dispatcherServlet, this.serverProperties.getServletMapping());\n       //默认拦截 /所有请求 包括静态资源 不包括jsp\n       //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n      registration.setLoadOnStartup(\n            this.webMvcProperties.getServlet().getLoadOnStartup());\n      if (this.multipartConfig != null) {\n         registration.setMultipartConfig(this.multipartConfig);\n      }\n      return registration;\n   }\n\n}\n```\n\n### 3、切换其他的Servlet容器\n\n在ServerProperties中\n\n```java\nprivate final Tomcat tomcat = new Tomcat();\n\nprivate final Jetty jetty = new Jetty();\n\nprivate final Undertow undertow = new Undertow();\n```\n\ntomcat(默认支持)\n\njetty（长连接）\n\nundertow（多并发）\n\n切换容器 仅仅需要修改pom文件的依赖就可以\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jetty</artifactId>\n        </dependency>\n<!--        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-undertow</artifactId>\n        </dependency>-->\n```\n\n### 4、嵌入式Servlet容器自动配置原理\n\n```java\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration {\n    @Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })//当前是否引入tomcat依赖\n    //判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n```\n\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\n\n```java\npublic interface EmbeddedServletContainerFactory {\n\t//获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n}\n```\n\n继承关系\n\n![24.EmdServletFactory](E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg)\n\n2）、EmbeddedServletContainer:(嵌入式的Servlet容器)\n\n![25.EmdServletContainer](E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg)\n\n3）、TomcatEmbeddedServletContainerFactory为例 \n\n```java\n@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) {\n   Tomcat tomcat = new Tomcat();\n    //配置tomcat的基本环节\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\n         : createTempDir(\"tomcat\"));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n    //将配置好的tomcat传入进去；并且启动tomcat容器\n   return getTomcatEmbeddedServletContainer(tomcat);\n}\n```\n\n4）、嵌入式配置修改\n\n```\nServerProperties、EmbeddedServletContainerCustomizer\n```\n\nEmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？\n\n怎么修改？\n\n\n\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\n\n```java\n@Override\npublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n      BeanDefinitionRegistry registry) {\n   if (this.beanFactory == null) {\n      return;\n   }\n   registerSyntheticBeanIfMissing(registry,\n         \"embeddedServletContainerCustomizerBeanPostProcessor\",\n         EmbeddedServletContainerCustomizerBeanPostProcessor.class);\n   registerSyntheticBeanIfMissing(registry,\n         \"errorPageRegistrarBeanPostProcessor\",\n         ErrorPageRegistrarBeanPostProcessor.class);\n}\n```\n\n```java\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException {\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   }\n   return bean;\n}\n\nprivate void postProcessBeforeInitialization(\n    ConfigurableEmbeddedServletContainer bean) {\n    //获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\n        customizer.customize(bean);\n    }\n}\n\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n    if (this.customizers == null) {\n        // Look up does not include the parent context\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n            this.beanFactory\n            //从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer\n            //定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers = Collections.unmodifiableList(this.customizers);\n    }\n    return this.customizers;\n}\n```\n\nServerProperties也是EmbeddedServletContainerCustomizer定制器\n\n步骤：\n\n1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat\n\nEmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\n\n2）、容器中某个组件要创建对象就要通过后置处理器；\n\n```java\nEmbeddedServletContainerCustomizerBeanPostProcessor\n```\n\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\n\n3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法\n\n### 5、嵌入式Servlet容器启动原理\n\n什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;\n\n获取嵌入式的容器工厂\n\n1）、SpringBoot应用启动Run方法\n\n2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext\n\n```JAVA\nif (contextClass == null) {\n   try {\n      contextClass = Class.forName(this.webEnvironment\n            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);\n   }\n```\n\n3）、refresh(context);刷新创建好的IOC容器\n\n```java\ntry {\n   // Allows post-processing of the bean factory in context subclasses.\n   postProcessBeanFactory(beanFactory);\n\n   // Invoke factory processors registered as beans in the context.\n   invokeBeanFactoryPostProcessors(beanFactory);\n\n   // Register bean processors that intercept bean creation.\n   registerBeanPostProcessors(beanFactory);\n\n   // Initialize message source for this context.\n   initMessageSource();\n\n   // Initialize event multicaster for this context.\n   initApplicationEventMulticaster();\n\n   // Initialize other special beans in specific context subclasses.\n   onRefresh();\n\n   // Check for listener beans and register them.\n   registerListeners();\n\n   // Instantiate all remaining (non-lazy-init) singletons.\n   finishBeanFactoryInitialization(beanFactory);\n\n   // Last step: publish corresponding event.\n   finishRefresh();\n}\n```\n\n4）、 onRefresh();web的ioc容器重写了onRefresh方法\n\n5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer\n\n6）、获取嵌入式的Servlet容器工厂；\n\n```java\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\n```\n\n从ioc容器中获取EmbeddedServletContainerFactory组件；\n\n```java\n@Bean\npublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\nreturn new TomcatEmbeddedServletContainerFactory();\n}\n```\nTomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；\n\n7）、使用容器工厂获取嵌入式的Servlet容器\n\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\n\n先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来\n\nioc启动创建Servlet容器\n\n## 9、使用外置的Servlet容器\n\n嵌入式的Servlet容器：应用达成jar包\n\n​\t优点：简单、便携\n\n​\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）\n\n外置的Servlet容器：外面安装Tomcat是以war包的方式打包。\n\n### 1、IDEA操作外部Servlet\n\n1、创建程序为war程序\n\n![26.tomcat1](E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg)\n\n2、选择版本\n\n![27.tomcat2](E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg)\n\n3、添加tomcat\n\n![28.tomcat3](E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg)\n\n4、选择tomcat\n\n![30.tomcat4](E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg)\n\n5、选择本地的Tomcat\n\n![31.tomcat5](E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg)\n\n6、配置tomcat路径\n\n![32.tomcat6](E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg)\n\n7、添加服务器\n\n![33.tomcat7](E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg)\n\n8、添加exploded的war配置，应用OK tomcat配置完成\n\n![34.tomcat8](E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg)\n\n二、配置webapp文件夹\n\n1、点击配置\n\n![35.tomcat9](E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg)\n\n2、添加webapp目录\n\n![36.tomcat10](E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg)\n\n3、默认配置就可以\n\n![37.tomcat11](E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg)\n\n4、配置web.xml文件\n\n![38.tomcat12](E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg)\n\n5、文档目录结构\n\n![39.tomcat13](E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg)\n\n### 2、运行一个示例\n\n1、项目目录\n\n![40.demo1](E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg)\n\n2、配置文件写视图解析前后缀\n\n```properties\nspring.mvc.view.prefix=/WEB-INF/jsp/\n\nspring.mvc.view.suffix=.jsp\n```\n\n3、HelloController\n\n```java\n@Controller\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        model.addAttribute(\"message\",\"这是Controller传过来的message\");\n        return \"success\";\n    }\n}\n```\n\n4、success.jsp\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Success</title>\n</head>\n<body>\n<h1>Success</h1>\nmessage:${message}\n</body>\n</html>\n```\n\n5、运行结果\n\n![41.demo2](E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg)\n\n步骤\n\n1、必须创建一个war项目；\n\n2、将嵌入式的Tomcat指定为provided\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\n3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法\n\n```java\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        //传入SpringBoot的主程序，\n        return application.sources(SpringBoot04WebJspApplication.class);\n    }\n\n}\n```\n\n4、启动服务器就可以；\n\n### 3、原理\n\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；\n\nwar包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器\n\nservlet3.0规范\n\n 8.2.4 共享库和运行时插件\n\n规则：\n\n1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例\n\n2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名\n\n3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类\n\n\n\n流程：\n\n1、启动Tomcat服务器\n\n2、spring web模块里有这个文件\n\n![42.servletContainerInit](E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg)\n\n```java\norg.springframework.web.SpringServletContainerInitializer\n```\n\n3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set<Class<?>>;为这些感兴趣类创建实例\n\n4、每个创建好的WebApplicationInitializer调用自己的onStratup\n\n5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\n\n6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext\n\n```java\nprotected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {\n    SpringApplicationBuilder builder = this.createSpringApplicationBuilder();\n    //环境构建器\n    StandardServletEnvironment environment = new StandardServletEnvironment();\n    environment.initPropertySources(servletContext, (ServletConfig)null);\n    builder.environment(environment);\n    builder.main(this.getClass());\n    ApplicationContext parent = this.getExistingRootWebApplicationContext(servletContext);\n    if (parent != null) {\n        this.logger.info(\"Root context already created (using as parent).\");\n        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)null);\n        builder.initializers(new ApplicationContextInitializer[]{new ParentContextApplicationContextInitializer(parent)});\n    }\n\t\n    builder.initializers(new ApplicationContextInitializer[]{new ServletContextApplicationContextInitializer(servletContext)});\n    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    //调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来\n    builder = this.configure(builder);\n    //创建一个spring应用\n    SpringApplication application = builder.build();\n    if (application.getSources().isEmpty() && AnnotationUtils.findAnnotation(this.getClass(), Configuration.class) != null) {\n        application.getSources().add(this.getClass());\n    }\n\n    Assert.state(!application.getSources().isEmpty(), \"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation\");\n    if (this.registerErrorPageFilter) {\n        application.getSources().add(ErrorPageFilterConfiguration.class);\n    }\n\t//最后启动Spring容器\n    return this.run(application);\n}\n```\n\n7、Spring的应用就启动完了并且创建IOC容器；\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   listeners.starting();\n   try {\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner = printBanner(environment);\n      context = createApplicationContext();\n      analyzers = new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n# 五、Docker\n\n## 1、简介\n\nDocker是一个开源的应用容器引擎\n\n将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；\n\n## 2、Docker的核心概念\n\ndocker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）\n\ndocker客户端（Client）:操作docker主机\n\ndocker仓库（Registry）：用来保存打包好的软件镜像\n\ndocker镜像（Image）:软件打好包的镜像，放到docker的仓库中\n\ndocker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）\n\ndocker的步骤：\n\n​\t1、安装Docker\n\n​\t2、去Docker仓库找到这个软件对应的镜像；\n\n​\t3、使用Docker运行的这个镜像，镜像就会生成一个容器\n\n​\t4、对容器的启动停止，就是对软件的启动和停止\n\n## 3、安装Docker\n\n### 1、安装Linux\n\n[安装vxbox并且安装ubuntu](http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1)\n\n### 2、在linux上安装docker\n\n```shell\n1、查看centos版本\n# uname -r\n3.10.0-693.el7.x86_64\n要求：大于3.10\n如果小于的话升级*（选做）\n# yum update\n2、安装docker\n# yum install docker\n3、启动docker\n# systemctl start docker\n# docker -v\n4、开机启动docker\n# systemctl enable docker\n5、停止docker\n# systemctl stop docker\n```\n\n## 4、docker的常用操作\n\n### 1、镜像操作\n\n1、搜索\n\n```shell\ndocker search mysql\n```\n\n默认去docker hub网站查找![44.docker1](E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg)\n\n2、拉取\n\n```shell\n默认最新版本\n# docekr pull mysql\n安装指定版本\n# docker pull mysql:5.5\n```\n\n3、查看\n\n```shell\ndocker images\n```\n\n4、删除\n\n```\ndocker rmi imageid\n```\n\n### 2、容器操作\n\n软件的镜像（qq.exe） -- 运行镜像 -- 产生一个容器（正在运行的软件）\n\n```shell\n1、搜索镜像\n# docker search tomcat\n2、拉取镜像\n# docker pull tomcat\n3、根据镜像启动容器\n[root@lion ~]# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB\n[root@lion ~]# docker run --name mytomcat -d tomcat:latest\n2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249\n4、查看那个进程正在进行\n[root@lion ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat\n5、停止运行中容器\n[root@lion ~]# docker stop 2f0348702f5f\n2f0348702f5f\n6、查看所有容器\n[root@lion ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat\n7、启动容器\n[root@lion ~]# docker start 2f0348702f5f\n8、删除docker容器\n[root@lion ~]# docker rm 2f0348702f5f\n2f0348702f5f\n9、端口映射\n[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat\n692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29\n虚拟机:8888\n容器的:8080\n-d:后台运行\n-p:主机端口映射到容器端口\n浏览器：192.168.179.129:8888\n10、docker的日志\n[root@lion ~]# docker logs 692c408c2201\n11、多个启动\n[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat\n浏览器：192.168.179.129:9000\n```\n\n更多命令参考docker镜像文档\n\n### 3、安装Mysql\n\n```shell\ndocker pull mysql\ndocker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql\n```\n\n# 六、数据访问\n\n## 1、整合JDBC数据源\n\n1、新建项目 spring-boot-06-data-jdbc\n\n- WEB\n- Mysql\n- JDBC\n- SpringBoot1.5\n\n2、编写配置文件appliction.yml\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n3、编写测试类测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBoot06DataJdbcApplicationTests {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Test\n    public void contextLoads() throws SQLException {\n        System.out.println(dataSource.getClass());\n\n        Connection connection = dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }\n\n}\n```\n\n4、测试结果\n\n```\nclass org.apache.tomcat.jdbc.pool.DataSource\nProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]\n```\n\n数据源相关配置都在DataSourceProperties属性里\n\n自动配置原理\n\nE:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc\n\n### 1、DataSource\n\n参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源\n\n### 2、SpringBoot默认支持\n\n```\nTomcat数据源\nHikariDataSource\ndbcp.BasicDataSource\ndbcp2.BasicDataSource\n```\n\n### 3、自定义数据源\n\n```java\n */\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name = \"spring.datasource.type\")\nstatic class Generic {\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) {\n       //使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源\n      return properties.initializeDataSourceBuilder().build();\n   }\n\n}\n```\n\n### 4、运行sql建表\n\n在DataSourceAutoConfiguration中**DataSourceInitializer**类\n\n监听器\n\n作用：\n\n1）、postConstruct -》runSchemaScript 运行建表sql文件\n\n2）、runDataScript运行插入数据的sql语句；\n\n默认只需要将文件命名为：\n\n```sql\nschema-*.sql data-*.sql\n默认规则：schema.sql ,schema-all.sql;\n```\n\n**举个栗子**\n\n创建department表\n\n1、department.sql\n\n```sql\n/*\nNavicat MySQL Data Transfer\n\nSource Server         : 192.168.179.131\nSource Server Version : 50719\nSource Host           : 192.168.179.131:3306\nSource Database       : jdbc\n\nTarget Server Type    : MYSQL\nTarget Server Version : 50719\nFile Encoding         : 65001\n\nDate: 2018-05-14 14:28:52\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- Table structure for department\n-- ----------------------------\nDROP TABLE IF EXISTS `department`;\nCREATE TABLE `department` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `departmentName` varchar(255) DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```\n\n2、将department.sql命名为schema-all.sql\n\n![45.schema-all](E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg)\n\n3、运行测试类\n\n自定义sql的文件名，department.sql在配置文件中\n\n```yaml\nschema:\n  - classpath:department.sql\n```\n\n-----\n\n### 5、操作JdbcTemplate\n\n**FBI warning**:将department.sql删除或者改名，因为运行文件会将表中数据清除\n\n1、新建一个Controller\n\n```java\n@Controller\npublic class HelloController {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @ResponseBody\n    @GetMapping(\"/hello\")\n    public Map<String ,Object> hello(){\n\n        List<Map<String, Object>> list = jdbcTemplate.queryForList(\"select * from department\");\n        return list.get(0);\n    }\n}\n```\n\n2、表中添加数据\n\n![46.department](E:\\工作文档\\SpringBoot\\images\\46.department.jpg)\n\n\n\n3、访问请求查询数据\n\n![47.hello](E:\\工作文档\\SpringBoot\\images\\47.hello.jpg)\n\n\n\n## 2、自定义数据源\n\n1、导入Druid的依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n\n```\n\n2、修改配置文件\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n已经替换了原来的tomcat数据源\n\n3、配置Druid数据源配置\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\t# 初始化大小，最小，最大  \n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    # 配置获取连接等待超时的时间  \n    maxWait: 60000\n    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 \n    timeBetweenEvictionRunsMillis: 60000\n    # 配置一个连接在池中最小生存的时间，单位是毫秒 \n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    # 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    userGlobalDataSourceStat: true\n    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录  \n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n4、Druid配置监控\n\n```java\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n        return  new DruidDataSource();\n    }\n\n    //配置Druid的监控\n    //1、配置一个管理后台\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(),\"/druid/*\");\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"loginUsername\", \"admin\");\n        initParams.put(\"loginPassword\", \"123456\");\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n    //2、配置监控的filter\n    @Bean\n    public FilterRegistrationBean webstatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"exclusions\", \"*.js,*.css,/druid/*\");\n        bean.setInitParameters(initParams);\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n        return bean;\n    }\n\n}\n```\n\n5、运行测试，访问 localhost:9000/druid\n\n![48.druid](E:\\工作文档\\SpringBoot\\images\\48.druid.jpg)\n\n输入刚才调好的用户名密码即可访问\n\n## 3、整合Mybatis\n\n1、新建工程，SpringBoot1.5+web+JDBC+Mysql\n\n导入依赖\n\n```xml\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.2</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n\n2、导入配置文件中关于Druid的配置\n\n​\t2.1、导入依赖\n\n​\t2.2、配置文件application.yml（指定用户名密码...配置Druid的配置参数，修改sql文件加载的默认名）\n\n​\t2.3、将Druid组件加入到容器中（监控）重点\n\n​\t具体同上\n\n3、创建数据表department和employee表\n\n​\t3.1、根据sql文件，新建两张表\n\n​\t3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）\n\n```yaml\nspring:\n  datasource:\n    schema:\n      - classpath:sql/department.sql\n      - classpath:sql/employeee.sql\n```\n\n​\t3.3、运行程序检查数据库是否创建成功\n\n4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） \n\n在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类\n\n```yaml\nmybatis:\n  configuration:\n    map-underscore-to-camel-case: true\n```\n\n```java\n//类名冲突所以全类名\n@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig {\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer(){\n\n        return new ConfigurationCustomizer() {\n            @Override\n            public void customize(Configuration configuration) {\n                configuration.setMapUnderscoreToCamelCase(true);\n            }\n        };\n    }\n}\n```\n\n### 注解方式\n\n5、新建mapper\n\n```yaml\n//指定是一个mapper\n@Mapper\npublic interface DepartmentMapper {\n\n    @Insert(\"insert into department(dept_name) value(#{deptName})\")\n    public int insertDept(Department department);\n\n    @Delete(\"delete from department where id=#{id}\")\n    public int deleteDeptById(Integer id);\n\n    @Update(\"update department set dept_Name=#{deptName} where id=#{id}\")\n    public int updateDept(Department department);\n\n    @Select(\"select * from department where id=#{id}\")\n    public Department getDeptById(Integer id);\n\n}\n```\n\n6、编写controller测试\n\n```java\n@RestController\npublic class DeptController {\n\n    @Autowired\n    DepartmentMapper departmentMapper;\n\n    @RequestMapping(\"/getDept/{id}\")\n    public Department getDepartment(@PathVariable(\"id\") Integer id){\n        return departmentMapper.getDeptById(id);\n    }\n\n    @RequestMapping(\"/delDept/{id}\")\n    public int delDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.deleteDeptById(id);\n    }\n\n    @RequestMapping(\"/update/{id}\")\n    public int updateDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.updateDept(new Department(id, \"开发部\"));\n    }\n\n    @GetMapping(\"/insert\")\n    public int insertDept(Department department){\n        return departmentMapper.insertDept(department);\n    }\n}\n```\n\n问题：\n\nmapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文\n\n件夹下的mapper\n\n```java\n//主配置类或者mybatis配置类\n@MapperScan(value = \"com.wdjr.springboot.mapper\")\n```\n\n### 配置文件方式\n\n1、新建文件\n\n![50.mybatisxml](E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg)\n\n2、新建mybatis的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n\n3、新建Employee的接口方法\n\n```java\npublic interface EmployeeMapper {\n\n    public Employee getEmpById(Integer id);\n\n    public void insetEmp(Employee employee);\n}\n```\n\n4、新建Employee的mapper.xml的映射文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.wdjr.springboot.mapper.EmployeeMapper\">\n    <select id=\"getEmpById\" resultType=\"com.wdjr.springboot.bean.Employee\">\n      select * from employee where id=#{id}\n   </select>\n\n    <insert id=\"insetEmp\">\n        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})\n    </insert>\n</mapper>\n```\n\n5、修改application.yml配置文件\n\n```yaml\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml\n  mapper-locations: classpath:mybatis/mapper/*.xml\n```\n\n6、新建一个Controller访问方法\n\n```java\n@RestController\npublic class EmployeeController {\n    @Autowired\n    EmployeeMapper employeeMapper;\n\n    @RequestMapping(\"/getEmp/{id}\")\n    public Employee getEmp(@PathVariable(\"id\") Integer id){\n        return employeeMapper.getEmpById(id);\n    }\n\n    @GetMapping(\"/insertEmp\")\n    public Employee insertEmp(Employee employee){\n        employeeMapper.insetEmp(employee);\n        return employee;\n    }\n}\n```\n## 4、JPA数据访问\n\n新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC\n\n目录结构\n\n![51.JPA](E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg)\n\n\n\n1、新建一个实体类User\n\n```java\n//使用JPA注解配置映射关系\n@Entity//告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name=\"tbl_user\") //@Table来指定和那个数据表对应，如果省略默认表明就是user;\n\npublic class User {\n\n    @Id //这是一个主键\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增组件\n    private Integer id ;\n\n    @Column(name=\"last_name\",length = 50) //这是和数据表对应的一个列\n    private String lastName;\n    @Column//省略默认列名就是属性名\n    private String email;\n    @Column\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n2、新建一个UserRepository来继承jpa的绝大多数功能\n\n```java\n//继承jpaRepository\npublic interface UserRepository extends JpaRepository<User,Integer> {\n\n}\n```\n\n3、编写配置文件application.yml\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://192.168.179.131/jpa\n    username: root\n    password: Welcome_1\n    driver-class-name: com.mysql.jdbc.Driver\n  jpa:\n    hibernate:\n    #更新或创建\n      ddl-auto: update\n    show-sql: true\n```\n\n4、编写Controller测试\n\n```java\n@RestController\npublic class UserController {\n    @Autowired\n    UserRepository userRepository;\n\n    @GetMapping(\"/user/{id}\")\n    public User getUser(@PathVariable(\"id\") Integer id){\n        User user = userRepository.findOne(id);\n        return user;\n    }\n\n    @GetMapping(\"/insert\")\n    public User insertUser(User user){\n        User user1 = userRepository.save(user);\n        return  user1;\n    }\n}\n```\n\n# 七、启动配置原理\n\n几个重要的事件回调机制\n\n加载配置文件META-INF/spring.factories\n\n​\tApplicationContextInitializer\n\n​\tSpringApplicationRunListener\n\nioc容器中\n\n​\tApplicationRunner\n\n​\tCommandLineRunner\n\n启动流程\n\n## 1、创建SpringApplicaiotn对象   \n\n```java\nprivate void initialize(Object[] sources) {\n    //保存主配置类\n   if (sources != null && sources.length > 0) {\n      this.sources.addAll(Arrays.asList(sources));\n   }\n    //判断当前是否是个web应用\n   this.webEnvironment = deduceWebEnvironment();\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来\n   setInitializers((Collection) getSpringFactoriesInstances(\n         ApplicationContextInitializer.class));\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来\n   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    //决定哪一个是主程序\n   this.mainApplicationClass = deduceMainApplicationClass();\n}\n```\n\nApplicationInitializer\n\n![52.applicationCotextInitializer](E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg)\n\n ApplicationListener\n\n![53.Listener](E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg)\n\n## 2、运行Run方法\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n    //获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n    //回调所有的SpringApplicationRunListener.starting()方法\n   listeners.starting();\n   try {\n       //封装命令行参数\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n       //准备环境\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n       //创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成\n       //打印SpringBoot图标\n      Banner printedBanner = printBanner(environment);\n       //创建ApplicationContext，决定创建web的ioc容器还是普通的ioc\n      context = createApplicationContext();\n       //异常分析\n      analyzers = new FailureAnalyzers(context);\n       //重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法\n       \n       //回调所有的SpringApplicationRunListener的contextPrepare()\n       //告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       //重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat\n       //扫描 创建加载所有组件的地方\n      refreshContext(context);\n       //从ioc中获取所有的ApplicationRunner和CommandLineRunner\n       //ApplicationRunner先回调\n      afterRefresh(context, applicationArguments);\n       //所有的SpringApplicationRunListener回调finished方法\n      listeners.finished(context, null);\n       //保存应用状态\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n       //整个springboot启动完成以后返回启动的ioc容器\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n## 3、事件监听机制\n\n新建listener监听\n\n文件目录\n\n![54.listener2](E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg)\n\n\n\n1、HelloApplicationContextInitializer\n\n```java\n//泛型监听ioc容器\npublic class HelloApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        System.out.println(\"ApplicationContextInitializer...跑起来了.....\"+applicationContext);\n    }\n}\n```\n\n2、HelloSpringApplicationRunListener\n\n加构造器\n\n```java\npublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener {\n\n    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){\n\n    }\n\n    @Override\n    public void starting() {\n        System.out.println(\"监听容器开始......\");\n    }\n\n    @Override\n    public void environmentPrepared(ConfigurableEnvironment environment) {\n        System.out.println(\"环境准备好了......\"+environment.getSystemProperties().get(\"os.name\"));\n    }\n\n    @Override\n    public void contextPrepared(ConfigurableApplicationContext context) {\n        System.out.println(\"ioc容器准备好了......\");\n    }\n\n    @Override\n    public void contextLoaded(ConfigurableApplicationContext context) {\n        System.out.println(\"容器环境已经加载完成......\");\n    }\n\n    @Override\n    public void finished(ConfigurableApplicationContext context, Throwable exception) {\n        System.out.println(\"全部加载完成......\");\n    }\n}\n```\n\n3、HelloApplicationRunner\n\n```java\n@Component\npublic class HelloApplicationRunner implements ApplicationRunner {\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        System.out.println(\"ApplicationRunner.....run....\");\n    }\n}\n```\n\n4、HelloCommandLineRunner\n\n```java\n@Component\npublic class HelloCommandLineRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"CommandLineRunner......run.....\"+Arrays.asList(args));\n    }\n}\n```\n\n事件运行方法\n\nHelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入\n\n```\n# Initializers\norg.springframework.context.ApplicationContextInitializer=\\\ncom.wdjr.springboot.listener.HelloApplicationContextInitializer\n\norg.springframework.boot.SpringApplicationRunListener=\\\ncom.wdjr.springboot.listener.HelloSpringApplicationRunListener\n```\n\nHelloApplicationRunner和HelloCommandLineRunner ioc加入\n\n@Component\n\n# 八、SpringBoot的自定义starter\n\nstarter：场景启动器\n\n1、场景需要使用什么依赖？\n\n2、如何编写自动配置\n\n```java\n@Configuration //指定这个类是一个配置类\n@ConditionalOnXXX //在指定条件下成立的情况下自动配置类生效\n@AutoConfigureAfter //指定自动配置类的顺序\n@Bean //给容器中添加组件\n\n@ConfigurationProperties //结合相关xxxProperties类来绑定相关的配置\n@EnableConfigurationProperties //让xxxProperties生效加到容器中\n\n自动配置类要能加载\n将需要启动就加载的自动配置类，配置在META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\n```\n\n3、模式\n\n启动器空的jar只需要做依赖管理导入；\n\n专门写一个自动配置模块；\n\n启动器依赖自动配置，别人只需要引入starter\n\nxxx-spring-boot-starter\n\n### 新建一个starter\n\n> 绕的你怀疑人生\n\n#### 1、新建一个空项目工程\n\n![56.starter01](E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg)\n\n2、项目命名\n\n![57.starter02](E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg)\n\n\n\n3、导入module\n\n![58.starter03](E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg)\n\n4、新建一个Maven工程\n\n![59.starter04](E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg)\n\n5、项目命名\n\n![60.starter05](E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg)\n\n\n\n![61.starter06](E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg)\n\n6、在新建一个autoconfiguration类的spring\n\n![62.starter07](E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg)\n\n7、项目命名\n\n![63.starter08](E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg)\n\n8、无需导入依赖\n\n![64.starter09](E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg)\n\n9、next\n\n![65.starter10](E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg)\n\n最后配置完成\n\n#### 2、编写starter\n\n##### autoconfigurer\n\n对**lxy-spring-boot-starter-autoconfigurer**进行删减\n\n目录\n\n![66.starter-build01](E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg)\n\n2、pom文件修改\n\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n    </dependencies>\n\n\n</project>\n```\n\n3、编写相关的类\n\n![67.starter-build02](E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg)\n\n4、HelloProperties\n\n```java\npackage com.lxy.starter;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"lxy.hello\")\npublic class HelloProperties {\n    private String prefix;\n    private String suffix;\n\n    public String getPrefix() {\n        return prefix;\n    }\n\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    public String getSuffix() {\n        return suffix;\n    }\n\n    public void setSuffix(String suffix) {\n        this.suffix = suffix;\n    }\n}\n```\n\n5、HelloService\n\n```java\npackage com.lxy.starter;\n\npublic class HelloService {\n\n    HelloProperties helloProperties;\n\n    public HelloProperties getHelloProperties() {\n        return helloProperties;\n    }\n\n    public void setHelloProperties(HelloProperties helloProperties) {\n        this.helloProperties = helloProperties;\n    }\n\n    public String sayHello(String name){\n        return helloProperties.getPrefix()+name+helloProperties.getSuffix();\n    }\n}\n```\n\n6、HelloServiceAutoConfiguration\n\n\n\n```java\npackage com.lxy.starter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloServiceAutoConfiguration {\n\n    @Autowired\n    HelloProperties helloProperties;\n    @Bean\n    public HelloService helloService(){\n        HelloService service = new HelloService();\n        service.setHelloProperties(helloProperties);\n        return service;\n    }\n\n}\n```\n\n7、配置文件\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.lxy.starter.HelloServiceAutoConfiguration\n```\n\n8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter-autoconfigurer</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </dependency>\n</dependencies>\n```\n\n9、install生成\n\n![68.starter-build03](E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg)\n\n#### 3、测试\n\n新建一个springboot 1.5+web\n\n1、引入starter\n\n```xml\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n</dependencies>\n```\n\n2、新建一个Controller用来测试\n\n```java\n@RestController\npublic class HelloController {\n\n    @Autowired\n    HelloService helloService;\n\n    @GetMapping\n    public  String hello(){\n        return helloService.sayHello(\"test\");\n    }\n}\n```\n\n3、编写配置文件制定前缀和后缀名\n\n```properties\nlxy.hello.prefix=Starter-\nlxy.hello.suffix=-Success\n```\n\n4、运行访问http://localhost:8080/hello\n\n![70.starter-build05](E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg)\n\n成功爽啊","slug":"SpringBoot入门简介","published":1,"date":"2020-12-25T11:50:17.655Z","updated":"2021-05-11T23:19:22.608Z","_id":"ckoknongw0001wp0m9aou5q61","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、Spring-Boot入门\"><a href=\"#一、Spring-Boot入门\" class=\"headerlink\" title=\"一、Spring Boot入门\"></a>一、Spring Boot入门</h1><h2 id=\"1、Spring-Boot简介\"><a href=\"#1、Spring-Boot简介\" class=\"headerlink\" title=\"1、Spring Boot简介\"></a>1、Spring Boot简介</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务，可以通过HTTP的方式进行互通</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元</p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p>环境约束</p>\n<ul>\n<li>jdk1.8</li>\n<li>maven 3.x :maven3.3以上</li>\n<li>IDEA2017</li>\n<li>SpringBoot 1.5.9RELEASE</li>\n</ul>\n<h3 id=\"1、MAVEN设置\"><a href=\"#1、MAVEN设置\" class=\"headerlink\" title=\"1、MAVEN设置\"></a>1、MAVEN设置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置JDK版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk18<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span>     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，</span></span><br><span class=\"line\"><span class=\"comment\">        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。</span></span><br><span class=\"line\"><span class=\"comment\">        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;id&gt;spring-libs-milestone&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;name&gt;Spring Milestones&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/mirror&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 备选镜像，也是可以通过 url 去查找确定一下，</span></span><br><span class=\"line\"><span class=\"comment\">        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        typor<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://central.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件</p>\n<p>​    快捷键：</p>\n<p>​    Ctrl+D 复制一行</p>\n<p>​    Ctrl+Y 删除一行</p>\n<p>​    Ctrl+P 参数提示</p>\n<p>​    Ctrl+Alt+V 自动补齐方法</p>\n<p>​    Ctrl+N 查找类方法</p>\n<p>​    Alt+Ins 构造器、getter/setter toString</p>\n<p>​    Ctrl+O 重载方法提示</p>\n<p>​    Alt+Enter 提示导入类etc</p>\n<p>​    Shift+F6 :文件重命名</p>\n<h2 id=\"4、Spring-Boot的Hello-World\"><a href=\"#4、Spring-Boot的Hello-World\" class=\"headerlink\" title=\"4、Spring Boot的Hello World\"></a>4、Spring Boot的Hello World</h2><h3 id=\"1、创建一个Maven工程\"><a href=\"#1、创建一个Maven工程\" class=\"headerlink\" title=\"1、创建一个Maven工程\"></a>1、创建一个Maven工程</h3><h3 id=\"2、导入Spring-Boot的相关依赖\"><a href=\"#2、导入Spring-Boot的相关依赖\" class=\"headerlink\" title=\"2、导入Spring Boot的相关依赖\"></a>2、导入Spring Boot的相关依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写个主程序\"><a href=\"#3、编写个主程序\" class=\"headerlink\" title=\"3、编写个主程序\"></a>3、编写个主程序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写相应的Controller和Service\"><a href=\"#4、编写相应的Controller和Service\" class=\"headerlink\" title=\"4、编写相应的Controller和Service\"></a>4、编写相应的Controller和Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String  <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><p>访问 localhost:8080/hello</p>\n<h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><p>在pom.xml文件中，导入build插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、HelloWorld深度理解\"><a href=\"#5、HelloWorld深度理解\" class=\"headerlink\" title=\"5、HelloWorld深度理解\"></a>5、HelloWorld深度理解</h2><h3 id=\"1-POM-xml文件\"><a href=\"#1-POM-xml文件\" class=\"headerlink\" title=\"1.POM.xml文件\"></a>1.POM.xml文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个父项目<strong>spring-boot-starter-parent</strong>又依赖一个父项目</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面有个属性，定义了对应的版本号</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activemq.version</span>&gt;</span>5.15.3<span class=\"tag\">&lt;/<span class=\"name\">activemq.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">antlr2.version</span>&gt;</span>2.7.7<span class=\"tag\">&lt;/<span class=\"name\">antlr2.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appengine-sdk.version</span>&gt;</span>1.9.63<span class=\"tag\">&lt;/<span class=\"name\">appengine-sdk.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artemis.version</span>&gt;</span>2.4.0<span class=\"tag\">&lt;/<span class=\"name\">artemis.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aspectj.version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">aspectj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assertj.version</span>&gt;</span>3.9.1<span class=\"tag\">&lt;/<span class=\"name\">assertj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">atomikos.version</span>&gt;</span>4.0.6<span class=\"tag\">&lt;/<span class=\"name\">atomikos.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bitronix.version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">bitronix.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class=\"line\">    。。。。。。。</span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件</p>\n<p><strong>spring boot</strong>将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。</p>\n<h3 id=\"2、主程序入口\"><a href=\"#2、主程序入口\" class=\"headerlink\" title=\"2、主程序入口\"></a>2、主程序入口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootApplication:</strong> 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用</p>\n<p>进入SpringBootApplication注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootConfiguration</strong>：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类</p>\n<p><strong>@Configuration</strong>:配置类上，来标注这个注解；<br>配置类 —- 配置文件，也是容器中的一个组件（@Component）<br><strong>@EnableAutoConfiguration</strong>:开启自动配置功能<br>以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动<br>配置功能；这样自动配置才能生效。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123; </span><br></pre></td></tr></table></figure>\n\n<p><strong>@AutoConfigurationPackage</strong>:自动配置包<br>**@Import({Registrar.class})**：底层注解，给容器导入组件；<br>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； </p>\n<p><strong>@Import({AutoConfigurationImportSelector.class})：</strong><br>给容器导入组件？ </p>\n<p>AutoConfigurationImportSelector：导入组件选择器 </p>\n<p>将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；</p>\n<p>会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置<br>好这些组件。 </p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg\" alt=\"1.configuration\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; configurations =</span><br><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(<span class=\"keyword\">this</span>.getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\"><span class=\"keyword\">this</span>.getBeanClassLoader());</span><br><span class=\"line\">\tAssert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),</code><br><code>this.getBeanClassLoader());</code> </p>\n<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；</p>\n<p>将这些值作为自动配置类导入到容器中，自动配置就生效了。 <img src=\"E:\\工作文档\\SpringBoot\\images\\2.factories.jpg\" alt=\"2.factories\"></p>\n<p>J2EE的整体解决方案</p>\n<p>org\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar </p>\n<h2 id=\"6、使用Spring-Initializer创建一个快速向导\"><a href=\"#6、使用Spring-Initializer创建一个快速向导\" class=\"headerlink\" title=\"6、使用Spring Initializer创建一个快速向导\"></a>6、使用Spring Initializer创建一个快速向导</h2><p>1.IDE支持使用Spring Initializer</p>\n<p>自己选择需要的组件:例如web</p>\n<p>默认生成的SpringBoot项目 </p>\n<ul>\n<li>主程序已经生成好了，我们只需要完成我们的逻辑</li>\n</ul>\n<ul>\n<li><p>resources文件夹目录结构</p>\n<ul>\n<li><p>static:保存所有的静态文件；js css images</p>\n</li>\n<li><p>templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可</p>\n<p>以使用模板引擎（freemarker.thymeleaf）;</p>\n</li>\n<li><p>application.properties:Spring Boot的默认配置，例如 server.port=9000 </p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h1><h2 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h2><p>Spring Boot使用全局配置文件，配置文件名是固定的；</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml </li>\n</ul>\n<p>配置文件作用：修改Spring Boot在底层封装好的默认值；</p>\n<p>YAML（YAML AIN’T Markup Language）</p>\n<p>是一个标记语言</p>\n<p>又不是一个标记语言 </p>\n<p><strong>标记语言：</strong></p>\n<p>以前的配置文件；大多数使用的是 xxx.xml文件；</p>\n<p>以数据为中心，比json、xml等更适合做配置文件</p>\n<p>YAML：配置例子 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span> </span><br></pre></td></tr></table></figure>\n\n<p>XML: </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、YAML语法\"><a href=\"#2、YAML语法\" class=\"headerlink\" title=\"2、YAML语法\"></a>2、YAML语法</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v:表示一堆键值对（空格必须有）；</p>\n<p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">/hello</span> </span><br></pre></td></tr></table></figure>\n\n<p>属性和值也是大小写敏感 </p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><p><strong>字面量：普通的值（数字，字符串，布尔）</strong> </p>\n<p>k: v:字面直接来写；</p>\n<p>字符串默认不用加上单引号或者双引号</p>\n<p>“”:<strong>双引号</strong> 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思</p>\n<p><code>name:&quot;zhangsan\\n lisi&quot;</code> 输出：<code>zhangsan换行 lisi</code></p>\n<p>‘’:<strong>单引号</strong> 会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p><code>name:&#39;zhangsan\\n lisi&#39;</code> 输出：<code>zhangsan\\n lisi</code> </p>\n<p><strong>对象、Map（属性和值）键值对</strong> </p>\n<p>k :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进</p>\n<p>对象还是k:v的方式 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">frends:</span></span><br><span class=\"line\">\t<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">\t<span class=\"attr\">age:</span> <span class=\"number\">20</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span> &#123;<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span>,<span class=\"attr\">age:</span> <span class=\"number\">18</span>&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>数组（List、Set）:</strong><br>用-表示数组中的一个元素 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">pig</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span> [<span class=\"string\">cat</span>,<span class=\"string\">dog</span>,<span class=\"string\">pig</span>] </span><br></pre></td></tr></table></figure>\n\n<p><strong>组合变量</strong></p>\n<p>多个组合到一起 </p>\n<h2 id=\"3、配置文件值注入\"><a href=\"#3、配置文件值注入\" class=\"headerlink\" title=\"3、配置文件值注入\"></a>3、配置文件值注入</h2><h3 id=\"1、-ConfigurationProperties\"><a href=\"#1、-ConfigurationProperties\" class=\"headerlink\" title=\"1、@ConfigurationProperties\"></a>1、@ConfigurationProperties</h3><p>1、application.yml 配置文件 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2017</span><span class=\"string\">/12/12</span></span><br><span class=\"line\">  <span class=\"attr\">maps:</span> &#123;<span class=\"attr\">k1:</span> <span class=\"string\">v1</span>,<span class=\"attr\">k2:</span> <span class=\"number\">12</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">lists:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">zhaoliu</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">wangwang</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">last-name:</span> <span class=\"string\">wanghuahua</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.properties</code> 配置文件（二选一） </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">idea配置文件utf-8</span></span><br><span class=\"line\"><span class=\"attr\">properties</span> <span class=\"string\">默认GBK</span></span><br><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>所以中文输出乱码，改进settings–&gt;file encoding –&gt;[property–&gt;utf-8 ,勾选转成ascii] </p>\n<p>javaBean </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将配置文件的配置每个属性的值，映射到组件中</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@ConfigurationProperties</span>:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\">* prefix = &quot;person&quot; 配置文件爱你的那个属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\">* *</span></span><br><span class=\"line\"><span class=\"comment\">只有这个组件是容器中的组件，才能提供到容器中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n<p>导入配置文件处理器，以后编写配置就有提示了 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring‐boot‐configuration‐processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"2、-Value注解\"><a href=\"#2、-Value注解\" class=\"headerlink\" title=\"2、@Value注解\"></a>2、@Value注解</h3><p>更改javaBean中的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;true&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@ConfigurationProperties</th>\n<th align=\"center\">@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">功能</td>\n<td align=\"center\">批量注入配置文件属性</td>\n<td align=\"center\">单个指定</td>\n</tr>\n<tr>\n<td align=\"center\">松散绑定(语法)</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">spEL</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">JSR303校验</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">复杂类型</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>松散语法：javaBean中last-name(或者lastName) –&gt;application.properties中的last-name;</p>\n<p>spEL语法：#{11*2} </p>\n<p>JSR303：@Value会直接忽略，校验规则</p>\n</blockquote>\n<p>JSR303校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p>复杂类型栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">   <span class=\"comment\">// @Value(&quot;$&#123;person.maps&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br></pre></td></tr></table></figure>\n\n<p>以上会报错，不支持复杂类型</p>\n<p><strong>使用场景分析</strong></p>\n<p>​    如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；</p>\n<p>如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties</p>\n<p>举栗子：</p>\n<p>1、编写新的Controller文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>+ name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试运行</p>\n<p>访问 localhost:9000/hello</p>\n<p>结果为<code>Hello 李四</code></p>\n<h3 id=\"3、其他注解\"><a href=\"#3、其他注解\" class=\"headerlink\" title=\"3、其他注解\"></a>3、其他注解</h3><p> <strong>@PropertySource</strong></p>\n<p>作用：加载指定的properties配置文件</p>\n<p>1、新建一个person.properties文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在javaBean中加入@PropertySource注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@ImportResource</strong></p>\n<p>作用：导入Spring配置文件，并且让这个配置文件生效</p>\n<p>1、新建一个Spring的配置文件，bean.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;HelloService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.wdjr.springboot.service.HelloService&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写测试类，检查容器是否加载Spring配置文件写的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;HelloService&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>import org.springframework.context.ApplicationContext;</p>\n</blockquote>\n<p>3、运行检测</p>\n<p>结果为false，没有加载配置的内容</p>\n<p>4、使用@ImportResource注解</p>\n<p>将@ImportResource标注在主配置类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource(locations=&#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot02ConfigApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、再次运行检测</p>\n<p>结果为true</p>\n<p>缺点：每次指定xml文件太麻烦</p>\n<p>SpringBoot推荐给容器添加组件的方式：</p>\n<p>1、配置类=====Spring的xml配置文件（old）</p>\n<p>2、全注解方式@Configuration+@Bean（new）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg\" alt=\"4.MyAppConfig\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>：指明当前类是一个配置类；就是来代替之前的Spring配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将方法的返回值添加到容器中；容器这个组件id就是方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;配置类给容器添加了HelloService组件&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;helloService01&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <em>容器这个组件id就是方法名</em> </p>\n<h2 id=\"4、配置文件占位符\"><a href=\"#4、配置文件占位符\" class=\"headerlink\" title=\"4、配置文件占位符\"></a>4、配置文件占位符</h2><h4 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$&#123;random.value&#125;</span> <span class=\"string\">、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class=\"line\"><span class=\"attr\">$&#123;random.int(10)&#125;、$&#123;random.int[100,200]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、获取配置值\"><a href=\"#2、获取配置值\" class=\"headerlink\" title=\"2、获取配置值\"></a>2、获取配置值</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.last-name&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>存在以下两种情况</p>\n<p>没有声明<code>person.last-name</code>会报错，新声明的需要加默认值</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.hello:hello&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>结果：输出<code>hello&#39;s wanghuahua</code></p>\n<h2 id=\"5、Profile\"><a href=\"#5、Profile\" class=\"headerlink\" title=\"5、Profile\"></a>5、Profile</h2><h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml</p>\n<ul>\n<li>application.properties</li>\n<li>application-dev.properties</li>\n<li>application-prod.properties</li>\n</ul>\n<p>默认使用application.properties</p>\n<p>application.properties配置文件指定</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、YAML文档块\"><a href=\"#2、YAML文档块\" class=\"headerlink\" title=\"2、YAML文档块\"></a>2、YAML文档块</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>1、在配置文件中激活</p>\n<p>2、命令行：</p>\n<p>–spring.profiles.active=dev</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg\" alt=\"5.comandLine\"></p>\n<p>优先级大于配置文件</p>\n<p>打包 成jar后</p>\n<p><code>java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></p>\n<p>虚拟机参数</p>\n<p><code>-Dspring.profiles.active=dev</code></p>\n<h2 id=\"6、加载配置文件位置\"><a href=\"#6、加载配置文件位置\" class=\"headerlink\" title=\"6、加载配置文件位置\"></a>6、加载配置文件位置</h2><p>SpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<ul>\n<li>file:./config/</li>\n<li>file./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ul>\n<p>优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置</p>\n<p>也可以通过spring.config.location来改变默认配置</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.servlet.context-path&#x3D;&#x2F;boot03</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>注：spring boot1x 是server.context.path=/boot02</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\7.priority.jpg\" alt=\"7.priority\"></p>\n<p>还可以通过spring.config.location来改变配置文件的位置</p>\n<p>项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置</p>\n<p><code>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties</code></p>\n<p>运维比较有用，从外部加载，不用修改别的文件</p>\n<h2 id=\"7-引入外部配置\"><a href=\"#7-引入外部配置\" class=\"headerlink\" title=\"7.引入外部配置\"></a>7.引入外部配置</h2><p><strong>SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补</strong></p>\n<ol>\n<li><p>命令行参数</p>\n<p>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar –server.port=9005 –server.context-path=/abc</p>\n<p>中间一个空格</p>\n</li>\n<li><p>来自java:comp/env的JNDI属性</p>\n</li>\n<li><p>java系统属性（System.getProperties()）</p>\n</li>\n<li><p>操作系统环境变量</p>\n</li>\n<li><p>RandomValuePropertySource配置的random.*属性值</p>\n<p><strong>优先加载profile,    由jar包外到jar包内</strong></p>\n</li>\n<li><p><strong>jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包外部的application.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n</li>\n<li><p>@Configuration注解类的@PropertySource</p>\n</li>\n<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>\n</li>\n</ol>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config\">官方文档</a></p>\n<h2 id=\"8、自动配置\"><a href=\"#8、自动配置\" class=\"headerlink\" title=\"8、自动配置\"></a>8、自动配置</h2><p>配置文件到底怎么写？</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties\">Spring的所有配置参数</a></p>\n<p>自动配置原理很关键</p>\n<h3 id=\"1、自动配置原理\"><a href=\"#1、自动配置原理\" class=\"headerlink\" title=\"1、自动配置原理\"></a>1、自动配置原理</h3><p>1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration</p>\n<p>2）、@EnableAutoConfiguration 作用：</p>\n<ul>\n<li>利用AutoConfigurationImportSelector给容器中导入一些组件？</li>\n<li>可以查看selectImports()方法的内容</li>\n<li>获取候选的配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; configurations = <span class=\"keyword\">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>扫描类路径下的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(）</span><br><span class=\"line\">扫描所有jar包类路径下的 MATA-INF/spring.factories</span><br><span class=\"line\">把扫描到的这些文件的内容包装成properties对象</span><br><span class=\"line\">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中</span><br></pre></td></tr></table></figure>\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；</li>\n</ul>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration</strong> 为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;HttpEncodingProperties.class&#125;)</span><span class=\"comment\">//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span><span class=\"comment\">//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    type = Type.SERVLET</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><span class=\"comment\">//判断当前项目有没有这个类，解决乱码的过滤器</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(</span></span><br><span class=\"line\"><span class=\"meta\">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">    matchIfMissing = true</span></span><br><span class=\"line\"><span class=\"meta\">)</span><span class=\"comment\">//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//给容器添加组件，这个组件的值需要从properties属性中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpEncodingProperties properties;</span><br><span class=\"line\">\t<span class=\"comment\">//只有一个有参数构造器情况下，参数的值就会从容器中拿</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEncodingAutoConfiguration</span><span class=\"params\">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title\">characterEncodingFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CharacterEncodingFilter filter = <span class=\"keyword\">new</span> OrderedCharacterEncodingFilter();</span><br><span class=\"line\">        filter.setEncoding(<span class=\"keyword\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">        filter.setForceRequestEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));</span><br><span class=\"line\">        filter.setForceResponseEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span><span class=\"comment\">//从配置文件中的值进行绑定和bean属性进行绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>根据当前不同条件判断，决定这个配置类是否生效？</p>\n<p>一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的</p>\n<h3 id=\"2、所有的自动配置组件\"><a href=\"#2、所有的自动配置组件\" class=\"headerlink\" title=\"2、所有的自动配置组件\"></a>2、所有的自动配置组件</h3><p>每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；</p>\n<p>作用：用他们做自动配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Auto Configure</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、精髓：\"><a href=\"#3、精髓：\" class=\"headerlink\" title=\"3、精髓：\"></a>3、精髓：</h3><p>1）、SpringBoot启动会加载大量的自动配置类</p>\n<p>2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；</p>\n<p>3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）</p>\n<p>4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值</p>\n<p>xxxAutoConfiguration:自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxProperties:封装配置文件中的属性；</p>\n<p>跟之前的Person类一样，配置文件中值加入bean中</p>\n<h3 id=\"4、细节\"><a href=\"#4、细节\" class=\"headerlink\" title=\"4、细节\"></a>4、细节</h3><h4 id=\"1、-Conditional派生注解\"><a href=\"#1、-Conditional派生注解\" class=\"headerlink\" title=\"1、@Conditional派生注解\"></a>1、@Conditional派生注解</h4><blockquote>\n<p>利用Spring注解版原生的@Conditional作用</p>\n</blockquote>\n<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional派生注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissBean</td>\n<td>容器中不存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足spEL表达式</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean,或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定的资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、自动配置报告\"><a href=\"#2、自动配置报告\" class=\"headerlink\" title=\"2、自动配置报告\"></a>2、自动配置报告</h4><p>自动配置类必须在一定条件下生效</p>\n<p>我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>自动配置报告</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\">CONDITIONS EVALUATION REPORT</span><br><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:（启动的，匹配成功的）</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">   CodecsAutoConfiguration matched:</span><br><span class=\"line\">      - <span class=\"meta\">@ConditionalOnClass</span> found required <span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">http</span>.<span class=\"title\">codec</span>.<span class=\"title\">CodecConfigurer</span>&#x27;</span>; <span class=\"meta\">@ConditionalOnMissingClass</span> <span class=\"function\">did not find unwanted <span class=\"title\">class</span> <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">        ......</span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\"> Negative matches:（没有启动的，没有匹配成功的）</span></span><br><span class=\"line\"><span class=\"function\">-----------------</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   ActiveMQAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">.....</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h1><blockquote>\n<p>Spring Boot2对日志有更改</p>\n</blockquote>\n<h3 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h3><p>小张：开发一个大型系统；</p>\n<p>1、System.out.println(“”);将关键数据打印在控制台；去掉？卸载文件中</p>\n<p>2、框架记录系统的一些运行信息；日志框架zhanglog.jar</p>\n<p>3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?</p>\n<p>4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;</p>\n<p>5、JDBC–数据库驱动；</p>\n<p>​    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;</p>\n<p>​    给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；</p>\n<p>市面上的日志框架</p>\n<table>\n<thead>\n<tr>\n<th>日志抽象层</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL(Jakarta Commons Logging)</del> SLF4j(Simple Logging Facade for Java) <del>jboss-logging</del></td>\n<td>Log4j <del>JUL(java.util.logging)</del> Log4j2 Logback</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>左边的抽象，右边的实现</p>\n<p>SLF4J  – Logback</p>\n<p>Spring Boot:底层是Spring框架，Spring默认框架是JCL；</p>\n<p>​    SpringBoot选用SLF4J和logback</p>\n<h3 id=\"2、SLF4J使用\"><a href=\"#2、SLF4J使用\" class=\"headerlink\" title=\"2、SLF4J使用\"></a>2、SLF4J使用</h3><h4 id=\"1、如何在系统中使用SLF4j\"><a href=\"#1、如何在系统中使用SLF4j\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j\"></a>1、如何在系统中使用SLF4j</h4><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>应该给系统里面导入slf4j的jar包和logback的实现jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg\" alt=\"8.slf4j\"></p>\n<p>每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架本身的配置文件</strong>；</p>\n<h4 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h4><p>a系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis</p>\n<p>统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；</p>\n<p>核心：</p>\n<p>1、将系统中其他日志框架排除出去；</p>\n<p>2、用中间包来替换原有的日志框架/</p>\n<p>3、导入slf4j的其他实现</p>\n<h3 id=\"3、SpingBoot日志框架解析\"><a href=\"#3、SpingBoot日志框架解析\" class=\"headerlink\" title=\"3、SpingBoot日志框架解析\"></a>3、SpingBoot日志框架解析</h3><p>打开IDEA ，打开pom文件的依赖图形化显示</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg\" alt=\"9.IDEAdependencies\"></p>\n<p>SpringBoot的基础框架</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot的日志功能</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg\" alt=\"10.slf4jandlogback\"></p>\n<p>总结：</p>\n<ol>\n<li><p>SpringBoot底层也是使用SLF4J+log4jback</p>\n</li>\n<li><p>SpringBoot也把其他日志替换成了slf4j</p>\n</li>\n<li><p>起着commons.loggings的名字其实new的SLF4J替换中间包</p>\n<p>SpringBoot2中改成了bridge</p>\n</li>\n<li><p>如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层</p>\n</li>\n</ol>\n<h3 id=\"4、日志的使用\"><a href=\"#4、日志的使用\" class=\"headerlink\" title=\"4、日志的使用\"></a>4、日志的使用</h3><h4 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h4><p>trace-debug-info-warn-error</p>\n<p>可以调整需要的日志级别进行输出，不用注释语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//记录器</span></span><br><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日志的级别</span></span><br><span class=\"line\">    <span class=\"comment\">//从低到高</span></span><br><span class=\"line\">    <span class=\"comment\">//可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效</span></span><br><span class=\"line\">    logger.trace(<span class=\"string\">&quot;这是trace日志&quot;</span>);</span><br><span class=\"line\">    logger.debug(<span class=\"string\">&quot;这是debug信息&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//SpringBoot默认给的是info级别，如果没指定就是默认的root级别</span></span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;这是info日志&quot;</span>);</span><br><span class=\"line\">    logger.warn(<span class=\"string\">&quot;这是warn信息&quot;</span>);</span><br><span class=\"line\">    logger.error(<span class=\"string\">&quot;这是Error信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整指定包的日志级别在配置文件中进行配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br></pre></td></tr></table></figure>\n\n<p>日志输出格式</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 </span></span><br><span class=\"line\"><span class=\"comment\">#%d：日期</span></span><br><span class=\"line\"><span class=\"comment\">#%thread：线程号 </span></span><br><span class=\"line\"><span class=\"comment\">#%-5level：靠左 级别 </span></span><br><span class=\"line\"><span class=\"comment\">#%logger&#123;50&#125;：全类名50字符限制,否则按照句号分割</span></span><br><span class=\"line\"><span class=\"comment\">#%msg：消息+换行</span></span><br><span class=\"line\"><span class=\"comment\">#%n：换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot修改日志的默认配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br><span class=\"line\"><span class=\"comment\">#不指定path就是当前目录下生成springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#logging.file=springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认</span></span><br><span class=\"line\"><span class=\"meta\">logging.path</span>=<span class=\"string\">/spring/log</span></span><br><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class=\"line\"><span class=\"comment\">#指定文件中日志输出的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.file</span>=<span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置</p>\n<table>\n<thead>\n<tr>\n<th>logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td>logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy</td>\n</tr>\n<tr>\n<td>Log4J2</td>\n<td>log4j2-spring.xml or log4j2.xml</td>\n</tr>\n<tr>\n<td>JDK(Java Util Logging)</td>\n<td>logging.properties</td>\n</tr>\n</tbody></table>\n<p>logback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>!=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如何调试开发环境,输入命令行参数</p>\n<p>–spring.profiles.active=dev</p>\n<p>如果不带后面的xx-spring.xml就会报错</p>\n<h3 id=\"3、切换日志框架\"><a href=\"#3、切换日志框架\" class=\"headerlink\" title=\"3、切换日志框架\"></a>3、切换日志框架</h3><p>可以根据slf4j的日志适配图，进行相关切换；</p>\n<h4 id=\"1、log4j\"><a href=\"#1、log4j\" class=\"headerlink\" title=\"1、log4j\"></a>1、log4j</h4><p>slf4j+log4j的方式；</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg\" alt=\"11.log4j\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不推荐使用仅作为演示</p>\n<h4 id=\"2、log4j2\"><a href=\"#2、log4j2\" class=\"headerlink\" title=\"2、log4j2\"></a>2、log4j2</h4><p>切换为log4j2</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、web开发\"><a href=\"#四、web开发\" class=\"headerlink\" title=\"四、web开发\"></a>四、web开发</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot;</p>\n<p>1)、创建SpringBoot应用，选中我们需要的模块；</p>\n<p>2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</p>\n<p>3)、自己编写业务代码</p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxAutoConfiguration:帮我们给容器中自动配置组件</span><br><span class=\"line\">xxxProperties:配置类来封装配置文件的内容</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、静态资源文件映射规则\"><a href=\"#2、静态资源文件映射规则\" class=\"headerlink\" title=\"2、静态资源文件映射规则\"></a>2、静态资源文件映射规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span>, <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以设置和静态资源相关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Integer cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCachePeriod();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(registry</span><br><span class=\"line\">            .addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">            .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   String staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(</span><br><span class=\"line\">            registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">                  .addResourceLocations(</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.resourceProperties.getStaticLocations())</span><br><span class=\"line\">                  .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、webjar\"><a href=\"#1、webjar\" class=\"headerlink\" title=\"1、webjar\"></a>1、webjar</h3><p>1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；</p>\n<p>​    webjars：以jar包的方式引入静态资源</p>\n<p><a href=\"http://www.webjars.org/\">http://www.webjars.org/</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg\" alt=\"12.jquery\"></p>\n<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>\n<h3 id=\"2、本地资源\"><a href=\"#2、本地资源\" class=\"headerlink\" title=\"2、本地资源\"></a>2、本地资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String staticPathPattern &#x3D; &quot;&#x2F;**&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>访问任何资源</p>\n<p>2、会在这几文件夹下去找静态路径（静态资源文件夹）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class=\"line\">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;public&#x2F;&quot;,</span><br><span class=\"line\">&quot;&#x2F;&quot;;当前项目的根路径</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\13.static.jpg\" alt=\"13.static\"></p>\n<p>localhost:8080/abc ==&gt;去静态资源文件夹中找abc</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg\" alt=\"14.static-css\"></p>\n<p>3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；</p>\n<p>localhost:8080/  –&gt;index页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title\">welcomePageHandlerMapping</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、喜欢的图标，即网站title的图标favicon</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FaviconConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ResourceProperties resourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaviconConfiguration</span><span class=\"params\">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> SimpleUrlHandlerMapping <span class=\"title\">faviconHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      SimpleUrlHandlerMapping mapping = <span class=\"keyword\">new</span> SimpleUrlHandlerMapping();</span><br><span class=\"line\">      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//把任何favicon的图标都在静态文件夹下找</span></span><br><span class=\"line\">      mapping.setUrlMap(Collections.singletonMap(<span class=\"string\">&quot;**/favicon.ico&quot;</span>,</span><br><span class=\"line\">            faviconRequestHandler()));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mapping;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ResourceHttpRequestHandler <span class=\"title\">faviconRequestHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ResourceHttpRequestHandler requestHandler = <span class=\"keyword\">new</span> ResourceHttpRequestHandler();</span><br><span class=\"line\">      requestHandler</span><br><span class=\"line\">            .setLocations(<span class=\"keyword\">this</span>.resourceProperties.getFaviconLocations());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> requestHandler;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在配置文件配置静态资源文件夹</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.resources.static-locations</span>=<span class=\"string\">classpath:xxxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>将html和数据 结合到一起 输出组装处理好的新文件</p>\n<p>SpringBoot推荐Thymeleaf;语法简单，功能强大</p>\n<h3 id=\"1、引入thymeleaf-3\"><a href=\"#1、引入thymeleaf-3\" class=\"headerlink\" title=\"1、引入thymeleaf 3\"></a>1、引入thymeleaf 3</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认导入thymeleaf2，版本太低 所以使用thymeleaf3.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3\">官方导入办法</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--thymeleaf 3的导入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Thymeleaf使用和语法\"><a href=\"#2、Thymeleaf使用和语法\" class=\"headerlink\" title=\"2、Thymeleaf使用和语法\"></a>2、Thymeleaf使用和语法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">//只要把HTML文件方法类路径下的template文件夹下，就会自动导入</span></span><br></pre></td></tr></table></figure>\n\n<p>只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure>\n\n<p>2、使用thymeleaf语法；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--th:text 将div里面的文本内容设置为--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、语法规则</p>\n<p>1）、th:text=”${hello}”可以使用任意标签 替换原生的任何属性</p>\n<p><strong>在SpringBoot的环境下</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testid&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;testcalss&quot;</span> <span class=\"attr\">th:id</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg\" alt=\"15.thtmeleaf-th01\"></p>\n<p><strong>直接访问HTML页面</strong></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg\" alt=\"15.thtmeleaf-th02\"></p>\n<p><strong>2)、内联写法注意需要在body上加上 th:inline=”text”敲黑板</strong></p>\n<p>不然不起作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>th标签的访问优先级</p>\n<p>Order Feature Attributes</p>\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>功能</th>\n<th>标签</th>\n<th>功能和jsp对比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Fragment inclusion</td>\n<td>th:insert th:replace</td>\n<td>include(片段包含)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Fragment iteration</td>\n<td>th:each</td>\n<td>c:forEach(遍历)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Conditional evaluation</td>\n<td>th:if th:unless th:switch th:case</td>\n<td>c:if(条件判断)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Local variable definition</td>\n<td>th:object  th:with</td>\n<td>c:set(声明变量)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>General attribute modification</td>\n<td>th:attr th:attrprepend th:attrappend</td>\n<td>属性修改支持前面和后面追加内容</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Specific attribute modification</td>\n<td>th:value th:href th:src …</td>\n<td>修改任意属性值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Text (tag body modification)</td>\n<td>th:text th:utext</td>\n<td>修改标签体内容utext：不转义字符<h1>大标题</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Fragment specification</td>\n<td>th:fragment</td>\n<td>声明片段</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Fragment removal</td>\n<td>th:remove</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Simple</span> <span class=\"string\">expressions:(表达式语法)</span></span><br><span class=\"line\">    <span class=\"attr\">Variable</span> <span class=\"string\">Expressions: $&#123;...&#125;</span></span><br><span class=\"line\">    \t<span class=\"attr\">1、获取对象属性、调用方法</span></span><br><span class=\"line\">    \t<span class=\"attr\">2、使用内置基本对象：</span></span><br><span class=\"line\"><span class=\"comment\">    \t    #ctx : the context object.</span></span><br><span class=\"line\"><span class=\"comment\">            #vars: the context variables.</span></span><br><span class=\"line\"><span class=\"comment\">            #locale : the context locale.</span></span><br><span class=\"line\"><span class=\"comment\">            #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class=\"line\"><span class=\"comment\">            #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class=\"line\"><span class=\"comment\">            #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class=\"line\"><span class=\"comment\">            #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class=\"line\">         <span class=\"attr\">3、内置一些工具对象</span></span><br><span class=\"line\"><span class=\"comment\">        \t#execInfo : information about the template being processed.</span></span><br><span class=\"line\"><span class=\"comment\">        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span></span><br><span class=\"line\">            <span class=\"attr\">would</span> <span class=\"string\">be obtained using #&#123;…&#125; syntax.</span></span><br><span class=\"line\"><span class=\"comment\">            #uris : methods for escaping parts of URLs/URIs</span></span><br><span class=\"line\"><span class=\"comment\">            #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class=\"line\"><span class=\"comment\">            #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #numbers : methods for formatting numeric objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #objects : methods for objects in general.</span></span><br><span class=\"line\"><span class=\"comment\">            #bools : methods for boolean evaluation.</span></span><br><span class=\"line\"><span class=\"comment\">            #arrays : methods for arrays.</span></span><br><span class=\"line\"><span class=\"comment\">            #lists : methods for lists.</span></span><br><span class=\"line\"><span class=\"comment\">            #sets : methods for sets.</span></span><br><span class=\"line\"><span class=\"comment\">            #maps : methods for maps.</span></span><br><span class=\"line\"><span class=\"comment\">            #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class=\"line\"><span class=\"comment\">            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class=\"line\">    <span class=\"attr\">Selection</span> <span class=\"string\">Variable Expressions: *&#123;...&#125; //选择表达式：和$&#123;&#125;功能一样，补充功能</span></span><br><span class=\"line\"><span class=\"comment\">   # 配合th:object使用，object=$&#123;object&#125; 以后获取就可以使用*&#123;a&#125;  相当于$&#123;object.a&#125;</span></span><br><span class=\"line\">  \t    <span class=\"meta\">&lt;div</span> <span class=\"string\">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Name</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Surname</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Nationality</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Message</span> <span class=\"string\">Expressions: #&#123;...&#125; //获取国际化内容</span></span><br><span class=\"line\">    <span class=\"attr\">Link</span> <span class=\"string\">URL Expressions: @&#123;...&#125; //定义URL链接</span></span><br><span class=\"line\"><span class=\"comment\">    \t#&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Fragment</span> <span class=\"string\">Expressions: ~&#123;...&#125;//片段文档</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">Literals（字面量）</span></span><br><span class=\"line\">    <span class=\"attr\">Text</span> <span class=\"string\">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Number</span> <span class=\"string\">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">literals: true , false</span></span><br><span class=\"line\">    <span class=\"attr\">Null</span> <span class=\"string\">literal: null</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">tokens: one , sometext , main ,…</span></span><br><span class=\"line\"><span class=\"attr\">Text</span> <span class=\"string\">operations:(文本操作)</span></span><br><span class=\"line\">    <span class=\"attr\">String</span> <span class=\"string\">concatenation: +</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class=\"line\"><span class=\"attr\">Arithmetic</span> <span class=\"string\">operations:（数学运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: + , - , * , / , %</span></span><br><span class=\"line\">    <span class=\"attr\">Minus</span> <span class=\"string\">sign (unary operator): -</span></span><br><span class=\"line\"><span class=\"attr\">Boolean</span> <span class=\"string\">operations:（布尔运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: and , or</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">negation (unary operator): ! , not</span></span><br><span class=\"line\"><span class=\"attr\">Comparisons</span> <span class=\"string\">and equality:（比较运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Comparators</span>: <span class=\"string\">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class=\"line\">    <span class=\"attr\">Equality</span> <span class=\"string\">operators: == , != ( eq , ne )</span></span><br><span class=\"line\"><span class=\"attr\">Conditional</span> <span class=\"string\">operators:（条件运算）</span></span><br><span class=\"line\">    <span class=\"meta\">If-then</span>: <span class=\"string\">(if) ? (then)</span></span><br><span class=\"line\">    <span class=\"meta\">If-then-else</span>: <span class=\"string\">(if) ? (then) : (else)</span></span><br><span class=\"line\">    <span class=\"attr\">Default</span>: <span class=\"string\">(value) ?: (defaultvalue)</span></span><br><span class=\"line\"><span class=\"attr\">Special</span> <span class=\"string\">tokens:（空操作）</span></span><br><span class=\"line\">\t<span class=\"meta\">No-Operation</span>: <span class=\"string\">_</span></span><br></pre></td></tr></table></figure>\n\n<p>inline写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[]] --&gt;th:text</span><br><span class=\"line\">[()] --&gt;th:utext</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4、SpringMVC自动配置\"><a href=\"#4、SpringMVC自动配置\" class=\"headerlink\" title=\"4、SpringMVC自动配置\"></a>4、SpringMVC自动配置</h2><h3 id=\"1、SpringMVC的自动导入\"><a href=\"#1、SpringMVC的自动导入\" class=\"headerlink\" title=\"1、SpringMVC的自动导入\"></a>1、SpringMVC的自动导入</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\">Spring框架</a></p>\n<p>自动配置好了mvc：</p>\n<p>以下是SpringBoot对SpringMVC的默认</p>\n<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)</li>\n<li><code>ContentNegotiatingViewResolver</code>组合所有视图解析器</li>\n<li>如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源</p>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).</p>\n</li>\n<li><p>自动注册 了<code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li><p><code>Converter</code>：类型转换 文本转为字面量</p>\n</li>\n<li><p><code>Formatter</code> ：格式化器 转换后格式转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class=\"comment\">//在文件配置入职格式化的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());<span class=\"comment\">//日期格式化组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自己添加的格式化转换器，只需要放在容器中即可</p>\n</li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p><code>HttpMessageConverters</code> ：转换HTTP转换和响应：User - json</p>\n</li>\n<li><p><code>HttpMessageConverters</code> ：是从容器中确定；获取所有的<code>HttpMessageConverters</code>  ，将自己的组件注册在容器中@Bean </p>\n</li>\n<li><p>If you need to add or customize converters you can use Spring Boot’s <code>HttpMessageConverters</code> class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.web.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">customConverters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; additional = ...</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; another = ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpMessageConverters(additional, another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).</p>\n<ul>\n<li>定义错误代码生成规则</li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<ul>\n<li>```java<br>@Override<br>protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {<br>   try {<pre><code>  return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n</code></pre>\n   }<br>   catch (NoSuchBeanDefinitionException ex) {<pre><code>  return super.getConfigurableWebBindingInitializer();\n</code></pre>\n   }<br>}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    在beanFactory：中可以自己创建一个，初始化webDataBinder</span><br><span class=\"line\"></span><br><span class=\"line\">    请求数据 &#x3D;&#x3D;》javaBean</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.16.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own &#96;@Configuration&#96; class of type &#96;WebMvcConfigurerAdapter&#96;, but **without** &#96;@EnableWebMvc&#96;. If you wish to provide custom instances of &#96;RequestMappingHandlerMapping&#96;, &#96;RequestMappingHandlerAdapter&#96; or &#96;ExceptionHandlerExceptionResolver&#96; you can declare a &#96;WebMvcRegistrationsAdapter&#96; instance providing such components.</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to take complete control of Spring MVC, you can add your own &#96;@Configuration&#96; annotated with &#96;@EnableWebMvc&#96;.</span><br><span class=\"line\"></span><br><span class=\"line\">思想：修改默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">### 2、扩展SpringMVC</span><br><span class=\"line\"></span><br><span class=\"line\">编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class MyMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;        super.addViewControllers(registry);</span><br><span class=\"line\">        &#x2F;&#x2F;浏览器发送wdjr请求，也来到success页面</span><br><span class=\"line\">        registry.addViewController(&quot;&#x2F;wdjr&quot;).setViewName(&quot;success&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>原理：</p>\n<p>1）、WebMvcAutoConfiguration是SpringMVC的自动配置</p>\n<p>2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcConfigurerComposite configurers = <span class=\"keyword\">new</span> WebMvcConfigurerComposite();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从容器中获取所有webMVCconfigurer</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">            </span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.configurers.addViewControllers(registry);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）</span></span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"comment\">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\">                   <span class=\"comment\">// for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"comment\">//delegate.addViewControllers(registry);</span></span><br><span class=\"line\">                    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<p>3）、自己的配置被调用</p>\n<p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用</p>\n<h3 id=\"3、全面接管mvc\"><a href=\"#3、全面接管mvc\" class=\"headerlink\" title=\"3、全面接管mvc\"></a>3、全面接管mvc</h3><p>不需要SpringBoot对SpringMVC的自动配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送wdjr请求，也来到success页面</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">&quot;/wdjr&quot;</span>).setViewName(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如静态资源访问，不推荐全面接管</p>\n<p>原理：</p>\n<p>为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了</p>\n<p>1）、核心配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2）、DelegatingWebMvcConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>3）、WebMvcAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span></span><br><span class=\"line\"><span class=\"meta\">      WebMvcConfigurerAdapter.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//容器没有这个组件的时候，这个自动配置类才生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">      ValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能</p>\n<h2 id=\"5、修改SpringMVC默认配置\"><a href=\"#5、修改SpringMVC默认配置\" class=\"headerlink\" title=\"5、修改SpringMVC默认配置\"></a>5、修改SpringMVC默认配置</h2><p>模式:</p>\n<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​    2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。</p>\n<h2 id=\"6、RestfulCRUD\"><a href=\"#6、RestfulCRUD\" class=\"headerlink\" title=\"6、RestfulCRUD\"></a>6、RestfulCRUD</h2><h3 id=\"1、默认访问首页\"><a href=\"#1、默认访问首页\" class=\"headerlink\" title=\"1、默认访问首页\"></a>1、默认访问首页</h3><p>在config/MyConfig.java中编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/login.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态资源引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、国际化\"><a href=\"#2、国际化\" class=\"headerlink\" title=\"2、国际化\"></a>2、国际化</h3><p>1、编写国际化配置文件</p>\n<p>2、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3、在页面中使用fmt:message，取出国际化内容</p>\n<h4 id=\"1、浏览器切换国际化\"><a href=\"#1、浏览器切换国际化\" class=\"headerlink\" title=\"1、浏览器切换国际化\"></a>1、浏览器切换国际化</h4><p>步骤</p>\n<p>1、编写国际化配置文件，抽取页面需要的显示的国际化消息</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\16.national.jpg\" alt=\"16.national\"></p>\n<p>2、SpringBoot自动配置好了国际化配置的资源文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//我们的配置文件可以直接放在类路径下叫messages.properties</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String basename = <span class=\"string\">&quot;messages&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> MessageSource <span class=\"title\">messageSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tResourceBundleMessageSource messageSource = <span class=\"keyword\">new</span> ResourceBundleMessageSource();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.basename)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置国际化文件的基础名，去掉语言国家代码</span></span><br><span class=\"line\">\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">\t\t\t\t\tStringUtils.trimAllWhitespace(<span class=\"keyword\">this</span>.basename)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.encoding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmessageSource.setDefaultEncoding(<span class=\"keyword\">this</span>.encoding.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageSource.setFallbackToSystemLocale(<span class=\"keyword\">this</span>.fallbackToSystemLocale);</span><br><span class=\"line\">\t\tmessageSource.setCacheSeconds(<span class=\"keyword\">this</span>.cacheSeconds);</span><br><span class=\"line\">\t\tmessageSource.setAlwaysUseMessageFormat(<span class=\"keyword\">this</span>.alwaysUseMessageFormat);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messageSource;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、对IDEA的编码进行设置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg\" alt=\"17.encoding\"></p>\n<p>4、login进行标签插入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./login_files/signin.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-signin&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mb-4&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./login_files/bootstrap-solid.svg&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;72&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;72&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;remember-me&quot;</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果根据浏览器语言的信息切换国际化</p>\n<p>原理：</p>\n<p>国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties</span><br><span class=\"line\">        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FixedLocaleResolver(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AcceptHeaderLocaleResolver localeResolver = <span class=\"keyword\">new</span> AcceptHeaderLocaleResolver();</span><br><span class=\"line\">    localeResolver.setDefaultLocale(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">&#125;            </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg\" alt=\"18.accept-language\"></p>\n<h4 id=\"2、点击链接切换国际化\"><a href=\"#2、点击链接切换国际化\" class=\"headerlink\" title=\"2、点击链接切换国际化\"></a>2、点击链接切换国际化</h4><p>自己编写localResolver，加到容器中</p>\n<p>1、更改HTML代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=zh_CN&#125;&quot;</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=en_US&#125;&quot;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个MyLocaleResolver.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLocaleResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">LocaleResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解析区域信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Locale <span class=\"title\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String l = request.getParameter(<span class=\"string\">&quot;lg&quot;</span>);</span><br><span class=\"line\">        Locale locale = Locale.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class=\"line\">            String[] split = l.split(<span class=\"string\">&quot;_&quot;</span>);</span><br><span class=\"line\">            locale = <span class=\"keyword\">new</span> Locale(split[<span class=\"number\">0</span>], split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> locale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、将MyLocaleResolver加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLocalResolver();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动演示</p>\n<h3 id=\"3、登录拦截器\"><a href=\"#3、登录拦截器\" class=\"headerlink\" title=\"3、登录拦截器\"></a>3、登录拦截器</h3><h4 id=\"1、登录\"><a href=\"#1、登录\" class=\"headerlink\" title=\"1、登录\"></a>1、登录</h4><p>开发技巧</p>\n<p>​    1、清除模板缓存</p>\n<p>​    2、Ctrl+F9刷新</p>\n<p>1、新建一个LoginController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;list&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、登录错误消息显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--判断--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、表单重复提交</p>\n<p>表单重复提交事件 –》重定向来到成功页面–》模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、拦截器\"><a href=\"#4、拦截器\" class=\"headerlink\" title=\"4、拦截器\"></a>4、拦截器</h3><p>作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）</p>\n<p>1、在component下新建一个LoginHandlerInterceptor拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//目标方法执行之前</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object user = request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已经登录</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//未经过验证</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;没权限请先登录&quot;</span>);</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、在MyMvcConfig配置中重写拦截器方法，加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//静态资源 css js img 已经做好了静态资源映射</span></span><br><span class=\"line\">            registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>).</span><br><span class=\"line\">                    excludePathPatterns(<span class=\"string\">&quot;/index.html&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/user/login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在LoginHandler中添加登录成功写入session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        HttpSession session)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">&quot;loginUser&quot;</span>, username);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、CRUD-员工列表\"><a href=\"#5、CRUD-员工列表\" class=\"headerlink\" title=\"5、CRUD-员工列表\"></a>5、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格</p>\n<p>URI:/资源名称/资源标识+HTTP操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp – GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp –POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id=xxx&amp;xxx=xx</td>\n<td>emp/{id} – PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id=1</td>\n<td>emp/{id} –DELETE</td>\n</tr>\n</tbody></table>\n<p>2、实验的请求架构</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>修改页面(回显)</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp/{id}</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp/{id}</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3、员工列表</p>\n<h4 id=\"1、公共页面抽取\"><a href=\"#1、公共页面抽取\" class=\"headerlink\" title=\"1、公共页面抽取\"></a>1、公共页面抽取</h4><p>使用方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、抽取公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--footer.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;footid&quot;</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;copy&quot;</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">2、引入公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--test.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">~&#123;footer::copy&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">~&#123;templatename::selector&#125; 模板名::选择器  footer::#footid</span><br><span class=\"line\">~&#123;templatename::fragmentname&#125; 模板名::片段名称 footer::copy</span><br><span class=\"line\">行内写法可以加~&#123;xx::xx&#125; 标签体可以 xx::xx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>三种引用方式</strong></p>\n<p><strong>th:insert</strong> :加个外层标签 +1</p>\n<p><strong>th:replace</strong> :完全替换 1</p>\n<p><strong>th:include</strong>：就替换里面的内容 -1</p>\n<p>公共页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- th:insert --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">            <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:replace--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">   \t\t<span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:include--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用此种方法将公共页面引入</p>\n<h4 id=\"2、列表高亮\"><a href=\"#2、列表高亮\" class=\"headerlink\" title=\"2、列表高亮\"></a>2、列表高亮</h4><p>引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html</p>\n<p>模板引入变量名</p>\n<p>dashboard</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link active&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-home&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">    Dashboard <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>员工管理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;emps&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-users&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;9&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;7&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">        员工管理</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入模板的时候传入参数</p>\n<p>dashboard.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar :: sidebar(activeUri=&#x27;main.html&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>list.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar::sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、列表数据显示（查）\"><a href=\"#6、列表数据显示（查）\" class=\"headerlink\" title=\"6、列表数据显示（查）\"></a>6、列表数据显示（查）</h3><h4 id=\"1、传入员工对象\"><a href=\"#1、传入员工对象\" class=\"headerlink\" title=\"1、传入员工对象\"></a>1、传入员工对象</h4><p>EmployeeController类,传入员工对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeDao employeeDao;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有员工返回列表页面</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/emps&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">list</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;emps&quot;</span>,employees);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/list&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、-遍历对象\"><a href=\"#2、-遍历对象\" class=\"headerlink\" title=\"2、 遍历对象\"></a>2、 遍历对象</h4><p>list.html中 使用模板的 <code>th:each</code>方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table class=&quot;table table-striped table-sm&quot;&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>lastName<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>gender<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>birth<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.gender&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、效果显示\"><a href=\"#3、效果显示\" class=\"headerlink\" title=\"3、效果显示\"></a>3、效果显示</h4><p>![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)</p>\n<h3 id=\"7、员工添加（增）\"><a href=\"#7、员工添加（增）\" class=\"headerlink\" title=\"7、员工添加（增）\"></a>7、员工添加（增）</h3><p>功能：点击添加按钮，出现新增页面</p>\n<h4 id=\"1、新增页面\"><a href=\"#1、新增页面\" class=\"headerlink\" title=\"1、新增页面\"></a>1、新增页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Birth--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、页面跳转\"><a href=\"#2、页面跳转\" class=\"headerlink\" title=\"2、页面跳转\"></a>2、页面跳转</h4><p>在EmployeeController中添加addEmpPage方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toAddPage</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//来到添加页面,查出所有部门显示</span></span><br><span class=\"line\">    Collection&lt;Department&gt; depts = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,depts);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息</p>\n<h4 id=\"3、添加功能完成\"><a href=\"#3、添加功能完成\" class=\"headerlink\" title=\"3、添加功能完成\"></a>3、添加功能完成</h4><p>新建一个PostMapping</p>\n<blockquote>\n<p>ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；</p>\n</blockquote>\n<p>1、新建一个postMapping的方法用来接受页面的添加POST请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工添加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeDao.save(employee);</span><br><span class=\"line\">    <span class=\"comment\">//来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、修改添加页面，添加name属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1、部门对象问题？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、日期格式化？</p>\n<p>属性中添加 date-formate 默认是 / </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageCodesResolver <span class=\"title\">getMessageCodesResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      DefaultMessageCodesResolver resolver = <span class=\"keyword\">new</span> DefaultMessageCodesResolver();</span><br><span class=\"line\">      resolver.setMessageCodeFormatter(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.date-format</span>=<span class=\"string\">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、员工编辑（改）\"><a href=\"#8、员工编辑（改）\" class=\"headerlink\" title=\"8、员工编辑（改）\"></a>8、员工编辑（改）</h3><p>思路使用add页面，并且数据回显，然后区分添加，PUT请求</p>\n<h4 id=\"1、修改按钮\"><a href=\"#1、修改按钮\" class=\"headerlink\" title=\"1、修改按钮\"></a>1、修改按钮</h4><p>在list.html的<code>编辑</code>按钮加上链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、编写跳转页面\"><a href=\"#2、编写跳转页面\" class=\"headerlink\" title=\"2、编写跳转页面\"></a>2、编写跳转页面</h4><p>跳转到员工编辑页面的Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工编辑页面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toEditPage</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id ,Model model)</span></span>&#123;</span><br><span class=\"line\">    Employee emp = employeeDao.getEmpById(id);</span><br><span class=\"line\">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;emp&quot;</span>,emp);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,departments);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、对页面修改\"><a href=\"#3、对页面修改\" class=\"headerlink\" title=\"3、对页面修改\"></a>3、对页面修改</h4><p>对add页面进行修改</p>\n<p>1）、添加回显</p>\n<p>2）、添加判断是否emp!=null（区分add or edit）</p>\n<p>3）、添加put请求 –两个input的hidden标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--发送put请求--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--1.SpringMVC配置HiddenHttpMethodFilter</span></span><br><span class=\"line\"><span class=\"comment\">            2.页面创建一个post表单</span></span><br><span class=\"line\"><span class=\"comment\">            3.创建一个 input name_method 值就是我们请求的方式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==0&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span> &gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9、员工删除（删）\"><a href=\"#9、员工删除（删）\" class=\"headerlink\" title=\"9、员工删除（删）\"></a>9、员工删除（删）</h3><h4 id=\"1、新建Contoller\"><a href=\"#1、新建Contoller\" class=\"headerlink\" title=\"1、新建Contoller\"></a>1、新建Contoller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工删除</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.deleteEmpById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、修改删除标签\"><a href=\"#2、修改删除标签\" class=\"headerlink\" title=\"2、修改删除标签\"></a>2、修改删除标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:attr</span>=<span class=\"string\">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span></span><br><span class=\"line\">    删除</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、写Form表单\"><a href=\"#3、写Form表单\" class=\"headerlink\" title=\"3、写Form表单\"></a>3、写Form表单</h4><p>form表单卸载外面，input 中 name=”_method” value=”delete” 模拟delete请求</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteEmpForm&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、写JS提交\"><a href=\"#4、写JS提交\" class=\"headerlink\" title=\"4、写JS提交\"></a>4、写JS提交</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.deleteBtn&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">&quot;#deleteEmpForm&quot;</span>).attr(<span class=\"string\">&quot;action&quot;</span>,$(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;del_uri&quot;</span>)).submit();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>return false;禁用btn提交效果</p>\n</blockquote>\n<h2 id=\"7、错误机制的处理\"><a href=\"#7、错误机制的处理\" class=\"headerlink\" title=\"7、错误机制的处理\"></a>7、错误机制的处理</h2><h3 id=\"1、默认的错误处理机制\"><a href=\"#1、默认的错误处理机制\" class=\"headerlink\" title=\"1、默认的错误处理机制\"></a>1、默认的错误处理机制</h3><p>默认错误页面</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\20.error.jpg\" alt=\"20.error\"></p>\n<p>原理参照</p>\n<p>ErrorMvcAutoConfiguration:错误处理的自动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>DefaultErrorAttributes</p>\n<p>帮我们在页面共享信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">   Map&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class=\"line\">   errorAttributes.put(<span class=\"string\">&quot;timestamp&quot;</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">   addStatus(errorAttributes, requestAttributes);</span><br><span class=\"line\">   addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class=\"line\">   addPath(errorAttributes, requestAttributes);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BasicErrorController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractErrorController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//产生HTML数据</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(produces = &quot;text/html&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class=\"line\">\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\t\tresponse.setStatus(status.value());</span><br><span class=\"line\">\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (modelAndView == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//产生Json数据</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ErrorPageCustomizer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String path = <span class=\"string\">&quot;/error&quot;</span>;<span class=\"comment\">//系统出现错误以后来到error请求进行处理，(web.xml)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>DefaultErrorViewResolver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (modelAndView == <span class=\"keyword\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">      modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认SpringBoot可以找到一个页面？error/状态码</span></span><br><span class=\"line\">   String errorViewName = <span class=\"string\">&quot;error/&quot;</span> + viewName;</span><br><span class=\"line\">    <span class=\"comment\">//如果模板引擎可以解析地址，就返回模板引擎解析</span></span><br><span class=\"line\">   TemplateAvailabilityProvider provider = <span class=\"keyword\">this</span>.templateAvailabilityProviders</span><br><span class=\"line\">         .getProvider(errorViewName, <span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//有模板引擎就返回到errorViewName指定的视图地址</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(errorViewName, model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller</p>\n<p>1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ErrorViewResolver resolver : <span class=\"keyword\">this</span>.errorViewResolvers) &#123;</span><br><span class=\"line\">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (modelAndView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>l浏览器发送请求 accpt:text/html</p>\n<p>客户端请求：accept:/*</p>\n<h3 id=\"2、如何定制错误响应\"><a href=\"#2、如何定制错误响应\" class=\"headerlink\" title=\"2、如何定制错误响应\"></a>2、如何定制错误响应</h3><p>​    1）、如何定制错误的页面</p>\n<p>​        1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html</p>\n<p>​        有精确的404和4xx优先选择404</p>\n<p>​        页面获得的数据</p>\n<p>​            timestamp：时间戳</p>\n<p>​            status：状态码</p>\n<p>​            error：错误提示</p>\n<p>​            exception：异常对象</p>\n<p>​            message：异常信息</p>\n<p>​            errors:JSR303有关</p>\n<p>​        2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值</p>\n<p>​        3.没有放模板引擎，没放静态，会显示默认的错误</p>\n<p>​    2）、如何定义错误的数据</p>\n<p>举例子：新建4xx和5xx文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg\" alt=\"21.error-static\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>status: [[$&#123;status&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>timestamp: [[$&#123;timestamp&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>error: [[$&#123;error&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>message: [[$&#123;message&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>exception: [[$&#123;exception&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg\" alt=\"22.4xxhtml\"></p>\n<h3 id=\"3、如何定制Json数据\"><a href=\"#3、如何定制Json数据\" class=\"headerlink\" title=\"3、如何定制Json数据\"></a>3、如何定制Json数据</h3><h4 id=\"1、仅发送json数据\"><a href=\"#1、仅发送json数据\" class=\"headerlink\" title=\"1、仅发送json数据\"></a>1、仅发送json数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserNotExitsException</span> <span class=\"keyword\">extends</span>  <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserNotExitsException</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">&quot;用户不存在&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异常处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">handlerException</span><span class=\"params\">(Exception e)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无法自适应 都是返回的json数据</p>\n<h4 id=\"2、转发到error自适应处理\"><a href=\"#2、转发到error自适应处理\" class=\"headerlink\" title=\"2、转发到error自适应处理\"></a>2、转发到error自适应处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">    <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序默认获取状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HttpStatus <span class=\"title\">getStatus</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">   Integer statusCode = (Integer) request</span><br><span class=\"line\">         .getAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (statusCode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.valueOf(statusCode);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有自己写的自定义异常数据</p>\n<h4 id=\"3、自适应和定制数据传入\"><a href=\"#3、自适应和定制数据传入\" class=\"headerlink\" title=\"3、自适应和定制数据传入\"></a>3、自适应和定制数据传入</h4><p>Spring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；</p>\n<p>1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；</p>\n<p>2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyErrorAttributes</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultErrorAttributes</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes, <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;company&quot;</span>, <span class=\"string\">&quot;wdjr&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异常处理：把map方法请求域中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;ext&quot;</span>, map);</span><br><span class=\"line\">        <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的MyErrorAttributes类中加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们的异常处理器</span></span><br><span class=\"line\">Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) requestAttributes.getAttribute(<span class=\"string\">&quot;ext&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;ext&quot;</span>, ext);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、配置嵌入式servlet容器\"><a href=\"#8、配置嵌入式servlet容器\" class=\"headerlink\" title=\"8、配置嵌入式servlet容器\"></a>8、配置嵌入式servlet容器</h2><h3 id=\"1、定制和修改Servlet容器\"><a href=\"#1、定制和修改Servlet容器\" class=\"headerlink\" title=\"1、定制和修改Servlet容器\"></a>1、定制和修改Servlet容器</h3><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p>![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)</p>\n<p>问题？</p>\n<p>1）、如何定制和修改Servlet容器；</p>\n<p>1、 修改Server相关的配置文件 application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通用的servlet容器配置</span></span><br><span class=\"line\"><span class=\"attr\">server.xxx</span></span><br><span class=\"line\"><span class=\"comment\">#tomcat的配置</span></span><br><span class=\"line\"><span class=\"attr\">server.tomcat.xxxx</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">embeddedServletContainerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定制嵌入式Servlet的容器相关规则</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.setPort(<span class=\"number\">8999</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实同理，都是实现EmbeddedServletContainerCustomizer</p>\n<h3 id=\"2、注册Servlet三大组件\"><a href=\"#2、注册Servlet三大组件\" class=\"headerlink\" title=\"2、注册Servlet三大组件\"></a>2、注册Servlet三大组件</h3><p>三大组件 Servlet Filter Listener</p>\n<p>由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml</p>\n<p>注册三大组件</p>\n<h4 id=\"ServletRegistrationBean\"><a href=\"#ServletRegistrationBean\" class=\"headerlink\" title=\"ServletRegistrationBean\"></a>ServletRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean servletRegistrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> MyServlet(),<span class=\"string\">&quot;/servlet&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> servletRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">&quot;Hello Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FilterRegistrationBean\"><a href=\"#FilterRegistrationBean\" class=\"headerlink\" title=\"FilterRegistrationBean\"></a>FilterRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/hello&quot;</span>,<span class=\"string\">&quot;/myServlet&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyFilter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyFilter process&quot;</span>);</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ServletListenerRegistrationBean\"><a href=\"#ServletListenerRegistrationBean\" class=\"headerlink\" title=\"ServletListenerRegistrationBean\"></a>ServletListenerRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> MyListener());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用启动..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用销毁..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">dispatcherServletRegistration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class=\"line\">      ServletRegistrationBean registration = <span class=\"keyword\">new</span> ServletRegistrationBean(</span><br><span class=\"line\">            dispatcherServlet, <span class=\"keyword\">this</span>.serverProperties.getServletMapping());</span><br><span class=\"line\">       <span class=\"comment\">//默认拦截 /所有请求 包括静态资源 不包括jsp</span></span><br><span class=\"line\">       <span class=\"comment\">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class=\"line\">      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">      registration.setLoadOnStartup(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.multipartConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         registration.setMultipartConfig(<span class=\"keyword\">this</span>.multipartConfig);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、切换其他的Servlet容器\"><a href=\"#3、切换其他的Servlet容器\" class=\"headerlink\" title=\"3、切换其他的Servlet容器\"></a>3、切换其他的Servlet容器</h3><p>在ServerProperties中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Jetty jetty = <span class=\"keyword\">new</span> Jetty();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Undertow undertow = <span class=\"keyword\">new</span> Undertow();</span><br></pre></td></tr></table></figure>\n\n<p>tomcat(默认支持)</p>\n<p>jetty（长连接）</p>\n<p>undertow（多并发）</p>\n<p>切换容器 仅仅需要修改pom文件的依赖就可以</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、嵌入式Servlet容器自动配置原理\"><a href=\"#4、嵌入式Servlet容器自动配置原理\" class=\"headerlink\" title=\"4、嵌入式Servlet容器自动配置原理\"></a>4、嵌入式Servlet容器自动配置原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import(BeanPostProcessorsRegistrar.class)</span></span><br><span class=\"line\"><span class=\"comment\">//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class=\"comment\">//当前是否引入tomcat依赖</span></span><br><span class=\"line\">    <span class=\"comment\">//判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedTomcat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取嵌入式的Servlet容器</span></span><br><span class=\"line\">   <span class=\"function\">EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         ServletContextInitializer... initializers)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承关系</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg\" alt=\"24.EmdServletFactory\"></p>\n<p>2）、EmbeddedServletContainer:(嵌入式的Servlet容器)</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg\" alt=\"25.EmdServletContainer\"></p>\n<p>3）、TomcatEmbeddedServletContainerFactory为例 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class=\"line\">   Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\">    <span class=\"comment\">//配置tomcat的基本环节</span></span><br><span class=\"line\">   File baseDir = (<span class=\"keyword\">this</span>.baseDirectory != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.baseDirectory</span><br><span class=\"line\">         : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>));</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   Connector connector = <span class=\"keyword\">new</span> Connector(<span class=\"keyword\">this</span>.protocol);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"keyword\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    <span class=\"comment\">//将配置好的tomcat传入进去；并且启动tomcat容器</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、嵌入式配置修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>\n\n<p>EmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？</p>\n<p>怎么修改？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.beanFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;embeddedServletContainerCustomizerBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         EmbeddedServletContainerCustomizerBeanPostProcessor.class);</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;errorPageRegistrarBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class=\"line\">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class=\"line\">        customizer.customize(bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class=\"title\">getCustomizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customizers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Look up does not include the parent context</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = <span class=\"keyword\">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanFactory</span><br><span class=\"line\">            <span class=\"comment\">//从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class=\"line\">            <span class=\"comment\">//定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class=\"line\">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class=\"line\">                            <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            .values());</span><br><span class=\"line\">        Collections.sort(<span class=\"keyword\">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = Collections.unmodifiableList(<span class=\"keyword\">this</span>.customizers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customizers;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ServerProperties也是EmbeddedServletContainerCustomizer定制器</p>\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat</p>\n<p>EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就要通过后置处理器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerCustomizerBeanPostProcessor</span><br></pre></td></tr></table></figure>\n\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法</p>\n<h3 id=\"5、嵌入式Servlet容器启动原理\"><a href=\"#5、嵌入式Servlet容器启动原理\" class=\"headerlink\" title=\"5、嵌入式Servlet容器启动原理\"></a>5、嵌入式Servlet容器启动原理</h3><p>什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;</p>\n<p>获取嵌入式的容器工厂</p>\n<p>1）、SpringBoot应用启动Run方法</p>\n<p>2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (contextClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      contextClass = Class.forName(<span class=\"keyword\">this</span>.webEnvironment</span><br><span class=\"line\">            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3）、refresh(context);刷新创建好的IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">   postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">   invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">   registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">   initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">   initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">   onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">   registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">   finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">   finishRefresh();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、 onRefresh();web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer</p>\n<p>6）、获取嵌入式的Servlet容器工厂；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br></pre></td></tr></table></figure>\n\n<p>从ioc容器中获取EmbeddedServletContainerFactory组件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；</p>\n<p>7）、使用容器工厂获取嵌入式的Servlet容器</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p>先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来</p>\n<p>ioc启动创建Servlet容器</p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式的Servlet容器：应用达成jar包</p>\n<p>​    优点：简单、便携</p>\n<p>​    缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）</p>\n<p>外置的Servlet容器：外面安装Tomcat是以war包的方式打包。</p>\n<h3 id=\"1、IDEA操作外部Servlet\"><a href=\"#1、IDEA操作外部Servlet\" class=\"headerlink\" title=\"1、IDEA操作外部Servlet\"></a>1、IDEA操作外部Servlet</h3><p>1、创建程序为war程序</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg\" alt=\"26.tomcat1\"></p>\n<p>2、选择版本</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg\" alt=\"27.tomcat2\"></p>\n<p>3、添加tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg\" alt=\"28.tomcat3\"></p>\n<p>4、选择tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg\" alt=\"30.tomcat4\"></p>\n<p>5、选择本地的Tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg\" alt=\"31.tomcat5\"></p>\n<p>6、配置tomcat路径</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg\" alt=\"32.tomcat6\"></p>\n<p>7、添加服务器</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg\" alt=\"33.tomcat7\"></p>\n<p>8、添加exploded的war配置，应用OK tomcat配置完成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg\" alt=\"34.tomcat8\"></p>\n<p>二、配置webapp文件夹</p>\n<p>1、点击配置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg\" alt=\"35.tomcat9\"></p>\n<p>2、添加webapp目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg\" alt=\"36.tomcat10\"></p>\n<p>3、默认配置就可以</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg\" alt=\"37.tomcat11\"></p>\n<p>4、配置web.xml文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg\" alt=\"38.tomcat12\"></p>\n<p>5、文档目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg\" alt=\"39.tomcat13\"></p>\n<h3 id=\"2、运行一个示例\"><a href=\"#2、运行一个示例\" class=\"headerlink\" title=\"2、运行一个示例\"></a>2、运行一个示例</h3><p>1、项目目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg\" alt=\"40.demo1\"></p>\n<p>2、配置文件写视图解析前后缀</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.view.prefix</span>=<span class=\"string\">/WEB-INF/jsp/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.mvc.view.suffix</span>=<span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n\n<p>3、HelloController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;message&quot;</span>,<span class=\"string\">&quot;这是Controller传过来的message&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、success.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Success&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class=\"line\">message:$&#123;message&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行结果</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg\" alt=\"41.demo2\"></p>\n<p>步骤</p>\n<p>1、必须创建一个war项目；</p>\n<p>2、将嵌入式的Tomcat指定为provided</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入SpringBoot的主程序，</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动服务器就可以；</p>\n<h3 id=\"3、原理\"><a href=\"#3、原理\" class=\"headerlink\" title=\"3、原理\"></a>3、原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；</p>\n<p>war包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器</p>\n<p>servlet3.0规范</p>\n<p> 8.2.4 共享库和运行时插件</p>\n<p>规则：</p>\n<p>1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例</p>\n<p>2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名</p>\n<p>3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类</p>\n<p>流程：</p>\n<p>1、启动Tomcat服务器</p>\n<p>2、spring web模块里有这个文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg\" alt=\"42.servletContainerInit\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure>\n\n<p>3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set&lt;Class&lt;?&gt;&gt;;为这些感兴趣类创建实例</p>\n<p>4、每个创建好的WebApplicationInitializer调用自己的onStratup</p>\n<p>5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createRootApplicationContext</span><span class=\"params\">(ServletContext servletContext)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplicationBuilder builder = <span class=\"keyword\">this</span>.createSpringApplicationBuilder();</span><br><span class=\"line\">    <span class=\"comment\">//环境构建器</span></span><br><span class=\"line\">    StandardServletEnvironment environment = <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    environment.initPropertySources(servletContext, (ServletConfig)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    builder.environment(environment);</span><br><span class=\"line\">    builder.main(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    ApplicationContext parent = <span class=\"keyword\">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.info(<span class=\"string\">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class=\"line\">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ParentContextApplicationContextInitializer(parent)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ServletContextApplicationContextInitializer(servletContext)&#125;);</span><br><span class=\"line\">    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class=\"line\">    <span class=\"comment\">//调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来</span></span><br><span class=\"line\">    builder = <span class=\"keyword\">this</span>.configure(builder);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个spring应用</span></span><br><span class=\"line\">    SpringApplication application = builder.build();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(<span class=\"keyword\">this</span>.getClass(), Configuration.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        application.getSources().add(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.state(!application.getSources().isEmpty(), <span class=\"string\">&quot;No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.registerErrorPageFilter) &#123;</span><br><span class=\"line\">        application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//最后启动Spring容器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.run(application);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、Spring的应用就启动完了并且创建IOC容器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、Docker\"><a href=\"#五、Docker\" class=\"headerlink\" title=\"五、Docker\"></a>五、Docker</h1><h2 id=\"1、简介-1\"><a href=\"#1、简介-1\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎</p>\n<p>将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；</p>\n<h2 id=\"2、Docker的核心概念\"><a href=\"#2、Docker的核心概念\" class=\"headerlink\" title=\"2、Docker的核心概念\"></a>2、Docker的核心概念</h2><p>docker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）</p>\n<p>docker客户端（Client）:操作docker主机</p>\n<p>docker仓库（Registry）：用来保存打包好的软件镜像</p>\n<p>docker镜像（Image）:软件打好包的镜像，放到docker的仓库中</p>\n<p>docker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）</p>\n<p>docker的步骤：</p>\n<p>​    1、安装Docker</p>\n<p>​    2、去Docker仓库找到这个软件对应的镜像；</p>\n<p>​    3、使用Docker运行的这个镜像，镜像就会生成一个容器</p>\n<p>​    4、对容器的启动停止，就是对软件的启动和停止</p>\n<h2 id=\"3、安装Docker\"><a href=\"#3、安装Docker\" class=\"headerlink\" title=\"3、安装Docker\"></a>3、安装Docker</h2><h3 id=\"1、安装Linux\"><a href=\"#1、安装Linux\" class=\"headerlink\" title=\"1、安装Linux\"></a>1、安装Linux</h3><p><a href=\"http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1\">安装vxbox并且安装ubuntu</a></p>\n<h3 id=\"2、在linux上安装docker\"><a href=\"#2、在linux上安装docker\" class=\"headerlink\" title=\"2、在linux上安装docker\"></a>2、在linux上安装docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看centos版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> uname -r</span></span><br><span class=\"line\">3.10.0-693.el7.x86_64</span><br><span class=\"line\">要求：大于3.10</span><br><span class=\"line\">如果小于的话升级*（选做）</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum update</span></span><br><span class=\"line\">2、安装docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install docker</span></span><br><span class=\"line\">3、启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker -v</span></span><br><span class=\"line\">4、开机启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\">5、停止docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop docker</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、docker的常用操作\"><a href=\"#4、docker的常用操作\" class=\"headerlink\" title=\"4、docker的常用操作\"></a>4、docker的常用操作</h2><h3 id=\"1、镜像操作\"><a href=\"#1、镜像操作\" class=\"headerlink\" title=\"1、镜像操作\"></a>1、镜像操作</h3><p>1、搜索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<p>默认去docker hub网站查找<img src=\"E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg\" alt=\"44.docker1\"></p>\n<p>2、拉取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认最新版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docekr pull mysql</span></span><br><span class=\"line\">安装指定版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull mysql:5.5</span></span><br></pre></td></tr></table></figure>\n\n<p>3、查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p>4、删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、容器操作\"><a href=\"#2、容器操作\" class=\"headerlink\" title=\"2、容器操作\"></a>2、容器操作</h3><p>软件的镜像（qq.exe） – 运行镜像 – 产生一个容器（正在运行的软件）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、搜索镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search tomcat</span></span><br><span class=\"line\">2、拉取镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull tomcat</span></span><br><span class=\"line\">3、根据镜像启动容器</span><br><span class=\"line\">[root@lion ~]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">docker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d tomcat:latest</span><br><span class=\"line\">2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249</span><br><span class=\"line\">4、查看那个进程正在进行</span><br><span class=\"line\">[root@lion ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat</span><br><span class=\"line\">5、停止运行中容器</span><br><span class=\"line\">[root@lion ~]# docker stop 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">6、查看所有容器</span><br><span class=\"line\">[root@lion ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat</span><br><span class=\"line\">7、启动容器</span><br><span class=\"line\">[root@lion ~]# docker start 2f0348702f5f</span><br><span class=\"line\">8、删除docker容器</span><br><span class=\"line\">[root@lion ~]# docker rm 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">9、端口映射</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat</span><br><span class=\"line\">692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29</span><br><span class=\"line\">虚拟机:8888</span><br><span class=\"line\">容器的:8080</span><br><span class=\"line\">-d:后台运行</span><br><span class=\"line\">-p:主机端口映射到容器端口</span><br><span class=\"line\">浏览器：192.168.179.129:8888</span><br><span class=\"line\">10、docker的日志</span><br><span class=\"line\">[root@lion ~]# docker logs 692c408c2201</span><br><span class=\"line\">11、多个启动</span><br><span class=\"line\">[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat</span><br><span class=\"line\">浏览器：192.168.179.129:9000</span><br></pre></td></tr></table></figure>\n\n<p>更多命令参考docker镜像文档</p>\n<h3 id=\"3、安装Mysql\"><a href=\"#3、安装Mysql\" class=\"headerlink\" title=\"3、安装Mysql\"></a>3、安装Mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、数据访问\"><a href=\"#六、数据访问\" class=\"headerlink\" title=\"六、数据访问\"></a>六、数据访问</h1><h2 id=\"1、整合JDBC数据源\"><a href=\"#1、整合JDBC数据源\" class=\"headerlink\" title=\"1、整合JDBC数据源\"></a>1、整合JDBC数据源</h2><p>1、新建项目 spring-boot-06-data-jdbc</p>\n<ul>\n<li>WEB</li>\n<li>Mysql</li>\n<li>JDBC</li>\n<li>SpringBoot1.5</li>\n</ul>\n<p>2、编写配置文件appliction.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写测试类测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot06DataJdbcApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(dataSource.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class org.apache.tomcat.jdbc.pool.DataSource</span><br><span class=\"line\">ProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]</span><br></pre></td></tr></table></figure>\n\n<p>数据源相关配置都在DataSourceProperties属性里</p>\n<p>自动配置原理</p>\n<p>E:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc</p>\n<h3 id=\"1、DataSource\"><a href=\"#1、DataSource\" class=\"headerlink\" title=\"1、DataSource\"></a>1、DataSource</h3><p>参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源</p>\n<h3 id=\"2、SpringBoot默认支持\"><a href=\"#2、SpringBoot默认支持\" class=\"headerlink\" title=\"2、SpringBoot默认支持\"></a>2、SpringBoot默认支持</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tomcat数据源</span><br><span class=\"line\">HikariDataSource</span><br><span class=\"line\">dbcp.BasicDataSource</span><br><span class=\"line\">dbcp2.BasicDataSource</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、自定义数据源\"><a href=\"#3、自定义数据源\" class=\"headerlink\" title=\"3、自定义数据源\"></a>3、自定义数据源</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、运行sql建表\"><a href=\"#4、运行sql建表\" class=\"headerlink\" title=\"4、运行sql建表\"></a>4、运行sql建表</h3><p>在DataSourceAutoConfiguration中<strong>DataSourceInitializer</strong>类</p>\n<p>监听器</p>\n<p>作用：</p>\n<p>1）、postConstruct -》runSchemaScript 运行建表sql文件</p>\n<p>2）、runDataScript运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span> data<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span></span><br><span class=\"line\">默认规则：schema.sql ,schema<span class=\"operator\">-</span>all.sql;</span><br></pre></td></tr></table></figure>\n\n<p><strong>举个栗子</strong></p>\n<p>创建department表</p>\n<p>1、department.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Navicat MySQL Data Transfer</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Source Server         : 192.168.179.131</span></span><br><span class=\"line\"><span class=\"comment\">Source Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">Source Host           : 192.168.179.131:3306</span></span><br><span class=\"line\"><span class=\"comment\">Source Database       : jdbc</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Target Server Type    : MYSQL</span></span><br><span class=\"line\"><span class=\"comment\">Target Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">File Encoding         : 65001</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Date: 2018-05-14 14:28:52</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- Table structure for department</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `department`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `department` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `departmentName` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、将department.sql命名为schema-all.sql</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg\" alt=\"45.schema-all\"></p>\n<p>3、运行测试类</p>\n<p>自定义sql的文件名，department.sql在配置文件中</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">schema:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">classpath:department.sql</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5、操作JdbcTemplate\"><a href=\"#5、操作JdbcTemplate\" class=\"headerlink\" title=\"5、操作JdbcTemplate\"></a>5、操作JdbcTemplate</h3><p><strong>FBI warning</strong>:将department.sql删除或者改名，因为运行文件会将表中数据清除</p>\n<p>1、新建一个Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class=\"string\">&quot;select * from department&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、表中添加数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\46.department.jpg\" alt=\"46.department\"></p>\n<p>3、访问请求查询数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\47.hello.jpg\" alt=\"47.hello\"></p>\n<h2 id=\"2、自定义数据源\"><a href=\"#2、自定义数据源\" class=\"headerlink\" title=\"2、自定义数据源\"></a>2、自定义数据源</h2><p>1、导入Druid的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>已经替换了原来的tomcat数据源</p>\n<p>3、配置Druid数据源配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">\t<span class=\"comment\"># 初始化大小，最小，最大  </span></span><br><span class=\"line\">    <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置获取连接等待超时的时间  </span></span><br><span class=\"line\">    <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">    <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙</span></span><br><span class=\"line\">    <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">userGlobalDataSourceStat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录  </span></span><br><span class=\"line\">    <span class=\"attr\">connectionProperties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>4、Druid配置监控</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Druid的监控</span></span><br><span class=\"line\">    <span class=\"comment\">//1、配置一个管理后台</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> StatViewServlet(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginUsername&quot;</span>, <span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginPassword&quot;</span>, <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2、配置监控的filter</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webstatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;exclusions&quot;</span>, <span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行测试，访问 localhost:9000/druid</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\48.druid.jpg\" alt=\"48.druid\"></p>\n<p>输入刚才调好的用户名密码即可访问</p>\n<h2 id=\"3、整合Mybatis\"><a href=\"#3、整合Mybatis\" class=\"headerlink\" title=\"3、整合Mybatis\"></a>3、整合Mybatis</h2><p>1、新建工程，SpringBoot1.5+web+JDBC+Mysql</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、导入配置文件中关于Druid的配置</p>\n<p>​    2.1、导入依赖</p>\n<p>​    2.2、配置文件application.yml（指定用户名密码…配置Druid的配置参数，修改sql文件加载的默认名）</p>\n<p>​    2.3、将Druid组件加入到容器中（监控）重点</p>\n<p>​    具体同上</p>\n<p>3、创建数据表department和employee表</p>\n<p>​    3.1、根据sql文件，新建两张表</p>\n<p>​    3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">schema:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/department.sql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/employeee.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>​    3.3、运行程序检查数据库是否创建成功</p>\n<p>4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） </p>\n<p>在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类名冲突所以全类名</span></span><br><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title\">configurationCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConfigurationCustomizer() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">                configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><p>5、新建mapper</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//指定是一个mapper</span></span><br><span class=\"line\"><span class=\"string\">@Mapper</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">interface</span> <span class=\"string\">DepartmentMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Insert(&quot;insert</span> <span class=\"string\">into</span> <span class=\"string\">department(dept_name)</span> <span class=\"string\">value(#</span>&#123;<span class=\"string\">deptName</span>&#125;<span class=\"string\">)&quot;)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">int</span> <span class=\"string\">insertDept(Department</span> <span class=\"string\">department);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Delete(&quot;delete</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int deleteDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Update(&quot;</span><span class=\"string\">update</span> <span class=\"string\">department</span> <span class=\"string\">set</span> <span class=\"string\">dept_Name=#</span>&#123;<span class=\"string\">deptName</span>&#125; <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int updateDept(Department department);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Select(&quot;</span><span class=\"string\">select</span> <span class=\"string\">*</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public Department getDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>6、编写controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeptController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DepartmentMapper departmentMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDepartment</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.getDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/delDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.deleteDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.updateDept(<span class=\"keyword\">new</span> Department(id, <span class=\"string\">&quot;开发部&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertDept</span><span class=\"params\">(Department department)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.insertDept(department);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>mapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文</p>\n<p>件夹下的mapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主配置类或者mybatis配置类</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(value = &quot;com.wdjr.springboot.mapper&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件方式\"><a href=\"#配置文件方式\" class=\"headerlink\" title=\"配置文件方式\"></a>配置文件方式</h3><p>1、新建文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg\" alt=\"50.mybatisxml\"></p>\n<p>2、新建mybatis的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、新建Employee的接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insetEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、新建Employee的mapper.xml的映射文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.wdjr.springboot.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getEmpById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.wdjr.springboot.bean.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">      select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insetEmp&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、修改application.yml配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>6、新建一个Controller访问方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeMapper employeeMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getEmp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeMapper.getEmpById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insertEmp&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">insertEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">        employeeMapper.insetEmp(employee);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、JPA数据访问\"><a href=\"#4、JPA数据访问\" class=\"headerlink\" title=\"4、JPA数据访问\"></a>4、JPA数据访问</h2><p>新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC</p>\n<p>目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg\" alt=\"51.JPA\"></p>\n<p>1、新建一个实体类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用JPA注解配置映射关系</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span><span class=\"comment\">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name=&quot;tbl_user&quot;)</span> <span class=\"comment\">//@Table来指定和那个数据表对应，如果省略默认表明就是user;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//这是一个主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class=\"comment\">//自增组件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;last_name&quot;,length = 50)</span> <span class=\"comment\">//这是和数据表对应的一个列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span><span class=\"comment\">//省略默认列名就是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个UserRepository来继承jpa的绝大多数功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承jpaRepository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131/jpa</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">    <span class=\"comment\">#更新或创建</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>4、编写Controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        User user = userRepository.findOne(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">insertUser</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">        User user1 = userRepository.save(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  user1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七、启动配置原理\"><a href=\"#七、启动配置原理\" class=\"headerlink\" title=\"七、启动配置原理\"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>\n<p>加载配置文件META-INF/spring.factories</p>\n<p>​    ApplicationContextInitializer</p>\n<p>​    SpringApplicationRunListener</p>\n<p>ioc容器中</p>\n<p>​    ApplicationRunner</p>\n<p>​    CommandLineRunner</p>\n<p>启动流程</p>\n<h2 id=\"1、创建SpringApplicaiotn对象\"><a href=\"#1、创建SpringApplicaiotn对象\" class=\"headerlink\" title=\"1、创建SpringApplicaiotn对象\"></a>1、创建SpringApplicaiotn对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Object[] sources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存主配置类</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sources != <span class=\"keyword\">null</span> &amp;&amp; sources.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前是否是个web应用</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来</span></span><br><span class=\"line\">   setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">         ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来</span></span><br><span class=\"line\">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">//决定哪一个是主程序</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ApplicationInitializer</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg\" alt=\"52.applicationCotextInitializer\"></p>\n<p> ApplicationListener</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg\" alt=\"53.Listener\"></p>\n<h2 id=\"2、运行Run方法\"><a href=\"#2、运行Run方法\" class=\"headerlink\" title=\"2、运行Run方法\"></a>2、运行Run方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">//获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory</span></span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">//回调所有的SpringApplicationRunListener.starting()方法</span></span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//封装命令行参数</span></span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">       <span class=\"comment\">//准备环境</span></span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成</span></span><br><span class=\"line\">       <span class=\"comment\">//打印SpringBoot图标</span></span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">       <span class=\"comment\">//创建ApplicationContext，决定创建web的ioc容器还是普通的ioc</span></span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">       <span class=\"comment\">//异常分析</span></span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">       <span class=\"comment\">//重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//回调所有的SpringApplicationRunListener的contextPrepare()</span></span><br><span class=\"line\">       <span class=\"comment\">//告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded</span></span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">       <span class=\"comment\">//重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat</span></span><br><span class=\"line\">       <span class=\"comment\">//扫描 创建加载所有组件的地方</span></span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">       <span class=\"comment\">//从ioc中获取所有的ApplicationRunner和CommandLineRunner</span></span><br><span class=\"line\">       <span class=\"comment\">//ApplicationRunner先回调</span></span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">//保存应用状态</span></span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//整个springboot启动完成以后返回启动的ioc容器</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、事件监听机制\"><a href=\"#3、事件监听机制\" class=\"headerlink\" title=\"3、事件监听机制\"></a>3、事件监听机制</h2><p>新建listener监听</p>\n<p>文件目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg\" alt=\"54.listener2\"></p>\n<p>1、HelloApplicationContextInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型监听ioc容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextInitializer</span>&lt;<span class=\"title\">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationContextInitializer...跑起来了.....&quot;</span>+applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、HelloSpringApplicationRunListener</p>\n<p>加构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloSpringApplicationRunListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloSpringApplicationRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听容器开始......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环境准备好了......&quot;</span>+environment.getSystemProperties().get(<span class=\"string\">&quot;os.name&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ioc容器准备好了......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器环境已经加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finished</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;全部加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、HelloApplicationRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationRunner.....run....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、HelloCommandLineRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CommandLineRunner......run.....&quot;</span>+Arrays.asList(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件运行方法</p>\n<p>HelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Initializers</span><br><span class=\"line\">org.springframework.context.ApplicationContextInitializer&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloApplicationContextInitializer</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.boot.SpringApplicationRunListener&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloSpringApplicationRunListener</span><br></pre></td></tr></table></figure>\n\n<p>HelloApplicationRunner和HelloCommandLineRunner ioc加入</p>\n<p>@Component</p>\n<h1 id=\"八、SpringBoot的自定义starter\"><a href=\"#八、SpringBoot的自定义starter\" class=\"headerlink\" title=\"八、SpringBoot的自定义starter\"></a>八、SpringBoot的自定义starter</h1><p>starter：场景启动器</p>\n<p>1、场景需要使用什么依赖？</p>\n<p>2、如何编写自动配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//指定这个类是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnXXX</span> <span class=\"comment\">//在指定条件下成立的情况下自动配置类生效</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span> <span class=\"comment\">//指定自动配置类的顺序</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//给容器中添加组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span> <span class=\"comment\">//结合相关xxxProperties类来绑定相关的配置</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span> <span class=\"comment\">//让xxxProperties生效加到容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\">自动配置类要能加载</span><br><span class=\"line\">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br></pre></td></tr></table></figure>\n\n<p>3、模式</p>\n<p>启动器空的jar只需要做依赖管理导入；</p>\n<p>专门写一个自动配置模块；</p>\n<p>启动器依赖自动配置，别人只需要引入starter</p>\n<p>xxx-spring-boot-starter</p>\n<h3 id=\"新建一个starter\"><a href=\"#新建一个starter\" class=\"headerlink\" title=\"新建一个starter\"></a>新建一个starter</h3><blockquote>\n<p>绕的你怀疑人生</p>\n</blockquote>\n<h4 id=\"1、新建一个空项目工程\"><a href=\"#1、新建一个空项目工程\" class=\"headerlink\" title=\"1、新建一个空项目工程\"></a>1、新建一个空项目工程</h4><p><img src=\"E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg\" alt=\"56.starter01\"></p>\n<p>2、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg\" alt=\"57.starter02\"></p>\n<p>3、导入module</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg\" alt=\"58.starter03\"></p>\n<p>4、新建一个Maven工程</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg\" alt=\"59.starter04\"></p>\n<p>5、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg\" alt=\"60.starter05\"></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg\" alt=\"61.starter06\"></p>\n<p>6、在新建一个autoconfiguration类的spring</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg\" alt=\"62.starter07\"></p>\n<p>7、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg\" alt=\"63.starter08\"></p>\n<p>8、无需导入依赖</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg\" alt=\"64.starter09\"></p>\n<p>9、next</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg\" alt=\"65.starter10\"></p>\n<p>最后配置完成</p>\n<h4 id=\"2、编写starter\"><a href=\"#2、编写starter\" class=\"headerlink\" title=\"2、编写starter\"></a>2、编写starter</h4><h5 id=\"autoconfigurer\"><a href=\"#autoconfigurer\" class=\"headerlink\" title=\"autoconfigurer\"></a>autoconfigurer</h5><p>对<strong>lxy-spring-boot-starter-autoconfigurer</strong>进行删减</p>\n<p>目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg\" alt=\"66.starter-build01\"></p>\n<p>2、pom文件修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写相关的类</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg\" alt=\"67.starter-build02\"></p>\n<p>4、HelloProperties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;lxy.hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPrefix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrefix</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSuffix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuffix</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、HelloService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloProperties <span class=\"title\">getHelloProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHelloProperties</span><span class=\"params\">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.helloProperties = helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+name+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、HelloServiceAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        HelloService service = <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">        service.setHelloProperties(helloProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\</span><br><span class=\"line\">com.lxy.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter-autoconfigurer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>9、install生成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg\" alt=\"68.starter-build03\"></p>\n<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><p>新建一个springboot 1.5+web</p>\n<p>1、引入starter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个Controller用来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService.sayHello(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件制定前缀和后缀名</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">lxy.hello.prefix</span>=<span class=\"string\">Starter-</span></span><br><span class=\"line\"><span class=\"meta\">lxy.hello.suffix</span>=<span class=\"string\">-Success</span></span><br></pre></td></tr></table></figure>\n\n<p>4、运行访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg\" alt=\"70.starter-build05\"></p>\n<p>成功爽啊</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、Spring-Boot入门\"><a href=\"#一、Spring-Boot入门\" class=\"headerlink\" title=\"一、Spring Boot入门\"></a>一、Spring Boot入门</h1><h2 id=\"1、Spring-Boot简介\"><a href=\"#1、Spring-Boot简介\" class=\"headerlink\" title=\"1、Spring Boot简介\"></a>1、Spring Boot简介</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务，可以通过HTTP的方式进行互通</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元</p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p>环境约束</p>\n<ul>\n<li>jdk1.8</li>\n<li>maven 3.x :maven3.3以上</li>\n<li>IDEA2017</li>\n<li>SpringBoot 1.5.9RELEASE</li>\n</ul>\n<h3 id=\"1、MAVEN设置\"><a href=\"#1、MAVEN设置\" class=\"headerlink\" title=\"1、MAVEN设置\"></a>1、MAVEN设置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置JDK版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk18<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span>     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，</span></span><br><span class=\"line\"><span class=\"comment\">        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。</span></span><br><span class=\"line\"><span class=\"comment\">        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;id&gt;spring-libs-milestone&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;name&gt;Spring Milestones&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/mirror&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 备选镜像，也是可以通过 url 去查找确定一下，</span></span><br><span class=\"line\"><span class=\"comment\">        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        typor<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://central.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件</p>\n<p>​    快捷键：</p>\n<p>​    Ctrl+D 复制一行</p>\n<p>​    Ctrl+Y 删除一行</p>\n<p>​    Ctrl+P 参数提示</p>\n<p>​    Ctrl+Alt+V 自动补齐方法</p>\n<p>​    Ctrl+N 查找类方法</p>\n<p>​    Alt+Ins 构造器、getter/setter toString</p>\n<p>​    Ctrl+O 重载方法提示</p>\n<p>​    Alt+Enter 提示导入类etc</p>\n<p>​    Shift+F6 :文件重命名</p>\n<h2 id=\"4、Spring-Boot的Hello-World\"><a href=\"#4、Spring-Boot的Hello-World\" class=\"headerlink\" title=\"4、Spring Boot的Hello World\"></a>4、Spring Boot的Hello World</h2><h3 id=\"1、创建一个Maven工程\"><a href=\"#1、创建一个Maven工程\" class=\"headerlink\" title=\"1、创建一个Maven工程\"></a>1、创建一个Maven工程</h3><h3 id=\"2、导入Spring-Boot的相关依赖\"><a href=\"#2、导入Spring-Boot的相关依赖\" class=\"headerlink\" title=\"2、导入Spring Boot的相关依赖\"></a>2、导入Spring Boot的相关依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写个主程序\"><a href=\"#3、编写个主程序\" class=\"headerlink\" title=\"3、编写个主程序\"></a>3、编写个主程序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写相应的Controller和Service\"><a href=\"#4、编写相应的Controller和Service\" class=\"headerlink\" title=\"4、编写相应的Controller和Service\"></a>4、编写相应的Controller和Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String  <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><p>访问 localhost:8080/hello</p>\n<h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><p>在pom.xml文件中，导入build插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、HelloWorld深度理解\"><a href=\"#5、HelloWorld深度理解\" class=\"headerlink\" title=\"5、HelloWorld深度理解\"></a>5、HelloWorld深度理解</h2><h3 id=\"1-POM-xml文件\"><a href=\"#1-POM-xml文件\" class=\"headerlink\" title=\"1.POM.xml文件\"></a>1.POM.xml文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个父项目<strong>spring-boot-starter-parent</strong>又依赖一个父项目</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面有个属性，定义了对应的版本号</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activemq.version</span>&gt;</span>5.15.3<span class=\"tag\">&lt;/<span class=\"name\">activemq.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">antlr2.version</span>&gt;</span>2.7.7<span class=\"tag\">&lt;/<span class=\"name\">antlr2.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appengine-sdk.version</span>&gt;</span>1.9.63<span class=\"tag\">&lt;/<span class=\"name\">appengine-sdk.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artemis.version</span>&gt;</span>2.4.0<span class=\"tag\">&lt;/<span class=\"name\">artemis.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aspectj.version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">aspectj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assertj.version</span>&gt;</span>3.9.1<span class=\"tag\">&lt;/<span class=\"name\">assertj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">atomikos.version</span>&gt;</span>4.0.6<span class=\"tag\">&lt;/<span class=\"name\">atomikos.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bitronix.version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">bitronix.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class=\"line\">    。。。。。。。</span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件</p>\n<p><strong>spring boot</strong>将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。</p>\n<h3 id=\"2、主程序入口\"><a href=\"#2、主程序入口\" class=\"headerlink\" title=\"2、主程序入口\"></a>2、主程序入口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootApplication:</strong> 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用</p>\n<p>进入SpringBootApplication注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootConfiguration</strong>：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类</p>\n<p><strong>@Configuration</strong>:配置类上，来标注这个注解；<br>配置类 —- 配置文件，也是容器中的一个组件（@Component）<br><strong>@EnableAutoConfiguration</strong>:开启自动配置功能<br>以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动<br>配置功能；这样自动配置才能生效。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123; </span><br></pre></td></tr></table></figure>\n\n<p><strong>@AutoConfigurationPackage</strong>:自动配置包<br>**@Import({Registrar.class})**：底层注解，给容器导入组件；<br>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； </p>\n<p><strong>@Import({AutoConfigurationImportSelector.class})：</strong><br>给容器导入组件？ </p>\n<p>AutoConfigurationImportSelector：导入组件选择器 </p>\n<p>将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；</p>\n<p>会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置<br>好这些组件。 </p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg\" alt=\"1.configuration\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; configurations =</span><br><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(<span class=\"keyword\">this</span>.getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\"><span class=\"keyword\">this</span>.getBeanClassLoader());</span><br><span class=\"line\">\tAssert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),</code><br><code>this.getBeanClassLoader());</code> </p>\n<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；</p>\n<p>将这些值作为自动配置类导入到容器中，自动配置就生效了。 <img src=\"E:\\工作文档\\SpringBoot\\images\\2.factories.jpg\" alt=\"2.factories\"></p>\n<p>J2EE的整体解决方案</p>\n<p>org\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar </p>\n<h2 id=\"6、使用Spring-Initializer创建一个快速向导\"><a href=\"#6、使用Spring-Initializer创建一个快速向导\" class=\"headerlink\" title=\"6、使用Spring Initializer创建一个快速向导\"></a>6、使用Spring Initializer创建一个快速向导</h2><p>1.IDE支持使用Spring Initializer</p>\n<p>自己选择需要的组件:例如web</p>\n<p>默认生成的SpringBoot项目 </p>\n<ul>\n<li>主程序已经生成好了，我们只需要完成我们的逻辑</li>\n</ul>\n<ul>\n<li><p>resources文件夹目录结构</p>\n<ul>\n<li><p>static:保存所有的静态文件；js css images</p>\n</li>\n<li><p>templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可</p>\n<p>以使用模板引擎（freemarker.thymeleaf）;</p>\n</li>\n<li><p>application.properties:Spring Boot的默认配置，例如 server.port=9000 </p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h1><h2 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h2><p>Spring Boot使用全局配置文件，配置文件名是固定的；</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml </li>\n</ul>\n<p>配置文件作用：修改Spring Boot在底层封装好的默认值；</p>\n<p>YAML（YAML AIN’T Markup Language）</p>\n<p>是一个标记语言</p>\n<p>又不是一个标记语言 </p>\n<p><strong>标记语言：</strong></p>\n<p>以前的配置文件；大多数使用的是 xxx.xml文件；</p>\n<p>以数据为中心，比json、xml等更适合做配置文件</p>\n<p>YAML：配置例子 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span> </span><br></pre></td></tr></table></figure>\n\n<p>XML: </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、YAML语法\"><a href=\"#2、YAML语法\" class=\"headerlink\" title=\"2、YAML语法\"></a>2、YAML语法</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v:表示一堆键值对（空格必须有）；</p>\n<p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">/hello</span> </span><br></pre></td></tr></table></figure>\n\n<p>属性和值也是大小写敏感 </p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><p><strong>字面量：普通的值（数字，字符串，布尔）</strong> </p>\n<p>k: v:字面直接来写；</p>\n<p>字符串默认不用加上单引号或者双引号</p>\n<p>“”:<strong>双引号</strong> 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思</p>\n<p><code>name:&quot;zhangsan\\n lisi&quot;</code> 输出：<code>zhangsan换行 lisi</code></p>\n<p>‘’:<strong>单引号</strong> 会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p><code>name:&#39;zhangsan\\n lisi&#39;</code> 输出：<code>zhangsan\\n lisi</code> </p>\n<p><strong>对象、Map（属性和值）键值对</strong> </p>\n<p>k :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进</p>\n<p>对象还是k:v的方式 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">frends:</span></span><br><span class=\"line\">\t<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">\t<span class=\"attr\">age:</span> <span class=\"number\">20</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span> &#123;<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span>,<span class=\"attr\">age:</span> <span class=\"number\">18</span>&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>数组（List、Set）:</strong><br>用-表示数组中的一个元素 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">pig</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span> [<span class=\"string\">cat</span>,<span class=\"string\">dog</span>,<span class=\"string\">pig</span>] </span><br></pre></td></tr></table></figure>\n\n<p><strong>组合变量</strong></p>\n<p>多个组合到一起 </p>\n<h2 id=\"3、配置文件值注入\"><a href=\"#3、配置文件值注入\" class=\"headerlink\" title=\"3、配置文件值注入\"></a>3、配置文件值注入</h2><h3 id=\"1、-ConfigurationProperties\"><a href=\"#1、-ConfigurationProperties\" class=\"headerlink\" title=\"1、@ConfigurationProperties\"></a>1、@ConfigurationProperties</h3><p>1、application.yml 配置文件 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2017</span><span class=\"string\">/12/12</span></span><br><span class=\"line\">  <span class=\"attr\">maps:</span> &#123;<span class=\"attr\">k1:</span> <span class=\"string\">v1</span>,<span class=\"attr\">k2:</span> <span class=\"number\">12</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">lists:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">zhaoliu</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">wangwang</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">last-name:</span> <span class=\"string\">wanghuahua</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.properties</code> 配置文件（二选一） </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">idea配置文件utf-8</span></span><br><span class=\"line\"><span class=\"attr\">properties</span> <span class=\"string\">默认GBK</span></span><br><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>所以中文输出乱码，改进settings–&gt;file encoding –&gt;[property–&gt;utf-8 ,勾选转成ascii] </p>\n<p>javaBean </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将配置文件的配置每个属性的值，映射到组件中</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@ConfigurationProperties</span>:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\">* prefix = &quot;person&quot; 配置文件爱你的那个属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\">* *</span></span><br><span class=\"line\"><span class=\"comment\">只有这个组件是容器中的组件，才能提供到容器中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n<p>导入配置文件处理器，以后编写配置就有提示了 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring‐boot‐configuration‐processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"2、-Value注解\"><a href=\"#2、-Value注解\" class=\"headerlink\" title=\"2、@Value注解\"></a>2、@Value注解</h3><p>更改javaBean中的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;true&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@ConfigurationProperties</th>\n<th align=\"center\">@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">功能</td>\n<td align=\"center\">批量注入配置文件属性</td>\n<td align=\"center\">单个指定</td>\n</tr>\n<tr>\n<td align=\"center\">松散绑定(语法)</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">spEL</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">JSR303校验</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">复杂类型</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>松散语法：javaBean中last-name(或者lastName) –&gt;application.properties中的last-name;</p>\n<p>spEL语法：#{11*2} </p>\n<p>JSR303：@Value会直接忽略，校验规则</p>\n</blockquote>\n<p>JSR303校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p>复杂类型栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">   <span class=\"comment\">// @Value(&quot;$&#123;person.maps&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br></pre></td></tr></table></figure>\n\n<p>以上会报错，不支持复杂类型</p>\n<p><strong>使用场景分析</strong></p>\n<p>​    如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；</p>\n<p>如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties</p>\n<p>举栗子：</p>\n<p>1、编写新的Controller文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>+ name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试运行</p>\n<p>访问 localhost:9000/hello</p>\n<p>结果为<code>Hello 李四</code></p>\n<h3 id=\"3、其他注解\"><a href=\"#3、其他注解\" class=\"headerlink\" title=\"3、其他注解\"></a>3、其他注解</h3><p> <strong>@PropertySource</strong></p>\n<p>作用：加载指定的properties配置文件</p>\n<p>1、新建一个person.properties文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在javaBean中加入@PropertySource注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@ImportResource</strong></p>\n<p>作用：导入Spring配置文件，并且让这个配置文件生效</p>\n<p>1、新建一个Spring的配置文件，bean.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;HelloService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.wdjr.springboot.service.HelloService&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写测试类，检查容器是否加载Spring配置文件写的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;HelloService&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>import org.springframework.context.ApplicationContext;</p>\n</blockquote>\n<p>3、运行检测</p>\n<p>结果为false，没有加载配置的内容</p>\n<p>4、使用@ImportResource注解</p>\n<p>将@ImportResource标注在主配置类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource(locations=&#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot02ConfigApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、再次运行检测</p>\n<p>结果为true</p>\n<p>缺点：每次指定xml文件太麻烦</p>\n<p>SpringBoot推荐给容器添加组件的方式：</p>\n<p>1、配置类=====Spring的xml配置文件（old）</p>\n<p>2、全注解方式@Configuration+@Bean（new）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg\" alt=\"4.MyAppConfig\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>：指明当前类是一个配置类；就是来代替之前的Spring配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将方法的返回值添加到容器中；容器这个组件id就是方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;配置类给容器添加了HelloService组件&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;helloService01&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <em>容器这个组件id就是方法名</em> </p>\n<h2 id=\"4、配置文件占位符\"><a href=\"#4、配置文件占位符\" class=\"headerlink\" title=\"4、配置文件占位符\"></a>4、配置文件占位符</h2><h4 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$&#123;random.value&#125;</span> <span class=\"string\">、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class=\"line\"><span class=\"attr\">$&#123;random.int(10)&#125;、$&#123;random.int[100,200]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、获取配置值\"><a href=\"#2、获取配置值\" class=\"headerlink\" title=\"2、获取配置值\"></a>2、获取配置值</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.last-name&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>存在以下两种情况</p>\n<p>没有声明<code>person.last-name</code>会报错，新声明的需要加默认值</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.hello:hello&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>结果：输出<code>hello&#39;s wanghuahua</code></p>\n<h2 id=\"5、Profile\"><a href=\"#5、Profile\" class=\"headerlink\" title=\"5、Profile\"></a>5、Profile</h2><h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml</p>\n<ul>\n<li>application.properties</li>\n<li>application-dev.properties</li>\n<li>application-prod.properties</li>\n</ul>\n<p>默认使用application.properties</p>\n<p>application.properties配置文件指定</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、YAML文档块\"><a href=\"#2、YAML文档块\" class=\"headerlink\" title=\"2、YAML文档块\"></a>2、YAML文档块</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>1、在配置文件中激活</p>\n<p>2、命令行：</p>\n<p>–spring.profiles.active=dev</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg\" alt=\"5.comandLine\"></p>\n<p>优先级大于配置文件</p>\n<p>打包 成jar后</p>\n<p><code>java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></p>\n<p>虚拟机参数</p>\n<p><code>-Dspring.profiles.active=dev</code></p>\n<h2 id=\"6、加载配置文件位置\"><a href=\"#6、加载配置文件位置\" class=\"headerlink\" title=\"6、加载配置文件位置\"></a>6、加载配置文件位置</h2><p>SpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<ul>\n<li>file:./config/</li>\n<li>file./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ul>\n<p>优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置</p>\n<p>也可以通过spring.config.location来改变默认配置</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.servlet.context-path&#x3D;&#x2F;boot03</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>注：spring boot1x 是server.context.path=/boot02</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\7.priority.jpg\" alt=\"7.priority\"></p>\n<p>还可以通过spring.config.location来改变配置文件的位置</p>\n<p>项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置</p>\n<p><code>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties</code></p>\n<p>运维比较有用，从外部加载，不用修改别的文件</p>\n<h2 id=\"7-引入外部配置\"><a href=\"#7-引入外部配置\" class=\"headerlink\" title=\"7.引入外部配置\"></a>7.引入外部配置</h2><p><strong>SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补</strong></p>\n<ol>\n<li><p>命令行参数</p>\n<p>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar –server.port=9005 –server.context-path=/abc</p>\n<p>中间一个空格</p>\n</li>\n<li><p>来自java:comp/env的JNDI属性</p>\n</li>\n<li><p>java系统属性（System.getProperties()）</p>\n</li>\n<li><p>操作系统环境变量</p>\n</li>\n<li><p>RandomValuePropertySource配置的random.*属性值</p>\n<p><strong>优先加载profile,    由jar包外到jar包内</strong></p>\n</li>\n<li><p><strong>jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包外部的application.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n</li>\n<li><p>@Configuration注解类的@PropertySource</p>\n</li>\n<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>\n</li>\n</ol>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config\">官方文档</a></p>\n<h2 id=\"8、自动配置\"><a href=\"#8、自动配置\" class=\"headerlink\" title=\"8、自动配置\"></a>8、自动配置</h2><p>配置文件到底怎么写？</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties\">Spring的所有配置参数</a></p>\n<p>自动配置原理很关键</p>\n<h3 id=\"1、自动配置原理\"><a href=\"#1、自动配置原理\" class=\"headerlink\" title=\"1、自动配置原理\"></a>1、自动配置原理</h3><p>1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration</p>\n<p>2）、@EnableAutoConfiguration 作用：</p>\n<ul>\n<li>利用AutoConfigurationImportSelector给容器中导入一些组件？</li>\n<li>可以查看selectImports()方法的内容</li>\n<li>获取候选的配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; configurations = <span class=\"keyword\">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>扫描类路径下的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(）</span><br><span class=\"line\">扫描所有jar包类路径下的 MATA-INF/spring.factories</span><br><span class=\"line\">把扫描到的这些文件的内容包装成properties对象</span><br><span class=\"line\">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中</span><br></pre></td></tr></table></figure>\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；</li>\n</ul>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration</strong> 为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;HttpEncodingProperties.class&#125;)</span><span class=\"comment\">//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span><span class=\"comment\">//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    type = Type.SERVLET</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><span class=\"comment\">//判断当前项目有没有这个类，解决乱码的过滤器</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(</span></span><br><span class=\"line\"><span class=\"meta\">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">    matchIfMissing = true</span></span><br><span class=\"line\"><span class=\"meta\">)</span><span class=\"comment\">//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//给容器添加组件，这个组件的值需要从properties属性中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpEncodingProperties properties;</span><br><span class=\"line\">\t<span class=\"comment\">//只有一个有参数构造器情况下，参数的值就会从容器中拿</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEncodingAutoConfiguration</span><span class=\"params\">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title\">characterEncodingFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CharacterEncodingFilter filter = <span class=\"keyword\">new</span> OrderedCharacterEncodingFilter();</span><br><span class=\"line\">        filter.setEncoding(<span class=\"keyword\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">        filter.setForceRequestEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));</span><br><span class=\"line\">        filter.setForceResponseEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span><span class=\"comment\">//从配置文件中的值进行绑定和bean属性进行绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>根据当前不同条件判断，决定这个配置类是否生效？</p>\n<p>一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的</p>\n<h3 id=\"2、所有的自动配置组件\"><a href=\"#2、所有的自动配置组件\" class=\"headerlink\" title=\"2、所有的自动配置组件\"></a>2、所有的自动配置组件</h3><p>每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；</p>\n<p>作用：用他们做自动配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Auto Configure</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、精髓：\"><a href=\"#3、精髓：\" class=\"headerlink\" title=\"3、精髓：\"></a>3、精髓：</h3><p>1）、SpringBoot启动会加载大量的自动配置类</p>\n<p>2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；</p>\n<p>3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）</p>\n<p>4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值</p>\n<p>xxxAutoConfiguration:自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxProperties:封装配置文件中的属性；</p>\n<p>跟之前的Person类一样，配置文件中值加入bean中</p>\n<h3 id=\"4、细节\"><a href=\"#4、细节\" class=\"headerlink\" title=\"4、细节\"></a>4、细节</h3><h4 id=\"1、-Conditional派生注解\"><a href=\"#1、-Conditional派生注解\" class=\"headerlink\" title=\"1、@Conditional派生注解\"></a>1、@Conditional派生注解</h4><blockquote>\n<p>利用Spring注解版原生的@Conditional作用</p>\n</blockquote>\n<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional派生注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissBean</td>\n<td>容器中不存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足spEL表达式</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean,或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定的资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、自动配置报告\"><a href=\"#2、自动配置报告\" class=\"headerlink\" title=\"2、自动配置报告\"></a>2、自动配置报告</h4><p>自动配置类必须在一定条件下生效</p>\n<p>我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>自动配置报告</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\">CONDITIONS EVALUATION REPORT</span><br><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:（启动的，匹配成功的）</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">   CodecsAutoConfiguration matched:</span><br><span class=\"line\">      - <span class=\"meta\">@ConditionalOnClass</span> found required <span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">http</span>.<span class=\"title\">codec</span>.<span class=\"title\">CodecConfigurer</span>&#x27;</span>; <span class=\"meta\">@ConditionalOnMissingClass</span> <span class=\"function\">did not find unwanted <span class=\"title\">class</span> <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">        ......</span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\"> Negative matches:（没有启动的，没有匹配成功的）</span></span><br><span class=\"line\"><span class=\"function\">-----------------</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   ActiveMQAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">.....</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h1><blockquote>\n<p>Spring Boot2对日志有更改</p>\n</blockquote>\n<h3 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h3><p>小张：开发一个大型系统；</p>\n<p>1、System.out.println(“”);将关键数据打印在控制台；去掉？卸载文件中</p>\n<p>2、框架记录系统的一些运行信息；日志框架zhanglog.jar</p>\n<p>3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?</p>\n<p>4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;</p>\n<p>5、JDBC–数据库驱动；</p>\n<p>​    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;</p>\n<p>​    给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；</p>\n<p>市面上的日志框架</p>\n<table>\n<thead>\n<tr>\n<th>日志抽象层</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL(Jakarta Commons Logging)</del> SLF4j(Simple Logging Facade for Java) <del>jboss-logging</del></td>\n<td>Log4j <del>JUL(java.util.logging)</del> Log4j2 Logback</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>左边的抽象，右边的实现</p>\n<p>SLF4J  – Logback</p>\n<p>Spring Boot:底层是Spring框架，Spring默认框架是JCL；</p>\n<p>​    SpringBoot选用SLF4J和logback</p>\n<h3 id=\"2、SLF4J使用\"><a href=\"#2、SLF4J使用\" class=\"headerlink\" title=\"2、SLF4J使用\"></a>2、SLF4J使用</h3><h4 id=\"1、如何在系统中使用SLF4j\"><a href=\"#1、如何在系统中使用SLF4j\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j\"></a>1、如何在系统中使用SLF4j</h4><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>应该给系统里面导入slf4j的jar包和logback的实现jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg\" alt=\"8.slf4j\"></p>\n<p>每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架本身的配置文件</strong>；</p>\n<h4 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h4><p>a系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis</p>\n<p>统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；</p>\n<p>核心：</p>\n<p>1、将系统中其他日志框架排除出去；</p>\n<p>2、用中间包来替换原有的日志框架/</p>\n<p>3、导入slf4j的其他实现</p>\n<h3 id=\"3、SpingBoot日志框架解析\"><a href=\"#3、SpingBoot日志框架解析\" class=\"headerlink\" title=\"3、SpingBoot日志框架解析\"></a>3、SpingBoot日志框架解析</h3><p>打开IDEA ，打开pom文件的依赖图形化显示</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg\" alt=\"9.IDEAdependencies\"></p>\n<p>SpringBoot的基础框架</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot的日志功能</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg\" alt=\"10.slf4jandlogback\"></p>\n<p>总结：</p>\n<ol>\n<li><p>SpringBoot底层也是使用SLF4J+log4jback</p>\n</li>\n<li><p>SpringBoot也把其他日志替换成了slf4j</p>\n</li>\n<li><p>起着commons.loggings的名字其实new的SLF4J替换中间包</p>\n<p>SpringBoot2中改成了bridge</p>\n</li>\n<li><p>如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层</p>\n</li>\n</ol>\n<h3 id=\"4、日志的使用\"><a href=\"#4、日志的使用\" class=\"headerlink\" title=\"4、日志的使用\"></a>4、日志的使用</h3><h4 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h4><p>trace-debug-info-warn-error</p>\n<p>可以调整需要的日志级别进行输出，不用注释语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//记录器</span></span><br><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日志的级别</span></span><br><span class=\"line\">    <span class=\"comment\">//从低到高</span></span><br><span class=\"line\">    <span class=\"comment\">//可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效</span></span><br><span class=\"line\">    logger.trace(<span class=\"string\">&quot;这是trace日志&quot;</span>);</span><br><span class=\"line\">    logger.debug(<span class=\"string\">&quot;这是debug信息&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//SpringBoot默认给的是info级别，如果没指定就是默认的root级别</span></span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;这是info日志&quot;</span>);</span><br><span class=\"line\">    logger.warn(<span class=\"string\">&quot;这是warn信息&quot;</span>);</span><br><span class=\"line\">    logger.error(<span class=\"string\">&quot;这是Error信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整指定包的日志级别在配置文件中进行配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br></pre></td></tr></table></figure>\n\n<p>日志输出格式</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 </span></span><br><span class=\"line\"><span class=\"comment\">#%d：日期</span></span><br><span class=\"line\"><span class=\"comment\">#%thread：线程号 </span></span><br><span class=\"line\"><span class=\"comment\">#%-5level：靠左 级别 </span></span><br><span class=\"line\"><span class=\"comment\">#%logger&#123;50&#125;：全类名50字符限制,否则按照句号分割</span></span><br><span class=\"line\"><span class=\"comment\">#%msg：消息+换行</span></span><br><span class=\"line\"><span class=\"comment\">#%n：换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot修改日志的默认配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br><span class=\"line\"><span class=\"comment\">#不指定path就是当前目录下生成springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#logging.file=springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认</span></span><br><span class=\"line\"><span class=\"meta\">logging.path</span>=<span class=\"string\">/spring/log</span></span><br><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class=\"line\"><span class=\"comment\">#指定文件中日志输出的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.file</span>=<span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置</p>\n<table>\n<thead>\n<tr>\n<th>logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td>logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy</td>\n</tr>\n<tr>\n<td>Log4J2</td>\n<td>log4j2-spring.xml or log4j2.xml</td>\n</tr>\n<tr>\n<td>JDK(Java Util Logging)</td>\n<td>logging.properties</td>\n</tr>\n</tbody></table>\n<p>logback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>!=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如何调试开发环境,输入命令行参数</p>\n<p>–spring.profiles.active=dev</p>\n<p>如果不带后面的xx-spring.xml就会报错</p>\n<h3 id=\"3、切换日志框架\"><a href=\"#3、切换日志框架\" class=\"headerlink\" title=\"3、切换日志框架\"></a>3、切换日志框架</h3><p>可以根据slf4j的日志适配图，进行相关切换；</p>\n<h4 id=\"1、log4j\"><a href=\"#1、log4j\" class=\"headerlink\" title=\"1、log4j\"></a>1、log4j</h4><p>slf4j+log4j的方式；</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg\" alt=\"11.log4j\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不推荐使用仅作为演示</p>\n<h4 id=\"2、log4j2\"><a href=\"#2、log4j2\" class=\"headerlink\" title=\"2、log4j2\"></a>2、log4j2</h4><p>切换为log4j2</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、web开发\"><a href=\"#四、web开发\" class=\"headerlink\" title=\"四、web开发\"></a>四、web开发</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot;</p>\n<p>1)、创建SpringBoot应用，选中我们需要的模块；</p>\n<p>2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</p>\n<p>3)、自己编写业务代码</p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxAutoConfiguration:帮我们给容器中自动配置组件</span><br><span class=\"line\">xxxProperties:配置类来封装配置文件的内容</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、静态资源文件映射规则\"><a href=\"#2、静态资源文件映射规则\" class=\"headerlink\" title=\"2、静态资源文件映射规则\"></a>2、静态资源文件映射规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span>, <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以设置和静态资源相关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Integer cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCachePeriod();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(registry</span><br><span class=\"line\">            .addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">            .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   String staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(</span><br><span class=\"line\">            registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">                  .addResourceLocations(</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.resourceProperties.getStaticLocations())</span><br><span class=\"line\">                  .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、webjar\"><a href=\"#1、webjar\" class=\"headerlink\" title=\"1、webjar\"></a>1、webjar</h3><p>1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；</p>\n<p>​    webjars：以jar包的方式引入静态资源</p>\n<p><a href=\"http://www.webjars.org/\">http://www.webjars.org/</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg\" alt=\"12.jquery\"></p>\n<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>\n<h3 id=\"2、本地资源\"><a href=\"#2、本地资源\" class=\"headerlink\" title=\"2、本地资源\"></a>2、本地资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String staticPathPattern &#x3D; &quot;&#x2F;**&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>访问任何资源</p>\n<p>2、会在这几文件夹下去找静态路径（静态资源文件夹）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class=\"line\">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;public&#x2F;&quot;,</span><br><span class=\"line\">&quot;&#x2F;&quot;;当前项目的根路径</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\13.static.jpg\" alt=\"13.static\"></p>\n<p>localhost:8080/abc ==&gt;去静态资源文件夹中找abc</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg\" alt=\"14.static-css\"></p>\n<p>3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；</p>\n<p>localhost:8080/  –&gt;index页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title\">welcomePageHandlerMapping</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、喜欢的图标，即网站title的图标favicon</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FaviconConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ResourceProperties resourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaviconConfiguration</span><span class=\"params\">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> SimpleUrlHandlerMapping <span class=\"title\">faviconHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      SimpleUrlHandlerMapping mapping = <span class=\"keyword\">new</span> SimpleUrlHandlerMapping();</span><br><span class=\"line\">      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//把任何favicon的图标都在静态文件夹下找</span></span><br><span class=\"line\">      mapping.setUrlMap(Collections.singletonMap(<span class=\"string\">&quot;**/favicon.ico&quot;</span>,</span><br><span class=\"line\">            faviconRequestHandler()));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mapping;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ResourceHttpRequestHandler <span class=\"title\">faviconRequestHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ResourceHttpRequestHandler requestHandler = <span class=\"keyword\">new</span> ResourceHttpRequestHandler();</span><br><span class=\"line\">      requestHandler</span><br><span class=\"line\">            .setLocations(<span class=\"keyword\">this</span>.resourceProperties.getFaviconLocations());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> requestHandler;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在配置文件配置静态资源文件夹</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.resources.static-locations</span>=<span class=\"string\">classpath:xxxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>将html和数据 结合到一起 输出组装处理好的新文件</p>\n<p>SpringBoot推荐Thymeleaf;语法简单，功能强大</p>\n<h3 id=\"1、引入thymeleaf-3\"><a href=\"#1、引入thymeleaf-3\" class=\"headerlink\" title=\"1、引入thymeleaf 3\"></a>1、引入thymeleaf 3</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认导入thymeleaf2，版本太低 所以使用thymeleaf3.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3\">官方导入办法</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--thymeleaf 3的导入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Thymeleaf使用和语法\"><a href=\"#2、Thymeleaf使用和语法\" class=\"headerlink\" title=\"2、Thymeleaf使用和语法\"></a>2、Thymeleaf使用和语法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">//只要把HTML文件方法类路径下的template文件夹下，就会自动导入</span></span><br></pre></td></tr></table></figure>\n\n<p>只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure>\n\n<p>2、使用thymeleaf语法；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--th:text 将div里面的文本内容设置为--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、语法规则</p>\n<p>1）、th:text=”${hello}”可以使用任意标签 替换原生的任何属性</p>\n<p><strong>在SpringBoot的环境下</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testid&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;testcalss&quot;</span> <span class=\"attr\">th:id</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg\" alt=\"15.thtmeleaf-th01\"></p>\n<p><strong>直接访问HTML页面</strong></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg\" alt=\"15.thtmeleaf-th02\"></p>\n<p><strong>2)、内联写法注意需要在body上加上 th:inline=”text”敲黑板</strong></p>\n<p>不然不起作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>th标签的访问优先级</p>\n<p>Order Feature Attributes</p>\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>功能</th>\n<th>标签</th>\n<th>功能和jsp对比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Fragment inclusion</td>\n<td>th:insert th:replace</td>\n<td>include(片段包含)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Fragment iteration</td>\n<td>th:each</td>\n<td>c:forEach(遍历)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Conditional evaluation</td>\n<td>th:if th:unless th:switch th:case</td>\n<td>c:if(条件判断)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Local variable definition</td>\n<td>th:object  th:with</td>\n<td>c:set(声明变量)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>General attribute modification</td>\n<td>th:attr th:attrprepend th:attrappend</td>\n<td>属性修改支持前面和后面追加内容</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Specific attribute modification</td>\n<td>th:value th:href th:src …</td>\n<td>修改任意属性值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Text (tag body modification)</td>\n<td>th:text th:utext</td>\n<td>修改标签体内容utext：不转义字符<h1>大标题</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Fragment specification</td>\n<td>th:fragment</td>\n<td>声明片段</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Fragment removal</td>\n<td>th:remove</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Simple</span> <span class=\"string\">expressions:(表达式语法)</span></span><br><span class=\"line\">    <span class=\"attr\">Variable</span> <span class=\"string\">Expressions: $&#123;...&#125;</span></span><br><span class=\"line\">    \t<span class=\"attr\">1、获取对象属性、调用方法</span></span><br><span class=\"line\">    \t<span class=\"attr\">2、使用内置基本对象：</span></span><br><span class=\"line\"><span class=\"comment\">    \t    #ctx : the context object.</span></span><br><span class=\"line\"><span class=\"comment\">            #vars: the context variables.</span></span><br><span class=\"line\"><span class=\"comment\">            #locale : the context locale.</span></span><br><span class=\"line\"><span class=\"comment\">            #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class=\"line\"><span class=\"comment\">            #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class=\"line\"><span class=\"comment\">            #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class=\"line\"><span class=\"comment\">            #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class=\"line\">         <span class=\"attr\">3、内置一些工具对象</span></span><br><span class=\"line\"><span class=\"comment\">        \t#execInfo : information about the template being processed.</span></span><br><span class=\"line\"><span class=\"comment\">        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span></span><br><span class=\"line\">            <span class=\"attr\">would</span> <span class=\"string\">be obtained using #&#123;…&#125; syntax.</span></span><br><span class=\"line\"><span class=\"comment\">            #uris : methods for escaping parts of URLs/URIs</span></span><br><span class=\"line\"><span class=\"comment\">            #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class=\"line\"><span class=\"comment\">            #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #numbers : methods for formatting numeric objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #objects : methods for objects in general.</span></span><br><span class=\"line\"><span class=\"comment\">            #bools : methods for boolean evaluation.</span></span><br><span class=\"line\"><span class=\"comment\">            #arrays : methods for arrays.</span></span><br><span class=\"line\"><span class=\"comment\">            #lists : methods for lists.</span></span><br><span class=\"line\"><span class=\"comment\">            #sets : methods for sets.</span></span><br><span class=\"line\"><span class=\"comment\">            #maps : methods for maps.</span></span><br><span class=\"line\"><span class=\"comment\">            #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class=\"line\"><span class=\"comment\">            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class=\"line\">    <span class=\"attr\">Selection</span> <span class=\"string\">Variable Expressions: *&#123;...&#125; //选择表达式：和$&#123;&#125;功能一样，补充功能</span></span><br><span class=\"line\"><span class=\"comment\">   # 配合th:object使用，object=$&#123;object&#125; 以后获取就可以使用*&#123;a&#125;  相当于$&#123;object.a&#125;</span></span><br><span class=\"line\">  \t    <span class=\"meta\">&lt;div</span> <span class=\"string\">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Name</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Surname</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Nationality</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Message</span> <span class=\"string\">Expressions: #&#123;...&#125; //获取国际化内容</span></span><br><span class=\"line\">    <span class=\"attr\">Link</span> <span class=\"string\">URL Expressions: @&#123;...&#125; //定义URL链接</span></span><br><span class=\"line\"><span class=\"comment\">    \t#&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Fragment</span> <span class=\"string\">Expressions: ~&#123;...&#125;//片段文档</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">Literals（字面量）</span></span><br><span class=\"line\">    <span class=\"attr\">Text</span> <span class=\"string\">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Number</span> <span class=\"string\">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">literals: true , false</span></span><br><span class=\"line\">    <span class=\"attr\">Null</span> <span class=\"string\">literal: null</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">tokens: one , sometext , main ,…</span></span><br><span class=\"line\"><span class=\"attr\">Text</span> <span class=\"string\">operations:(文本操作)</span></span><br><span class=\"line\">    <span class=\"attr\">String</span> <span class=\"string\">concatenation: +</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class=\"line\"><span class=\"attr\">Arithmetic</span> <span class=\"string\">operations:（数学运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: + , - , * , / , %</span></span><br><span class=\"line\">    <span class=\"attr\">Minus</span> <span class=\"string\">sign (unary operator): -</span></span><br><span class=\"line\"><span class=\"attr\">Boolean</span> <span class=\"string\">operations:（布尔运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: and , or</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">negation (unary operator): ! , not</span></span><br><span class=\"line\"><span class=\"attr\">Comparisons</span> <span class=\"string\">and equality:（比较运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Comparators</span>: <span class=\"string\">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class=\"line\">    <span class=\"attr\">Equality</span> <span class=\"string\">operators: == , != ( eq , ne )</span></span><br><span class=\"line\"><span class=\"attr\">Conditional</span> <span class=\"string\">operators:（条件运算）</span></span><br><span class=\"line\">    <span class=\"meta\">If-then</span>: <span class=\"string\">(if) ? (then)</span></span><br><span class=\"line\">    <span class=\"meta\">If-then-else</span>: <span class=\"string\">(if) ? (then) : (else)</span></span><br><span class=\"line\">    <span class=\"attr\">Default</span>: <span class=\"string\">(value) ?: (defaultvalue)</span></span><br><span class=\"line\"><span class=\"attr\">Special</span> <span class=\"string\">tokens:（空操作）</span></span><br><span class=\"line\">\t<span class=\"meta\">No-Operation</span>: <span class=\"string\">_</span></span><br></pre></td></tr></table></figure>\n\n<p>inline写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[]] --&gt;th:text</span><br><span class=\"line\">[()] --&gt;th:utext</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4、SpringMVC自动配置\"><a href=\"#4、SpringMVC自动配置\" class=\"headerlink\" title=\"4、SpringMVC自动配置\"></a>4、SpringMVC自动配置</h2><h3 id=\"1、SpringMVC的自动导入\"><a href=\"#1、SpringMVC的自动导入\" class=\"headerlink\" title=\"1、SpringMVC的自动导入\"></a>1、SpringMVC的自动导入</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\">Spring框架</a></p>\n<p>自动配置好了mvc：</p>\n<p>以下是SpringBoot对SpringMVC的默认</p>\n<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)</li>\n<li><code>ContentNegotiatingViewResolver</code>组合所有视图解析器</li>\n<li>如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源</p>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).</p>\n</li>\n<li><p>自动注册 了<code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li><p><code>Converter</code>：类型转换 文本转为字面量</p>\n</li>\n<li><p><code>Formatter</code> ：格式化器 转换后格式转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class=\"comment\">//在文件配置入职格式化的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());<span class=\"comment\">//日期格式化组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自己添加的格式化转换器，只需要放在容器中即可</p>\n</li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p><code>HttpMessageConverters</code> ：转换HTTP转换和响应：User - json</p>\n</li>\n<li><p><code>HttpMessageConverters</code> ：是从容器中确定；获取所有的<code>HttpMessageConverters</code>  ，将自己的组件注册在容器中@Bean </p>\n</li>\n<li><p>If you need to add or customize converters you can use Spring Boot’s <code>HttpMessageConverters</code> class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.web.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">customConverters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; additional = ...</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; another = ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpMessageConverters(additional, another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).</p>\n<ul>\n<li>定义错误代码生成规则</li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<ul>\n<li>```java<br>@Override<br>protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {<br>   try {<pre><code>  return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n</code></pre>\n   }<br>   catch (NoSuchBeanDefinitionException ex) {<pre><code>  return super.getConfigurableWebBindingInitializer();\n</code></pre>\n   }<br>}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    在beanFactory：中可以自己创建一个，初始化webDataBinder</span><br><span class=\"line\"></span><br><span class=\"line\">    请求数据 &#x3D;&#x3D;》javaBean</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.16.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own &#96;@Configuration&#96; class of type &#96;WebMvcConfigurerAdapter&#96;, but **without** &#96;@EnableWebMvc&#96;. If you wish to provide custom instances of &#96;RequestMappingHandlerMapping&#96;, &#96;RequestMappingHandlerAdapter&#96; or &#96;ExceptionHandlerExceptionResolver&#96; you can declare a &#96;WebMvcRegistrationsAdapter&#96; instance providing such components.</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to take complete control of Spring MVC, you can add your own &#96;@Configuration&#96; annotated with &#96;@EnableWebMvc&#96;.</span><br><span class=\"line\"></span><br><span class=\"line\">思想：修改默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">### 2、扩展SpringMVC</span><br><span class=\"line\"></span><br><span class=\"line\">编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class MyMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;        super.addViewControllers(registry);</span><br><span class=\"line\">        &#x2F;&#x2F;浏览器发送wdjr请求，也来到success页面</span><br><span class=\"line\">        registry.addViewController(&quot;&#x2F;wdjr&quot;).setViewName(&quot;success&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>原理：</p>\n<p>1）、WebMvcAutoConfiguration是SpringMVC的自动配置</p>\n<p>2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcConfigurerComposite configurers = <span class=\"keyword\">new</span> WebMvcConfigurerComposite();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从容器中获取所有webMVCconfigurer</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">            </span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.configurers.addViewControllers(registry);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）</span></span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"comment\">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\">                   <span class=\"comment\">// for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"comment\">//delegate.addViewControllers(registry);</span></span><br><span class=\"line\">                    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<p>3）、自己的配置被调用</p>\n<p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用</p>\n<h3 id=\"3、全面接管mvc\"><a href=\"#3、全面接管mvc\" class=\"headerlink\" title=\"3、全面接管mvc\"></a>3、全面接管mvc</h3><p>不需要SpringBoot对SpringMVC的自动配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送wdjr请求，也来到success页面</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">&quot;/wdjr&quot;</span>).setViewName(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如静态资源访问，不推荐全面接管</p>\n<p>原理：</p>\n<p>为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了</p>\n<p>1）、核心配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2）、DelegatingWebMvcConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>3）、WebMvcAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span></span><br><span class=\"line\"><span class=\"meta\">      WebMvcConfigurerAdapter.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//容器没有这个组件的时候，这个自动配置类才生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">      ValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能</p>\n<h2 id=\"5、修改SpringMVC默认配置\"><a href=\"#5、修改SpringMVC默认配置\" class=\"headerlink\" title=\"5、修改SpringMVC默认配置\"></a>5、修改SpringMVC默认配置</h2><p>模式:</p>\n<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​    2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。</p>\n<h2 id=\"6、RestfulCRUD\"><a href=\"#6、RestfulCRUD\" class=\"headerlink\" title=\"6、RestfulCRUD\"></a>6、RestfulCRUD</h2><h3 id=\"1、默认访问首页\"><a href=\"#1、默认访问首页\" class=\"headerlink\" title=\"1、默认访问首页\"></a>1、默认访问首页</h3><p>在config/MyConfig.java中编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/login.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态资源引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、国际化\"><a href=\"#2、国际化\" class=\"headerlink\" title=\"2、国际化\"></a>2、国际化</h3><p>1、编写国际化配置文件</p>\n<p>2、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3、在页面中使用fmt:message，取出国际化内容</p>\n<h4 id=\"1、浏览器切换国际化\"><a href=\"#1、浏览器切换国际化\" class=\"headerlink\" title=\"1、浏览器切换国际化\"></a>1、浏览器切换国际化</h4><p>步骤</p>\n<p>1、编写国际化配置文件，抽取页面需要的显示的国际化消息</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\16.national.jpg\" alt=\"16.national\"></p>\n<p>2、SpringBoot自动配置好了国际化配置的资源文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//我们的配置文件可以直接放在类路径下叫messages.properties</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String basename = <span class=\"string\">&quot;messages&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> MessageSource <span class=\"title\">messageSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tResourceBundleMessageSource messageSource = <span class=\"keyword\">new</span> ResourceBundleMessageSource();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.basename)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置国际化文件的基础名，去掉语言国家代码</span></span><br><span class=\"line\">\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">\t\t\t\t\tStringUtils.trimAllWhitespace(<span class=\"keyword\">this</span>.basename)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.encoding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmessageSource.setDefaultEncoding(<span class=\"keyword\">this</span>.encoding.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageSource.setFallbackToSystemLocale(<span class=\"keyword\">this</span>.fallbackToSystemLocale);</span><br><span class=\"line\">\t\tmessageSource.setCacheSeconds(<span class=\"keyword\">this</span>.cacheSeconds);</span><br><span class=\"line\">\t\tmessageSource.setAlwaysUseMessageFormat(<span class=\"keyword\">this</span>.alwaysUseMessageFormat);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messageSource;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、对IDEA的编码进行设置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg\" alt=\"17.encoding\"></p>\n<p>4、login进行标签插入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./login_files/signin.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-signin&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mb-4&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./login_files/bootstrap-solid.svg&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;72&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;72&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;remember-me&quot;</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果根据浏览器语言的信息切换国际化</p>\n<p>原理：</p>\n<p>国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties</span><br><span class=\"line\">        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FixedLocaleResolver(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AcceptHeaderLocaleResolver localeResolver = <span class=\"keyword\">new</span> AcceptHeaderLocaleResolver();</span><br><span class=\"line\">    localeResolver.setDefaultLocale(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">&#125;            </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg\" alt=\"18.accept-language\"></p>\n<h4 id=\"2、点击链接切换国际化\"><a href=\"#2、点击链接切换国际化\" class=\"headerlink\" title=\"2、点击链接切换国际化\"></a>2、点击链接切换国际化</h4><p>自己编写localResolver，加到容器中</p>\n<p>1、更改HTML代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=zh_CN&#125;&quot;</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=en_US&#125;&quot;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个MyLocaleResolver.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLocaleResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">LocaleResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解析区域信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Locale <span class=\"title\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String l = request.getParameter(<span class=\"string\">&quot;lg&quot;</span>);</span><br><span class=\"line\">        Locale locale = Locale.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class=\"line\">            String[] split = l.split(<span class=\"string\">&quot;_&quot;</span>);</span><br><span class=\"line\">            locale = <span class=\"keyword\">new</span> Locale(split[<span class=\"number\">0</span>], split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> locale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、将MyLocaleResolver加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLocalResolver();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动演示</p>\n<h3 id=\"3、登录拦截器\"><a href=\"#3、登录拦截器\" class=\"headerlink\" title=\"3、登录拦截器\"></a>3、登录拦截器</h3><h4 id=\"1、登录\"><a href=\"#1、登录\" class=\"headerlink\" title=\"1、登录\"></a>1、登录</h4><p>开发技巧</p>\n<p>​    1、清除模板缓存</p>\n<p>​    2、Ctrl+F9刷新</p>\n<p>1、新建一个LoginController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;list&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、登录错误消息显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--判断--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、表单重复提交</p>\n<p>表单重复提交事件 –》重定向来到成功页面–》模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、拦截器\"><a href=\"#4、拦截器\" class=\"headerlink\" title=\"4、拦截器\"></a>4、拦截器</h3><p>作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）</p>\n<p>1、在component下新建一个LoginHandlerInterceptor拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//目标方法执行之前</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object user = request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已经登录</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//未经过验证</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;没权限请先登录&quot;</span>);</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、在MyMvcConfig配置中重写拦截器方法，加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//静态资源 css js img 已经做好了静态资源映射</span></span><br><span class=\"line\">            registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>).</span><br><span class=\"line\">                    excludePathPatterns(<span class=\"string\">&quot;/index.html&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/user/login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在LoginHandler中添加登录成功写入session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        HttpSession session)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">&quot;loginUser&quot;</span>, username);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、CRUD-员工列表\"><a href=\"#5、CRUD-员工列表\" class=\"headerlink\" title=\"5、CRUD-员工列表\"></a>5、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格</p>\n<p>URI:/资源名称/资源标识+HTTP操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp – GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp –POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id=xxx&amp;xxx=xx</td>\n<td>emp/{id} – PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id=1</td>\n<td>emp/{id} –DELETE</td>\n</tr>\n</tbody></table>\n<p>2、实验的请求架构</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>修改页面(回显)</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp/{id}</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp/{id}</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3、员工列表</p>\n<h4 id=\"1、公共页面抽取\"><a href=\"#1、公共页面抽取\" class=\"headerlink\" title=\"1、公共页面抽取\"></a>1、公共页面抽取</h4><p>使用方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、抽取公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--footer.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;footid&quot;</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;copy&quot;</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">2、引入公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--test.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">~&#123;footer::copy&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">~&#123;templatename::selector&#125; 模板名::选择器  footer::#footid</span><br><span class=\"line\">~&#123;templatename::fragmentname&#125; 模板名::片段名称 footer::copy</span><br><span class=\"line\">行内写法可以加~&#123;xx::xx&#125; 标签体可以 xx::xx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>三种引用方式</strong></p>\n<p><strong>th:insert</strong> :加个外层标签 +1</p>\n<p><strong>th:replace</strong> :完全替换 1</p>\n<p><strong>th:include</strong>：就替换里面的内容 -1</p>\n<p>公共页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- th:insert --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">            <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:replace--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">   \t\t<span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:include--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用此种方法将公共页面引入</p>\n<h4 id=\"2、列表高亮\"><a href=\"#2、列表高亮\" class=\"headerlink\" title=\"2、列表高亮\"></a>2、列表高亮</h4><p>引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html</p>\n<p>模板引入变量名</p>\n<p>dashboard</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link active&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-home&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">    Dashboard <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>员工管理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;emps&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-users&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;9&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;7&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">        员工管理</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入模板的时候传入参数</p>\n<p>dashboard.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar :: sidebar(activeUri=&#x27;main.html&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>list.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar::sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、列表数据显示（查）\"><a href=\"#6、列表数据显示（查）\" class=\"headerlink\" title=\"6、列表数据显示（查）\"></a>6、列表数据显示（查）</h3><h4 id=\"1、传入员工对象\"><a href=\"#1、传入员工对象\" class=\"headerlink\" title=\"1、传入员工对象\"></a>1、传入员工对象</h4><p>EmployeeController类,传入员工对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeDao employeeDao;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有员工返回列表页面</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/emps&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">list</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;emps&quot;</span>,employees);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/list&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、-遍历对象\"><a href=\"#2、-遍历对象\" class=\"headerlink\" title=\"2、 遍历对象\"></a>2、 遍历对象</h4><p>list.html中 使用模板的 <code>th:each</code>方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table class=&quot;table table-striped table-sm&quot;&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>lastName<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>gender<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>birth<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.gender&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、效果显示\"><a href=\"#3、效果显示\" class=\"headerlink\" title=\"3、效果显示\"></a>3、效果显示</h4><p>![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)</p>\n<h3 id=\"7、员工添加（增）\"><a href=\"#7、员工添加（增）\" class=\"headerlink\" title=\"7、员工添加（增）\"></a>7、员工添加（增）</h3><p>功能：点击添加按钮，出现新增页面</p>\n<h4 id=\"1、新增页面\"><a href=\"#1、新增页面\" class=\"headerlink\" title=\"1、新增页面\"></a>1、新增页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Birth--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、页面跳转\"><a href=\"#2、页面跳转\" class=\"headerlink\" title=\"2、页面跳转\"></a>2、页面跳转</h4><p>在EmployeeController中添加addEmpPage方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toAddPage</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//来到添加页面,查出所有部门显示</span></span><br><span class=\"line\">    Collection&lt;Department&gt; depts = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,depts);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息</p>\n<h4 id=\"3、添加功能完成\"><a href=\"#3、添加功能完成\" class=\"headerlink\" title=\"3、添加功能完成\"></a>3、添加功能完成</h4><p>新建一个PostMapping</p>\n<blockquote>\n<p>ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；</p>\n</blockquote>\n<p>1、新建一个postMapping的方法用来接受页面的添加POST请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工添加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeDao.save(employee);</span><br><span class=\"line\">    <span class=\"comment\">//来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、修改添加页面，添加name属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1、部门对象问题？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、日期格式化？</p>\n<p>属性中添加 date-formate 默认是 / </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageCodesResolver <span class=\"title\">getMessageCodesResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      DefaultMessageCodesResolver resolver = <span class=\"keyword\">new</span> DefaultMessageCodesResolver();</span><br><span class=\"line\">      resolver.setMessageCodeFormatter(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.date-format</span>=<span class=\"string\">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、员工编辑（改）\"><a href=\"#8、员工编辑（改）\" class=\"headerlink\" title=\"8、员工编辑（改）\"></a>8、员工编辑（改）</h3><p>思路使用add页面，并且数据回显，然后区分添加，PUT请求</p>\n<h4 id=\"1、修改按钮\"><a href=\"#1、修改按钮\" class=\"headerlink\" title=\"1、修改按钮\"></a>1、修改按钮</h4><p>在list.html的<code>编辑</code>按钮加上链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、编写跳转页面\"><a href=\"#2、编写跳转页面\" class=\"headerlink\" title=\"2、编写跳转页面\"></a>2、编写跳转页面</h4><p>跳转到员工编辑页面的Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工编辑页面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toEditPage</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id ,Model model)</span></span>&#123;</span><br><span class=\"line\">    Employee emp = employeeDao.getEmpById(id);</span><br><span class=\"line\">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;emp&quot;</span>,emp);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,departments);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、对页面修改\"><a href=\"#3、对页面修改\" class=\"headerlink\" title=\"3、对页面修改\"></a>3、对页面修改</h4><p>对add页面进行修改</p>\n<p>1）、添加回显</p>\n<p>2）、添加判断是否emp!=null（区分add or edit）</p>\n<p>3）、添加put请求 –两个input的hidden标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--发送put请求--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--1.SpringMVC配置HiddenHttpMethodFilter</span></span><br><span class=\"line\"><span class=\"comment\">            2.页面创建一个post表单</span></span><br><span class=\"line\"><span class=\"comment\">            3.创建一个 input name_method 值就是我们请求的方式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==0&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span> &gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9、员工删除（删）\"><a href=\"#9、员工删除（删）\" class=\"headerlink\" title=\"9、员工删除（删）\"></a>9、员工删除（删）</h3><h4 id=\"1、新建Contoller\"><a href=\"#1、新建Contoller\" class=\"headerlink\" title=\"1、新建Contoller\"></a>1、新建Contoller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工删除</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.deleteEmpById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、修改删除标签\"><a href=\"#2、修改删除标签\" class=\"headerlink\" title=\"2、修改删除标签\"></a>2、修改删除标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:attr</span>=<span class=\"string\">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span></span><br><span class=\"line\">    删除</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、写Form表单\"><a href=\"#3、写Form表单\" class=\"headerlink\" title=\"3、写Form表单\"></a>3、写Form表单</h4><p>form表单卸载外面，input 中 name=”_method” value=”delete” 模拟delete请求</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteEmpForm&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、写JS提交\"><a href=\"#4、写JS提交\" class=\"headerlink\" title=\"4、写JS提交\"></a>4、写JS提交</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.deleteBtn&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">&quot;#deleteEmpForm&quot;</span>).attr(<span class=\"string\">&quot;action&quot;</span>,$(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;del_uri&quot;</span>)).submit();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>return false;禁用btn提交效果</p>\n</blockquote>\n<h2 id=\"7、错误机制的处理\"><a href=\"#7、错误机制的处理\" class=\"headerlink\" title=\"7、错误机制的处理\"></a>7、错误机制的处理</h2><h3 id=\"1、默认的错误处理机制\"><a href=\"#1、默认的错误处理机制\" class=\"headerlink\" title=\"1、默认的错误处理机制\"></a>1、默认的错误处理机制</h3><p>默认错误页面</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\20.error.jpg\" alt=\"20.error\"></p>\n<p>原理参照</p>\n<p>ErrorMvcAutoConfiguration:错误处理的自动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>DefaultErrorAttributes</p>\n<p>帮我们在页面共享信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">   Map&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class=\"line\">   errorAttributes.put(<span class=\"string\">&quot;timestamp&quot;</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">   addStatus(errorAttributes, requestAttributes);</span><br><span class=\"line\">   addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class=\"line\">   addPath(errorAttributes, requestAttributes);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BasicErrorController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractErrorController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//产生HTML数据</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(produces = &quot;text/html&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class=\"line\">\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\t\tresponse.setStatus(status.value());</span><br><span class=\"line\">\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (modelAndView == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//产生Json数据</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ErrorPageCustomizer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String path = <span class=\"string\">&quot;/error&quot;</span>;<span class=\"comment\">//系统出现错误以后来到error请求进行处理，(web.xml)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>DefaultErrorViewResolver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (modelAndView == <span class=\"keyword\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">      modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认SpringBoot可以找到一个页面？error/状态码</span></span><br><span class=\"line\">   String errorViewName = <span class=\"string\">&quot;error/&quot;</span> + viewName;</span><br><span class=\"line\">    <span class=\"comment\">//如果模板引擎可以解析地址，就返回模板引擎解析</span></span><br><span class=\"line\">   TemplateAvailabilityProvider provider = <span class=\"keyword\">this</span>.templateAvailabilityProviders</span><br><span class=\"line\">         .getProvider(errorViewName, <span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//有模板引擎就返回到errorViewName指定的视图地址</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(errorViewName, model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller</p>\n<p>1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ErrorViewResolver resolver : <span class=\"keyword\">this</span>.errorViewResolvers) &#123;</span><br><span class=\"line\">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (modelAndView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>l浏览器发送请求 accpt:text/html</p>\n<p>客户端请求：accept:/*</p>\n<h3 id=\"2、如何定制错误响应\"><a href=\"#2、如何定制错误响应\" class=\"headerlink\" title=\"2、如何定制错误响应\"></a>2、如何定制错误响应</h3><p>​    1）、如何定制错误的页面</p>\n<p>​        1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html</p>\n<p>​        有精确的404和4xx优先选择404</p>\n<p>​        页面获得的数据</p>\n<p>​            timestamp：时间戳</p>\n<p>​            status：状态码</p>\n<p>​            error：错误提示</p>\n<p>​            exception：异常对象</p>\n<p>​            message：异常信息</p>\n<p>​            errors:JSR303有关</p>\n<p>​        2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值</p>\n<p>​        3.没有放模板引擎，没放静态，会显示默认的错误</p>\n<p>​    2）、如何定义错误的数据</p>\n<p>举例子：新建4xx和5xx文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg\" alt=\"21.error-static\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>status: [[$&#123;status&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>timestamp: [[$&#123;timestamp&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>error: [[$&#123;error&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>message: [[$&#123;message&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>exception: [[$&#123;exception&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg\" alt=\"22.4xxhtml\"></p>\n<h3 id=\"3、如何定制Json数据\"><a href=\"#3、如何定制Json数据\" class=\"headerlink\" title=\"3、如何定制Json数据\"></a>3、如何定制Json数据</h3><h4 id=\"1、仅发送json数据\"><a href=\"#1、仅发送json数据\" class=\"headerlink\" title=\"1、仅发送json数据\"></a>1、仅发送json数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserNotExitsException</span> <span class=\"keyword\">extends</span>  <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserNotExitsException</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">&quot;用户不存在&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异常处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">handlerException</span><span class=\"params\">(Exception e)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无法自适应 都是返回的json数据</p>\n<h4 id=\"2、转发到error自适应处理\"><a href=\"#2、转发到error自适应处理\" class=\"headerlink\" title=\"2、转发到error自适应处理\"></a>2、转发到error自适应处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">    <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序默认获取状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HttpStatus <span class=\"title\">getStatus</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">   Integer statusCode = (Integer) request</span><br><span class=\"line\">         .getAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (statusCode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.valueOf(statusCode);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有自己写的自定义异常数据</p>\n<h4 id=\"3、自适应和定制数据传入\"><a href=\"#3、自适应和定制数据传入\" class=\"headerlink\" title=\"3、自适应和定制数据传入\"></a>3、自适应和定制数据传入</h4><p>Spring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；</p>\n<p>1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；</p>\n<p>2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyErrorAttributes</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultErrorAttributes</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes, <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;company&quot;</span>, <span class=\"string\">&quot;wdjr&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异常处理：把map方法请求域中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;ext&quot;</span>, map);</span><br><span class=\"line\">        <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的MyErrorAttributes类中加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们的异常处理器</span></span><br><span class=\"line\">Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) requestAttributes.getAttribute(<span class=\"string\">&quot;ext&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;ext&quot;</span>, ext);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、配置嵌入式servlet容器\"><a href=\"#8、配置嵌入式servlet容器\" class=\"headerlink\" title=\"8、配置嵌入式servlet容器\"></a>8、配置嵌入式servlet容器</h2><h3 id=\"1、定制和修改Servlet容器\"><a href=\"#1、定制和修改Servlet容器\" class=\"headerlink\" title=\"1、定制和修改Servlet容器\"></a>1、定制和修改Servlet容器</h3><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p>![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)</p>\n<p>问题？</p>\n<p>1）、如何定制和修改Servlet容器；</p>\n<p>1、 修改Server相关的配置文件 application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通用的servlet容器配置</span></span><br><span class=\"line\"><span class=\"attr\">server.xxx</span></span><br><span class=\"line\"><span class=\"comment\">#tomcat的配置</span></span><br><span class=\"line\"><span class=\"attr\">server.tomcat.xxxx</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">embeddedServletContainerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定制嵌入式Servlet的容器相关规则</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.setPort(<span class=\"number\">8999</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实同理，都是实现EmbeddedServletContainerCustomizer</p>\n<h3 id=\"2、注册Servlet三大组件\"><a href=\"#2、注册Servlet三大组件\" class=\"headerlink\" title=\"2、注册Servlet三大组件\"></a>2、注册Servlet三大组件</h3><p>三大组件 Servlet Filter Listener</p>\n<p>由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml</p>\n<p>注册三大组件</p>\n<h4 id=\"ServletRegistrationBean\"><a href=\"#ServletRegistrationBean\" class=\"headerlink\" title=\"ServletRegistrationBean\"></a>ServletRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean servletRegistrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> MyServlet(),<span class=\"string\">&quot;/servlet&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> servletRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">&quot;Hello Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FilterRegistrationBean\"><a href=\"#FilterRegistrationBean\" class=\"headerlink\" title=\"FilterRegistrationBean\"></a>FilterRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/hello&quot;</span>,<span class=\"string\">&quot;/myServlet&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyFilter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyFilter process&quot;</span>);</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ServletListenerRegistrationBean\"><a href=\"#ServletListenerRegistrationBean\" class=\"headerlink\" title=\"ServletListenerRegistrationBean\"></a>ServletListenerRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> MyListener());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用启动..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用销毁..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">dispatcherServletRegistration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class=\"line\">      ServletRegistrationBean registration = <span class=\"keyword\">new</span> ServletRegistrationBean(</span><br><span class=\"line\">            dispatcherServlet, <span class=\"keyword\">this</span>.serverProperties.getServletMapping());</span><br><span class=\"line\">       <span class=\"comment\">//默认拦截 /所有请求 包括静态资源 不包括jsp</span></span><br><span class=\"line\">       <span class=\"comment\">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class=\"line\">      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">      registration.setLoadOnStartup(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.multipartConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         registration.setMultipartConfig(<span class=\"keyword\">this</span>.multipartConfig);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、切换其他的Servlet容器\"><a href=\"#3、切换其他的Servlet容器\" class=\"headerlink\" title=\"3、切换其他的Servlet容器\"></a>3、切换其他的Servlet容器</h3><p>在ServerProperties中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Jetty jetty = <span class=\"keyword\">new</span> Jetty();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Undertow undertow = <span class=\"keyword\">new</span> Undertow();</span><br></pre></td></tr></table></figure>\n\n<p>tomcat(默认支持)</p>\n<p>jetty（长连接）</p>\n<p>undertow（多并发）</p>\n<p>切换容器 仅仅需要修改pom文件的依赖就可以</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、嵌入式Servlet容器自动配置原理\"><a href=\"#4、嵌入式Servlet容器自动配置原理\" class=\"headerlink\" title=\"4、嵌入式Servlet容器自动配置原理\"></a>4、嵌入式Servlet容器自动配置原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import(BeanPostProcessorsRegistrar.class)</span></span><br><span class=\"line\"><span class=\"comment\">//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class=\"comment\">//当前是否引入tomcat依赖</span></span><br><span class=\"line\">    <span class=\"comment\">//判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedTomcat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取嵌入式的Servlet容器</span></span><br><span class=\"line\">   <span class=\"function\">EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         ServletContextInitializer... initializers)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承关系</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg\" alt=\"24.EmdServletFactory\"></p>\n<p>2）、EmbeddedServletContainer:(嵌入式的Servlet容器)</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg\" alt=\"25.EmdServletContainer\"></p>\n<p>3）、TomcatEmbeddedServletContainerFactory为例 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class=\"line\">   Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\">    <span class=\"comment\">//配置tomcat的基本环节</span></span><br><span class=\"line\">   File baseDir = (<span class=\"keyword\">this</span>.baseDirectory != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.baseDirectory</span><br><span class=\"line\">         : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>));</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   Connector connector = <span class=\"keyword\">new</span> Connector(<span class=\"keyword\">this</span>.protocol);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"keyword\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    <span class=\"comment\">//将配置好的tomcat传入进去；并且启动tomcat容器</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、嵌入式配置修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>\n\n<p>EmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？</p>\n<p>怎么修改？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.beanFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;embeddedServletContainerCustomizerBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         EmbeddedServletContainerCustomizerBeanPostProcessor.class);</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;errorPageRegistrarBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class=\"line\">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class=\"line\">        customizer.customize(bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class=\"title\">getCustomizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customizers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Look up does not include the parent context</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = <span class=\"keyword\">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanFactory</span><br><span class=\"line\">            <span class=\"comment\">//从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class=\"line\">            <span class=\"comment\">//定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class=\"line\">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class=\"line\">                            <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            .values());</span><br><span class=\"line\">        Collections.sort(<span class=\"keyword\">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = Collections.unmodifiableList(<span class=\"keyword\">this</span>.customizers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customizers;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ServerProperties也是EmbeddedServletContainerCustomizer定制器</p>\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat</p>\n<p>EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就要通过后置处理器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerCustomizerBeanPostProcessor</span><br></pre></td></tr></table></figure>\n\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法</p>\n<h3 id=\"5、嵌入式Servlet容器启动原理\"><a href=\"#5、嵌入式Servlet容器启动原理\" class=\"headerlink\" title=\"5、嵌入式Servlet容器启动原理\"></a>5、嵌入式Servlet容器启动原理</h3><p>什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;</p>\n<p>获取嵌入式的容器工厂</p>\n<p>1）、SpringBoot应用启动Run方法</p>\n<p>2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (contextClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      contextClass = Class.forName(<span class=\"keyword\">this</span>.webEnvironment</span><br><span class=\"line\">            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3）、refresh(context);刷新创建好的IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">   postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">   invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">   registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">   initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">   initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">   onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">   registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">   finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">   finishRefresh();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、 onRefresh();web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer</p>\n<p>6）、获取嵌入式的Servlet容器工厂；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br></pre></td></tr></table></figure>\n\n<p>从ioc容器中获取EmbeddedServletContainerFactory组件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；</p>\n<p>7）、使用容器工厂获取嵌入式的Servlet容器</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p>先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来</p>\n<p>ioc启动创建Servlet容器</p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式的Servlet容器：应用达成jar包</p>\n<p>​    优点：简单、便携</p>\n<p>​    缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）</p>\n<p>外置的Servlet容器：外面安装Tomcat是以war包的方式打包。</p>\n<h3 id=\"1、IDEA操作外部Servlet\"><a href=\"#1、IDEA操作外部Servlet\" class=\"headerlink\" title=\"1、IDEA操作外部Servlet\"></a>1、IDEA操作外部Servlet</h3><p>1、创建程序为war程序</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg\" alt=\"26.tomcat1\"></p>\n<p>2、选择版本</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg\" alt=\"27.tomcat2\"></p>\n<p>3、添加tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg\" alt=\"28.tomcat3\"></p>\n<p>4、选择tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg\" alt=\"30.tomcat4\"></p>\n<p>5、选择本地的Tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg\" alt=\"31.tomcat5\"></p>\n<p>6、配置tomcat路径</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg\" alt=\"32.tomcat6\"></p>\n<p>7、添加服务器</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg\" alt=\"33.tomcat7\"></p>\n<p>8、添加exploded的war配置，应用OK tomcat配置完成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg\" alt=\"34.tomcat8\"></p>\n<p>二、配置webapp文件夹</p>\n<p>1、点击配置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg\" alt=\"35.tomcat9\"></p>\n<p>2、添加webapp目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg\" alt=\"36.tomcat10\"></p>\n<p>3、默认配置就可以</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg\" alt=\"37.tomcat11\"></p>\n<p>4、配置web.xml文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg\" alt=\"38.tomcat12\"></p>\n<p>5、文档目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg\" alt=\"39.tomcat13\"></p>\n<h3 id=\"2、运行一个示例\"><a href=\"#2、运行一个示例\" class=\"headerlink\" title=\"2、运行一个示例\"></a>2、运行一个示例</h3><p>1、项目目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg\" alt=\"40.demo1\"></p>\n<p>2、配置文件写视图解析前后缀</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.view.prefix</span>=<span class=\"string\">/WEB-INF/jsp/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.mvc.view.suffix</span>=<span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n\n<p>3、HelloController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;message&quot;</span>,<span class=\"string\">&quot;这是Controller传过来的message&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、success.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Success&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class=\"line\">message:$&#123;message&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行结果</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg\" alt=\"41.demo2\"></p>\n<p>步骤</p>\n<p>1、必须创建一个war项目；</p>\n<p>2、将嵌入式的Tomcat指定为provided</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入SpringBoot的主程序，</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动服务器就可以；</p>\n<h3 id=\"3、原理\"><a href=\"#3、原理\" class=\"headerlink\" title=\"3、原理\"></a>3、原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；</p>\n<p>war包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器</p>\n<p>servlet3.0规范</p>\n<p> 8.2.4 共享库和运行时插件</p>\n<p>规则：</p>\n<p>1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例</p>\n<p>2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名</p>\n<p>3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类</p>\n<p>流程：</p>\n<p>1、启动Tomcat服务器</p>\n<p>2、spring web模块里有这个文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg\" alt=\"42.servletContainerInit\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure>\n\n<p>3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set&lt;Class&lt;?&gt;&gt;;为这些感兴趣类创建实例</p>\n<p>4、每个创建好的WebApplicationInitializer调用自己的onStratup</p>\n<p>5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createRootApplicationContext</span><span class=\"params\">(ServletContext servletContext)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplicationBuilder builder = <span class=\"keyword\">this</span>.createSpringApplicationBuilder();</span><br><span class=\"line\">    <span class=\"comment\">//环境构建器</span></span><br><span class=\"line\">    StandardServletEnvironment environment = <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    environment.initPropertySources(servletContext, (ServletConfig)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    builder.environment(environment);</span><br><span class=\"line\">    builder.main(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    ApplicationContext parent = <span class=\"keyword\">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.info(<span class=\"string\">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class=\"line\">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ParentContextApplicationContextInitializer(parent)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ServletContextApplicationContextInitializer(servletContext)&#125;);</span><br><span class=\"line\">    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class=\"line\">    <span class=\"comment\">//调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来</span></span><br><span class=\"line\">    builder = <span class=\"keyword\">this</span>.configure(builder);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个spring应用</span></span><br><span class=\"line\">    SpringApplication application = builder.build();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(<span class=\"keyword\">this</span>.getClass(), Configuration.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        application.getSources().add(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.state(!application.getSources().isEmpty(), <span class=\"string\">&quot;No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.registerErrorPageFilter) &#123;</span><br><span class=\"line\">        application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//最后启动Spring容器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.run(application);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、Spring的应用就启动完了并且创建IOC容器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、Docker\"><a href=\"#五、Docker\" class=\"headerlink\" title=\"五、Docker\"></a>五、Docker</h1><h2 id=\"1、简介-1\"><a href=\"#1、简介-1\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎</p>\n<p>将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；</p>\n<h2 id=\"2、Docker的核心概念\"><a href=\"#2、Docker的核心概念\" class=\"headerlink\" title=\"2、Docker的核心概念\"></a>2、Docker的核心概念</h2><p>docker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）</p>\n<p>docker客户端（Client）:操作docker主机</p>\n<p>docker仓库（Registry）：用来保存打包好的软件镜像</p>\n<p>docker镜像（Image）:软件打好包的镜像，放到docker的仓库中</p>\n<p>docker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）</p>\n<p>docker的步骤：</p>\n<p>​    1、安装Docker</p>\n<p>​    2、去Docker仓库找到这个软件对应的镜像；</p>\n<p>​    3、使用Docker运行的这个镜像，镜像就会生成一个容器</p>\n<p>​    4、对容器的启动停止，就是对软件的启动和停止</p>\n<h2 id=\"3、安装Docker\"><a href=\"#3、安装Docker\" class=\"headerlink\" title=\"3、安装Docker\"></a>3、安装Docker</h2><h3 id=\"1、安装Linux\"><a href=\"#1、安装Linux\" class=\"headerlink\" title=\"1、安装Linux\"></a>1、安装Linux</h3><p><a href=\"http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1\">安装vxbox并且安装ubuntu</a></p>\n<h3 id=\"2、在linux上安装docker\"><a href=\"#2、在linux上安装docker\" class=\"headerlink\" title=\"2、在linux上安装docker\"></a>2、在linux上安装docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看centos版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> uname -r</span></span><br><span class=\"line\">3.10.0-693.el7.x86_64</span><br><span class=\"line\">要求：大于3.10</span><br><span class=\"line\">如果小于的话升级*（选做）</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum update</span></span><br><span class=\"line\">2、安装docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install docker</span></span><br><span class=\"line\">3、启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker -v</span></span><br><span class=\"line\">4、开机启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\">5、停止docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop docker</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、docker的常用操作\"><a href=\"#4、docker的常用操作\" class=\"headerlink\" title=\"4、docker的常用操作\"></a>4、docker的常用操作</h2><h3 id=\"1、镜像操作\"><a href=\"#1、镜像操作\" class=\"headerlink\" title=\"1、镜像操作\"></a>1、镜像操作</h3><p>1、搜索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<p>默认去docker hub网站查找<img src=\"E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg\" alt=\"44.docker1\"></p>\n<p>2、拉取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认最新版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docekr pull mysql</span></span><br><span class=\"line\">安装指定版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull mysql:5.5</span></span><br></pre></td></tr></table></figure>\n\n<p>3、查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p>4、删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、容器操作\"><a href=\"#2、容器操作\" class=\"headerlink\" title=\"2、容器操作\"></a>2、容器操作</h3><p>软件的镜像（qq.exe） – 运行镜像 – 产生一个容器（正在运行的软件）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、搜索镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search tomcat</span></span><br><span class=\"line\">2、拉取镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull tomcat</span></span><br><span class=\"line\">3、根据镜像启动容器</span><br><span class=\"line\">[root@lion ~]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">docker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d tomcat:latest</span><br><span class=\"line\">2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249</span><br><span class=\"line\">4、查看那个进程正在进行</span><br><span class=\"line\">[root@lion ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat</span><br><span class=\"line\">5、停止运行中容器</span><br><span class=\"line\">[root@lion ~]# docker stop 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">6、查看所有容器</span><br><span class=\"line\">[root@lion ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat</span><br><span class=\"line\">7、启动容器</span><br><span class=\"line\">[root@lion ~]# docker start 2f0348702f5f</span><br><span class=\"line\">8、删除docker容器</span><br><span class=\"line\">[root@lion ~]# docker rm 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">9、端口映射</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat</span><br><span class=\"line\">692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29</span><br><span class=\"line\">虚拟机:8888</span><br><span class=\"line\">容器的:8080</span><br><span class=\"line\">-d:后台运行</span><br><span class=\"line\">-p:主机端口映射到容器端口</span><br><span class=\"line\">浏览器：192.168.179.129:8888</span><br><span class=\"line\">10、docker的日志</span><br><span class=\"line\">[root@lion ~]# docker logs 692c408c2201</span><br><span class=\"line\">11、多个启动</span><br><span class=\"line\">[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat</span><br><span class=\"line\">浏览器：192.168.179.129:9000</span><br></pre></td></tr></table></figure>\n\n<p>更多命令参考docker镜像文档</p>\n<h3 id=\"3、安装Mysql\"><a href=\"#3、安装Mysql\" class=\"headerlink\" title=\"3、安装Mysql\"></a>3、安装Mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、数据访问\"><a href=\"#六、数据访问\" class=\"headerlink\" title=\"六、数据访问\"></a>六、数据访问</h1><h2 id=\"1、整合JDBC数据源\"><a href=\"#1、整合JDBC数据源\" class=\"headerlink\" title=\"1、整合JDBC数据源\"></a>1、整合JDBC数据源</h2><p>1、新建项目 spring-boot-06-data-jdbc</p>\n<ul>\n<li>WEB</li>\n<li>Mysql</li>\n<li>JDBC</li>\n<li>SpringBoot1.5</li>\n</ul>\n<p>2、编写配置文件appliction.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写测试类测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot06DataJdbcApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(dataSource.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class org.apache.tomcat.jdbc.pool.DataSource</span><br><span class=\"line\">ProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]</span><br></pre></td></tr></table></figure>\n\n<p>数据源相关配置都在DataSourceProperties属性里</p>\n<p>自动配置原理</p>\n<p>E:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc</p>\n<h3 id=\"1、DataSource\"><a href=\"#1、DataSource\" class=\"headerlink\" title=\"1、DataSource\"></a>1、DataSource</h3><p>参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源</p>\n<h3 id=\"2、SpringBoot默认支持\"><a href=\"#2、SpringBoot默认支持\" class=\"headerlink\" title=\"2、SpringBoot默认支持\"></a>2、SpringBoot默认支持</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tomcat数据源</span><br><span class=\"line\">HikariDataSource</span><br><span class=\"line\">dbcp.BasicDataSource</span><br><span class=\"line\">dbcp2.BasicDataSource</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、自定义数据源\"><a href=\"#3、自定义数据源\" class=\"headerlink\" title=\"3、自定义数据源\"></a>3、自定义数据源</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、运行sql建表\"><a href=\"#4、运行sql建表\" class=\"headerlink\" title=\"4、运行sql建表\"></a>4、运行sql建表</h3><p>在DataSourceAutoConfiguration中<strong>DataSourceInitializer</strong>类</p>\n<p>监听器</p>\n<p>作用：</p>\n<p>1）、postConstruct -》runSchemaScript 运行建表sql文件</p>\n<p>2）、runDataScript运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span> data<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span></span><br><span class=\"line\">默认规则：schema.sql ,schema<span class=\"operator\">-</span>all.sql;</span><br></pre></td></tr></table></figure>\n\n<p><strong>举个栗子</strong></p>\n<p>创建department表</p>\n<p>1、department.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Navicat MySQL Data Transfer</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Source Server         : 192.168.179.131</span></span><br><span class=\"line\"><span class=\"comment\">Source Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">Source Host           : 192.168.179.131:3306</span></span><br><span class=\"line\"><span class=\"comment\">Source Database       : jdbc</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Target Server Type    : MYSQL</span></span><br><span class=\"line\"><span class=\"comment\">Target Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">File Encoding         : 65001</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Date: 2018-05-14 14:28:52</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- Table structure for department</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `department`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `department` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `departmentName` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、将department.sql命名为schema-all.sql</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg\" alt=\"45.schema-all\"></p>\n<p>3、运行测试类</p>\n<p>自定义sql的文件名，department.sql在配置文件中</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">schema:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">classpath:department.sql</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5、操作JdbcTemplate\"><a href=\"#5、操作JdbcTemplate\" class=\"headerlink\" title=\"5、操作JdbcTemplate\"></a>5、操作JdbcTemplate</h3><p><strong>FBI warning</strong>:将department.sql删除或者改名，因为运行文件会将表中数据清除</p>\n<p>1、新建一个Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class=\"string\">&quot;select * from department&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、表中添加数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\46.department.jpg\" alt=\"46.department\"></p>\n<p>3、访问请求查询数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\47.hello.jpg\" alt=\"47.hello\"></p>\n<h2 id=\"2、自定义数据源\"><a href=\"#2、自定义数据源\" class=\"headerlink\" title=\"2、自定义数据源\"></a>2、自定义数据源</h2><p>1、导入Druid的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>已经替换了原来的tomcat数据源</p>\n<p>3、配置Druid数据源配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">\t<span class=\"comment\"># 初始化大小，最小，最大  </span></span><br><span class=\"line\">    <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置获取连接等待超时的时间  </span></span><br><span class=\"line\">    <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">    <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙</span></span><br><span class=\"line\">    <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">userGlobalDataSourceStat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录  </span></span><br><span class=\"line\">    <span class=\"attr\">connectionProperties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>4、Druid配置监控</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Druid的监控</span></span><br><span class=\"line\">    <span class=\"comment\">//1、配置一个管理后台</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> StatViewServlet(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginUsername&quot;</span>, <span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginPassword&quot;</span>, <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2、配置监控的filter</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webstatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;exclusions&quot;</span>, <span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行测试，访问 localhost:9000/druid</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\48.druid.jpg\" alt=\"48.druid\"></p>\n<p>输入刚才调好的用户名密码即可访问</p>\n<h2 id=\"3、整合Mybatis\"><a href=\"#3、整合Mybatis\" class=\"headerlink\" title=\"3、整合Mybatis\"></a>3、整合Mybatis</h2><p>1、新建工程，SpringBoot1.5+web+JDBC+Mysql</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、导入配置文件中关于Druid的配置</p>\n<p>​    2.1、导入依赖</p>\n<p>​    2.2、配置文件application.yml（指定用户名密码…配置Druid的配置参数，修改sql文件加载的默认名）</p>\n<p>​    2.3、将Druid组件加入到容器中（监控）重点</p>\n<p>​    具体同上</p>\n<p>3、创建数据表department和employee表</p>\n<p>​    3.1、根据sql文件，新建两张表</p>\n<p>​    3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">schema:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/department.sql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/employeee.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>​    3.3、运行程序检查数据库是否创建成功</p>\n<p>4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） </p>\n<p>在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类名冲突所以全类名</span></span><br><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title\">configurationCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConfigurationCustomizer() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">                configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><p>5、新建mapper</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//指定是一个mapper</span></span><br><span class=\"line\"><span class=\"string\">@Mapper</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">interface</span> <span class=\"string\">DepartmentMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Insert(&quot;insert</span> <span class=\"string\">into</span> <span class=\"string\">department(dept_name)</span> <span class=\"string\">value(#</span>&#123;<span class=\"string\">deptName</span>&#125;<span class=\"string\">)&quot;)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">int</span> <span class=\"string\">insertDept(Department</span> <span class=\"string\">department);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Delete(&quot;delete</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int deleteDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Update(&quot;</span><span class=\"string\">update</span> <span class=\"string\">department</span> <span class=\"string\">set</span> <span class=\"string\">dept_Name=#</span>&#123;<span class=\"string\">deptName</span>&#125; <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int updateDept(Department department);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Select(&quot;</span><span class=\"string\">select</span> <span class=\"string\">*</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public Department getDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>6、编写controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeptController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DepartmentMapper departmentMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDepartment</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.getDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/delDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.deleteDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.updateDept(<span class=\"keyword\">new</span> Department(id, <span class=\"string\">&quot;开发部&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertDept</span><span class=\"params\">(Department department)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.insertDept(department);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>mapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文</p>\n<p>件夹下的mapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主配置类或者mybatis配置类</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(value = &quot;com.wdjr.springboot.mapper&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件方式\"><a href=\"#配置文件方式\" class=\"headerlink\" title=\"配置文件方式\"></a>配置文件方式</h3><p>1、新建文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg\" alt=\"50.mybatisxml\"></p>\n<p>2、新建mybatis的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、新建Employee的接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insetEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、新建Employee的mapper.xml的映射文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.wdjr.springboot.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getEmpById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.wdjr.springboot.bean.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">      select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insetEmp&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、修改application.yml配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>6、新建一个Controller访问方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeMapper employeeMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getEmp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeMapper.getEmpById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insertEmp&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">insertEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">        employeeMapper.insetEmp(employee);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、JPA数据访问\"><a href=\"#4、JPA数据访问\" class=\"headerlink\" title=\"4、JPA数据访问\"></a>4、JPA数据访问</h2><p>新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC</p>\n<p>目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg\" alt=\"51.JPA\"></p>\n<p>1、新建一个实体类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用JPA注解配置映射关系</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span><span class=\"comment\">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name=&quot;tbl_user&quot;)</span> <span class=\"comment\">//@Table来指定和那个数据表对应，如果省略默认表明就是user;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//这是一个主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class=\"comment\">//自增组件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;last_name&quot;,length = 50)</span> <span class=\"comment\">//这是和数据表对应的一个列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span><span class=\"comment\">//省略默认列名就是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个UserRepository来继承jpa的绝大多数功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承jpaRepository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131/jpa</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">    <span class=\"comment\">#更新或创建</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>4、编写Controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        User user = userRepository.findOne(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">insertUser</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">        User user1 = userRepository.save(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  user1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七、启动配置原理\"><a href=\"#七、启动配置原理\" class=\"headerlink\" title=\"七、启动配置原理\"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>\n<p>加载配置文件META-INF/spring.factories</p>\n<p>​    ApplicationContextInitializer</p>\n<p>​    SpringApplicationRunListener</p>\n<p>ioc容器中</p>\n<p>​    ApplicationRunner</p>\n<p>​    CommandLineRunner</p>\n<p>启动流程</p>\n<h2 id=\"1、创建SpringApplicaiotn对象\"><a href=\"#1、创建SpringApplicaiotn对象\" class=\"headerlink\" title=\"1、创建SpringApplicaiotn对象\"></a>1、创建SpringApplicaiotn对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Object[] sources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存主配置类</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sources != <span class=\"keyword\">null</span> &amp;&amp; sources.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前是否是个web应用</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来</span></span><br><span class=\"line\">   setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">         ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来</span></span><br><span class=\"line\">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">//决定哪一个是主程序</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ApplicationInitializer</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg\" alt=\"52.applicationCotextInitializer\"></p>\n<p> ApplicationListener</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg\" alt=\"53.Listener\"></p>\n<h2 id=\"2、运行Run方法\"><a href=\"#2、运行Run方法\" class=\"headerlink\" title=\"2、运行Run方法\"></a>2、运行Run方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">//获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory</span></span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">//回调所有的SpringApplicationRunListener.starting()方法</span></span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//封装命令行参数</span></span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">       <span class=\"comment\">//准备环境</span></span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成</span></span><br><span class=\"line\">       <span class=\"comment\">//打印SpringBoot图标</span></span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">       <span class=\"comment\">//创建ApplicationContext，决定创建web的ioc容器还是普通的ioc</span></span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">       <span class=\"comment\">//异常分析</span></span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">       <span class=\"comment\">//重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//回调所有的SpringApplicationRunListener的contextPrepare()</span></span><br><span class=\"line\">       <span class=\"comment\">//告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded</span></span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">       <span class=\"comment\">//重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat</span></span><br><span class=\"line\">       <span class=\"comment\">//扫描 创建加载所有组件的地方</span></span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">       <span class=\"comment\">//从ioc中获取所有的ApplicationRunner和CommandLineRunner</span></span><br><span class=\"line\">       <span class=\"comment\">//ApplicationRunner先回调</span></span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">//保存应用状态</span></span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//整个springboot启动完成以后返回启动的ioc容器</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、事件监听机制\"><a href=\"#3、事件监听机制\" class=\"headerlink\" title=\"3、事件监听机制\"></a>3、事件监听机制</h2><p>新建listener监听</p>\n<p>文件目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg\" alt=\"54.listener2\"></p>\n<p>1、HelloApplicationContextInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型监听ioc容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextInitializer</span>&lt;<span class=\"title\">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationContextInitializer...跑起来了.....&quot;</span>+applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、HelloSpringApplicationRunListener</p>\n<p>加构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloSpringApplicationRunListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloSpringApplicationRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听容器开始......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环境准备好了......&quot;</span>+environment.getSystemProperties().get(<span class=\"string\">&quot;os.name&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ioc容器准备好了......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器环境已经加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finished</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;全部加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、HelloApplicationRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationRunner.....run....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、HelloCommandLineRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CommandLineRunner......run.....&quot;</span>+Arrays.asList(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件运行方法</p>\n<p>HelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Initializers</span><br><span class=\"line\">org.springframework.context.ApplicationContextInitializer&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloApplicationContextInitializer</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.boot.SpringApplicationRunListener&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloSpringApplicationRunListener</span><br></pre></td></tr></table></figure>\n\n<p>HelloApplicationRunner和HelloCommandLineRunner ioc加入</p>\n<p>@Component</p>\n<h1 id=\"八、SpringBoot的自定义starter\"><a href=\"#八、SpringBoot的自定义starter\" class=\"headerlink\" title=\"八、SpringBoot的自定义starter\"></a>八、SpringBoot的自定义starter</h1><p>starter：场景启动器</p>\n<p>1、场景需要使用什么依赖？</p>\n<p>2、如何编写自动配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//指定这个类是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnXXX</span> <span class=\"comment\">//在指定条件下成立的情况下自动配置类生效</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span> <span class=\"comment\">//指定自动配置类的顺序</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//给容器中添加组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span> <span class=\"comment\">//结合相关xxxProperties类来绑定相关的配置</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span> <span class=\"comment\">//让xxxProperties生效加到容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\">自动配置类要能加载</span><br><span class=\"line\">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br></pre></td></tr></table></figure>\n\n<p>3、模式</p>\n<p>启动器空的jar只需要做依赖管理导入；</p>\n<p>专门写一个自动配置模块；</p>\n<p>启动器依赖自动配置，别人只需要引入starter</p>\n<p>xxx-spring-boot-starter</p>\n<h3 id=\"新建一个starter\"><a href=\"#新建一个starter\" class=\"headerlink\" title=\"新建一个starter\"></a>新建一个starter</h3><blockquote>\n<p>绕的你怀疑人生</p>\n</blockquote>\n<h4 id=\"1、新建一个空项目工程\"><a href=\"#1、新建一个空项目工程\" class=\"headerlink\" title=\"1、新建一个空项目工程\"></a>1、新建一个空项目工程</h4><p><img src=\"E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg\" alt=\"56.starter01\"></p>\n<p>2、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg\" alt=\"57.starter02\"></p>\n<p>3、导入module</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg\" alt=\"58.starter03\"></p>\n<p>4、新建一个Maven工程</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg\" alt=\"59.starter04\"></p>\n<p>5、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg\" alt=\"60.starter05\"></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg\" alt=\"61.starter06\"></p>\n<p>6、在新建一个autoconfiguration类的spring</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg\" alt=\"62.starter07\"></p>\n<p>7、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg\" alt=\"63.starter08\"></p>\n<p>8、无需导入依赖</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg\" alt=\"64.starter09\"></p>\n<p>9、next</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg\" alt=\"65.starter10\"></p>\n<p>最后配置完成</p>\n<h4 id=\"2、编写starter\"><a href=\"#2、编写starter\" class=\"headerlink\" title=\"2、编写starter\"></a>2、编写starter</h4><h5 id=\"autoconfigurer\"><a href=\"#autoconfigurer\" class=\"headerlink\" title=\"autoconfigurer\"></a>autoconfigurer</h5><p>对<strong>lxy-spring-boot-starter-autoconfigurer</strong>进行删减</p>\n<p>目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg\" alt=\"66.starter-build01\"></p>\n<p>2、pom文件修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写相关的类</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg\" alt=\"67.starter-build02\"></p>\n<p>4、HelloProperties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;lxy.hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPrefix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrefix</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSuffix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuffix</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、HelloService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloProperties <span class=\"title\">getHelloProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHelloProperties</span><span class=\"params\">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.helloProperties = helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+name+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、HelloServiceAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        HelloService service = <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">        service.setHelloProperties(helloProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\</span><br><span class=\"line\">com.lxy.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter-autoconfigurer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>9、install生成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg\" alt=\"68.starter-build03\"></p>\n<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><p>新建一个springboot 1.5+web</p>\n<p>1、引入starter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个Controller用来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService.sayHello(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件制定前缀和后缀名</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">lxy.hello.prefix</span>=<span class=\"string\">Starter-</span></span><br><span class=\"line\"><span class=\"meta\">lxy.hello.suffix</span>=<span class=\"string\">-Success</span></span><br></pre></td></tr></table></figure>\n\n<p>4、运行访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg\" alt=\"70.starter-build05\"></p>\n<p>成功爽啊</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}