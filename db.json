{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1619105644541},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"0e70852db0bed7f0dfb9dc01c99ddf95de36c2bc","modified":1619105670721},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"source/_posts/SpringBoot高级教程.md","hash":"2522ae261733a8ba9e9b7814dff62bc5a97acc87","modified":1608897039300},{"_id":"source/_posts/SpringBoot入门简介.md","hash":"c14ee94d81085992be0866bea6df04360aae7007","modified":1620775162608},{"_id":"source/_posts/中国道路问题——官僚资本主义.md","hash":"9bc26ce6057a282f29002a37b95f89f6a6241da7","modified":1649757136746},{"_id":"source/_posts/历史从来不是关于过去的，历史从来都是关于未来的.md","hash":"d94b05395d2d6248df89387784c243b4a8c5e807","modified":1649757224820},{"_id":"source/_posts/悬浮时代 项飙.md","hash":"8445f94da1687d19138a7e5b747f8478cbc6287e","modified":1649757276375},{"_id":"source/_posts/戴锦华老师关于墨茶事件的思考.md","hash":"954d678c6d9cc5f239723d5be8547702d2c4ea3b","modified":1649757317545},{"_id":"source/_posts/投资决策.md","hash":"08cfb17332a910d99a5e49aeb49c88a761bf26e6","modified":1649757332684},{"_id":"source/_posts/游戏中的自由.md","hash":"690426bbe2c635d5a4a3adfa23ffba081e65544f","modified":1649757345336},{"_id":"source/_posts/漫谈如何寻找投资机会.md","hash":"c37c1e920cf40b80e67f62479b7a869cc94c69d5","modified":1649757364227},{"_id":"source/_posts/类比——哲学特质.md","hash":"610bd262cc0b55c4d3e93cbaa262a81c9c183042","modified":1649757390580},{"_id":"source/_posts/资本论_王德峰.md","hash":"e0023b8d7a4c04e9e8af6d23c77d4b44d35a6093","modified":1649757405017},{"_id":"source/_posts/金钱主宰的社会：工作和人际关系都变为一种手段.md","hash":"578f7f617d3c6430cf700439f3b8b772a73e6d2b","modified":1649757652702},{"_id":"source/_posts/什么是斯多葛主义？ What Is Stoicism.md","hash":"cc6eb269ff75f10d4363db819f1f762256866713","modified":1649757151967},{"_id":"source/_posts/对毛泽东新中国探索的再思考.md","hash":"e4c7cbb7f55bfc04ed3b8e612639d8682583614a","modified":1649757244633},{"_id":"source/_posts/金融之王——沙赫特[德国].md","hash":"311be75920ecbc839a2d8ab8fcda56978e3849ee","modified":1649757470677},{"_id":"public/2021/06/10/中国道路问题——官僚资本主义/index.html","hash":"f76cf3978bf5057d92ffe7faf62c4718c86dedbd","modified":1649757680574},{"_id":"public/2021/06/10/历史从来不是关于过去的，历史从来都是关于未来的/index.html","hash":"7a787d314a9905bfaba4a6b5851b0c0ea3f0f08a","modified":1649757680574},{"_id":"public/2021/04/22/hello-world/index.html","hash":"e0d3c3ca2d89c6bcdcc4c58c197e2ea7ee7fdfa6","modified":1649757680574},{"_id":"public/archives/index.html","hash":"a7c6cb467a562a606be56b4d26760fd4a0b2df24","modified":1649757680574},{"_id":"public/archives/page/2/index.html","hash":"7fe33afe5b396b0c6401284b2c4fa762412efb7d","modified":1649757680574},{"_id":"public/archives/2020/12/index.html","hash":"ea00d83f6764c650bd9738e7689e3dcff8b138e7","modified":1649757680574},{"_id":"public/archives/2020/index.html","hash":"3c3b7aa00696d7a3019ae0d27ae221ab3d170d50","modified":1649757680574},{"_id":"public/archives/2021/04/index.html","hash":"2faf43bfd498354f90a09208d64f891430b0e8f3","modified":1649757680574},{"_id":"public/archives/2021/index.html","hash":"aff9f898bb7798dfc177e067bc6e37eca3370cb4","modified":1649757680574},{"_id":"public/archives/2021/06/index.html","hash":"8f8bf531ea5e69898de4135203441d2cca3cba25","modified":1649757680574},{"_id":"public/archives/2021/09/index.html","hash":"1b4528f50aecc5b5e4e4ac953d4b6e9e0099db89","modified":1649757680574},{"_id":"public/archives/2021/12/index.html","hash":"7bf7d5f9200e4c861a00e36007e248eac0b40e5a","modified":1649757680574},{"_id":"public/archives/2022/index.html","hash":"9338c23bc3670572b3a065ea07bce939f4b6f0c8","modified":1649757680574},{"_id":"public/archives/2022/02/index.html","hash":"47330e5fcd467741c25419464330cd6b11b0cbd7","modified":1649757680574},{"_id":"public/archives/2022/04/index.html","hash":"90541f9489cacda93377112ca63296392e936cf8","modified":1649757680574},{"_id":"public/2022/04/11/金融之王——沙赫特[德国]/index.html","hash":"e6a9e58259583f6e9cc3ee53a2cdd467bb80ac5b","modified":1649757680574},{"_id":"public/2022/04/11/悬浮时代 项飙/index.html","hash":"8095f47f6fb8ded8528f29b2c20f7f854e835202","modified":1649757680574},{"_id":"public/2022/04/11/游戏中的自由/index.html","hash":"b56d4ac972f67cdbf0e8bfccaafcbd0389e8e4b2","modified":1649757680574},{"_id":"public/2022/04/11/戴锦华老师关于墨茶事件的思考/index.html","hash":"b841d5fabf85abc6403a3511dd43a67b9e9f5a21","modified":1649757680574},{"_id":"public/2022/02/20/对毛泽东新中国探索的再思考/index.html","hash":"23526dad531a5207bc150ef44849958dd7942dc8","modified":1649757680574},{"_id":"public/2021/12/25/资本论_王德峰/index.html","hash":"026a0565bb7e33002253bdd67bfe4e86ce34372e","modified":1649757680574},{"_id":"public/2021/12/11/金钱主宰的社会：工作和人际关系都变为一种手段/index.html","hash":"0afbf629424365a3be6e455b4833acc9901bfcde","modified":1649757680574},{"_id":"public/2021/12/11/漫谈如何寻找投资机会/index.html","hash":"72103ed370e1a28d28515e952024af1fc5c0b3a1","modified":1649757680574},{"_id":"public/2021/09/19/什么是斯多葛主义？ What Is Stoicism/index.html","hash":"84bed26ccd78716cf7b52fc89616d26074c8d098","modified":1649757680574},{"_id":"public/2020/12/25/SpringBoot入门简介/index.html","hash":"da355cf5099280c1e6be5a81fcc2b8917cbdb95f","modified":1649757680574},{"_id":"public/index.html","hash":"2f0444e8d247369b4d992628edecdbe4193e4ac0","modified":1649757680574},{"_id":"public/page/2/index.html","hash":"e678b00011d0057108338bc64d2ce0c30453288f","modified":1649757680574},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1649756936972},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1649756936972},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1649756936972},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1649756936972},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1649756936972},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1649756936972},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1649756936972},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1649756936972},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1649756936972},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1649756936972},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1649756936972},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1649756936972},{"_id":"public/2022/04/11/投资决策/index.html","hash":"86c7a5d55871c1087f951891869ad381ee95910c","modified":1649757680574},{"_id":"public/archives/2021/05/index.html","hash":"10a266c80893ef0da1da861f5fd0e8c27ae1ff1c","modified":1649757680574},{"_id":"public/2021/05/28/类比——哲学特质/index.html","hash":"4ba618a01a2ba1774174767ca9f62dc6c441bcc4","modified":1649757680574}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-04-22T15:34:04.541Z","updated":"2021-04-22T15:34:04.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknt2epsm00003k0m8hy5auru","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Spring Boot入门","_content":"\n# 一、Spring Boot入门\n\n## 1、Spring Boot简介\n\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n\n## 2、微服务\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务，可以通过HTTP的方式进行互通\n\n单体应用：ALL IN ONE\n\n微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元\n\n## 3、环境准备\n\n环境约束\n\n- jdk1.8\n- maven 3.x :maven3.3以上\n- IDEA2017\n- SpringBoot 1.5.9RELEASE\n\n### 1、MAVEN设置\n\n```xml\n<!-- 配置JDK版本 -->\n<profile>    \n    <id>jdk18</id>    \n    <activation>    \n        <activeByDefault>true</activeByDefault>    \n        <jdk>1.8</jdk>    \n    </activation>    \n    <properties>    \n        <maven.compiler.source>1.8</maven.compiler.source>    \n        <maven.compiler.target>1.8</maven.compiler.target>    \n        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    \n    </properties>     \n</profile>\n   <!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，\n        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。\n        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下\n    -->\n    <!-- <mirror>\n        <id>spring-libs-milestone</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Spring Milestones</name>\n        <url>http://repo.spring.io/libs-milestone</url>\n    </mirror> -->\n\n    <!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  -->\n    <mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n\n    <!-- 备选镜像，也是可以通过 url 去查找确定一下，\n        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  -->\n    <mirror>\n        <id>central-repository</id>\n        <mirrorOf>*</mirrorOf>\n        typor<name>Central Repository</name>\n        <url>http://central.maven.org/maven2/</url>\n    </mirror>  \n```\n\n### 2、IDEA设置\n\n​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件\n\n​\t快捷键：\n\n​\tCtrl+D 复制一行\n\n​\tCtrl+Y 删除一行\n\n​\tCtrl+P 参数提示\n\n​\tCtrl+Alt+V 自动补齐方法\n\n​\tCtrl+N 查找类方法\n\n​\tAlt+Ins 构造器、getter/setter toString\n\n​\tCtrl+O 重载方法提示\n\n​\tAlt+Enter 提示导入类etc\n\n​\tShift+F6 :文件重命名\n\n## 4、Spring Boot的Hello World\n\n### 1、创建一个Maven工程\n\n\n\n### 2、导入Spring Boot的相关依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n```\n\n### 3、编写个主程序\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n### 4、编写相应的Controller和Service\n\n```java\n@Controller\npublic class HelloController {\n\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public  String  hello(){\n        return \"hello world\";\n    }\n}\n```\n\n### 5、运行主程序测试\n\n访问 localhost:8080/hello\n\n### 6、简化部署\n\n在pom.xml文件中，导入build插件\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 5、HelloWorld深度理解\n\n### 1.POM.xml文件\n\n#### 1、父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n```\n\n这个父项目**spring-boot-starter-parent**又依赖一个父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n```\n\n下面有个属性，定义了对应的版本号\n\n```xml\n<properties>\n    <activemq.version>5.15.3</activemq.version>\n    <antlr2.version>2.7.7</antlr2.version>\n    <appengine-sdk.version>1.9.63</appengine-sdk.version>\n    <artemis.version>2.4.0</artemis.version>\n    <aspectj.version>1.8.13</aspectj.version>\n    <assertj.version>3.9.1</assertj.version>\n    <atomikos.version>4.0.6</atomikos.version>\n    <bitronix.version>2.1.4</bitronix.version>\n    <build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>\n    。。。。。。。\n```\n\nSpring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明\n\n#### 2、启动器\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件\n\n**spring boot**将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。\n\n### 2、主程序入口\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n**@SpringBootApplication:** 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用\n\n进入SpringBootApplication注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n```\n\n**@SpringBootConfiguration**：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类\n\n**@Configuration**:配置类上，来标注这个注解；\n配置类 ---- 配置文件，也是容器中的一个组件（@Component）\n**@EnableAutoConfiguration**:开启自动配置功能\n以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动\n配置功能；这样自动配置才能生效。 \n\n```java\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration { \n```\n\n**@AutoConfigurationPackage**:自动配置包\n**@Import({Registrar.class})**：底层注解，给容器导入组件；\n将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； \n\n**@Import({AutoConfigurationImportSelector.class})：**\n给容器导入组件？ \n\nAutoConfigurationImportSelector：导入组件选择器 \n\n将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；\n\n会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置\n好这些组件。 \n\n![1.configuration](E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg)\n\n```java\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\nAnnotationAttributes attributes) {\n\tList<String> configurations =\nSpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),\nthis.getBeanClassLoader());\n\tAssert.notEmpty(configurations, \"No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\");\n\treturn configurations;\n} \n```\n\n`SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),`\n`this.getBeanClassLoader());` \n\nSpring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；\n\n将这些值作为自动配置类导入到容器中，自动配置就生效了。 ![2.factories](E:\\工作文档\\SpringBoot\\images\\2.factories.jpg)\n\nJ2EE的整体解决方案\n\norg\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar \n\n## 6、使用Spring Initializer创建一个快速向导 \n\n1.IDE支持使用Spring Initializer\n\n自己选择需要的组件:例如web\n\n默认生成的SpringBoot项目 \n\n- 主程序已经生成好了，我们只需要完成我们的逻辑\n\n\n- resources文件夹目录结构\n\n  - static:保存所有的静态文件；js css images\n\n  - templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可\n\n    以使用模板引擎（freemarker.thymeleaf）;\n\n  - application.properties:Spring Boot的默认配置，例如 server.port=9000 \n\n# 二、配置文件 \n\n## 1、配置文件 \n\nSpring Boot使用全局配置文件，配置文件名是固定的；\n\n- application.properties\n- application.yml \n\n配置文件作用：修改Spring Boot在底层封装好的默认值；\n\nYAML（YAML AIN'T Markup Language）\n\n是一个标记语言\n\n又不是一个标记语言 \n\n**标记语言：**\n\n以前的配置文件；大多数使用的是 xxx.xml文件；\n\n以数据为中心，比json、xml等更适合做配置文件\n\nYAML：配置例子 \n\n```yaml\nserver:\n\tport: 9000 \n```\n\nXML: \n\n```xml\n<server>\n\t<port>9000</port>\n</server> \n```\n\n## 2、YAML语法 \n\n### 1、基本语法 \n\nk:(空格)v:表示一堆键值对（空格必须有）；\n\n以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 \n\n```yaml\nserver:\n\tport: 9000\n\tpath: /hello \n```\n\n属性和值也是大小写敏感 \n\n### 2、值的写法\n\n**字面量：普通的值（数字，字符串，布尔）** \n\nk: v:字面直接来写；\n\n字符串默认不用加上单引号或者双引号\n\n\"\":**双引号** 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思\n\n`name:\"zhangsan\\n lisi\"` 输出：`zhangsan换行 lisi`\n\n'':**单引号** 会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n`name:'zhangsan\\n lisi'` 输出：`zhangsan\\n lisi` \n\n**对象、Map（属性和值）键值对** \n\nk :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进\n\n对象还是k:v的方式 \n\n```yaml\nfrends:\n\tlastName: zhangsan\n\tage: 20 \n```\n\n行内写法 \n\n```yaml\nfriends: {lastName: zhangsan,age: 18} \n```\n\n**数组（List、Set）:**\n用-表示数组中的一个元素 \n\n```yaml\npets:\n ‐ cat\n ‐ dog\n ‐ pig \n```\n\n行内写法 \n\n```yaml\npets: [cat,dog,pig] \n```\n\n**组合变量**\n\n多个组合到一起 \n\n## 3、配置文件值注入 \n\n### 1、@ConfigurationProperties\n\n1、application.yml 配置文件 \n\n```yaml\nperson:\n  age: 18\n  boss: false\n  birth: 2017/12/12\n  maps: {k1: v1,k2: 12}\n  lists:\n   - lisi\n   - zhaoliu\n  dog:\n    name: wangwang\n    age: 2\n  last-name: wanghuahua\n```\n\n`application.properties` 配置文件（二选一） \n\n```properties\nidea配置文件utf-8\nproperties 默认GBK\nperson.age=12\nperson.boss=false\nperson.last-name=张三\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n所以中文输出乱码，改进settings-->file encoding -->[property-->utf-8 ,勾选转成ascii] \n\njavaBean \n\n```java\n/**\n* 将配置文件的配置每个属性的值，映射到组件中\n* @ConfigurationProperties:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；\n* prefix = \"person\" 配置文件爱你的那个属性进行一一映射\n* *\n只有这个组件是容器中的组件，才能提供到容器中\n*/\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n导入配置文件处理器，以后编写配置就有提示了 \n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring‐boot‐configuration‐processor</artifactId>\n\t<optional>true</optional>\n</dependency> \n```\n### 2、@Value注解\n\n更改javaBean中的注解\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    @Value(\"${person.last-name}\")\n    private String lastName;\n    @Value(\"#{11*2}\")\n    private Integer age;\n    @Value(\"true\")\n    private Boolean boss;\n```\n\n|          | @ConfigurationProperties | @Value |\n| :------: | :----------------------: | :----: |\n|    功能    |        批量注入配置文件属性        |  单个指定  |\n| 松散绑定(语法) |            支持            |  不支持   |\n|   spEL   |           不支持            |   支持   |\n| JSR303校验 |            支持            |  不支持   |\n|   复杂类型   |            支持            |  不支持   |\n\n> 松散语法：javaBean中last-name(或者lastName) -->application.properties中的last-name;\n>\n> spEL语法：#{11*2} \n>\n> JSR303：@Value会直接忽略，校验规则\n\nJSR303校验：\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"person\")\n@Validated\npublic class Person {\n    @Email\n    private String lastName;\n```\n\n复杂类型栗子：\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n   // @Value(\"${person.maps}\")\n    private Map<String,Object> maps;\n```\n\n以上会报错，不支持复杂类型\n\n**使用场景分析**\n\n​\t如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；\n\n如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties\n\n举栗子：\n\n1、编写新的Controller文件\n\n```java\n@RestController\npublic class HelloController {\n\n    @Value(\"${person.last-name}\")\n    private String name;\n    @RequestMapping(\"/hello\")\n    public  String sayHello(){\n        return \"Hello\"+ name;\n    }\n}\n```\n\n2、配置文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n3、测试运行\n\n访问 localhost:9000/hello\n\n结果为`Hello 李四`\n\n### 3、其他注解\n **@PropertySource**\n\n作用：加载指定的properties配置文件\n\n1、新建一个person.properties文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n2、在javaBean中加入@PropertySource注解\n\n```java\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n```\n\n**@ImportResource**\n\n作用：导入Spring配置文件，并且让这个配置文件生效\n\n1、新建一个Spring的配置文件，bean.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"HelloService\" class=\"com.wdjr.springboot.service.HelloService\"></bean>\n</beans>\n```\n\n2、编写测试类，检查容器是否加载Spring配置文件写的bean\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"HelloService\");\n    System.out.println(b);\n}\n```\n\n> import org.springframework.context.ApplicationContext;\n\n3、运行检测\n\n结果为false，没有加载配置的内容\n\n4、使用@ImportResource注解\n\n将@ImportResource标注在主配置类上\n\n```java\n@ImportResource(locations={\"classpath:beans.xml\"})\n@SpringBootApplication\npublic class SpringBoot02ConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot02ConfigApplication.class, args);\n    }\n}\n```\n\n5、再次运行检测\n\n结果为true\n\n缺点：每次指定xml文件太麻烦\n\nSpringBoot推荐给容器添加组件的方式：\n\n1、配置类=====Spring的xml配置文件（old）\n\n2、全注解方式@Configuration+@Bean（new）\n\n![4.MyAppConfig](E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg)\n\n\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来代替之前的Spring配置文件\n *\n * 在配置文件中用<bean></bean>标签添加组件\n */\n\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器这个组件id就是方法名\n    @Bean\n    public HelloService helloService01(){\n        System.out.println(\"配置类给容器添加了HelloService组件\");\n        return new HelloService();\n    }\n}\n```\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"helloService01\");\n    System.out.println(b);\n}\n```\n\n *容器这个组件id就是方法名* \n\n## 4、配置文件占位符\n\n#### 1、随机数\n\n```properties\n${random.value} 、${random.int}、${random.long}\n${random.int(10)}、${random.int[100,200]}\n```\n\n#### 2、获取配置值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.last-name}'s wanghuahu\nperson.dog.age=15\n```\n\n存在以下两种情况\n\n没有声明`person.last-name`会报错，新声明的需要加默认值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}'s wanghuahu\nperson.dog.age=15\n```\n\n结果：输出`hello's wanghuahua`\n\n## 5、Profile\n\n### 1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml\n\n- application.properties\n- application-dev.properties\n- application-prod.properties\n\n默认使用application.properties\n\napplication.properties配置文件指定\n\n```properties\nspring.profiles.active=dev\n```\n\n### 2、YAML文档块\n\n```yaml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: dev\n\n---\n\nserver:\n  port: 9000\nspring:\n  profiles: dev\n\n---\nserver:\n  port: 80\nspring:\n  profiles: prod\n\n```\n\n### 3、激活指定profile\n\n1、在配置文件中激活\n\n2、命令行：\n\n--spring.profiles.active=dev\n\n![5.comandLine](E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg)\n\n优先级大于配置文件\n\n打包 成jar后\n\n`java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev`\n\n虚拟机参数\n\n`-Dspring.profiles.active=dev`\n\n## 6、加载配置文件位置\n\nSpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n- file:./config/\n- file./\n- classpath:/config/\n- classpath:/\n\n优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置\n\n也可以通过spring.config.location来改变默认配置\n\n> ```\n> server.servlet.context-path=/boot03\n> ```\n\n注：spring boot1x 是server.context.path=/boot02\n\n\n\n![7.priority](E:\\工作文档\\SpringBoot\\images\\7.priority.jpg)\n\n还可以通过spring.config.location来改变配置文件的位置\n\n项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置\n\n`java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties`\n\n运维比较有用，从外部加载，不用修改别的文件\n\n## 7.引入外部配置\n\n**SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补**\n\n1. 命令行参数\n\n   java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --server.port=9005 --server.context-path=/abc\n\n   中间一个空格\n\n2. 来自java:comp/env的JNDI属性\n\n3. java系统属性（System.getProperties()）\n\n4. 操作系统环境变量\n\n5. RandomValuePropertySource配置的random.*属性值\n\n   \n\n   **优先加载profile,    由jar包外到jar包内**\n\n6. **jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n7. **jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n8. **jar包外部的application.properties或application.yml(带Spring.profile)配置文件**\n\n9. **jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n   \n\n10. @Configuration注解类的@PropertySource\n\n11. 通过SpringApplication.setDefaultProperties指定的默认属性\n\n[官方文档](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n## 8、自动配置\n\n配置文件到底怎么写？\n\n[Spring的所有配置参数](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties)\n\n自动配置原理很关键\n\n### 1、自动配置原理\n\n1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration\n\n2）、@EnableAutoConfiguration 作用：\n\n- 利用AutoConfigurationImportSelector给容器中导入一些组件？\n- 可以查看selectImports()方法的内容\n- 获取候选的配置\n\n```java\nList<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n```\n\n\n- 扫描类路径下的\n```java\n  SpringFactoriesLoader.loadFactoryNames(）\n  扫描所有jar包类路径下的 MATA-INF/spring.factories\n  把扫描到的这些文件的内容包装成properties对象\n  从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中\n```\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；\n\n3）、每一个自动配置类进行自动配置功能；\n\n4）、以**HttpEncodingAutoConfiguration** 为例\n\n```java\n@Configuration //表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties({HttpEncodingProperties.class})//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中\n@ConditionalOnWebApplication//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；\n(\n    type = Type.SERVLET\n)\n@ConditionalOnClass({CharacterEncodingFilter.class})//判断当前项目有没有这个类，解决乱码的过滤器\n@ConditionalOnProperty(\n    prefix = \"spring.http.encoding\",\n    value = {\"enabled\"},\n    matchIfMissing = true\n)//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效\npublic class HttpEncodingAutoConfiguration {\n   //给容器添加组件，这个组件的值需要从properties属性中获取\n    private final HttpEncodingProperties properties;\n\t//只有一个有参数构造器情况下，参数的值就会从容器中拿\n    public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n        filter.setEncoding(this.properties.getCharset().name());\n        filter.setForceRequestEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));\n        filter.setForceResponseEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));\n        return filter;\n    }\n\n```\n\n5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类\n\n```java\n@ConfigurationProperties(prefix = \"spring.http.encoding\")//从配置文件中的值进行绑定和bean属性进行绑定\npublic class HttpEncodingProperties {\n```\n\n根据当前不同条件判断，决定这个配置类是否生效？\n\n一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的\n\n\n\n### 2、所有的自动配置组件\n\n每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；\n\n作用：用他们做自动配置\n\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n\n```\n\n### 3、精髓：\n\n1）、SpringBoot启动会加载大量的自动配置类\n\n2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；\n\n3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）\n\n4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值\n\nxxxAutoConfiguration:自动配置类；\n\n给容器中添加组件\n\nxxxProperties:封装配置文件中的属性；\n\n跟之前的Person类一样，配置文件中值加入bean中\n\n### 4、细节\n\n#### 1、@Conditional派生注解 \n\n> 利用Spring注解版原生的@Conditional作用\n\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional派生注解                | 作用（判断是否满足当前指定条件）               |\n| ------------------------------- | ------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                |\n| @ConditionalOnBean              | 容器中存在指定Bean                    |\n| @ConditionalOnMissBean          | 容器中不存在指定Bean                   |\n| @ConditionalOnExpression        | 满足spEL表达式                      |\n| @ConditionalOnClass             | 系统中有指定的类                       |\n| @ConditionalOnMissClass         | 系统中没有指定的类                      |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean,或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                |\n| @ConditionalOnResource          | 类路径下是否存在指定的资源文件                |\n| @ConditionalOnWebApplication    | 当前是web环境                       |\n| @ConditionalOnNotWebApplication | 当前不是web环境                      |\n| @ConditionalOnJndi              | JNDI存在指定项                      |\n\n#### 2、自动配置报告\n\n自动配置类必须在一定条件下生效\n\n我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效\n\n```properties\ndebug=true\n```\n\n自动配置报告\n\n```java\n============================\n\nCONDITIONS EVALUATION REPORT\n============================\n\n\nPositive matches:（启动的，匹配成功的）\n-----------------\n\n   CodecsAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n        ......\n        \n Negative matches:（没有启动的，没有匹配成功的）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n.....\n```\n\n# 三、日志\n\n> Spring Boot2对日志有更改\n\n### 1、日志框架\n\n小张：开发一个大型系统；\n\n1、System.out.println(\"\");将关键数据打印在控制台；去掉？卸载文件中\n\n2、框架记录系统的一些运行信息；日志框架zhanglog.jar\n\n3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?\n\n4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;\n\n5、JDBC--数据库驱动；\n\n​\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;\n\n​\t给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；\n\n市面上的日志框架\n\n| 日志抽象层                                                   | 日志实现                                        |\n| ------------------------------------------------------------ | ----------------------------------------------- |\n| ~~JCL(Jakarta Commons Logging)~~ SLF4j(Simple Logging Facade for Java) ~~jboss-logging~~ | Log4j ~~JUL(java.util.logging)~~ Log4j2 Logback |\n|                                                              |                                                 |\n\n左边的抽象，右边的实现\n\nSLF4J  -- Logback\n\nSpring Boot:底层是Spring框架，Spring默认框架是JCL；\n\n​\tSpringBoot选用SLF4J和logback\n\n### 2、SLF4J使用\n\n#### 1、如何在系统中使用SLF4j\n\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n应该给系统里面导入slf4j的jar包和logback的实现jar\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(\"Hello World\");\n  }\n}\n```\n\n![8.slf4j](E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg)\n\n每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架本身的配置文件**；\n\n#### 2、遗留问题\n\na系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis\n\n统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；\n\n核心：\n\n1、将系统中其他日志框架排除出去；\n\n2、用中间包来替换原有的日志框架/\n\n3、导入slf4j的其他实现\n\n### 3、SpingBoot日志框架解析\n\n打开IDEA ，打开pom文件的依赖图形化显示\n\n![9.IDEAdependencies](E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg)\n\nSpringBoot的基础框架\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\nSpringBoot的日志功能\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n![10.slf4jandlogback](E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg)\n\n总结：\n\n1. SpringBoot底层也是使用SLF4J+log4jback\n\n2. SpringBoot也把其他日志替换成了slf4j\n\n3. 起着commons.loggings的名字其实new的SLF4J替换中间包\n\n   SpringBoot2中改成了bridge\n\n4. 如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层\n\n### 4、日志的使用\n\n#### 1、默认配置\n\ntrace-debug-info-warn-error\n\n可以调整需要的日志级别进行输出，不用注释语句。\n\n```java\n//记录器\nLogger logger = LoggerFactory.getLogger(getClass());\n@Test\npublic void contextLoads() {\n\n    //日志的级别\n    //从低到高\n    //可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效\n    logger.trace(\"这是trace日志\");\n    logger.debug(\"这是debug信息\");\n    //SpringBoot默认给的是info级别，如果没指定就是默认的root级别\n    logger.info(\"这是info日志\");\n    logger.warn(\"这是warn信息\");\n    logger.error(\"这是Error信息\");\n}\n```\n\n调整指定包的日志级别在配置文件中进行配置\n\n```properties\nlogging.level.com.wdjr=trace\n```\n\n日志输出格式\n\n```properties\n#控制台输出的日志格式 \n#%d：日期\n#%thread：线程号 \n#%-5level：靠左 级别 \n#%logger{50}：全类名50字符限制,否则按照句号分割\n#%msg：消息+换行\n#%n：换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n```\n\nSpringBoot修改日志的默认配置\n\n```properties\nlogging.level.com.wdjr=trace\n#不指定path就是当前目录下生成springboot.log\n#logging.file=springboot.log\n#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认\nlogging.path=/spring/log\n#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n#指定文件中日志输出的格式\nlogging.pattern.file=xxx\n```\n\n#### 2、指定配置\n\n给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置\n\n| logging System         | Customization                                                |\n| ---------------------- | ------------------------------------------------------------ |\n| Logback                | logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy |\n| Log4J2                 | log4j2-spring.xml or log4j2.xml                              |\n| JDK(Java Util Logging) | logging.properties                                           |\n\nlogback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载\n\n```xml\n<springProfile name=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n<springProfile name!=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n```\n\n如何调试开发环境,输入命令行参数\n\n--spring.profiles.active=dev\n\n如果不带后面的xx-spring.xml就会报错\n\n### 3、切换日志框架\n\n可以根据slf4j的日志适配图，进行相关切换；\n\n#### 1、log4j\n\nslf4j+log4j的方式；\n\n![11.log4j](E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg)\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>logback-classic</artifactId>\n            <groupId>ch.qos.logback</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n```\n\n不推荐使用仅作为演示\n\n#### 2、log4j2\n\n切换为log4j2\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n# 四、web开发\n\n## 1、简介\n\n使用SpringBoot;\n\n1)、创建SpringBoot应用，选中我们需要的模块；\n\n2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来\n\n3)、自己编写业务代码\n\n**自动配置原理？**\n\n这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx\n\n```java\nxxxAutoConfiguration:帮我们给容器中自动配置组件\nxxxProperties:配置类来封装配置文件的内容\n```\n\n## 2、静态资源文件映射规则\n\n```java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware, InitializingBean {\n    //可以设置和静态资源相关的参数，缓存时间等\n```\n\n```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n   if (!this.resourceProperties.isAddMappings()) {\n      logger.debug(\"Default resource handling disabled\");\n      return;\n   }\n   Integer cachePeriod = this.resourceProperties.getCachePeriod();\n   if (!registry.hasMappingForPattern(\"/webjars/**\")) {\n      customizeResourceHandlerRegistration(registry\n            .addResourceHandler(\"/webjars/**\")\n            .addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n            .setCachePeriod(cachePeriod));\n   }\n   String staticPathPattern = this.mvcProperties.getStaticPathPattern();\n   if (!registry.hasMappingForPattern(staticPathPattern)) {\n      customizeResourceHandlerRegistration(\n            registry.addResourceHandler(staticPathPattern)\n                  .addResourceLocations(\n                        this.resourceProperties.getStaticLocations())\n                  .setCachePeriod(cachePeriod));\n   }\n}\n```\n\n### 1、webjar\n\n1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；\n\n​\twebjars：以jar包的方式引入静态资源\n\nhttp://www.webjars.org/\n\n![12.jquery](E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\n\n### 2、本地资源\n\n```\nprivate String staticPathPattern = \"/**\";\n```\n\n访问任何资源\n\n2、会在这几文件夹下去找静态路径（静态资源文件夹）\n\n```\n\"classpath:/META-INF/resources/\", \n\"classpath:/resources/\",\n\"classpath:/static/\", \n\"classpath:/public/\",\n\"/\";当前项目的根路径\n```\n\n![13.static](E:\\工作文档\\SpringBoot\\images\\13.static.jpg)\n\nlocalhost:8080/abc ==>去静态资源文件夹中找abc\n\n![14.static-css](E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg)\n\n3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；\n\nlocalhost:8080/  -->index页面\n\n```JAVA\n@Bean\npublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n      ResourceProperties resourceProperties) {\n   return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n         this.mvcProperties.getStaticPathPattern());\n}\n```\n\n4、喜欢的图标，即网站title的图标favicon\n\n```java\n@Configuration\n@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\npublic static class FaviconConfiguration {\n\n   private final ResourceProperties resourceProperties;\n\n   public FaviconConfiguration(ResourceProperties resourceProperties) {\n      this.resourceProperties = resourceProperties;\n   }\n\n   @Bean\n   public SimpleUrlHandlerMapping faviconHandlerMapping() {\n      SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n       //把任何favicon的图标都在静态文件夹下找\n      mapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\n            faviconRequestHandler()));\n      return mapping;\n   }\n\n   @Bean\n   public ResourceHttpRequestHandler faviconRequestHandler() {\n      ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n      requestHandler\n            .setLocations(this.resourceProperties.getFaviconLocations());\n      return requestHandler;\n   }\n\n}\n```\n\n可以在配置文件配置静态资源文件夹\n\n```properties\nspring.resources.static-locations=classpath:xxxx\n```\n\n## 3、模板引擎\n\n将html和数据 结合到一起 输出组装处理好的新文件\n\nSpringBoot推荐Thymeleaf;语法简单，功能强大\n\n### 1、引入thymeleaf 3\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n默认导入thymeleaf2，版本太低 所以使用thymeleaf3.\n\n[官方导入办法](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3)\n\n```xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <!--thymeleaf 3的导入-->\n    <thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n    <!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  -->\n    <!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  -->\n    <thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n</properties>\n```\n\n### 2、Thymeleaf使用和语法\n\n```java\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\npublic class ThymeleafProperties {\n\n   private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n\n   private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n\n   public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n\n   public static final String DEFAULT_SUFFIX = \".html\";\n   //只要把HTML文件方法类路径下的template文件夹下，就会自动导入\n```\n\n只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；\n\n使用：\n\n1、导入thymeleaf的名称空间\n\n```html\n<html xmlns:th=\"http://www.thymeleaf.org\">    \n```\n\n2、使用thymeleaf语法；\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>success</title>\n</head>\n<body>\n<h1>success</h1>\n<!--th:text 将div里面的文本内容设置为-->\n<div th:text=\"${Lion}\">\n前端数据\n</div>\n</body>\n</html>\n```\n\n3、语法规则\n\n1）、th:text=\"${hello}\"可以使用任意标签 替换原生的任何属性\n\n**在SpringBoot的环境下**\n\n```html\n<div id=\"testid\" class=\"testcalss\" th:id=\"${Lion}\" th:class=\"${Lion}\" th:text=\"${Lion}\">\n\t前端数据\n</div>\n```\n\n![15.thtmeleaf-th01](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg)\n\n**直接访问HTML页面**\n\n![15.thtmeleaf-th02](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg)\n\n**2)、内联写法注意需要在body上加上 th:inline=\"text\"敲黑板**\n\n不然不起作用\n\n```html\n<body class=\"text-center\" th:inline=\"text\"></body>\n```\n\nth标签的访问优先级\n\nOrder Feature Attributes\n\n### 3、语法规则\n\n|      | 功能                            | 标签                                 | 功能和jsp对比                             |\n| ---- | ------------------------------- | ------------------------------------ | ----------------------------------------- |\n| 1    | Fragment inclusion              | th:insert th:replace                 | include(片段包含)                         |\n| 2    | Fragment iteration              | th:each                              | c:forEach(遍历)                           |\n| 3    | Conditional evaluation          | th:if th:unless th:switch th:case    | c:if(条件判断)                            |\n| 4    | Local variable definition       | th:object  th:with                   | c:set(声明变量)                           |\n| 5    | General attribute modification  | th:attr th:attrprepend th:attrappend | 属性修改支持前面和后面追加内容            |\n| 6    | Specific attribute modification | th:value th:href th:src ...          | 修改任意属性值                            |\n| 7    | Text (tag body modification)    | th:text th:utext                     | 修改标签体内容utext：不转义字符<h1>大标题 |\n| 8    | Fragment specification          | th:fragment                          | 声明片段                                  |\n| 9    | Fragment removal                | th:remove                            |                                           |\n\n \n\n```properties\nSimple expressions:(表达式语法)\n    Variable Expressions: ${...}\n    \t1、获取对象属性、调用方法\n    \t2、使用内置基本对象：\n    \t    #ctx : the context object.\n            #vars: the context variables.\n            #locale : the context locale.\n            #request : (only in Web Contexts) the HttpServletRequest object.\n            #response : (only in Web Contexts) the HttpServletResponse object.\n            #session : (only in Web Contexts) the HttpSession object.\n            #servletContext : (only in Web Contexts) the ServletContext object.\n         3、内置一些工具对象\n        \t#execInfo : information about the template being processed.\n        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they\n            would be obtained using #{…} syntax.\n            #uris : methods for escaping parts of URLs/URIs\n            #conversions : methods for executing the configured conversion service (if any).\n            #dates : methods for java.util.Date objects: formatting, component extraction, etc.\n            #calendars : analogous to #dates , but for java.util.Calendar objects.\n            #numbers : methods for formatting numeric objects.\n            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.\n            #objects : methods for objects in general.\n            #bools : methods for boolean evaluation.\n            #arrays : methods for arrays.\n            #lists : methods for lists.\n            #sets : methods for sets.\n            #maps : methods for maps.\n            #aggregates : methods for creating aggregates on arrays or collections.\n            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).\n    Selection Variable Expressions: *{...} //选择表达式：和${}功能一样，补充功能\n   # 配合th:object使用，object=${object} 以后获取就可以使用*{a}  相当于${object.a}\n  \t    <div th:object=\"${session.user}\">\n            <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n            <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n            <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n\t\t</div>\n    Message Expressions: #{...} //获取国际化内容\n    Link URL Expressions: @{...} //定义URL链接\n    \t#<a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\">view</a>\n    Fragment Expressions: ~{...}//片段文档\n    \nLiterals（字面量）\n    Text literals: 'one text' , 'Another one!' ,…\n    Number literals: 0 , 34 , 3.0 , 12.3 ,…\n    Boolean literals: true , false\n    Null literal: null\n    Literal tokens: one , sometext , main ,…\nText operations:(文本操作)\n    String concatenation: +\n    Literal substitutions: |The name is ${name}|\nArithmetic operations:（数学运算）\n    Binary operators: + , - , * , / , %\n    Minus sign (unary operator): -\nBoolean operations:（布尔运算）\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality:（比较运算）\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\n    Equality operators: == , != ( eq , ne )\nConditional operators:（条件运算）\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:（空操作）\n\tNo-Operation: _\n```\n\ninline写法\n\n```html\n[[]] -->th:text\n[()] -->th:utext\n```\n\n\n\n## 4、SpringMVC自动配置\n\n### 1、SpringMVC的自动导入\n\n[Spring框架](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications)\n\n自动配置好了mvc：\n\n以下是SpringBoot对SpringMVC的默认\n\nSpring Boot provides auto-configuration for Spring MVC that works well with most applications.\n\nThe auto-configuration adds the following features on top of Spring’s defaults:\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n  - 自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)\n  - `ContentNegotiatingViewResolver`组合所有视图解析器\n  - 如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来\n\n- Support for serving static resources, including support for WebJars (see below).静态资源\n\n- Static `index.html` support.\n\n- Custom `Favicon` support (see below).\n\n- 自动注册 了`Converter`, `GenericConverter`, `Formatter` beans.\n\n  - `Converter`：类型转换 文本转为字面量\n\n  - `Formatter` ：格式化器 转换后格式转换\n\n    ```java\n    @Bean\n    @ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件配置入职格式化的规则\n    public Formatter<Date> dateFormatter() {\n       return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\n    }\n    ```\n\n    自己添加的格式化转换器，只需要放在容器中即可\n\n- Support for `HttpMessageConverters` (see below).\n\n  - `HttpMessageConverters` ：转换HTTP转换和响应：User - json\n\n  - `HttpMessageConverters` ：是从容器中确定；获取所有的`HttpMessageConverters`  ，将自己的组件注册在容器中@Bean \n\n  - If you need to add or customize converters you can use Spring Boot’s `HttpMessageConverters` class:\n\n    ```java\n    import org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n    import org.springframework.context.annotation.*;\n    import org.springframework.http.converter.*;\n    \n    @Configuration\n    public class MyConfiguration {\n    \n        @Bean\n        public HttpMessageConverters customConverters() {\n            HttpMessageConverter<?> additional = ...\n            HttpMessageConverter<?> another = ...\n            return new HttpMessageConverters(additional, another);\n        }\n    \n    }\n    ```\n\n- Automatic registration of `MessageCodesResolver` (see below).\n\n  - 定义错误代码生成规则\n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\n\n  - ```java\n    @Override\n    protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n       try {\n          return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n       }\n       catch (NoSuchBeanDefinitionException ex) {\n          return super.getConfigurableWebBindingInitializer();\n       }\n    }\n    ```\n\n    在beanFactory：中可以自己创建一个，初始化webDataBinder\n\n    请求数据 ==》javaBean\n\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.16.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\n\n思想：修改默认配置\n\n### 2、扩展SpringMVC\n\n编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用\n\n```java\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n1）、WebMvcAutoConfiguration是SpringMVC的自动配置\n\n2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)\n\n```java\n@Configuration\npublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n    private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\n\n\t//从容器中获取所有webMVCconfigurer\n\t@Autowired(required = false)\n\tpublic void setConfigurers(List<WebMvcConfigurer> configurers) {\n\t\tif (!CollectionUtils.isEmpty(configurers)) {\n\t\t\tthis.configurers.addWebMvcConfigurers(configurers);\n            \n            \t@Override\n                protected void addViewControllers(ViewControllerRegistry registry) {\n                    this.configurers.addViewControllers(registry);\n                }\n            //一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）\n            \t@Override\n               // public void addViewControllers(ViewControllerRegistry registry) {\n                   // for (WebMvcConfigurer delegate : this.delegates) {\n\t\t\t\t //delegate.addViewControllers(registry);\n                    //}\n                }\n\t\t}\n\t}\n    \n```\n\n\n\n3）、自己的配置被调用\n\n效果：SpringMVC的自动配置和我们的扩展配置都会起作用\n\n### 3、全面接管mvc\n\n不需要SpringBoot对SpringMVC的自动配置。\n\n```java\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n\n\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n例如静态资源访问，不推荐全面接管\n\n原理：\n\n为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了\n\n1）、核心配置\n\n```java\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n}\n```\n\n2）、DelegatingWebMvcConfiguration\n\n```java\n@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n```\n\n3）、WebMvcAutoConfiguration\n\n```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n      WebMvcConfigurerAdapter.class })\n//容器没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n      ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\n4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；\n\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能\n\n\n\n## 5、修改SpringMVC默认配置\n\n模式:\n\n​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n​\t2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。\n\n## 6、RestfulCRUD\n\n### 1、默认访问首页\n\n在config/MyConfig.java中编写配置类\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/login.html\").setViewName(\"login\");\n        }\n    };\n    return adapter;\n}\n```\n\n静态资源引用\n\n```html\n<link href=\"#\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n```\n\n### 2、国际化\n\n1、编写国际化配置文件\n\n2、使用ResourceBundleMessageSource管理国际化资源文件\n\n3、在页面中使用fmt:message，取出国际化内容\n\n#### 1、浏览器切换国际化\n\n步骤\n\n1、编写国际化配置文件，抽取页面需要的显示的国际化消息\n\n![16.national](E:\\工作文档\\SpringBoot\\images\\16.national.jpg)\n\n2、SpringBoot自动配置好了国际化配置的资源文件\n\n```java\n@ConfigurationProperties(prefix = \"spring.messages\")\npublic class MessageSourceAutoConfiguration {\n    //我们的配置文件可以直接放在类路径下叫messages.properties\n    private String basename = \"messages\";\n    @Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n            //设置国际化文件的基础名，去掉语言国家代码\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t}\n\t\tif (this.encoding != null) {\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t}\n```\n\n3、对IDEA的编码进行设置\n\n![17.encoding](E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg)\n\n4、login进行标签插入\n\n```html\n<!DOCTYPE html>\n<!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ -->\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"author\" content=\"\" />\n    <link rel=\"icon\" href=\"https://getbootstrap.com/favicon.ico\" />\n\n    <title>登录页面</title>\n\n    <!-- Bootstrap core CSS -->\n    <link href=\"#\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n\n    <!-- Custom styles for this template -->\n    <link href=\"./login_files/signin.css\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n  </head>\n\n  <body class=\"text-center\">\n    <form class=\"form-signin\">\n      <img class=\"mb-4\" src=\"./login_files/bootstrap-solid.svg\" th:src=\"@{/img/bootstrap-solid.svg}\" alt=\"\" width=\"72\" height=\"72\" />\n      <h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\n      <label  class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\n      <input type=\"text\"  name=\"username\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\"/>\n      <label for=\"inputPassword\" class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\n      <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\" />\n      <div class=\"checkbox mb-3\">\n        <label>\n          <input type=\"checkbox\" value=\"remember-me\" /> [[#{login.remember}]]\n        </label>\n      </div>\n      <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\n      <p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n    </form>\n  \n\n</body></html>\n```\n\n效果根据浏览器语言的信息切换国际化\n\n原理：\n\n国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；\n\n```java\n@Bean\n@ConditionalOnMissingBean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\npublic LocaleResolver localeResolver() {\n    if (this.mvcProperties\n        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n        return new FixedLocaleResolver(this.mvcProperties.getLocale());\n    }\n    AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n    localeResolver.setDefaultLocale(this.mvcProperties.getLocale());\n    return localeResolver;\n}            \n\n```\n\n默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）\n\n![18.accept-language](E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg)\n\n#### 2、点击链接切换国际化\n\n自己编写localResolver，加到容器中\n\n1、更改HTML代码\n\n```html\n<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=zh_CN}\">中文</a>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=en_US}\">English</a>\n```\n\n2、新建一个MyLocaleResolver.class\n\n```java\npublic class MyLocaleResolver implements LocaleResolver {\n\n    //解析区域信息\n    @Override\n    public Locale resolveLocale(HttpServletRequest request) {\n        String l = request.getParameter(\"lg\");\n        Locale locale = Locale.getDefault();\n        if(!StringUtils.isEmpty(l)){\n            String[] split = l.split(\"_\");\n            locale = new Locale(split[0], split[1]);\n        }\n        return locale;\n    }\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n\n    }\n}\n```\n\n3、将MyLocaleResolver加入到容器中\n\n```java\n@Bean\npublic LocaleResolver localeResolver(){\n    return new MyLocalResolver();\n}\n```\n\n4、启动演示\n\n### 3、登录拦截器\n\n#### 1、登录\n\n开发技巧\n\n​\t1、清除模板缓存\n\n​\t2、Ctrl+F9刷新\n\n1、新建一个LoginController\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功\n            return \"list\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n2、登录错误消息显示\n\n```html\n<!--判断-->\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\n```\n\n3、表单重复提交\n\n表单重复提交事件 --》重定向来到成功页面--》模板引擎解析\n\n```java\nif(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n    //登录成功,防止重复提交\n    return \"redirect:/main.html\";\n}else{\n    map.put(\"msg\", \"用户名密码错误\");\n    return \"login\";\n}\n```\n\n模板引擎解析\n\n```java\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n    registry.addViewController(\"/\").setViewName(\"login\");\n    registry.addViewController(\"/index.html\").setViewName(\"login\");\n    registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n}\n```\n\n### 4、拦截器\n\n作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）\n\n1、在component下新建一个LoginHandlerInterceptor拦截器\n\n```java\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\n\n    //目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        Object user = request.getSession().getAttribute(\"loginUser\");\n        if(user!=null){\n            //已经登录\n            return true;\n        }\n        //未经过验证\n        request.setAttribute(\"msg\", \"没权限请先登录\");\n        request.getRequestDispatcher(\"/index.html\").forward(request, response);\n\n        return false;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n```\n\n2、在MyMvcConfig配置中重写拦截器方法，加入到容器中\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/index.html\").setViewName(\"login\");\n            registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n        }\n        //注册拦截器\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            //静态资源 css js img 已经做好了静态资源映射\n            registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\").\n                    excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\n        }\n    };\n    return adapter;\n}\n```\n\n3、在LoginHandler中添加登录成功写入session\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map,\n                        HttpSession session){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功,防止重复提交\n            session.setAttribute(\"loginUser\", username);\n            return \"redirect:/main.html\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n### 5、CRUD-员工列表\n\n实验要求：\n\n1）、RestfulCRUD：CRUD满足Rest风格\n\nURI:/资源名称/资源标识+HTTP操作\n\n|      | 普通CRUD                | RestfulCRUD       |\n| ---- | ----------------------- | ----------------- |\n| 查询 | getEmp                  | emp -- GET        |\n| 添加 | addEmp?xxx              | emp --POST        |\n| 修改 | updateEmp?id=xxx&xxx=xx | emp/{id} -- PUT   |\n| 删除 | deleteEmp?id=1          | emp/{id} --DELETE |\n\n2、实验的请求架构\n\n|                | 请求URI  | 请求方式 |\n| -------------- | -------- | -------- |\n| 查询所有员工   | emps     | GET      |\n| 查询某个员工   | emp/{id} | GET      |\n| 添加页面       | emp      | GET      |\n| 添加员工       | emp      | POST     |\n| 修改页面(回显) | emp/{id} | GET      |\n| 修改员工       | emp/{id} | PUT      |\n| 删除员工       | emp/{id} | DELETE   |\n\n3、员工列表\n\n#### 1、公共页面抽取\n\n使用方法\n\n```html\n1、抽取公共片段\n<!--footer.html-->\n<div id=\"footid\" th:fragment=\"copy\">xxx</div>\n2、引入公共片段\n<!--test.html-->\n<div th:insert=~{footer::copy}></div>\n~{templatename::selector} 模板名::选择器  footer::#footid\n~{templatename::fragmentname} 模板名::片段名称 footer::copy\n行内写法可以加~{xx::xx} 标签体可以 xx::xx\n```\n\n\n\n**三种引用方式**\n\n**th:insert** :加个外层标签 +1\n\n**th:replace** :完全替换 1\n\n**th:include**：就替换里面的内容 -1\n\n公共页面\n\n```html\n<body>\n\t...\n    <div th:insert=\"footer :: copy\"></div>\n    <div th:replace=\"footer :: copy\"></div>\n    <div th:include=\"footer :: copy\"></div>\n</body>\n```\n\n结果\n\n```html\n<body>\n...\n    <!-- th:insert -->\n    <div>\n        <footer>\n            &copy; 2011 The Good Thymes Virtual Grocery\n        </footer>\n    </div>\n    <!--th:replace-->\n    <footer>\n   \t\t&copy; 2011 The Good Thymes Virtual Grocery\n    </footer>\n    <!--th:include-->\n    <div>\n        &copy; 2011 The Good Thymes Virtual Grocery\n    </div>\n</body>\n```\n\n用此种方法将公共页面引入\n\n#### 2、列表高亮\n\n引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html\n\n模板引入变量名\n\ndashboard\n\n```html\n<a class=\"nav-link active\"\n   th:class=\"${activeUri}=='main.html'?'nav-link active':'nav-link'\"\n   href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/main.html}\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\"><path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline></svg>\n    Dashboard <span class=\"sr-only\">(current)</span>\n</a>\n```\n\n员工管理\n\n```html\n<li class=\"nav-item\">\n    <a class=\"nav-link\"\n       th:class=\"${activeUri}=='emps'?'nav-link active':'nav-link'\"\n       href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/emps}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-users\"><path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path><path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path></svg>\n        员工管理\n    </a>\n```\n\n引入模板的时候传入参数\n\ndashboard.html引入\n\n```html\n<!--引入侧边栏-->\n   <div th:replace=\"commons/bar :: sidebar(activeUri='main.html')\"></div>\n```\n\nlist.html引入\n\n```html\n<!--引入侧边栏-->\n<div th:replace=\"commons/bar::sidebar(activeUri='emps')\"></div>\n```\n\n### 6、列表数据显示（查）\n\n#### 1、传入员工对象\n\nEmployeeController类,传入员工对象\n\n```java\n@Controller\npublic class EmployeeController {\n\n    @Autowired\n    EmployeeDao employeeDao;\n    /**\n     * 查询所有员工返回列表页面\n     */\n    @GetMapping(value = \"/emps\")\n    public String list(Model model){\n\n        Collection<Employee> employees = employeeDao.getAll();\n        model.addAttribute(\"emps\",employees);\n        return \"emp/list\";\n    }\n}\n```\n\n#### 2、 遍历对象\n\nlist.html中 使用模板的 `th:each`方法\n\n```html\ntable class=\"table table-striped table-sm\">\n    <thead>\n    <tr>\n        <th>#</th>\n        <th>lastName</th>\n        <th>email</th>\n        <th>gender</th>\n        <th>department</th>\n        <th>birth</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n        <tr th:each=\"emp:${emps}\">\n            <td th:text=\"${emp.id}\">1</td>\n            <td th:text=\"${emp.lastName}\">1</td>\n            <td th:text=\"${emp.email}\">1</td>\n            <td th:text=\"${emp.gender}\">1</td>\n            <td th:text=\"${emp.department.departmentName}\">1</td>\n            <td th:text=\"${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">1</td>\n            <td>\n                <button class=\"btn btn-sm btn-primary\">编辑</button>\n                <button class=\"btn btn-sm btn-danger\">删除</button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n#### 3、效果显示\n\n![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)\n\n\n\n### 7、员工添加（增）\n\n功能：点击添加按钮，出现新增页面\n\n#### 1、新增页面\n\n```html\n<form>\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\"  placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label for=\"exampleFormControlSelect1\">department</label>\n        <select class=\"form-control\" id=\"exampleFormControlSelect1\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <!--Birth-->\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n#### 2、页面跳转\n\n在EmployeeController中添加addEmpPage方法\n\n```java\n/**\n * 添加员工\n */\n@GetMapping(value = \"/emp\")\npublic String toAddPage(Model model){\n    //来到添加页面,查出所有部门显示\n    Collection<Department> depts = departmentDao.getDepartments();\n    model.addAttribute(\"depts\",depts);\n    return \"emp/add\";\n}\n```\n\n关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息\n\n#### 3、添加功能完成\n\n新建一个PostMapping\n\n> ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；\n\n1、新建一个postMapping的方法用来接受页面的添加POST请求\n\n```java\n/**\n * 员工添加\n */\n@PostMapping(value = \"/emp\")\npublic String addEmp(Employee employee){\n\n    employeeDao.save(employee);\n    //来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址\n    return \"redirect:/emps\";\n}\n```\n\n2、修改添加页面，添加name属性\n\n```html\n<form th:action=\"@{/emp}\" method=\"post\">\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label >department</label>\n        <select class=\"form-control\"  name=\"department.id\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n1、部门对象问题？\n\n```html\n<select class=\"form-control\"  name=\"department.id\">\n```\n\n2、日期格式化？\n\n属性中添加 date-formate 默认是 / \n\n```java\n@Bean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")\npublic Formatter<Date> dateFormatter() {\n   return new DateFormatter(this.mvcProperties.getDateFormat());\n}\n\n@Override\npublic MessageCodesResolver getMessageCodesResolver() {\n   if (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n      DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n      resolver.setMessageCodeFormatter(\n            this.mvcProperties.getMessageCodesResolverFormat());\n      return resolver;\n   }\n   return null;\n}\n```\n\n```properties\nspring.mvc.date-format=yyyy-MM-dd\n```\n\n### 8、员工编辑（改）\n\n思路使用add页面，并且数据回显，然后区分添加，PUT请求\n\n#### 1、修改按钮\n\n在list.html的`编辑`按钮加上链接\n\n```html\n<td>\n    <a  href=\"#\" th:href=\"@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-primary\">编辑</a>\n    <button class=\"btn btn-sm btn-danger\">删除</button>\n</td>\n```\n\n#### 2、编写跳转页面\n\n跳转到员工编辑页面的Controller\n\n```java\n/**\n * 员工编辑页面\n */\n@GetMapping(value = \"/emp/{id}\")\npublic String toEditPage(@PathVariable(\"id\") Integer id ,Model model){\n    Employee emp = employeeDao.getEmpById(id);\n    Collection<Department> departments = departmentDao.getDepartments();\n    model.addAttribute(\"emp\",emp);\n    model.addAttribute(\"depts\",departments);\n    return \"emp/add\";\n}\n   \n```\n\n#### 3、对页面修改\n\n对add页面进行修改\n\n1）、添加回显\n\n2）、添加判断是否emp!=null（区分add or edit）\n\n3）、添加put请求 --两个input的hidden标签\n\n```html\n <form th:action=\"@{/emp}\" method=\"post\">\n        <!--发送put请求-->\n        <!--1.SpringMVC配置HiddenHttpMethodFilter\n            2.页面创建一个post表单\n            3.创建一个 input name_method 值就是我们请求的方式-->\n        <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\">\n\n        <input type=\"hidden\" name=\"id\" th:value=\"${emp.id}\" th:if=\"${emp!=null}\">\n        <!-- LastName -->\n        <div class=\"form-group\">\n            <label for=\"LastName\">LastName</label>\n            <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\" th:value=\"${emp!=null}?${emp.lastName}\">\n        </div>\n        <!-- Email -->\n        <div class=\"form-group\">\n            <label for=\"Email\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\" th:value=\"${emp!=null}?${emp.email}\">\n        </div>\n        <!--gender-->\n        <div class=\"form-group\">\n            <label >Gender</label><br/>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender}==1\">\n                <label class=\"form-check-label\" >男</label>\n            </div>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender}==0\">\n                <label class=\"form-check-label\" >女</label>\n            </div>\n        </div>\n        <!-- department -->\n        <div class=\"form-group\">\n            <label >department</label>\n            <select class=\"form-control\"  name=\"department.id\" >\n                <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"birthDate\">Birth</label>\n            <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\" th:value=\"${emp!=null}?${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?'修改':'添加'\">添 加</button>\n    </form>\n</main>\n```\n### 9、员工删除（删）\n\n#### 1、新建Contoller\n\n```java\n/**\n * 员工删除\n */\n@DeleteMapping(value = \"/emp/{id}\")\npublic String deleteEmp(@PathVariable(\"id\") Integer id){\n    employeeDao.deleteEmpById(id);\n    return \"redirect:/emps\";\n}\n```\n\n#### 2、修改删除标签\n\n```html\n<button th:attr=\"del_uri=@{/emp/}+${emp.id}\"  class=\"btn btn-sm btn-danger deleteBtn\">\n    删除\n</button>\n```\n\n#### 3、写Form表单\n\nform表单卸载外面，input 中 name=\"_method\" value=\"delete\" 模拟delete请求\n\n```html\n                </tbody>\n            </table>\n        </div>\n    </main>\n    <form id=\"deleteEmpForm\" method=\"post\">\n        <input type=\"hidden\" name=\"_method\" value=\"delete\">\n    </form>\n</div>\n```\n\n#### 4、写JS提交\n\n```javascript\n<script>\n    $(\".deleteBtn\").click(function () {\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\n        return false;\n    })\n</script>\n```\n\n> return false;禁用btn提交效果\n\n## 7、错误机制的处理\n\n### 1、默认的错误处理机制\n\n默认错误页面\n\n![20.error](E:\\工作文档\\SpringBoot\\images\\20.error.jpg)\n\n原理参照\n\nErrorMvcAutoConfiguration:错误处理的自动配置\n\n```\norg\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class\n\n```\n\n- DefaultErrorAttributes\n\n  帮我们在页面共享信息\n\n  ```java\n  @Override\n  public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n        boolean includeStackTrace) {\n     Map<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\n     errorAttributes.put(\"timestamp\", new Date());\n     addStatus(errorAttributes, requestAttributes);\n     addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n     addPath(errorAttributes, requestAttributes);\n     return errorAttributes;\n  }\n  ```\n\n- BasicErrorController\n\n  ```java\n  @Controller\n  @RequestMapping(\"${server.error.path:${error.path:/error}}\")\n  public class BasicErrorController extends AbstractErrorController {\n      //产生HTML数据\n      @RequestMapping(produces = \"text/html\")\n  \tpublic ModelAndView errorHtml(HttpServletRequest request,\n  \t\t\tHttpServletResponse response) {\n  \t\tHttpStatus status = getStatus(request);\n  \t\tMap<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\n  \t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n  \t\tresponse.setStatus(status.value());\n  \t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n  \t\treturn (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\n  \t}\n  \t//产生Json数据\n  \t@RequestMapping\n  \t@ResponseBody\n  \tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n  \t\tMap<String, Object> body = getErrorAttributes(request,\n  \t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n  \t\tHttpStatus status = getStatus(request);\n  \t\treturn new ResponseEntity<Map<String, Object>>(body, status);\n  \t}\n  ```\n\n- ErrorPageCustomizer\n\n  ```java\n  @Value(\"${error.path:/error}\")\n  private String path = \"/error\";//系统出现错误以后来到error请求进行处理，(web.xml)\n  ```\n\n- DefaultErrorViewResolver\n\n  ```java\n  @Override\n  public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n        Map<String, Object> model) {\n     ModelAndView modelAndView = resolve(String.valueOf(status), model);\n     if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n     }\n     return modelAndView;\n  }\n  \n  private ModelAndView resolve(String viewName, Map<String, Object> model) {\n      //默认SpringBoot可以找到一个页面？error/状态码\n     String errorViewName = \"error/\" + viewName;\n      //如果模板引擎可以解析地址，就返回模板引擎解析\n     TemplateAvailabilityProvider provider = this.templateAvailabilityProviders\n           .getProvider(errorViewName, this.applicationContext);\n     if (provider != null) {\n         //有模板引擎就返回到errorViewName指定的视图地址\n        return new ModelAndView(errorViewName, model);\n     }\n      //自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html\n     return resolveResource(errorViewName, model);\n  }\n  ```\n\n一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller\n\n1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图\n\n```java\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n      if (modelAndView != null) {\n         return modelAndView;\n      }\n   }\n   return null;\n}\n```\n\nl浏览器发送请求 accpt:text/html\n\n客户端请求：accept:/*\n\n### 2、如何定制错误响应\n\n​\t1）、如何定制错误的页面\n\n​\t\t1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html\n\n​\t\t有精确的404和4xx优先选择404\n\n​\t\t页面获得的数据\n\n​\t\t\ttimestamp：时间戳\n\n​\t\t\tstatus：状态码\n\n​\t\t\terror：错误提示\n\n​\t\t\texception：异常对象\n\n​\t\t\tmessage：异常信息\n\n​\t\t\terrors:JSR303有关\n\n​\t\t2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值\n\n​\t\t3.没有放模板引擎，没放静态，会显示默认的错误\n\n​\t2）、如何定义错误的数据\n\n\n\n举例子：新建4xx和5xx文件\n\n![21.error-static](E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg)\n\n\n\n```html\n<body >\n    <p>status: [[${status}]]</p>\n    <p>timestamp: [[${timestamp}]]</p>\n    <p>error: [[${error}]]</p>\n    <p>message: [[${message}]]</p>\n    <p>exception: [[${exception}]]</p>\n</body>\n```\n\n![22.4xxhtml](E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg)\n\n### 3、如何定制Json数据\n\n#### 1、仅发送json数据\n\n```java\npublic class UserNotExitsException extends  RuntimeException {\n    public UserNotExitsException(){\n        super(\"用户不存在\");\n    }\n}\n```\n\n```java\n/**\n * 异常处理器\n */\n@ControllerAdvice\npublic class MyExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExitsException.class)\n    public Map<String ,Object> handlerException(Exception e){\n        Map<String ,Object> map =new HashMap<>();\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        return map;\n    }\n}\n```\n\n无法自适应 都是返回的json数据\n\n#### 2、转发到error自适应处理\n\n```java\n@ExceptionHandler(UserNotExitsException.class)\npublic String handlerException(Exception e, HttpServletRequest request){\n    Map<String ,Object> map =new HashMap<>();\n    //传入自己的状态码\n    request.setAttribute(\"javax.servlet.error.status_code\", 432);\n    map.put(\"code\", \"user not exist\");\n    map.put(\"message\", e.getMessage());\n    //转发到error\n    return \"forward:/error\";\n}\n```\n\n程序默认获取状态码\n\n```java\nprotected HttpStatus getStatus(HttpServletRequest request) {\n   Integer statusCode = (Integer) request\n         .getAttribute(\"javax.servlet.error.status_code\");\n   if (statusCode == null) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n   try {\n      return HttpStatus.valueOf(statusCode);\n   }\n   catch (Exception ex) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n```\n\n没有自己写的自定义异常数据\n\n#### 3、自适应和定制数据传入\n\nSpring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；\n\n1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；\n\n2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\n\n容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理\n\n```java\npublic class MyErrorAttributes extends DefaultErrorAttributes {\n    @Override\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(\"company\", \"wdjr\");\n        return map;\n    }\n}\n```\n\n异常处理：把map方法请求域中\n\n```java\n    @ExceptionHandler(UserNotExitsException.class)\n    public String handlerException(Exception e, HttpServletRequest request){\n        Map<String ,Object> map =new HashMap<>();\n        //传入自己的状态码\n        request.setAttribute(\"javax.servlet.error.status_code\", 432);\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        request.setAttribute(\"ext\", map);\n        //转发到error\n        return \"forward:/error\";\n    }\n}\n```\n\n在上面的MyErrorAttributes类中加上\n\n```java\n//我们的异常处理器\nMap<String,Object> ext = (Map<String, Object>) requestAttributes.getAttribute(\"ext\", 0);\nmap.put(\"ext\", ext);\n```\n\n## 8、配置嵌入式servlet容器\n\n### 1、定制和修改Servlet容器\n\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\n\n![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)\n\n问题？\n\n1）、如何定制和修改Servlet容器；\n\n1、 修改Server相关的配置文件 application.properties\n\n```properties\n#通用的servlet容器配置\nserver.xxx\n#tomcat的配置\nserver.tomcat.xxxx\n```\n\n2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置\n\n```java\n@Bean\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\n    return new EmbeddedServletContainerCustomizer() {\n        //定制嵌入式Servlet的容器相关规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.setPort(8999);\n        }\n    };\n}\n```\n\n其实同理，都是实现EmbeddedServletContainerCustomizer\n\n### 2、注册Servlet三大组件\n\n三大组件 Servlet Filter Listener\n\n由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml\n\n注册三大组件\n\n#### ServletRegistrationBean\n\n```java\n@Bean\npublic ServletRegistrationBean myServlet(){\n    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new MyServlet(),\"/servlet\");\n    return servletRegistrationBean;\n}\n```\n\nMyServlet\n\n```java\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().write(\"Hello Servlet\");\n    }\n}\n```\n\n#### FilterRegistrationBean\n\n```java\n@Bean\npublic FilterRegistrationBean myFilter(){\n    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n    filterRegistrationBean.setFilter(new MyFilter());\n    filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\n    return filterRegistrationBean;\n}\n```\n\nMyFilter\n\n```java\npublic class MyFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"MyFilter process\");\n        chain.doFilter(request, response);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n#### ServletListenerRegistrationBean\n\n```java\n@Bean\npublic ServletListenerRegistrationBean myListener(){\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\n    return registrationBean;\n}\n```\n\nMyListener\n\n```java\npublic class MyListener implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\".........web应用启动..........\");\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        System.out.println(\".........web应用销毁..........\");\n    }\n}\n```\n\n\n\nSpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;\n\n```java\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n   public ServletRegistrationBean dispatcherServletRegistration(\n         DispatcherServlet dispatcherServlet) {\n      ServletRegistrationBean registration = new ServletRegistrationBean(\n            dispatcherServlet, this.serverProperties.getServletMapping());\n       //默认拦截 /所有请求 包括静态资源 不包括jsp\n       //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n      registration.setLoadOnStartup(\n            this.webMvcProperties.getServlet().getLoadOnStartup());\n      if (this.multipartConfig != null) {\n         registration.setMultipartConfig(this.multipartConfig);\n      }\n      return registration;\n   }\n\n}\n```\n\n### 3、切换其他的Servlet容器\n\n在ServerProperties中\n\n```java\nprivate final Tomcat tomcat = new Tomcat();\n\nprivate final Jetty jetty = new Jetty();\n\nprivate final Undertow undertow = new Undertow();\n```\n\ntomcat(默认支持)\n\njetty（长连接）\n\nundertow（多并发）\n\n切换容器 仅仅需要修改pom文件的依赖就可以\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jetty</artifactId>\n        </dependency>\n<!--        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-undertow</artifactId>\n        </dependency>-->\n```\n\n### 4、嵌入式Servlet容器自动配置原理\n\n```java\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration {\n    @Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })//当前是否引入tomcat依赖\n    //判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n```\n\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\n\n```java\npublic interface EmbeddedServletContainerFactory {\n\t//获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n}\n```\n\n继承关系\n\n![24.EmdServletFactory](E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg)\n\n2）、EmbeddedServletContainer:(嵌入式的Servlet容器)\n\n![25.EmdServletContainer](E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg)\n\n3）、TomcatEmbeddedServletContainerFactory为例 \n\n```java\n@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) {\n   Tomcat tomcat = new Tomcat();\n    //配置tomcat的基本环节\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\n         : createTempDir(\"tomcat\"));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n    //将配置好的tomcat传入进去；并且启动tomcat容器\n   return getTomcatEmbeddedServletContainer(tomcat);\n}\n```\n\n4）、嵌入式配置修改\n\n```\nServerProperties、EmbeddedServletContainerCustomizer\n```\n\nEmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？\n\n怎么修改？\n\n\n\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\n\n```java\n@Override\npublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n      BeanDefinitionRegistry registry) {\n   if (this.beanFactory == null) {\n      return;\n   }\n   registerSyntheticBeanIfMissing(registry,\n         \"embeddedServletContainerCustomizerBeanPostProcessor\",\n         EmbeddedServletContainerCustomizerBeanPostProcessor.class);\n   registerSyntheticBeanIfMissing(registry,\n         \"errorPageRegistrarBeanPostProcessor\",\n         ErrorPageRegistrarBeanPostProcessor.class);\n}\n```\n\n```java\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException {\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   }\n   return bean;\n}\n\nprivate void postProcessBeforeInitialization(\n    ConfigurableEmbeddedServletContainer bean) {\n    //获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\n        customizer.customize(bean);\n    }\n}\n\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n    if (this.customizers == null) {\n        // Look up does not include the parent context\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n            this.beanFactory\n            //从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer\n            //定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers = Collections.unmodifiableList(this.customizers);\n    }\n    return this.customizers;\n}\n```\n\nServerProperties也是EmbeddedServletContainerCustomizer定制器\n\n步骤：\n\n1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat\n\nEmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\n\n2）、容器中某个组件要创建对象就要通过后置处理器；\n\n```java\nEmbeddedServletContainerCustomizerBeanPostProcessor\n```\n\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\n\n3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法\n\n### 5、嵌入式Servlet容器启动原理\n\n什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;\n\n获取嵌入式的容器工厂\n\n1）、SpringBoot应用启动Run方法\n\n2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext\n\n```JAVA\nif (contextClass == null) {\n   try {\n      contextClass = Class.forName(this.webEnvironment\n            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);\n   }\n```\n\n3）、refresh(context);刷新创建好的IOC容器\n\n```java\ntry {\n   // Allows post-processing of the bean factory in context subclasses.\n   postProcessBeanFactory(beanFactory);\n\n   // Invoke factory processors registered as beans in the context.\n   invokeBeanFactoryPostProcessors(beanFactory);\n\n   // Register bean processors that intercept bean creation.\n   registerBeanPostProcessors(beanFactory);\n\n   // Initialize message source for this context.\n   initMessageSource();\n\n   // Initialize event multicaster for this context.\n   initApplicationEventMulticaster();\n\n   // Initialize other special beans in specific context subclasses.\n   onRefresh();\n\n   // Check for listener beans and register them.\n   registerListeners();\n\n   // Instantiate all remaining (non-lazy-init) singletons.\n   finishBeanFactoryInitialization(beanFactory);\n\n   // Last step: publish corresponding event.\n   finishRefresh();\n}\n```\n\n4）、 onRefresh();web的ioc容器重写了onRefresh方法\n\n5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer\n\n6）、获取嵌入式的Servlet容器工厂；\n\n```java\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\n```\n\n从ioc容器中获取EmbeddedServletContainerFactory组件；\n\n```java\n@Bean\npublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\nreturn new TomcatEmbeddedServletContainerFactory();\n}\n```\nTomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；\n\n7）、使用容器工厂获取嵌入式的Servlet容器\n\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\n\n先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来\n\nioc启动创建Servlet容器\n\n## 9、使用外置的Servlet容器\n\n嵌入式的Servlet容器：应用达成jar包\n\n​\t优点：简单、便携\n\n​\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）\n\n外置的Servlet容器：外面安装Tomcat是以war包的方式打包。\n\n### 1、IDEA操作外部Servlet\n\n1、创建程序为war程序\n\n![26.tomcat1](E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg)\n\n2、选择版本\n\n![27.tomcat2](E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg)\n\n3、添加tomcat\n\n![28.tomcat3](E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg)\n\n4、选择tomcat\n\n![30.tomcat4](E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg)\n\n5、选择本地的Tomcat\n\n![31.tomcat5](E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg)\n\n6、配置tomcat路径\n\n![32.tomcat6](E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg)\n\n7、添加服务器\n\n![33.tomcat7](E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg)\n\n8、添加exploded的war配置，应用OK tomcat配置完成\n\n![34.tomcat8](E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg)\n\n二、配置webapp文件夹\n\n1、点击配置\n\n![35.tomcat9](E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg)\n\n2、添加webapp目录\n\n![36.tomcat10](E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg)\n\n3、默认配置就可以\n\n![37.tomcat11](E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg)\n\n4、配置web.xml文件\n\n![38.tomcat12](E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg)\n\n5、文档目录结构\n\n![39.tomcat13](E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg)\n\n### 2、运行一个示例\n\n1、项目目录\n\n![40.demo1](E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg)\n\n2、配置文件写视图解析前后缀\n\n```properties\nspring.mvc.view.prefix=/WEB-INF/jsp/\n\nspring.mvc.view.suffix=.jsp\n```\n\n3、HelloController\n\n```java\n@Controller\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        model.addAttribute(\"message\",\"这是Controller传过来的message\");\n        return \"success\";\n    }\n}\n```\n\n4、success.jsp\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Success</title>\n</head>\n<body>\n<h1>Success</h1>\nmessage:${message}\n</body>\n</html>\n```\n\n5、运行结果\n\n![41.demo2](E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg)\n\n步骤\n\n1、必须创建一个war项目；\n\n2、将嵌入式的Tomcat指定为provided\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\n3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法\n\n```java\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        //传入SpringBoot的主程序，\n        return application.sources(SpringBoot04WebJspApplication.class);\n    }\n\n}\n```\n\n4、启动服务器就可以；\n\n### 3、原理\n\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；\n\nwar包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器\n\nservlet3.0规范\n\n 8.2.4 共享库和运行时插件\n\n规则：\n\n1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例\n\n2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名\n\n3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类\n\n\n\n流程：\n\n1、启动Tomcat服务器\n\n2、spring web模块里有这个文件\n\n![42.servletContainerInit](E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg)\n\n```java\norg.springframework.web.SpringServletContainerInitializer\n```\n\n3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set<Class<?>>;为这些感兴趣类创建实例\n\n4、每个创建好的WebApplicationInitializer调用自己的onStratup\n\n5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\n\n6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext\n\n```java\nprotected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {\n    SpringApplicationBuilder builder = this.createSpringApplicationBuilder();\n    //环境构建器\n    StandardServletEnvironment environment = new StandardServletEnvironment();\n    environment.initPropertySources(servletContext, (ServletConfig)null);\n    builder.environment(environment);\n    builder.main(this.getClass());\n    ApplicationContext parent = this.getExistingRootWebApplicationContext(servletContext);\n    if (parent != null) {\n        this.logger.info(\"Root context already created (using as parent).\");\n        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)null);\n        builder.initializers(new ApplicationContextInitializer[]{new ParentContextApplicationContextInitializer(parent)});\n    }\n\t\n    builder.initializers(new ApplicationContextInitializer[]{new ServletContextApplicationContextInitializer(servletContext)});\n    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    //调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来\n    builder = this.configure(builder);\n    //创建一个spring应用\n    SpringApplication application = builder.build();\n    if (application.getSources().isEmpty() && AnnotationUtils.findAnnotation(this.getClass(), Configuration.class) != null) {\n        application.getSources().add(this.getClass());\n    }\n\n    Assert.state(!application.getSources().isEmpty(), \"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation\");\n    if (this.registerErrorPageFilter) {\n        application.getSources().add(ErrorPageFilterConfiguration.class);\n    }\n\t//最后启动Spring容器\n    return this.run(application);\n}\n```\n\n7、Spring的应用就启动完了并且创建IOC容器；\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   listeners.starting();\n   try {\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner = printBanner(environment);\n      context = createApplicationContext();\n      analyzers = new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n# 五、Docker\n\n## 1、简介\n\nDocker是一个开源的应用容器引擎\n\n将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；\n\n## 2、Docker的核心概念\n\ndocker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）\n\ndocker客户端（Client）:操作docker主机\n\ndocker仓库（Registry）：用来保存打包好的软件镜像\n\ndocker镜像（Image）:软件打好包的镜像，放到docker的仓库中\n\ndocker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）\n\ndocker的步骤：\n\n​\t1、安装Docker\n\n​\t2、去Docker仓库找到这个软件对应的镜像；\n\n​\t3、使用Docker运行的这个镜像，镜像就会生成一个容器\n\n​\t4、对容器的启动停止，就是对软件的启动和停止\n\n## 3、安装Docker\n\n### 1、安装Linux\n\n[安装vxbox并且安装ubuntu](http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1)\n\n### 2、在linux上安装docker\n\n```shell\n1、查看centos版本\n# uname -r\n3.10.0-693.el7.x86_64\n要求：大于3.10\n如果小于的话升级*（选做）\n# yum update\n2、安装docker\n# yum install docker\n3、启动docker\n# systemctl start docker\n# docker -v\n4、开机启动docker\n# systemctl enable docker\n5、停止docker\n# systemctl stop docker\n```\n\n## 4、docker的常用操作\n\n### 1、镜像操作\n\n1、搜索\n\n```shell\ndocker search mysql\n```\n\n默认去docker hub网站查找![44.docker1](E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg)\n\n2、拉取\n\n```shell\n默认最新版本\n# docekr pull mysql\n安装指定版本\n# docker pull mysql:5.5\n```\n\n3、查看\n\n```shell\ndocker images\n```\n\n4、删除\n\n```\ndocker rmi imageid\n```\n\n### 2、容器操作\n\n软件的镜像（qq.exe） -- 运行镜像 -- 产生一个容器（正在运行的软件）\n\n```shell\n1、搜索镜像\n# docker search tomcat\n2、拉取镜像\n# docker pull tomcat\n3、根据镜像启动容器\n[root@lion ~]# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB\n[root@lion ~]# docker run --name mytomcat -d tomcat:latest\n2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249\n4、查看那个进程正在进行\n[root@lion ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat\n5、停止运行中容器\n[root@lion ~]# docker stop 2f0348702f5f\n2f0348702f5f\n6、查看所有容器\n[root@lion ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat\n7、启动容器\n[root@lion ~]# docker start 2f0348702f5f\n8、删除docker容器\n[root@lion ~]# docker rm 2f0348702f5f\n2f0348702f5f\n9、端口映射\n[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat\n692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29\n虚拟机:8888\n容器的:8080\n-d:后台运行\n-p:主机端口映射到容器端口\n浏览器：192.168.179.129:8888\n10、docker的日志\n[root@lion ~]# docker logs 692c408c2201\n11、多个启动\n[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat\n浏览器：192.168.179.129:9000\n```\n\n更多命令参考docker镜像文档\n\n### 3、安装Mysql\n\n```shell\ndocker pull mysql\ndocker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql\n```\n\n# 六、数据访问\n\n## 1、整合JDBC数据源\n\n1、新建项目 spring-boot-06-data-jdbc\n\n- WEB\n- Mysql\n- JDBC\n- SpringBoot1.5\n\n2、编写配置文件appliction.yml\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n3、编写测试类测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBoot06DataJdbcApplicationTests {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Test\n    public void contextLoads() throws SQLException {\n        System.out.println(dataSource.getClass());\n\n        Connection connection = dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }\n\n}\n```\n\n4、测试结果\n\n```\nclass org.apache.tomcat.jdbc.pool.DataSource\nProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]\n```\n\n数据源相关配置都在DataSourceProperties属性里\n\n自动配置原理\n\nE:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc\n\n### 1、DataSource\n\n参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源\n\n### 2、SpringBoot默认支持\n\n```\nTomcat数据源\nHikariDataSource\ndbcp.BasicDataSource\ndbcp2.BasicDataSource\n```\n\n### 3、自定义数据源\n\n```java\n */\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name = \"spring.datasource.type\")\nstatic class Generic {\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) {\n       //使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源\n      return properties.initializeDataSourceBuilder().build();\n   }\n\n}\n```\n\n### 4、运行sql建表\n\n在DataSourceAutoConfiguration中**DataSourceInitializer**类\n\n监听器\n\n作用：\n\n1）、postConstruct -》runSchemaScript 运行建表sql文件\n\n2）、runDataScript运行插入数据的sql语句；\n\n默认只需要将文件命名为：\n\n```sql\nschema-*.sql data-*.sql\n默认规则：schema.sql ,schema-all.sql;\n```\n\n**举个栗子**\n\n创建department表\n\n1、department.sql\n\n```sql\n/*\nNavicat MySQL Data Transfer\n\nSource Server         : 192.168.179.131\nSource Server Version : 50719\nSource Host           : 192.168.179.131:3306\nSource Database       : jdbc\n\nTarget Server Type    : MYSQL\nTarget Server Version : 50719\nFile Encoding         : 65001\n\nDate: 2018-05-14 14:28:52\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- Table structure for department\n-- ----------------------------\nDROP TABLE IF EXISTS `department`;\nCREATE TABLE `department` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `departmentName` varchar(255) DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```\n\n2、将department.sql命名为schema-all.sql\n\n![45.schema-all](E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg)\n\n3、运行测试类\n\n自定义sql的文件名，department.sql在配置文件中\n\n```yaml\nschema:\n  - classpath:department.sql\n```\n\n-----\n\n### 5、操作JdbcTemplate\n\n**FBI warning**:将department.sql删除或者改名，因为运行文件会将表中数据清除\n\n1、新建一个Controller\n\n```java\n@Controller\npublic class HelloController {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @ResponseBody\n    @GetMapping(\"/hello\")\n    public Map<String ,Object> hello(){\n\n        List<Map<String, Object>> list = jdbcTemplate.queryForList(\"select * from department\");\n        return list.get(0);\n    }\n}\n```\n\n2、表中添加数据\n\n![46.department](E:\\工作文档\\SpringBoot\\images\\46.department.jpg)\n\n\n\n3、访问请求查询数据\n\n![47.hello](E:\\工作文档\\SpringBoot\\images\\47.hello.jpg)\n\n\n\n## 2、自定义数据源\n\n1、导入Druid的依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n\n```\n\n2、修改配置文件\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n已经替换了原来的tomcat数据源\n\n3、配置Druid数据源配置\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\t# 初始化大小，最小，最大  \n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    # 配置获取连接等待超时的时间  \n    maxWait: 60000\n    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 \n    timeBetweenEvictionRunsMillis: 60000\n    # 配置一个连接在池中最小生存的时间，单位是毫秒 \n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    # 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    userGlobalDataSourceStat: true\n    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录  \n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n4、Druid配置监控\n\n```java\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n        return  new DruidDataSource();\n    }\n\n    //配置Druid的监控\n    //1、配置一个管理后台\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(),\"/druid/*\");\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"loginUsername\", \"admin\");\n        initParams.put(\"loginPassword\", \"123456\");\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n    //2、配置监控的filter\n    @Bean\n    public FilterRegistrationBean webstatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"exclusions\", \"*.js,*.css,/druid/*\");\n        bean.setInitParameters(initParams);\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n        return bean;\n    }\n\n}\n```\n\n5、运行测试，访问 localhost:9000/druid\n\n![48.druid](E:\\工作文档\\SpringBoot\\images\\48.druid.jpg)\n\n输入刚才调好的用户名密码即可访问\n\n## 3、整合Mybatis\n\n1、新建工程，SpringBoot1.5+web+JDBC+Mysql\n\n导入依赖\n\n```xml\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.2</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n\n2、导入配置文件中关于Druid的配置\n\n​\t2.1、导入依赖\n\n​\t2.2、配置文件application.yml（指定用户名密码...配置Druid的配置参数，修改sql文件加载的默认名）\n\n​\t2.3、将Druid组件加入到容器中（监控）重点\n\n​\t具体同上\n\n3、创建数据表department和employee表\n\n​\t3.1、根据sql文件，新建两张表\n\n​\t3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）\n\n```yaml\nspring:\n  datasource:\n    schema:\n      - classpath:sql/department.sql\n      - classpath:sql/employeee.sql\n```\n\n​\t3.3、运行程序检查数据库是否创建成功\n\n4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） \n\n在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类\n\n```yaml\nmybatis:\n  configuration:\n    map-underscore-to-camel-case: true\n```\n\n```java\n//类名冲突所以全类名\n@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig {\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer(){\n\n        return new ConfigurationCustomizer() {\n            @Override\n            public void customize(Configuration configuration) {\n                configuration.setMapUnderscoreToCamelCase(true);\n            }\n        };\n    }\n}\n```\n\n### 注解方式\n\n5、新建mapper\n\n```yaml\n//指定是一个mapper\n@Mapper\npublic interface DepartmentMapper {\n\n    @Insert(\"insert into department(dept_name) value(#{deptName})\")\n    public int insertDept(Department department);\n\n    @Delete(\"delete from department where id=#{id}\")\n    public int deleteDeptById(Integer id);\n\n    @Update(\"update department set dept_Name=#{deptName} where id=#{id}\")\n    public int updateDept(Department department);\n\n    @Select(\"select * from department where id=#{id}\")\n    public Department getDeptById(Integer id);\n\n}\n```\n\n6、编写controller测试\n\n```java\n@RestController\npublic class DeptController {\n\n    @Autowired\n    DepartmentMapper departmentMapper;\n\n    @RequestMapping(\"/getDept/{id}\")\n    public Department getDepartment(@PathVariable(\"id\") Integer id){\n        return departmentMapper.getDeptById(id);\n    }\n\n    @RequestMapping(\"/delDept/{id}\")\n    public int delDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.deleteDeptById(id);\n    }\n\n    @RequestMapping(\"/update/{id}\")\n    public int updateDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.updateDept(new Department(id, \"开发部\"));\n    }\n\n    @GetMapping(\"/insert\")\n    public int insertDept(Department department){\n        return departmentMapper.insertDept(department);\n    }\n}\n```\n\n问题：\n\nmapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文\n\n件夹下的mapper\n\n```java\n//主配置类或者mybatis配置类\n@MapperScan(value = \"com.wdjr.springboot.mapper\")\n```\n\n### 配置文件方式\n\n1、新建文件\n\n![50.mybatisxml](E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg)\n\n2、新建mybatis的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n\n3、新建Employee的接口方法\n\n```java\npublic interface EmployeeMapper {\n\n    public Employee getEmpById(Integer id);\n\n    public void insetEmp(Employee employee);\n}\n```\n\n4、新建Employee的mapper.xml的映射文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.wdjr.springboot.mapper.EmployeeMapper\">\n    <select id=\"getEmpById\" resultType=\"com.wdjr.springboot.bean.Employee\">\n      select * from employee where id=#{id}\n   </select>\n\n    <insert id=\"insetEmp\">\n        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})\n    </insert>\n</mapper>\n```\n\n5、修改application.yml配置文件\n\n```yaml\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml\n  mapper-locations: classpath:mybatis/mapper/*.xml\n```\n\n6、新建一个Controller访问方法\n\n```java\n@RestController\npublic class EmployeeController {\n    @Autowired\n    EmployeeMapper employeeMapper;\n\n    @RequestMapping(\"/getEmp/{id}\")\n    public Employee getEmp(@PathVariable(\"id\") Integer id){\n        return employeeMapper.getEmpById(id);\n    }\n\n    @GetMapping(\"/insertEmp\")\n    public Employee insertEmp(Employee employee){\n        employeeMapper.insetEmp(employee);\n        return employee;\n    }\n}\n```\n## 4、JPA数据访问\n\n新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC\n\n目录结构\n\n![51.JPA](E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg)\n\n\n\n1、新建一个实体类User\n\n```java\n//使用JPA注解配置映射关系\n@Entity//告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name=\"tbl_user\") //@Table来指定和那个数据表对应，如果省略默认表明就是user;\n\npublic class User {\n\n    @Id //这是一个主键\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增组件\n    private Integer id ;\n\n    @Column(name=\"last_name\",length = 50) //这是和数据表对应的一个列\n    private String lastName;\n    @Column//省略默认列名就是属性名\n    private String email;\n    @Column\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n2、新建一个UserRepository来继承jpa的绝大多数功能\n\n```java\n//继承jpaRepository\npublic interface UserRepository extends JpaRepository<User,Integer> {\n\n}\n```\n\n3、编写配置文件application.yml\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://192.168.179.131/jpa\n    username: root\n    password: Welcome_1\n    driver-class-name: com.mysql.jdbc.Driver\n  jpa:\n    hibernate:\n    #更新或创建\n      ddl-auto: update\n    show-sql: true\n```\n\n4、编写Controller测试\n\n```java\n@RestController\npublic class UserController {\n    @Autowired\n    UserRepository userRepository;\n\n    @GetMapping(\"/user/{id}\")\n    public User getUser(@PathVariable(\"id\") Integer id){\n        User user = userRepository.findOne(id);\n        return user;\n    }\n\n    @GetMapping(\"/insert\")\n    public User insertUser(User user){\n        User user1 = userRepository.save(user);\n        return  user1;\n    }\n}\n```\n\n# 七、启动配置原理\n\n几个重要的事件回调机制\n\n加载配置文件META-INF/spring.factories\n\n​\tApplicationContextInitializer\n\n​\tSpringApplicationRunListener\n\nioc容器中\n\n​\tApplicationRunner\n\n​\tCommandLineRunner\n\n启动流程\n\n## 1、创建SpringApplicaiotn对象   \n\n```java\nprivate void initialize(Object[] sources) {\n    //保存主配置类\n   if (sources != null && sources.length > 0) {\n      this.sources.addAll(Arrays.asList(sources));\n   }\n    //判断当前是否是个web应用\n   this.webEnvironment = deduceWebEnvironment();\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来\n   setInitializers((Collection) getSpringFactoriesInstances(\n         ApplicationContextInitializer.class));\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来\n   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    //决定哪一个是主程序\n   this.mainApplicationClass = deduceMainApplicationClass();\n}\n```\n\nApplicationInitializer\n\n![52.applicationCotextInitializer](E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg)\n\n ApplicationListener\n\n![53.Listener](E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg)\n\n## 2、运行Run方法\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n    //获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n    //回调所有的SpringApplicationRunListener.starting()方法\n   listeners.starting();\n   try {\n       //封装命令行参数\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n       //准备环境\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n       //创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成\n       //打印SpringBoot图标\n      Banner printedBanner = printBanner(environment);\n       //创建ApplicationContext，决定创建web的ioc容器还是普通的ioc\n      context = createApplicationContext();\n       //异常分析\n      analyzers = new FailureAnalyzers(context);\n       //重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法\n       \n       //回调所有的SpringApplicationRunListener的contextPrepare()\n       //告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       //重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat\n       //扫描 创建加载所有组件的地方\n      refreshContext(context);\n       //从ioc中获取所有的ApplicationRunner和CommandLineRunner\n       //ApplicationRunner先回调\n      afterRefresh(context, applicationArguments);\n       //所有的SpringApplicationRunListener回调finished方法\n      listeners.finished(context, null);\n       //保存应用状态\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n       //整个springboot启动完成以后返回启动的ioc容器\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n## 3、事件监听机制\n\n新建listener监听\n\n文件目录\n\n![54.listener2](E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg)\n\n\n\n1、HelloApplicationContextInitializer\n\n```java\n//泛型监听ioc容器\npublic class HelloApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        System.out.println(\"ApplicationContextInitializer...跑起来了.....\"+applicationContext);\n    }\n}\n```\n\n2、HelloSpringApplicationRunListener\n\n加构造器\n\n```java\npublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener {\n\n    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){\n\n    }\n\n    @Override\n    public void starting() {\n        System.out.println(\"监听容器开始......\");\n    }\n\n    @Override\n    public void environmentPrepared(ConfigurableEnvironment environment) {\n        System.out.println(\"环境准备好了......\"+environment.getSystemProperties().get(\"os.name\"));\n    }\n\n    @Override\n    public void contextPrepared(ConfigurableApplicationContext context) {\n        System.out.println(\"ioc容器准备好了......\");\n    }\n\n    @Override\n    public void contextLoaded(ConfigurableApplicationContext context) {\n        System.out.println(\"容器环境已经加载完成......\");\n    }\n\n    @Override\n    public void finished(ConfigurableApplicationContext context, Throwable exception) {\n        System.out.println(\"全部加载完成......\");\n    }\n}\n```\n\n3、HelloApplicationRunner\n\n```java\n@Component\npublic class HelloApplicationRunner implements ApplicationRunner {\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        System.out.println(\"ApplicationRunner.....run....\");\n    }\n}\n```\n\n4、HelloCommandLineRunner\n\n```java\n@Component\npublic class HelloCommandLineRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"CommandLineRunner......run.....\"+Arrays.asList(args));\n    }\n}\n```\n\n事件运行方法\n\nHelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入\n\n```\n# Initializers\norg.springframework.context.ApplicationContextInitializer=\\\ncom.wdjr.springboot.listener.HelloApplicationContextInitializer\n\norg.springframework.boot.SpringApplicationRunListener=\\\ncom.wdjr.springboot.listener.HelloSpringApplicationRunListener\n```\n\nHelloApplicationRunner和HelloCommandLineRunner ioc加入\n\n@Component\n\n# 八、SpringBoot的自定义starter\n\nstarter：场景启动器\n\n1、场景需要使用什么依赖？\n\n2、如何编写自动配置\n\n```java\n@Configuration //指定这个类是一个配置类\n@ConditionalOnXXX //在指定条件下成立的情况下自动配置类生效\n@AutoConfigureAfter //指定自动配置类的顺序\n@Bean //给容器中添加组件\n\n@ConfigurationProperties //结合相关xxxProperties类来绑定相关的配置\n@EnableConfigurationProperties //让xxxProperties生效加到容器中\n\n自动配置类要能加载\n将需要启动就加载的自动配置类，配置在META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\n```\n\n3、模式\n\n启动器空的jar只需要做依赖管理导入；\n\n专门写一个自动配置模块；\n\n启动器依赖自动配置，别人只需要引入starter\n\nxxx-spring-boot-starter\n\n### 新建一个starter\n\n> 绕的你怀疑人生\n\n#### 1、新建一个空项目工程\n\n![56.starter01](E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg)\n\n2、项目命名\n\n![57.starter02](E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg)\n\n\n\n3、导入module\n\n![58.starter03](E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg)\n\n4、新建一个Maven工程\n\n![59.starter04](E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg)\n\n5、项目命名\n\n![60.starter05](E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg)\n\n\n\n![61.starter06](E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg)\n\n6、在新建一个autoconfiguration类的spring\n\n![62.starter07](E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg)\n\n7、项目命名\n\n![63.starter08](E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg)\n\n8、无需导入依赖\n\n![64.starter09](E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg)\n\n9、next\n\n![65.starter10](E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg)\n\n最后配置完成\n\n#### 2、编写starter\n\n##### autoconfigurer\n\n对**lxy-spring-boot-starter-autoconfigurer**进行删减\n\n目录\n\n![66.starter-build01](E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg)\n\n2、pom文件修改\n\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n    </dependencies>\n\n\n</project>\n```\n\n3、编写相关的类\n\n![67.starter-build02](E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg)\n\n4、HelloProperties\n\n```java\npackage com.lxy.starter;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"lxy.hello\")\npublic class HelloProperties {\n    private String prefix;\n    private String suffix;\n\n    public String getPrefix() {\n        return prefix;\n    }\n\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    public String getSuffix() {\n        return suffix;\n    }\n\n    public void setSuffix(String suffix) {\n        this.suffix = suffix;\n    }\n}\n```\n\n5、HelloService\n\n```java\npackage com.lxy.starter;\n\npublic class HelloService {\n\n    HelloProperties helloProperties;\n\n    public HelloProperties getHelloProperties() {\n        return helloProperties;\n    }\n\n    public void setHelloProperties(HelloProperties helloProperties) {\n        this.helloProperties = helloProperties;\n    }\n\n    public String sayHello(String name){\n        return helloProperties.getPrefix()+name+helloProperties.getSuffix();\n    }\n}\n```\n\n6、HelloServiceAutoConfiguration\n\n\n\n```java\npackage com.lxy.starter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloServiceAutoConfiguration {\n\n    @Autowired\n    HelloProperties helloProperties;\n    @Bean\n    public HelloService helloService(){\n        HelloService service = new HelloService();\n        service.setHelloProperties(helloProperties);\n        return service;\n    }\n\n}\n```\n\n7、配置文件\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.lxy.starter.HelloServiceAutoConfiguration\n```\n\n8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter-autoconfigurer</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </dependency>\n</dependencies>\n```\n\n9、install生成\n\n![68.starter-build03](E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg)\n\n#### 3、测试\n\n新建一个springboot 1.5+web\n\n1、引入starter\n\n```xml\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n</dependencies>\n```\n\n2、新建一个Controller用来测试\n\n```java\n@RestController\npublic class HelloController {\n\n    @Autowired\n    HelloService helloService;\n\n    @GetMapping\n    public  String hello(){\n        return helloService.sayHello(\"test\");\n    }\n}\n```\n\n3、编写配置文件制定前缀和后缀名\n\n```properties\nlxy.hello.prefix=Starter-\nlxy.hello.suffix=-Success\n```\n\n4、运行访问http://localhost:8080/hello\n\n![70.starter-build05](E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg)\n\n成功爽啊","source":"_posts/SpringBoot入门简介.md","raw":"---\ntitle: Spring Boot入门\n---\n\n# 一、Spring Boot入门\n\n## 1、Spring Boot简介\n\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n\n## 2、微服务\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务，可以通过HTTP的方式进行互通\n\n单体应用：ALL IN ONE\n\n微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元\n\n## 3、环境准备\n\n环境约束\n\n- jdk1.8\n- maven 3.x :maven3.3以上\n- IDEA2017\n- SpringBoot 1.5.9RELEASE\n\n### 1、MAVEN设置\n\n```xml\n<!-- 配置JDK版本 -->\n<profile>    \n    <id>jdk18</id>    \n    <activation>    \n        <activeByDefault>true</activeByDefault>    \n        <jdk>1.8</jdk>    \n    </activation>    \n    <properties>    \n        <maven.compiler.source>1.8</maven.compiler.source>    \n        <maven.compiler.target>1.8</maven.compiler.target>    \n        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    \n    </properties>     \n</profile>\n   <!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，\n        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。\n        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下\n    -->\n    <!-- <mirror>\n        <id>spring-libs-milestone</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Spring Milestones</name>\n        <url>http://repo.spring.io/libs-milestone</url>\n    </mirror> -->\n\n    <!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  -->\n    <mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n\n    <!-- 备选镜像，也是可以通过 url 去查找确定一下，\n        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  -->\n    <mirror>\n        <id>central-repository</id>\n        <mirrorOf>*</mirrorOf>\n        typor<name>Central Repository</name>\n        <url>http://central.maven.org/maven2/</url>\n    </mirror>  \n```\n\n### 2、IDEA设置\n\n​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件\n\n​\t快捷键：\n\n​\tCtrl+D 复制一行\n\n​\tCtrl+Y 删除一行\n\n​\tCtrl+P 参数提示\n\n​\tCtrl+Alt+V 自动补齐方法\n\n​\tCtrl+N 查找类方法\n\n​\tAlt+Ins 构造器、getter/setter toString\n\n​\tCtrl+O 重载方法提示\n\n​\tAlt+Enter 提示导入类etc\n\n​\tShift+F6 :文件重命名\n\n## 4、Spring Boot的Hello World\n\n### 1、创建一个Maven工程\n\n\n\n### 2、导入Spring Boot的相关依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n```\n\n### 3、编写个主程序\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n### 4、编写相应的Controller和Service\n\n```java\n@Controller\npublic class HelloController {\n\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public  String  hello(){\n        return \"hello world\";\n    }\n}\n```\n\n### 5、运行主程序测试\n\n访问 localhost:8080/hello\n\n### 6、简化部署\n\n在pom.xml文件中，导入build插件\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 5、HelloWorld深度理解\n\n### 1.POM.xml文件\n\n#### 1、父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n```\n\n这个父项目**spring-boot-starter-parent**又依赖一个父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n```\n\n下面有个属性，定义了对应的版本号\n\n```xml\n<properties>\n    <activemq.version>5.15.3</activemq.version>\n    <antlr2.version>2.7.7</antlr2.version>\n    <appengine-sdk.version>1.9.63</appengine-sdk.version>\n    <artemis.version>2.4.0</artemis.version>\n    <aspectj.version>1.8.13</aspectj.version>\n    <assertj.version>3.9.1</assertj.version>\n    <atomikos.version>4.0.6</atomikos.version>\n    <bitronix.version>2.1.4</bitronix.version>\n    <build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>\n    。。。。。。。\n```\n\nSpring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明\n\n#### 2、启动器\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件\n\n**spring boot**将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。\n\n### 2、主程序入口\n\n```java\n@SpringBootApplication\npublic class SpringBoot01HelloQuickApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);\n    }\n}\n```\n\n**@SpringBootApplication:** 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用\n\n进入SpringBootApplication注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n```\n\n**@SpringBootConfiguration**：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类\n\n**@Configuration**:配置类上，来标注这个注解；\n配置类 ---- 配置文件，也是容器中的一个组件（@Component）\n**@EnableAutoConfiguration**:开启自动配置功能\n以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动\n配置功能；这样自动配置才能生效。 \n\n```java\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration { \n```\n\n**@AutoConfigurationPackage**:自动配置包\n**@Import({Registrar.class})**：底层注解，给容器导入组件；\n将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； \n\n**@Import({AutoConfigurationImportSelector.class})：**\n给容器导入组件？ \n\nAutoConfigurationImportSelector：导入组件选择器 \n\n将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；\n\n会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置\n好这些组件。 \n\n![1.configuration](E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg)\n\n```java\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\nAnnotationAttributes attributes) {\n\tList<String> configurations =\nSpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),\nthis.getBeanClassLoader());\n\tAssert.notEmpty(configurations, \"No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\");\n\treturn configurations;\n} \n```\n\n`SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),`\n`this.getBeanClassLoader());` \n\nSpring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；\n\n将这些值作为自动配置类导入到容器中，自动配置就生效了。 ![2.factories](E:\\工作文档\\SpringBoot\\images\\2.factories.jpg)\n\nJ2EE的整体解决方案\n\norg\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar \n\n## 6、使用Spring Initializer创建一个快速向导 \n\n1.IDE支持使用Spring Initializer\n\n自己选择需要的组件:例如web\n\n默认生成的SpringBoot项目 \n\n- 主程序已经生成好了，我们只需要完成我们的逻辑\n\n\n- resources文件夹目录结构\n\n  - static:保存所有的静态文件；js css images\n\n  - templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可\n\n    以使用模板引擎（freemarker.thymeleaf）;\n\n  - application.properties:Spring Boot的默认配置，例如 server.port=9000 \n\n# 二、配置文件 \n\n## 1、配置文件 \n\nSpring Boot使用全局配置文件，配置文件名是固定的；\n\n- application.properties\n- application.yml \n\n配置文件作用：修改Spring Boot在底层封装好的默认值；\n\nYAML（YAML AIN'T Markup Language）\n\n是一个标记语言\n\n又不是一个标记语言 \n\n**标记语言：**\n\n以前的配置文件；大多数使用的是 xxx.xml文件；\n\n以数据为中心，比json、xml等更适合做配置文件\n\nYAML：配置例子 \n\n```yaml\nserver:\n\tport: 9000 \n```\n\nXML: \n\n```xml\n<server>\n\t<port>9000</port>\n</server> \n```\n\n## 2、YAML语法 \n\n### 1、基本语法 \n\nk:(空格)v:表示一堆键值对（空格必须有）；\n\n以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 \n\n```yaml\nserver:\n\tport: 9000\n\tpath: /hello \n```\n\n属性和值也是大小写敏感 \n\n### 2、值的写法\n\n**字面量：普通的值（数字，字符串，布尔）** \n\nk: v:字面直接来写；\n\n字符串默认不用加上单引号或者双引号\n\n\"\":**双引号** 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思\n\n`name:\"zhangsan\\n lisi\"` 输出：`zhangsan换行 lisi`\n\n'':**单引号** 会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n`name:'zhangsan\\n lisi'` 输出：`zhangsan\\n lisi` \n\n**对象、Map（属性和值）键值对** \n\nk :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进\n\n对象还是k:v的方式 \n\n```yaml\nfrends:\n\tlastName: zhangsan\n\tage: 20 \n```\n\n行内写法 \n\n```yaml\nfriends: {lastName: zhangsan,age: 18} \n```\n\n**数组（List、Set）:**\n用-表示数组中的一个元素 \n\n```yaml\npets:\n ‐ cat\n ‐ dog\n ‐ pig \n```\n\n行内写法 \n\n```yaml\npets: [cat,dog,pig] \n```\n\n**组合变量**\n\n多个组合到一起 \n\n## 3、配置文件值注入 \n\n### 1、@ConfigurationProperties\n\n1、application.yml 配置文件 \n\n```yaml\nperson:\n  age: 18\n  boss: false\n  birth: 2017/12/12\n  maps: {k1: v1,k2: 12}\n  lists:\n   - lisi\n   - zhaoliu\n  dog:\n    name: wangwang\n    age: 2\n  last-name: wanghuahua\n```\n\n`application.properties` 配置文件（二选一） \n\n```properties\nidea配置文件utf-8\nproperties 默认GBK\nperson.age=12\nperson.boss=false\nperson.last-name=张三\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n所以中文输出乱码，改进settings-->file encoding -->[property-->utf-8 ,勾选转成ascii] \n\njavaBean \n\n```java\n/**\n* 将配置文件的配置每个属性的值，映射到组件中\n* @ConfigurationProperties:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；\n* prefix = \"person\" 配置文件爱你的那个属性进行一一映射\n* *\n只有这个组件是容器中的组件，才能提供到容器中\n*/\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n导入配置文件处理器，以后编写配置就有提示了 \n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring‐boot‐configuration‐processor</artifactId>\n\t<optional>true</optional>\n</dependency> \n```\n### 2、@Value注解\n\n更改javaBean中的注解\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    @Value(\"${person.last-name}\")\n    private String lastName;\n    @Value(\"#{11*2}\")\n    private Integer age;\n    @Value(\"true\")\n    private Boolean boss;\n```\n\n|          | @ConfigurationProperties | @Value |\n| :------: | :----------------------: | :----: |\n|    功能    |        批量注入配置文件属性        |  单个指定  |\n| 松散绑定(语法) |            支持            |  不支持   |\n|   spEL   |           不支持            |   支持   |\n| JSR303校验 |            支持            |  不支持   |\n|   复杂类型   |            支持            |  不支持   |\n\n> 松散语法：javaBean中last-name(或者lastName) -->application.properties中的last-name;\n>\n> spEL语法：#{11*2} \n>\n> JSR303：@Value会直接忽略，校验规则\n\nJSR303校验：\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"person\")\n@Validated\npublic class Person {\n    @Email\n    private String lastName;\n```\n\n复杂类型栗子：\n\n```java\n@Component\npublic class Person {\n    /**\n     * <bean class=\"Person\">\n     *     <property name=\"lastName\" value=\"字面量/${key}从环境变量/#{spEL}\"></property>\n     * </bean>\n     */\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n   // @Value(\"${person.maps}\")\n    private Map<String,Object> maps;\n```\n\n以上会报错，不支持复杂类型\n\n**使用场景分析**\n\n​\t如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；\n\n如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties\n\n举栗子：\n\n1、编写新的Controller文件\n\n```java\n@RestController\npublic class HelloController {\n\n    @Value(\"${person.last-name}\")\n    private String name;\n    @RequestMapping(\"/hello\")\n    public  String sayHello(){\n        return \"Hello\"+ name;\n    }\n}\n```\n\n2、配置文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n3、测试运行\n\n访问 localhost:9000/hello\n\n结果为`Hello 李四`\n\n### 3、其他注解\n **@PropertySource**\n\n作用：加载指定的properties配置文件\n\n1、新建一个person.properties文件\n\n```properties\nperson.age=12\nperson.boss=false\nperson.last-name=李四\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=wanghuahu\nperson.dog.age=15\n```\n\n2、在javaBean中加入@PropertySource注解\n\n```java\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String lastName;\n```\n\n**@ImportResource**\n\n作用：导入Spring配置文件，并且让这个配置文件生效\n\n1、新建一个Spring的配置文件，bean.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"HelloService\" class=\"com.wdjr.springboot.service.HelloService\"></bean>\n</beans>\n```\n\n2、编写测试类，检查容器是否加载Spring配置文件写的bean\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"HelloService\");\n    System.out.println(b);\n}\n```\n\n> import org.springframework.context.ApplicationContext;\n\n3、运行检测\n\n结果为false，没有加载配置的内容\n\n4、使用@ImportResource注解\n\n将@ImportResource标注在主配置类上\n\n```java\n@ImportResource(locations={\"classpath:beans.xml\"})\n@SpringBootApplication\npublic class SpringBoot02ConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot02ConfigApplication.class, args);\n    }\n}\n```\n\n5、再次运行检测\n\n结果为true\n\n缺点：每次指定xml文件太麻烦\n\nSpringBoot推荐给容器添加组件的方式：\n\n1、配置类=====Spring的xml配置文件（old）\n\n2、全注解方式@Configuration+@Bean（new）\n\n![4.MyAppConfig](E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg)\n\n\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来代替之前的Spring配置文件\n *\n * 在配置文件中用<bean></bean>标签添加组件\n */\n\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器这个组件id就是方法名\n    @Bean\n    public HelloService helloService01(){\n        System.out.println(\"配置类给容器添加了HelloService组件\");\n        return new HelloService();\n    }\n}\n```\n\n```java\n@Autowired\nApplicationContext ioc;\n\n@Test\npublic void testHelloService(){\n    boolean b = ioc.containsBean(\"helloService01\");\n    System.out.println(b);\n}\n```\n\n *容器这个组件id就是方法名* \n\n## 4、配置文件占位符\n\n#### 1、随机数\n\n```properties\n${random.value} 、${random.int}、${random.long}\n${random.int(10)}、${random.int[100,200]}\n```\n\n#### 2、获取配置值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.last-name}'s wanghuahu\nperson.dog.age=15\n```\n\n存在以下两种情况\n\n没有声明`person.last-name`会报错，新声明的需要加默认值\n\n```properties\nperson.age=${random.int}\nperson.boss=false\nperson.last-name=张三${random.uuid}\nperson.maps.k1=v1\nperson.maps.k2=v2\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}'s wanghuahu\nperson.dog.age=15\n```\n\n结果：输出`hello's wanghuahua`\n\n## 5、Profile\n\n### 1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml\n\n- application.properties\n- application-dev.properties\n- application-prod.properties\n\n默认使用application.properties\n\napplication.properties配置文件指定\n\n```properties\nspring.profiles.active=dev\n```\n\n### 2、YAML文档块\n\n```yaml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: dev\n\n---\n\nserver:\n  port: 9000\nspring:\n  profiles: dev\n\n---\nserver:\n  port: 80\nspring:\n  profiles: prod\n\n```\n\n### 3、激活指定profile\n\n1、在配置文件中激活\n\n2、命令行：\n\n--spring.profiles.active=dev\n\n![5.comandLine](E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg)\n\n优先级大于配置文件\n\n打包 成jar后\n\n`java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev`\n\n虚拟机参数\n\n`-Dspring.profiles.active=dev`\n\n## 6、加载配置文件位置\n\nSpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n- file:./config/\n- file./\n- classpath:/config/\n- classpath:/\n\n优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置\n\n也可以通过spring.config.location来改变默认配置\n\n> ```\n> server.servlet.context-path=/boot03\n> ```\n\n注：spring boot1x 是server.context.path=/boot02\n\n\n\n![7.priority](E:\\工作文档\\SpringBoot\\images\\7.priority.jpg)\n\n还可以通过spring.config.location来改变配置文件的位置\n\n项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置\n\n`java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties`\n\n运维比较有用，从外部加载，不用修改别的文件\n\n## 7.引入外部配置\n\n**SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补**\n\n1. 命令行参数\n\n   java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --server.port=9005 --server.context-path=/abc\n\n   中间一个空格\n\n2. 来自java:comp/env的JNDI属性\n\n3. java系统属性（System.getProperties()）\n\n4. 操作系统环境变量\n\n5. RandomValuePropertySource配置的random.*属性值\n\n   \n\n   **优先加载profile,    由jar包外到jar包内**\n\n6. **jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n7. **jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**\n\n8. **jar包外部的application.properties或application.yml(带Spring.profile)配置文件**\n\n9. **jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n   \n\n10. @Configuration注解类的@PropertySource\n\n11. 通过SpringApplication.setDefaultProperties指定的默认属性\n\n[官方文档](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n## 8、自动配置\n\n配置文件到底怎么写？\n\n[Spring的所有配置参数](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties)\n\n自动配置原理很关键\n\n### 1、自动配置原理\n\n1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration\n\n2）、@EnableAutoConfiguration 作用：\n\n- 利用AutoConfigurationImportSelector给容器中导入一些组件？\n- 可以查看selectImports()方法的内容\n- 获取候选的配置\n\n```java\nList<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n```\n\n\n- 扫描类路径下的\n```java\n  SpringFactoriesLoader.loadFactoryNames(）\n  扫描所有jar包类路径下的 MATA-INF/spring.factories\n  把扫描到的这些文件的内容包装成properties对象\n  从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中\n```\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；\n\n3）、每一个自动配置类进行自动配置功能；\n\n4）、以**HttpEncodingAutoConfiguration** 为例\n\n```java\n@Configuration //表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties({HttpEncodingProperties.class})//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中\n@ConditionalOnWebApplication//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；\n(\n    type = Type.SERVLET\n)\n@ConditionalOnClass({CharacterEncodingFilter.class})//判断当前项目有没有这个类，解决乱码的过滤器\n@ConditionalOnProperty(\n    prefix = \"spring.http.encoding\",\n    value = {\"enabled\"},\n    matchIfMissing = true\n)//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效\npublic class HttpEncodingAutoConfiguration {\n   //给容器添加组件，这个组件的值需要从properties属性中获取\n    private final HttpEncodingProperties properties;\n\t//只有一个有参数构造器情况下，参数的值就会从容器中拿\n    public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n        filter.setEncoding(this.properties.getCharset().name());\n        filter.setForceRequestEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));\n        filter.setForceResponseEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));\n        return filter;\n    }\n\n```\n\n5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类\n\n```java\n@ConfigurationProperties(prefix = \"spring.http.encoding\")//从配置文件中的值进行绑定和bean属性进行绑定\npublic class HttpEncodingProperties {\n```\n\n根据当前不同条件判断，决定这个配置类是否生效？\n\n一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的\n\n\n\n### 2、所有的自动配置组件\n\n每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；\n\n作用：用他们做自动配置\n\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n\n```\n\n### 3、精髓：\n\n1）、SpringBoot启动会加载大量的自动配置类\n\n2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；\n\n3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）\n\n4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值\n\nxxxAutoConfiguration:自动配置类；\n\n给容器中添加组件\n\nxxxProperties:封装配置文件中的属性；\n\n跟之前的Person类一样，配置文件中值加入bean中\n\n### 4、细节\n\n#### 1、@Conditional派生注解 \n\n> 利用Spring注解版原生的@Conditional作用\n\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional派生注解                | 作用（判断是否满足当前指定条件）               |\n| ------------------------------- | ------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                |\n| @ConditionalOnBean              | 容器中存在指定Bean                    |\n| @ConditionalOnMissBean          | 容器中不存在指定Bean                   |\n| @ConditionalOnExpression        | 满足spEL表达式                      |\n| @ConditionalOnClass             | 系统中有指定的类                       |\n| @ConditionalOnMissClass         | 系统中没有指定的类                      |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean,或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                |\n| @ConditionalOnResource          | 类路径下是否存在指定的资源文件                |\n| @ConditionalOnWebApplication    | 当前是web环境                       |\n| @ConditionalOnNotWebApplication | 当前不是web环境                      |\n| @ConditionalOnJndi              | JNDI存在指定项                      |\n\n#### 2、自动配置报告\n\n自动配置类必须在一定条件下生效\n\n我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效\n\n```properties\ndebug=true\n```\n\n自动配置报告\n\n```java\n============================\n\nCONDITIONS EVALUATION REPORT\n============================\n\n\nPositive matches:（启动的，匹配成功的）\n-----------------\n\n   CodecsAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n        ......\n        \n Negative matches:（没有启动的，没有匹配成功的）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n.....\n```\n\n# 三、日志\n\n> Spring Boot2对日志有更改\n\n### 1、日志框架\n\n小张：开发一个大型系统；\n\n1、System.out.println(\"\");将关键数据打印在控制台；去掉？卸载文件中\n\n2、框架记录系统的一些运行信息；日志框架zhanglog.jar\n\n3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?\n\n4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;\n\n5、JDBC--数据库驱动；\n\n​\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;\n\n​\t给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；\n\n市面上的日志框架\n\n| 日志抽象层                                                   | 日志实现                                        |\n| ------------------------------------------------------------ | ----------------------------------------------- |\n| ~~JCL(Jakarta Commons Logging)~~ SLF4j(Simple Logging Facade for Java) ~~jboss-logging~~ | Log4j ~~JUL(java.util.logging)~~ Log4j2 Logback |\n|                                                              |                                                 |\n\n左边的抽象，右边的实现\n\nSLF4J  -- Logback\n\nSpring Boot:底层是Spring框架，Spring默认框架是JCL；\n\n​\tSpringBoot选用SLF4J和logback\n\n### 2、SLF4J使用\n\n#### 1、如何在系统中使用SLF4j\n\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n应该给系统里面导入slf4j的jar包和logback的实现jar\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(\"Hello World\");\n  }\n}\n```\n\n![8.slf4j](E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg)\n\n每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架本身的配置文件**；\n\n#### 2、遗留问题\n\na系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis\n\n统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；\n\n核心：\n\n1、将系统中其他日志框架排除出去；\n\n2、用中间包来替换原有的日志框架/\n\n3、导入slf4j的其他实现\n\n### 3、SpingBoot日志框架解析\n\n打开IDEA ，打开pom文件的依赖图形化显示\n\n![9.IDEAdependencies](E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg)\n\nSpringBoot的基础框架\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\nSpringBoot的日志功能\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n    <version>2.0.1.RELEASE</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n![10.slf4jandlogback](E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg)\n\n总结：\n\n1. SpringBoot底层也是使用SLF4J+log4jback\n\n2. SpringBoot也把其他日志替换成了slf4j\n\n3. 起着commons.loggings的名字其实new的SLF4J替换中间包\n\n   SpringBoot2中改成了bridge\n\n4. 如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层\n\n### 4、日志的使用\n\n#### 1、默认配置\n\ntrace-debug-info-warn-error\n\n可以调整需要的日志级别进行输出，不用注释语句。\n\n```java\n//记录器\nLogger logger = LoggerFactory.getLogger(getClass());\n@Test\npublic void contextLoads() {\n\n    //日志的级别\n    //从低到高\n    //可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效\n    logger.trace(\"这是trace日志\");\n    logger.debug(\"这是debug信息\");\n    //SpringBoot默认给的是info级别，如果没指定就是默认的root级别\n    logger.info(\"这是info日志\");\n    logger.warn(\"这是warn信息\");\n    logger.error(\"这是Error信息\");\n}\n```\n\n调整指定包的日志级别在配置文件中进行配置\n\n```properties\nlogging.level.com.wdjr=trace\n```\n\n日志输出格式\n\n```properties\n#控制台输出的日志格式 \n#%d：日期\n#%thread：线程号 \n#%-5level：靠左 级别 \n#%logger{50}：全类名50字符限制,否则按照句号分割\n#%msg：消息+换行\n#%n：换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n```\n\nSpringBoot修改日志的默认配置\n\n```properties\nlogging.level.com.wdjr=trace\n#不指定path就是当前目录下生成springboot.log\n#logging.file=springboot.log\n#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认\nlogging.path=/spring/log\n#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n#指定文件中日志输出的格式\nlogging.pattern.file=xxx\n```\n\n#### 2、指定配置\n\n给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置\n\n| logging System         | Customization                                                |\n| ---------------------- | ------------------------------------------------------------ |\n| Logback                | logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy |\n| Log4J2                 | log4j2-spring.xml or log4j2.xml                              |\n| JDK(Java Util Logging) | logging.properties                                           |\n\nlogback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载\n\n```xml\n<springProfile name=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n<springProfile name!=\"dev\">\n\t<!-- 可以指定某段配置只在某个环境下生效 -->\n</springProfile>\n```\n\n如何调试开发环境,输入命令行参数\n\n--spring.profiles.active=dev\n\n如果不带后面的xx-spring.xml就会报错\n\n### 3、切换日志框架\n\n可以根据slf4j的日志适配图，进行相关切换；\n\n#### 1、log4j\n\nslf4j+log4j的方式；\n\n![11.log4j](E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg)\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>logback-classic</artifactId>\n            <groupId>ch.qos.logback</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n```\n\n不推荐使用仅作为演示\n\n#### 2、log4j2\n\n切换为log4j2\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n# 四、web开发\n\n## 1、简介\n\n使用SpringBoot;\n\n1)、创建SpringBoot应用，选中我们需要的模块；\n\n2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来\n\n3)、自己编写业务代码\n\n**自动配置原理？**\n\n这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx\n\n```java\nxxxAutoConfiguration:帮我们给容器中自动配置组件\nxxxProperties:配置类来封装配置文件的内容\n```\n\n## 2、静态资源文件映射规则\n\n```java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware, InitializingBean {\n    //可以设置和静态资源相关的参数，缓存时间等\n```\n\n```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n   if (!this.resourceProperties.isAddMappings()) {\n      logger.debug(\"Default resource handling disabled\");\n      return;\n   }\n   Integer cachePeriod = this.resourceProperties.getCachePeriod();\n   if (!registry.hasMappingForPattern(\"/webjars/**\")) {\n      customizeResourceHandlerRegistration(registry\n            .addResourceHandler(\"/webjars/**\")\n            .addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n            .setCachePeriod(cachePeriod));\n   }\n   String staticPathPattern = this.mvcProperties.getStaticPathPattern();\n   if (!registry.hasMappingForPattern(staticPathPattern)) {\n      customizeResourceHandlerRegistration(\n            registry.addResourceHandler(staticPathPattern)\n                  .addResourceLocations(\n                        this.resourceProperties.getStaticLocations())\n                  .setCachePeriod(cachePeriod));\n   }\n}\n```\n\n### 1、webjar\n\n1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；\n\n​\twebjars：以jar包的方式引入静态资源\n\nhttp://www.webjars.org/\n\n![12.jquery](E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\n\n### 2、本地资源\n\n```\nprivate String staticPathPattern = \"/**\";\n```\n\n访问任何资源\n\n2、会在这几文件夹下去找静态路径（静态资源文件夹）\n\n```\n\"classpath:/META-INF/resources/\", \n\"classpath:/resources/\",\n\"classpath:/static/\", \n\"classpath:/public/\",\n\"/\";当前项目的根路径\n```\n\n![13.static](E:\\工作文档\\SpringBoot\\images\\13.static.jpg)\n\nlocalhost:8080/abc ==>去静态资源文件夹中找abc\n\n![14.static-css](E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg)\n\n3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；\n\nlocalhost:8080/  -->index页面\n\n```JAVA\n@Bean\npublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n      ResourceProperties resourceProperties) {\n   return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n         this.mvcProperties.getStaticPathPattern());\n}\n```\n\n4、喜欢的图标，即网站title的图标favicon\n\n```java\n@Configuration\n@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\npublic static class FaviconConfiguration {\n\n   private final ResourceProperties resourceProperties;\n\n   public FaviconConfiguration(ResourceProperties resourceProperties) {\n      this.resourceProperties = resourceProperties;\n   }\n\n   @Bean\n   public SimpleUrlHandlerMapping faviconHandlerMapping() {\n      SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n       //把任何favicon的图标都在静态文件夹下找\n      mapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\n            faviconRequestHandler()));\n      return mapping;\n   }\n\n   @Bean\n   public ResourceHttpRequestHandler faviconRequestHandler() {\n      ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n      requestHandler\n            .setLocations(this.resourceProperties.getFaviconLocations());\n      return requestHandler;\n   }\n\n}\n```\n\n可以在配置文件配置静态资源文件夹\n\n```properties\nspring.resources.static-locations=classpath:xxxx\n```\n\n## 3、模板引擎\n\n将html和数据 结合到一起 输出组装处理好的新文件\n\nSpringBoot推荐Thymeleaf;语法简单，功能强大\n\n### 1、引入thymeleaf 3\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n默认导入thymeleaf2，版本太低 所以使用thymeleaf3.\n\n[官方导入办法](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3)\n\n```xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <!--thymeleaf 3的导入-->\n    <thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n    <!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  -->\n    <!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  -->\n    <thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n</properties>\n```\n\n### 2、Thymeleaf使用和语法\n\n```java\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\npublic class ThymeleafProperties {\n\n   private static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n\n   private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n\n   public static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n\n   public static final String DEFAULT_SUFFIX = \".html\";\n   //只要把HTML文件方法类路径下的template文件夹下，就会自动导入\n```\n\n只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；\n\n使用：\n\n1、导入thymeleaf的名称空间\n\n```html\n<html xmlns:th=\"http://www.thymeleaf.org\">    \n```\n\n2、使用thymeleaf语法；\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>success</title>\n</head>\n<body>\n<h1>success</h1>\n<!--th:text 将div里面的文本内容设置为-->\n<div th:text=\"${Lion}\">\n前端数据\n</div>\n</body>\n</html>\n```\n\n3、语法规则\n\n1）、th:text=\"${hello}\"可以使用任意标签 替换原生的任何属性\n\n**在SpringBoot的环境下**\n\n```html\n<div id=\"testid\" class=\"testcalss\" th:id=\"${Lion}\" th:class=\"${Lion}\" th:text=\"${Lion}\">\n\t前端数据\n</div>\n```\n\n![15.thtmeleaf-th01](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg)\n\n**直接访问HTML页面**\n\n![15.thtmeleaf-th02](E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg)\n\n**2)、内联写法注意需要在body上加上 th:inline=\"text\"敲黑板**\n\n不然不起作用\n\n```html\n<body class=\"text-center\" th:inline=\"text\"></body>\n```\n\nth标签的访问优先级\n\nOrder Feature Attributes\n\n### 3、语法规则\n\n|      | 功能                            | 标签                                 | 功能和jsp对比                             |\n| ---- | ------------------------------- | ------------------------------------ | ----------------------------------------- |\n| 1    | Fragment inclusion              | th:insert th:replace                 | include(片段包含)                         |\n| 2    | Fragment iteration              | th:each                              | c:forEach(遍历)                           |\n| 3    | Conditional evaluation          | th:if th:unless th:switch th:case    | c:if(条件判断)                            |\n| 4    | Local variable definition       | th:object  th:with                   | c:set(声明变量)                           |\n| 5    | General attribute modification  | th:attr th:attrprepend th:attrappend | 属性修改支持前面和后面追加内容            |\n| 6    | Specific attribute modification | th:value th:href th:src ...          | 修改任意属性值                            |\n| 7    | Text (tag body modification)    | th:text th:utext                     | 修改标签体内容utext：不转义字符<h1>大标题 |\n| 8    | Fragment specification          | th:fragment                          | 声明片段                                  |\n| 9    | Fragment removal                | th:remove                            |                                           |\n\n \n\n```properties\nSimple expressions:(表达式语法)\n    Variable Expressions: ${...}\n    \t1、获取对象属性、调用方法\n    \t2、使用内置基本对象：\n    \t    #ctx : the context object.\n            #vars: the context variables.\n            #locale : the context locale.\n            #request : (only in Web Contexts) the HttpServletRequest object.\n            #response : (only in Web Contexts) the HttpServletResponse object.\n            #session : (only in Web Contexts) the HttpSession object.\n            #servletContext : (only in Web Contexts) the ServletContext object.\n         3、内置一些工具对象\n        \t#execInfo : information about the template being processed.\n        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they\n            would be obtained using #{…} syntax.\n            #uris : methods for escaping parts of URLs/URIs\n            #conversions : methods for executing the configured conversion service (if any).\n            #dates : methods for java.util.Date objects: formatting, component extraction, etc.\n            #calendars : analogous to #dates , but for java.util.Calendar objects.\n            #numbers : methods for formatting numeric objects.\n            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.\n            #objects : methods for objects in general.\n            #bools : methods for boolean evaluation.\n            #arrays : methods for arrays.\n            #lists : methods for lists.\n            #sets : methods for sets.\n            #maps : methods for maps.\n            #aggregates : methods for creating aggregates on arrays or collections.\n            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).\n    Selection Variable Expressions: *{...} //选择表达式：和${}功能一样，补充功能\n   # 配合th:object使用，object=${object} 以后获取就可以使用*{a}  相当于${object.a}\n  \t    <div th:object=\"${session.user}\">\n            <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n            <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n            <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n\t\t</div>\n    Message Expressions: #{...} //获取国际化内容\n    Link URL Expressions: @{...} //定义URL链接\n    \t#<a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\">view</a>\n    Fragment Expressions: ~{...}//片段文档\n    \nLiterals（字面量）\n    Text literals: 'one text' , 'Another one!' ,…\n    Number literals: 0 , 34 , 3.0 , 12.3 ,…\n    Boolean literals: true , false\n    Null literal: null\n    Literal tokens: one , sometext , main ,…\nText operations:(文本操作)\n    String concatenation: +\n    Literal substitutions: |The name is ${name}|\nArithmetic operations:（数学运算）\n    Binary operators: + , - , * , / , %\n    Minus sign (unary operator): -\nBoolean operations:（布尔运算）\n    Binary operators: and , or\n    Boolean negation (unary operator): ! , not\nComparisons and equality:（比较运算）\n    Comparators: > , < , >= , <= ( gt , lt , ge , le )\n    Equality operators: == , != ( eq , ne )\nConditional operators:（条件运算）\n    If-then: (if) ? (then)\n    If-then-else: (if) ? (then) : (else)\n    Default: (value) ?: (defaultvalue)\nSpecial tokens:（空操作）\n\tNo-Operation: _\n```\n\ninline写法\n\n```html\n[[]] -->th:text\n[()] -->th:utext\n```\n\n\n\n## 4、SpringMVC自动配置\n\n### 1、SpringMVC的自动导入\n\n[Spring框架](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications)\n\n自动配置好了mvc：\n\n以下是SpringBoot对SpringMVC的默认\n\nSpring Boot provides auto-configuration for Spring MVC that works well with most applications.\n\nThe auto-configuration adds the following features on top of Spring’s defaults:\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n  - 自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)\n  - `ContentNegotiatingViewResolver`组合所有视图解析器\n  - 如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来\n\n- Support for serving static resources, including support for WebJars (see below).静态资源\n\n- Static `index.html` support.\n\n- Custom `Favicon` support (see below).\n\n- 自动注册 了`Converter`, `GenericConverter`, `Formatter` beans.\n\n  - `Converter`：类型转换 文本转为字面量\n\n  - `Formatter` ：格式化器 转换后格式转换\n\n    ```java\n    @Bean\n    @ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件配置入职格式化的规则\n    public Formatter<Date> dateFormatter() {\n       return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\n    }\n    ```\n\n    自己添加的格式化转换器，只需要放在容器中即可\n\n- Support for `HttpMessageConverters` (see below).\n\n  - `HttpMessageConverters` ：转换HTTP转换和响应：User - json\n\n  - `HttpMessageConverters` ：是从容器中确定；获取所有的`HttpMessageConverters`  ，将自己的组件注册在容器中@Bean \n\n  - If you need to add or customize converters you can use Spring Boot’s `HttpMessageConverters` class:\n\n    ```java\n    import org.springframework.boot.autoconfigure.web.HttpMessageConverters;\n    import org.springframework.context.annotation.*;\n    import org.springframework.http.converter.*;\n    \n    @Configuration\n    public class MyConfiguration {\n    \n        @Bean\n        public HttpMessageConverters customConverters() {\n            HttpMessageConverter<?> additional = ...\n            HttpMessageConverter<?> another = ...\n            return new HttpMessageConverters(additional, another);\n        }\n    \n    }\n    ```\n\n- Automatic registration of `MessageCodesResolver` (see below).\n\n  - 定义错误代码生成规则\n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\n\n  - ```java\n    @Override\n    protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {\n       try {\n          return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n       }\n       catch (NoSuchBeanDefinitionException ex) {\n          return super.getConfigurableWebBindingInitializer();\n       }\n    }\n    ```\n\n    在beanFactory：中可以自己创建一个，初始化webDataBinder\n\n    请求数据 ==》javaBean\n\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.16.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\n\n思想：修改默认配置\n\n### 2、扩展SpringMVC\n\n编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用\n\n```java\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n1）、WebMvcAutoConfiguration是SpringMVC的自动配置\n\n2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)\n\n```java\n@Configuration\npublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n    private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\n\n\t//从容器中获取所有webMVCconfigurer\n\t@Autowired(required = false)\n\tpublic void setConfigurers(List<WebMvcConfigurer> configurers) {\n\t\tif (!CollectionUtils.isEmpty(configurers)) {\n\t\t\tthis.configurers.addWebMvcConfigurers(configurers);\n            \n            \t@Override\n                protected void addViewControllers(ViewControllerRegistry registry) {\n                    this.configurers.addViewControllers(registry);\n                }\n            //一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）\n            \t@Override\n               // public void addViewControllers(ViewControllerRegistry registry) {\n                   // for (WebMvcConfigurer delegate : this.delegates) {\n\t\t\t\t //delegate.addViewControllers(registry);\n                    //}\n                }\n\t\t}\n\t}\n    \n```\n\n\n\n3）、自己的配置被调用\n\n效果：SpringMVC的自动配置和我们的扩展配置都会起作用\n\n### 3、全面接管mvc\n\n不需要SpringBoot对SpringMVC的自动配置。\n\n```java\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n\n\n//        super.addViewControllers(registry);\n        //浏览器发送wdjr请求，也来到success页面\n        registry.addViewController(\"/wdjr\").setViewName(\"success\");\n    }\n}\n```\n\n例如静态资源访问，不推荐全面接管\n\n原理：\n\n为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了\n\n1）、核心配置\n\n```java\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n}\n```\n\n2）、DelegatingWebMvcConfiguration\n\n```java\n@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n```\n\n3）、WebMvcAutoConfiguration\n\n```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n      WebMvcConfigurerAdapter.class })\n//容器没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n      ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\n4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；\n\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能\n\n\n\n## 5、修改SpringMVC默认配置\n\n模式:\n\n​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n​\t2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。\n\n## 6、RestfulCRUD\n\n### 1、默认访问首页\n\n在config/MyConfig.java中编写配置类\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/login.html\").setViewName(\"login\");\n        }\n    };\n    return adapter;\n}\n```\n\n静态资源引用\n\n```html\n<link href=\"#\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n```\n\n### 2、国际化\n\n1、编写国际化配置文件\n\n2、使用ResourceBundleMessageSource管理国际化资源文件\n\n3、在页面中使用fmt:message，取出国际化内容\n\n#### 1、浏览器切换国际化\n\n步骤\n\n1、编写国际化配置文件，抽取页面需要的显示的国际化消息\n\n![16.national](E:\\工作文档\\SpringBoot\\images\\16.national.jpg)\n\n2、SpringBoot自动配置好了国际化配置的资源文件\n\n```java\n@ConfigurationProperties(prefix = \"spring.messages\")\npublic class MessageSourceAutoConfiguration {\n    //我们的配置文件可以直接放在类路径下叫messages.properties\n    private String basename = \"messages\";\n    @Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n            //设置国际化文件的基础名，去掉语言国家代码\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t}\n\t\tif (this.encoding != null) {\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t}\n```\n\n3、对IDEA的编码进行设置\n\n![17.encoding](E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg)\n\n4、login进行标签插入\n\n```html\n<!DOCTYPE html>\n<!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ -->\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"author\" content=\"\" />\n    <link rel=\"icon\" href=\"https://getbootstrap.com/favicon.ico\" />\n\n    <title>登录页面</title>\n\n    <!-- Bootstrap core CSS -->\n    <link href=\"#\" th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n\n    <!-- Custom styles for this template -->\n    <link href=\"./login_files/signin.css\" th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n  </head>\n\n  <body class=\"text-center\">\n    <form class=\"form-signin\">\n      <img class=\"mb-4\" src=\"./login_files/bootstrap-solid.svg\" th:src=\"@{/img/bootstrap-solid.svg}\" alt=\"\" width=\"72\" height=\"72\" />\n      <h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\n      <label  class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\n      <input type=\"text\"  name=\"username\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\"/>\n      <label for=\"inputPassword\" class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\n      <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\" />\n      <div class=\"checkbox mb-3\">\n        <label>\n          <input type=\"checkbox\" value=\"remember-me\" /> [[#{login.remember}]]\n        </label>\n      </div>\n      <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\n      <p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n    </form>\n  \n\n</body></html>\n```\n\n效果根据浏览器语言的信息切换国际化\n\n原理：\n\n国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；\n\n```java\n@Bean\n@ConditionalOnMissingBean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\npublic LocaleResolver localeResolver() {\n    if (this.mvcProperties\n        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n        return new FixedLocaleResolver(this.mvcProperties.getLocale());\n    }\n    AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n    localeResolver.setDefaultLocale(this.mvcProperties.getLocale());\n    return localeResolver;\n}            \n\n```\n\n默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）\n\n![18.accept-language](E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg)\n\n#### 2、点击链接切换国际化\n\n自己编写localResolver，加到容器中\n\n1、更改HTML代码\n\n```html\n<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=zh_CN}\">中文</a>\n  <a href=\"#\" class=\"btn btn-sm\" th:href=\"@{/index.html?lg=en_US}\">English</a>\n```\n\n2、新建一个MyLocaleResolver.class\n\n```java\npublic class MyLocaleResolver implements LocaleResolver {\n\n    //解析区域信息\n    @Override\n    public Locale resolveLocale(HttpServletRequest request) {\n        String l = request.getParameter(\"lg\");\n        Locale locale = Locale.getDefault();\n        if(!StringUtils.isEmpty(l)){\n            String[] split = l.split(\"_\");\n            locale = new Locale(split[0], split[1]);\n        }\n        return locale;\n    }\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n\n    }\n}\n```\n\n3、将MyLocaleResolver加入到容器中\n\n```java\n@Bean\npublic LocaleResolver localeResolver(){\n    return new MyLocalResolver();\n}\n```\n\n4、启动演示\n\n### 3、登录拦截器\n\n#### 1、登录\n\n开发技巧\n\n​\t1、清除模板缓存\n\n​\t2、Ctrl+F9刷新\n\n1、新建一个LoginController\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功\n            return \"list\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n2、登录错误消息显示\n\n```html\n<!--判断-->\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\n```\n\n3、表单重复提交\n\n表单重复提交事件 --》重定向来到成功页面--》模板引擎解析\n\n```java\nif(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n    //登录成功,防止重复提交\n    return \"redirect:/main.html\";\n}else{\n    map.put(\"msg\", \"用户名密码错误\");\n    return \"login\";\n}\n```\n\n模板引擎解析\n\n```java\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n    registry.addViewController(\"/\").setViewName(\"login\");\n    registry.addViewController(\"/index.html\").setViewName(\"login\");\n    registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n}\n```\n\n### 4、拦截器\n\n作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）\n\n1、在component下新建一个LoginHandlerInterceptor拦截器\n\n```java\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\n\n    //目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        Object user = request.getSession().getAttribute(\"loginUser\");\n        if(user!=null){\n            //已经登录\n            return true;\n        }\n        //未经过验证\n        request.setAttribute(\"msg\", \"没权限请先登录\");\n        request.getRequestDispatcher(\"/index.html\").forward(request, response);\n\n        return false;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n```\n\n2、在MyMvcConfig配置中重写拦截器方法，加入到容器中\n\n```java\n//所有的webMvcConfigurerAdapter组件会一起起作用\n@Bean //註冊到容器去\npublic WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry) {\n            registry.addViewController(\"/\").setViewName(\"login\");\n            registry.addViewController(\"/index.html\").setViewName(\"login\");\n            registry.addViewController(\"/main.html\").setViewName(\"Dashboard\");\n        }\n        //注册拦截器\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            //静态资源 css js img 已经做好了静态资源映射\n            registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\").\n                    excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\n        }\n    };\n    return adapter;\n}\n```\n\n3、在LoginHandler中添加登录成功写入session\n\n```java\n@Controller\npublic class LoginController {\n\n    @PostMapping(value =\"/user/login\")\n    public String login(@RequestParam(\"username\")String username,\n                        @RequestParam(\"password\")String password,\n                        Map<String,Object> map,\n                        HttpSession session){\n        if(!StringUtils.isEmpty(username) && \"123456\".equals(password)){\n            //登录成功,防止重复提交\n            session.setAttribute(\"loginUser\", username);\n            return \"redirect:/main.html\";\n        }else{\n            map.put(\"msg\", \"用户名密码错误\");\n            return \"login\";\n        }\n\n    }\n}\n```\n\n### 5、CRUD-员工列表\n\n实验要求：\n\n1）、RestfulCRUD：CRUD满足Rest风格\n\nURI:/资源名称/资源标识+HTTP操作\n\n|      | 普通CRUD                | RestfulCRUD       |\n| ---- | ----------------------- | ----------------- |\n| 查询 | getEmp                  | emp -- GET        |\n| 添加 | addEmp?xxx              | emp --POST        |\n| 修改 | updateEmp?id=xxx&xxx=xx | emp/{id} -- PUT   |\n| 删除 | deleteEmp?id=1          | emp/{id} --DELETE |\n\n2、实验的请求架构\n\n|                | 请求URI  | 请求方式 |\n| -------------- | -------- | -------- |\n| 查询所有员工   | emps     | GET      |\n| 查询某个员工   | emp/{id} | GET      |\n| 添加页面       | emp      | GET      |\n| 添加员工       | emp      | POST     |\n| 修改页面(回显) | emp/{id} | GET      |\n| 修改员工       | emp/{id} | PUT      |\n| 删除员工       | emp/{id} | DELETE   |\n\n3、员工列表\n\n#### 1、公共页面抽取\n\n使用方法\n\n```html\n1、抽取公共片段\n<!--footer.html-->\n<div id=\"footid\" th:fragment=\"copy\">xxx</div>\n2、引入公共片段\n<!--test.html-->\n<div th:insert=~{footer::copy}></div>\n~{templatename::selector} 模板名::选择器  footer::#footid\n~{templatename::fragmentname} 模板名::片段名称 footer::copy\n行内写法可以加~{xx::xx} 标签体可以 xx::xx\n```\n\n\n\n**三种引用方式**\n\n**th:insert** :加个外层标签 +1\n\n**th:replace** :完全替换 1\n\n**th:include**：就替换里面的内容 -1\n\n公共页面\n\n```html\n<body>\n\t...\n    <div th:insert=\"footer :: copy\"></div>\n    <div th:replace=\"footer :: copy\"></div>\n    <div th:include=\"footer :: copy\"></div>\n</body>\n```\n\n结果\n\n```html\n<body>\n...\n    <!-- th:insert -->\n    <div>\n        <footer>\n            &copy; 2011 The Good Thymes Virtual Grocery\n        </footer>\n    </div>\n    <!--th:replace-->\n    <footer>\n   \t\t&copy; 2011 The Good Thymes Virtual Grocery\n    </footer>\n    <!--th:include-->\n    <div>\n        &copy; 2011 The Good Thymes Virtual Grocery\n    </div>\n</body>\n```\n\n用此种方法将公共页面引入\n\n#### 2、列表高亮\n\n引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html\n\n模板引入变量名\n\ndashboard\n\n```html\n<a class=\"nav-link active\"\n   th:class=\"${activeUri}=='main.html'?'nav-link active':'nav-link'\"\n   href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/main.html}\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\"><path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline></svg>\n    Dashboard <span class=\"sr-only\">(current)</span>\n</a>\n```\n\n员工管理\n\n```html\n<li class=\"nav-item\">\n    <a class=\"nav-link\"\n       th:class=\"${activeUri}=='emps'?'nav-link active':'nav-link'\"\n       href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/#\" th:href=\"@{/emps}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-users\"><path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path><path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path></svg>\n        员工管理\n    </a>\n```\n\n引入模板的时候传入参数\n\ndashboard.html引入\n\n```html\n<!--引入侧边栏-->\n   <div th:replace=\"commons/bar :: sidebar(activeUri='main.html')\"></div>\n```\n\nlist.html引入\n\n```html\n<!--引入侧边栏-->\n<div th:replace=\"commons/bar::sidebar(activeUri='emps')\"></div>\n```\n\n### 6、列表数据显示（查）\n\n#### 1、传入员工对象\n\nEmployeeController类,传入员工对象\n\n```java\n@Controller\npublic class EmployeeController {\n\n    @Autowired\n    EmployeeDao employeeDao;\n    /**\n     * 查询所有员工返回列表页面\n     */\n    @GetMapping(value = \"/emps\")\n    public String list(Model model){\n\n        Collection<Employee> employees = employeeDao.getAll();\n        model.addAttribute(\"emps\",employees);\n        return \"emp/list\";\n    }\n}\n```\n\n#### 2、 遍历对象\n\nlist.html中 使用模板的 `th:each`方法\n\n```html\ntable class=\"table table-striped table-sm\">\n    <thead>\n    <tr>\n        <th>#</th>\n        <th>lastName</th>\n        <th>email</th>\n        <th>gender</th>\n        <th>department</th>\n        <th>birth</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n        <tr th:each=\"emp:${emps}\">\n            <td th:text=\"${emp.id}\">1</td>\n            <td th:text=\"${emp.lastName}\">1</td>\n            <td th:text=\"${emp.email}\">1</td>\n            <td th:text=\"${emp.gender}\">1</td>\n            <td th:text=\"${emp.department.departmentName}\">1</td>\n            <td th:text=\"${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">1</td>\n            <td>\n                <button class=\"btn btn-sm btn-primary\">编辑</button>\n                <button class=\"btn btn-sm btn-danger\">删除</button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n#### 3、效果显示\n\n![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)\n\n\n\n### 7、员工添加（增）\n\n功能：点击添加按钮，出现新增页面\n\n#### 1、新增页面\n\n```html\n<form>\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\"  placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label for=\"exampleFormControlSelect1\">department</label>\n        <select class=\"form-control\" id=\"exampleFormControlSelect1\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <!--Birth-->\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n#### 2、页面跳转\n\n在EmployeeController中添加addEmpPage方法\n\n```java\n/**\n * 添加员工\n */\n@GetMapping(value = \"/emp\")\npublic String toAddPage(Model model){\n    //来到添加页面,查出所有部门显示\n    Collection<Department> depts = departmentDao.getDepartments();\n    model.addAttribute(\"depts\",depts);\n    return \"emp/add\";\n}\n```\n\n关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息\n\n#### 3、添加功能完成\n\n新建一个PostMapping\n\n> ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；\n\n1、新建一个postMapping的方法用来接受页面的添加POST请求\n\n```java\n/**\n * 员工添加\n */\n@PostMapping(value = \"/emp\")\npublic String addEmp(Employee employee){\n\n    employeeDao.save(employee);\n    //来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址\n    return \"redirect:/emps\";\n}\n```\n\n2、修改添加页面，添加name属性\n\n```html\n<form th:action=\"@{/emp}\" method=\"post\">\n    <!-- LastName -->\n    <div class=\"form-group\">\n        <label for=\"LastName\">LastName</label>\n        <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\">\n    </div>\n    <!-- Email -->\n    <div class=\"form-group\">\n        <label for=\"Email\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\">\n    </div>\n    <!--gender-->\n    <div class=\"form-group\">\n        <label >Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\">\n            <label class=\"form-check-label\" >男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\">\n            <label class=\"form-check-label\" >女</label>\n        </div>\n    </div>\n    <!-- department -->\n    <div class=\"form-group\">\n        <label >department</label>\n        <select class=\"form-control\"  name=\"department.id\">\n            <option th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"birthDate\">Birth</label>\n        <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添 加</button>\n</form>\n```\n\n1、部门对象问题？\n\n```html\n<select class=\"form-control\"  name=\"department.id\">\n```\n\n2、日期格式化？\n\n属性中添加 date-formate 默认是 / \n\n```java\n@Bean\n@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")\npublic Formatter<Date> dateFormatter() {\n   return new DateFormatter(this.mvcProperties.getDateFormat());\n}\n\n@Override\npublic MessageCodesResolver getMessageCodesResolver() {\n   if (this.mvcProperties.getMessageCodesResolverFormat() != null) {\n      DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();\n      resolver.setMessageCodeFormatter(\n            this.mvcProperties.getMessageCodesResolverFormat());\n      return resolver;\n   }\n   return null;\n}\n```\n\n```properties\nspring.mvc.date-format=yyyy-MM-dd\n```\n\n### 8、员工编辑（改）\n\n思路使用add页面，并且数据回显，然后区分添加，PUT请求\n\n#### 1、修改按钮\n\n在list.html的`编辑`按钮加上链接\n\n```html\n<td>\n    <a  href=\"#\" th:href=\"@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-primary\">编辑</a>\n    <button class=\"btn btn-sm btn-danger\">删除</button>\n</td>\n```\n\n#### 2、编写跳转页面\n\n跳转到员工编辑页面的Controller\n\n```java\n/**\n * 员工编辑页面\n */\n@GetMapping(value = \"/emp/{id}\")\npublic String toEditPage(@PathVariable(\"id\") Integer id ,Model model){\n    Employee emp = employeeDao.getEmpById(id);\n    Collection<Department> departments = departmentDao.getDepartments();\n    model.addAttribute(\"emp\",emp);\n    model.addAttribute(\"depts\",departments);\n    return \"emp/add\";\n}\n   \n```\n\n#### 3、对页面修改\n\n对add页面进行修改\n\n1）、添加回显\n\n2）、添加判断是否emp!=null（区分add or edit）\n\n3）、添加put请求 --两个input的hidden标签\n\n```html\n <form th:action=\"@{/emp}\" method=\"post\">\n        <!--发送put请求-->\n        <!--1.SpringMVC配置HiddenHttpMethodFilter\n            2.页面创建一个post表单\n            3.创建一个 input name_method 值就是我们请求的方式-->\n        <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\">\n\n        <input type=\"hidden\" name=\"id\" th:value=\"${emp.id}\" th:if=\"${emp!=null}\">\n        <!-- LastName -->\n        <div class=\"form-group\">\n            <label for=\"LastName\">LastName</label>\n            <input type=\"text\" class=\"form-control\" id=\"LastName\" name=\"lastName\" placeholder=\"LastName\" th:value=\"${emp!=null}?${emp.lastName}\">\n        </div>\n        <!-- Email -->\n        <div class=\"form-group\">\n            <label for=\"Email\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"Email\"  name=\"email\" placeholder=\"zhangsan@163.com\" th:value=\"${emp!=null}?${emp.email}\">\n        </div>\n        <!--gender-->\n        <div class=\"form-group\">\n            <label >Gender</label><br/>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender}==1\">\n                <label class=\"form-check-label\" >男</label>\n            </div>\n            <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender}==0\">\n                <label class=\"form-check-label\" >女</label>\n            </div>\n        </div>\n        <!-- department -->\n        <div class=\"form-group\">\n            <label >department</label>\n            <select class=\"form-control\"  name=\"department.id\" >\n                <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:each=\"dept:${depts}\" th:value=\"${dept.id}\" th:text=\"${dept.departmentName}\"></option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"birthDate\">Birth</label>\n            <input type=\"text\" class=\"form-control\" id=\"birthDate\" placeholder=\"2012-12-12\" name=\"birth\" th:value=\"${emp!=null}?${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?'修改':'添加'\">添 加</button>\n    </form>\n</main>\n```\n### 9、员工删除（删）\n\n#### 1、新建Contoller\n\n```java\n/**\n * 员工删除\n */\n@DeleteMapping(value = \"/emp/{id}\")\npublic String deleteEmp(@PathVariable(\"id\") Integer id){\n    employeeDao.deleteEmpById(id);\n    return \"redirect:/emps\";\n}\n```\n\n#### 2、修改删除标签\n\n```html\n<button th:attr=\"del_uri=@{/emp/}+${emp.id}\"  class=\"btn btn-sm btn-danger deleteBtn\">\n    删除\n</button>\n```\n\n#### 3、写Form表单\n\nform表单卸载外面，input 中 name=\"_method\" value=\"delete\" 模拟delete请求\n\n```html\n                </tbody>\n            </table>\n        </div>\n    </main>\n    <form id=\"deleteEmpForm\" method=\"post\">\n        <input type=\"hidden\" name=\"_method\" value=\"delete\">\n    </form>\n</div>\n```\n\n#### 4、写JS提交\n\n```javascript\n<script>\n    $(\".deleteBtn\").click(function () {\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\n        return false;\n    })\n</script>\n```\n\n> return false;禁用btn提交效果\n\n## 7、错误机制的处理\n\n### 1、默认的错误处理机制\n\n默认错误页面\n\n![20.error](E:\\工作文档\\SpringBoot\\images\\20.error.jpg)\n\n原理参照\n\nErrorMvcAutoConfiguration:错误处理的自动配置\n\n```\norg\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class\n\n```\n\n- DefaultErrorAttributes\n\n  帮我们在页面共享信息\n\n  ```java\n  @Override\n  public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n        boolean includeStackTrace) {\n     Map<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\n     errorAttributes.put(\"timestamp\", new Date());\n     addStatus(errorAttributes, requestAttributes);\n     addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n     addPath(errorAttributes, requestAttributes);\n     return errorAttributes;\n  }\n  ```\n\n- BasicErrorController\n\n  ```java\n  @Controller\n  @RequestMapping(\"${server.error.path:${error.path:/error}}\")\n  public class BasicErrorController extends AbstractErrorController {\n      //产生HTML数据\n      @RequestMapping(produces = \"text/html\")\n  \tpublic ModelAndView errorHtml(HttpServletRequest request,\n  \t\t\tHttpServletResponse response) {\n  \t\tHttpStatus status = getStatus(request);\n  \t\tMap<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\n  \t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n  \t\tresponse.setStatus(status.value());\n  \t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n  \t\treturn (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\n  \t}\n  \t//产生Json数据\n  \t@RequestMapping\n  \t@ResponseBody\n  \tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n  \t\tMap<String, Object> body = getErrorAttributes(request,\n  \t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n  \t\tHttpStatus status = getStatus(request);\n  \t\treturn new ResponseEntity<Map<String, Object>>(body, status);\n  \t}\n  ```\n\n- ErrorPageCustomizer\n\n  ```java\n  @Value(\"${error.path:/error}\")\n  private String path = \"/error\";//系统出现错误以后来到error请求进行处理，(web.xml)\n  ```\n\n- DefaultErrorViewResolver\n\n  ```java\n  @Override\n  public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n        Map<String, Object> model) {\n     ModelAndView modelAndView = resolve(String.valueOf(status), model);\n     if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n     }\n     return modelAndView;\n  }\n  \n  private ModelAndView resolve(String viewName, Map<String, Object> model) {\n      //默认SpringBoot可以找到一个页面？error/状态码\n     String errorViewName = \"error/\" + viewName;\n      //如果模板引擎可以解析地址，就返回模板引擎解析\n     TemplateAvailabilityProvider provider = this.templateAvailabilityProviders\n           .getProvider(errorViewName, this.applicationContext);\n     if (provider != null) {\n         //有模板引擎就返回到errorViewName指定的视图地址\n        return new ModelAndView(errorViewName, model);\n     }\n      //自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html\n     return resolveResource(errorViewName, model);\n  }\n  ```\n\n一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller\n\n1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图\n\n```java\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n      if (modelAndView != null) {\n         return modelAndView;\n      }\n   }\n   return null;\n}\n```\n\nl浏览器发送请求 accpt:text/html\n\n客户端请求：accept:/*\n\n### 2、如何定制错误响应\n\n​\t1）、如何定制错误的页面\n\n​\t\t1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html\n\n​\t\t有精确的404和4xx优先选择404\n\n​\t\t页面获得的数据\n\n​\t\t\ttimestamp：时间戳\n\n​\t\t\tstatus：状态码\n\n​\t\t\terror：错误提示\n\n​\t\t\texception：异常对象\n\n​\t\t\tmessage：异常信息\n\n​\t\t\terrors:JSR303有关\n\n​\t\t2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值\n\n​\t\t3.没有放模板引擎，没放静态，会显示默认的错误\n\n​\t2）、如何定义错误的数据\n\n\n\n举例子：新建4xx和5xx文件\n\n![21.error-static](E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg)\n\n\n\n```html\n<body >\n    <p>status: [[${status}]]</p>\n    <p>timestamp: [[${timestamp}]]</p>\n    <p>error: [[${error}]]</p>\n    <p>message: [[${message}]]</p>\n    <p>exception: [[${exception}]]</p>\n</body>\n```\n\n![22.4xxhtml](E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg)\n\n### 3、如何定制Json数据\n\n#### 1、仅发送json数据\n\n```java\npublic class UserNotExitsException extends  RuntimeException {\n    public UserNotExitsException(){\n        super(\"用户不存在\");\n    }\n}\n```\n\n```java\n/**\n * 异常处理器\n */\n@ControllerAdvice\npublic class MyExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExitsException.class)\n    public Map<String ,Object> handlerException(Exception e){\n        Map<String ,Object> map =new HashMap<>();\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        return map;\n    }\n}\n```\n\n无法自适应 都是返回的json数据\n\n#### 2、转发到error自适应处理\n\n```java\n@ExceptionHandler(UserNotExitsException.class)\npublic String handlerException(Exception e, HttpServletRequest request){\n    Map<String ,Object> map =new HashMap<>();\n    //传入自己的状态码\n    request.setAttribute(\"javax.servlet.error.status_code\", 432);\n    map.put(\"code\", \"user not exist\");\n    map.put(\"message\", e.getMessage());\n    //转发到error\n    return \"forward:/error\";\n}\n```\n\n程序默认获取状态码\n\n```java\nprotected HttpStatus getStatus(HttpServletRequest request) {\n   Integer statusCode = (Integer) request\n         .getAttribute(\"javax.servlet.error.status_code\");\n   if (statusCode == null) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n   try {\n      return HttpStatus.valueOf(statusCode);\n   }\n   catch (Exception ex) {\n      return HttpStatus.INTERNAL_SERVER_ERROR;\n   }\n```\n\n没有自己写的自定义异常数据\n\n#### 3、自适应和定制数据传入\n\nSpring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；\n\n1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；\n\n2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\n\n容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理\n\n```java\npublic class MyErrorAttributes extends DefaultErrorAttributes {\n    @Override\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(\"company\", \"wdjr\");\n        return map;\n    }\n}\n```\n\n异常处理：把map方法请求域中\n\n```java\n    @ExceptionHandler(UserNotExitsException.class)\n    public String handlerException(Exception e, HttpServletRequest request){\n        Map<String ,Object> map =new HashMap<>();\n        //传入自己的状态码\n        request.setAttribute(\"javax.servlet.error.status_code\", 432);\n        map.put(\"code\", \"user not exist\");\n        map.put(\"message\", e.getMessage());\n        request.setAttribute(\"ext\", map);\n        //转发到error\n        return \"forward:/error\";\n    }\n}\n```\n\n在上面的MyErrorAttributes类中加上\n\n```java\n//我们的异常处理器\nMap<String,Object> ext = (Map<String, Object>) requestAttributes.getAttribute(\"ext\", 0);\nmap.put(\"ext\", ext);\n```\n\n## 8、配置嵌入式servlet容器\n\n### 1、定制和修改Servlet容器\n\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\n\n![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)\n\n问题？\n\n1）、如何定制和修改Servlet容器；\n\n1、 修改Server相关的配置文件 application.properties\n\n```properties\n#通用的servlet容器配置\nserver.xxx\n#tomcat的配置\nserver.tomcat.xxxx\n```\n\n2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置\n\n```java\n@Bean\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\n    return new EmbeddedServletContainerCustomizer() {\n        //定制嵌入式Servlet的容器相关规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.setPort(8999);\n        }\n    };\n}\n```\n\n其实同理，都是实现EmbeddedServletContainerCustomizer\n\n### 2、注册Servlet三大组件\n\n三大组件 Servlet Filter Listener\n\n由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml\n\n注册三大组件\n\n#### ServletRegistrationBean\n\n```java\n@Bean\npublic ServletRegistrationBean myServlet(){\n    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new MyServlet(),\"/servlet\");\n    return servletRegistrationBean;\n}\n```\n\nMyServlet\n\n```java\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().write(\"Hello Servlet\");\n    }\n}\n```\n\n#### FilterRegistrationBean\n\n```java\n@Bean\npublic FilterRegistrationBean myFilter(){\n    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n    filterRegistrationBean.setFilter(new MyFilter());\n    filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\n    return filterRegistrationBean;\n}\n```\n\nMyFilter\n\n```java\npublic class MyFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"MyFilter process\");\n        chain.doFilter(request, response);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n#### ServletListenerRegistrationBean\n\n```java\n@Bean\npublic ServletListenerRegistrationBean myListener(){\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\n    return registrationBean;\n}\n```\n\nMyListener\n\n```java\npublic class MyListener implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\".........web应用启动..........\");\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        System.out.println(\".........web应用销毁..........\");\n    }\n}\n```\n\n\n\nSpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;\n\n```java\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n   public ServletRegistrationBean dispatcherServletRegistration(\n         DispatcherServlet dispatcherServlet) {\n      ServletRegistrationBean registration = new ServletRegistrationBean(\n            dispatcherServlet, this.serverProperties.getServletMapping());\n       //默认拦截 /所有请求 包括静态资源 不包括jsp\n       //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n      registration.setLoadOnStartup(\n            this.webMvcProperties.getServlet().getLoadOnStartup());\n      if (this.multipartConfig != null) {\n         registration.setMultipartConfig(this.multipartConfig);\n      }\n      return registration;\n   }\n\n}\n```\n\n### 3、切换其他的Servlet容器\n\n在ServerProperties中\n\n```java\nprivate final Tomcat tomcat = new Tomcat();\n\nprivate final Jetty jetty = new Jetty();\n\nprivate final Undertow undertow = new Undertow();\n```\n\ntomcat(默认支持)\n\njetty（长连接）\n\nundertow（多并发）\n\n切换容器 仅仅需要修改pom文件的依赖就可以\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jetty</artifactId>\n        </dependency>\n<!--        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-undertow</artifactId>\n        </dependency>-->\n```\n\n### 4、嵌入式Servlet容器自动配置原理\n\n```java\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration {\n    @Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })//当前是否引入tomcat依赖\n    //判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n```\n\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\n\n```java\npublic interface EmbeddedServletContainerFactory {\n\t//获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n}\n```\n\n继承关系\n\n![24.EmdServletFactory](E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg)\n\n2）、EmbeddedServletContainer:(嵌入式的Servlet容器)\n\n![25.EmdServletContainer](E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg)\n\n3）、TomcatEmbeddedServletContainerFactory为例 \n\n```java\n@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) {\n   Tomcat tomcat = new Tomcat();\n    //配置tomcat的基本环节\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\n         : createTempDir(\"tomcat\"));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n    //将配置好的tomcat传入进去；并且启动tomcat容器\n   return getTomcatEmbeddedServletContainer(tomcat);\n}\n```\n\n4）、嵌入式配置修改\n\n```\nServerProperties、EmbeddedServletContainerCustomizer\n```\n\nEmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？\n\n怎么修改？\n\n\n\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\n\n```java\n@Override\npublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n      BeanDefinitionRegistry registry) {\n   if (this.beanFactory == null) {\n      return;\n   }\n   registerSyntheticBeanIfMissing(registry,\n         \"embeddedServletContainerCustomizerBeanPostProcessor\",\n         EmbeddedServletContainerCustomizerBeanPostProcessor.class);\n   registerSyntheticBeanIfMissing(registry,\n         \"errorPageRegistrarBeanPostProcessor\",\n         ErrorPageRegistrarBeanPostProcessor.class);\n}\n```\n\n```java\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException {\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   }\n   return bean;\n}\n\nprivate void postProcessBeforeInitialization(\n    ConfigurableEmbeddedServletContainer bean) {\n    //获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\n        customizer.customize(bean);\n    }\n}\n\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n    if (this.customizers == null) {\n        // Look up does not include the parent context\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n            this.beanFactory\n            //从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer\n            //定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers = Collections.unmodifiableList(this.customizers);\n    }\n    return this.customizers;\n}\n```\n\nServerProperties也是EmbeddedServletContainerCustomizer定制器\n\n步骤：\n\n1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat\n\nEmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\n\n2）、容器中某个组件要创建对象就要通过后置处理器；\n\n```java\nEmbeddedServletContainerCustomizerBeanPostProcessor\n```\n\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\n\n3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法\n\n### 5、嵌入式Servlet容器启动原理\n\n什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;\n\n获取嵌入式的容器工厂\n\n1）、SpringBoot应用启动Run方法\n\n2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext\n\n```JAVA\nif (contextClass == null) {\n   try {\n      contextClass = Class.forName(this.webEnvironment\n            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);\n   }\n```\n\n3）、refresh(context);刷新创建好的IOC容器\n\n```java\ntry {\n   // Allows post-processing of the bean factory in context subclasses.\n   postProcessBeanFactory(beanFactory);\n\n   // Invoke factory processors registered as beans in the context.\n   invokeBeanFactoryPostProcessors(beanFactory);\n\n   // Register bean processors that intercept bean creation.\n   registerBeanPostProcessors(beanFactory);\n\n   // Initialize message source for this context.\n   initMessageSource();\n\n   // Initialize event multicaster for this context.\n   initApplicationEventMulticaster();\n\n   // Initialize other special beans in specific context subclasses.\n   onRefresh();\n\n   // Check for listener beans and register them.\n   registerListeners();\n\n   // Instantiate all remaining (non-lazy-init) singletons.\n   finishBeanFactoryInitialization(beanFactory);\n\n   // Last step: publish corresponding event.\n   finishRefresh();\n}\n```\n\n4）、 onRefresh();web的ioc容器重写了onRefresh方法\n\n5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer\n\n6）、获取嵌入式的Servlet容器工厂；\n\n```java\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\n```\n\n从ioc容器中获取EmbeddedServletContainerFactory组件；\n\n```java\n@Bean\npublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\nreturn new TomcatEmbeddedServletContainerFactory();\n}\n```\nTomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；\n\n7）、使用容器工厂获取嵌入式的Servlet容器\n\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\n\n先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来\n\nioc启动创建Servlet容器\n\n## 9、使用外置的Servlet容器\n\n嵌入式的Servlet容器：应用达成jar包\n\n​\t优点：简单、便携\n\n​\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）\n\n外置的Servlet容器：外面安装Tomcat是以war包的方式打包。\n\n### 1、IDEA操作外部Servlet\n\n1、创建程序为war程序\n\n![26.tomcat1](E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg)\n\n2、选择版本\n\n![27.tomcat2](E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg)\n\n3、添加tomcat\n\n![28.tomcat3](E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg)\n\n4、选择tomcat\n\n![30.tomcat4](E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg)\n\n5、选择本地的Tomcat\n\n![31.tomcat5](E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg)\n\n6、配置tomcat路径\n\n![32.tomcat6](E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg)\n\n7、添加服务器\n\n![33.tomcat7](E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg)\n\n8、添加exploded的war配置，应用OK tomcat配置完成\n\n![34.tomcat8](E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg)\n\n二、配置webapp文件夹\n\n1、点击配置\n\n![35.tomcat9](E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg)\n\n2、添加webapp目录\n\n![36.tomcat10](E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg)\n\n3、默认配置就可以\n\n![37.tomcat11](E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg)\n\n4、配置web.xml文件\n\n![38.tomcat12](E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg)\n\n5、文档目录结构\n\n![39.tomcat13](E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg)\n\n### 2、运行一个示例\n\n1、项目目录\n\n![40.demo1](E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg)\n\n2、配置文件写视图解析前后缀\n\n```properties\nspring.mvc.view.prefix=/WEB-INF/jsp/\n\nspring.mvc.view.suffix=.jsp\n```\n\n3、HelloController\n\n```java\n@Controller\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        model.addAttribute(\"message\",\"这是Controller传过来的message\");\n        return \"success\";\n    }\n}\n```\n\n4、success.jsp\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Success</title>\n</head>\n<body>\n<h1>Success</h1>\nmessage:${message}\n</body>\n</html>\n```\n\n5、运行结果\n\n![41.demo2](E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg)\n\n步骤\n\n1、必须创建一个war项目；\n\n2、将嵌入式的Tomcat指定为provided\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\n3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法\n\n```java\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        //传入SpringBoot的主程序，\n        return application.sources(SpringBoot04WebJspApplication.class);\n    }\n\n}\n```\n\n4、启动服务器就可以；\n\n### 3、原理\n\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；\n\nwar包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器\n\nservlet3.0规范\n\n 8.2.4 共享库和运行时插件\n\n规则：\n\n1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例\n\n2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名\n\n3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类\n\n\n\n流程：\n\n1、启动Tomcat服务器\n\n2、spring web模块里有这个文件\n\n![42.servletContainerInit](E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg)\n\n```java\norg.springframework.web.SpringServletContainerInitializer\n```\n\n3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set<Class<?>>;为这些感兴趣类创建实例\n\n4、每个创建好的WebApplicationInitializer调用自己的onStratup\n\n5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\n\n6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext\n\n```java\nprotected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {\n    SpringApplicationBuilder builder = this.createSpringApplicationBuilder();\n    //环境构建器\n    StandardServletEnvironment environment = new StandardServletEnvironment();\n    environment.initPropertySources(servletContext, (ServletConfig)null);\n    builder.environment(environment);\n    builder.main(this.getClass());\n    ApplicationContext parent = this.getExistingRootWebApplicationContext(servletContext);\n    if (parent != null) {\n        this.logger.info(\"Root context already created (using as parent).\");\n        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)null);\n        builder.initializers(new ApplicationContextInitializer[]{new ParentContextApplicationContextInitializer(parent)});\n    }\n\t\n    builder.initializers(new ApplicationContextInitializer[]{new ServletContextApplicationContextInitializer(servletContext)});\n    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    //调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来\n    builder = this.configure(builder);\n    //创建一个spring应用\n    SpringApplication application = builder.build();\n    if (application.getSources().isEmpty() && AnnotationUtils.findAnnotation(this.getClass(), Configuration.class) != null) {\n        application.getSources().add(this.getClass());\n    }\n\n    Assert.state(!application.getSources().isEmpty(), \"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation\");\n    if (this.registerErrorPageFilter) {\n        application.getSources().add(ErrorPageFilterConfiguration.class);\n    }\n\t//最后启动Spring容器\n    return this.run(application);\n}\n```\n\n7、Spring的应用就启动完了并且创建IOC容器；\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   listeners.starting();\n   try {\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner = printBanner(environment);\n      context = createApplicationContext();\n      analyzers = new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n# 五、Docker\n\n## 1、简介\n\nDocker是一个开源的应用容器引擎\n\n将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；\n\n## 2、Docker的核心概念\n\ndocker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）\n\ndocker客户端（Client）:操作docker主机\n\ndocker仓库（Registry）：用来保存打包好的软件镜像\n\ndocker镜像（Image）:软件打好包的镜像，放到docker的仓库中\n\ndocker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）\n\ndocker的步骤：\n\n​\t1、安装Docker\n\n​\t2、去Docker仓库找到这个软件对应的镜像；\n\n​\t3、使用Docker运行的这个镜像，镜像就会生成一个容器\n\n​\t4、对容器的启动停止，就是对软件的启动和停止\n\n## 3、安装Docker\n\n### 1、安装Linux\n\n[安装vxbox并且安装ubuntu](http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1)\n\n### 2、在linux上安装docker\n\n```shell\n1、查看centos版本\n# uname -r\n3.10.0-693.el7.x86_64\n要求：大于3.10\n如果小于的话升级*（选做）\n# yum update\n2、安装docker\n# yum install docker\n3、启动docker\n# systemctl start docker\n# docker -v\n4、开机启动docker\n# systemctl enable docker\n5、停止docker\n# systemctl stop docker\n```\n\n## 4、docker的常用操作\n\n### 1、镜像操作\n\n1、搜索\n\n```shell\ndocker search mysql\n```\n\n默认去docker hub网站查找![44.docker1](E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg)\n\n2、拉取\n\n```shell\n默认最新版本\n# docekr pull mysql\n安装指定版本\n# docker pull mysql:5.5\n```\n\n3、查看\n\n```shell\ndocker images\n```\n\n4、删除\n\n```\ndocker rmi imageid\n```\n\n### 2、容器操作\n\n软件的镜像（qq.exe） -- 运行镜像 -- 产生一个容器（正在运行的软件）\n\n```shell\n1、搜索镜像\n# docker search tomcat\n2、拉取镜像\n# docker pull tomcat\n3、根据镜像启动容器\n[root@lion ~]# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB\n[root@lion ~]# docker run --name mytomcat -d tomcat:latest\n2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249\n4、查看那个进程正在进行\n[root@lion ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat\n5、停止运行中容器\n[root@lion ~]# docker stop 2f0348702f5f\n2f0348702f5f\n6、查看所有容器\n[root@lion ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES\n2f0348702f5f        tomcat:latest       \"catalina.sh run\"   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat\n7、启动容器\n[root@lion ~]# docker start 2f0348702f5f\n8、删除docker容器\n[root@lion ~]# docker rm 2f0348702f5f\n2f0348702f5f\n9、端口映射\n[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat\n692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29\n虚拟机:8888\n容器的:8080\n-d:后台运行\n-p:主机端口映射到容器端口\n浏览器：192.168.179.129:8888\n10、docker的日志\n[root@lion ~]# docker logs 692c408c2201\n11、多个启动\n[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat\n浏览器：192.168.179.129:9000\n```\n\n更多命令参考docker镜像文档\n\n### 3、安装Mysql\n\n```shell\ndocker pull mysql\ndocker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql\n```\n\n# 六、数据访问\n\n## 1、整合JDBC数据源\n\n1、新建项目 spring-boot-06-data-jdbc\n\n- WEB\n- Mysql\n- JDBC\n- SpringBoot1.5\n\n2、编写配置文件appliction.yml\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n3、编写测试类测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBoot06DataJdbcApplicationTests {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Test\n    public void contextLoads() throws SQLException {\n        System.out.println(dataSource.getClass());\n\n        Connection connection = dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n    }\n\n}\n```\n\n4、测试结果\n\n```\nclass org.apache.tomcat.jdbc.pool.DataSource\nProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]\n```\n\n数据源相关配置都在DataSourceProperties属性里\n\n自动配置原理\n\nE:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc\n\n### 1、DataSource\n\n参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源\n\n### 2、SpringBoot默认支持\n\n```\nTomcat数据源\nHikariDataSource\ndbcp.BasicDataSource\ndbcp2.BasicDataSource\n```\n\n### 3、自定义数据源\n\n```java\n */\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name = \"spring.datasource.type\")\nstatic class Generic {\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) {\n       //使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源\n      return properties.initializeDataSourceBuilder().build();\n   }\n\n}\n```\n\n### 4、运行sql建表\n\n在DataSourceAutoConfiguration中**DataSourceInitializer**类\n\n监听器\n\n作用：\n\n1）、postConstruct -》runSchemaScript 运行建表sql文件\n\n2）、runDataScript运行插入数据的sql语句；\n\n默认只需要将文件命名为：\n\n```sql\nschema-*.sql data-*.sql\n默认规则：schema.sql ,schema-all.sql;\n```\n\n**举个栗子**\n\n创建department表\n\n1、department.sql\n\n```sql\n/*\nNavicat MySQL Data Transfer\n\nSource Server         : 192.168.179.131\nSource Server Version : 50719\nSource Host           : 192.168.179.131:3306\nSource Database       : jdbc\n\nTarget Server Type    : MYSQL\nTarget Server Version : 50719\nFile Encoding         : 65001\n\nDate: 2018-05-14 14:28:52\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- Table structure for department\n-- ----------------------------\nDROP TABLE IF EXISTS `department`;\nCREATE TABLE `department` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `departmentName` varchar(255) DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```\n\n2、将department.sql命名为schema-all.sql\n\n![45.schema-all](E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg)\n\n3、运行测试类\n\n自定义sql的文件名，department.sql在配置文件中\n\n```yaml\nschema:\n  - classpath:department.sql\n```\n\n-----\n\n### 5、操作JdbcTemplate\n\n**FBI warning**:将department.sql删除或者改名，因为运行文件会将表中数据清除\n\n1、新建一个Controller\n\n```java\n@Controller\npublic class HelloController {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @ResponseBody\n    @GetMapping(\"/hello\")\n    public Map<String ,Object> hello(){\n\n        List<Map<String, Object>> list = jdbcTemplate.queryForList(\"select * from department\");\n        return list.get(0);\n    }\n}\n```\n\n2、表中添加数据\n\n![46.department](E:\\工作文档\\SpringBoot\\images\\46.department.jpg)\n\n\n\n3、访问请求查询数据\n\n![47.hello](E:\\工作文档\\SpringBoot\\images\\47.hello.jpg)\n\n\n\n## 2、自定义数据源\n\n1、导入Druid的依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n\n```\n\n2、修改配置文件\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n已经替换了原来的tomcat数据源\n\n3、配置Druid数据源配置\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: Welcome_1\n    url: jdbc:mysql://192.168.179.131:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\t# 初始化大小，最小，最大  \n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    # 配置获取连接等待超时的时间  \n    maxWait: 60000\n    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 \n    timeBetweenEvictionRunsMillis: 60000\n    # 配置一个连接在池中最小生存的时间，单位是毫秒 \n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    # 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    userGlobalDataSourceStat: true\n    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录  \n    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500\n#    schema:\n#      - classpath:department.sql\nserver:\n  port: 9000\n```\n\n4、Druid配置监控\n\n```java\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n        return  new DruidDataSource();\n    }\n\n    //配置Druid的监控\n    //1、配置一个管理后台\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(),\"/druid/*\");\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"loginUsername\", \"admin\");\n        initParams.put(\"loginPassword\", \"123456\");\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n    //2、配置监控的filter\n    @Bean\n    public FilterRegistrationBean webstatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams =new HashMap<>();\n        initParams.put(\"exclusions\", \"*.js,*.css,/druid/*\");\n        bean.setInitParameters(initParams);\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n        return bean;\n    }\n\n}\n```\n\n5、运行测试，访问 localhost:9000/druid\n\n![48.druid](E:\\工作文档\\SpringBoot\\images\\48.druid.jpg)\n\n输入刚才调好的用户名密码即可访问\n\n## 3、整合Mybatis\n\n1、新建工程，SpringBoot1.5+web+JDBC+Mysql\n\n导入依赖\n\n```xml\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.2</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.9</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n\n2、导入配置文件中关于Druid的配置\n\n​\t2.1、导入依赖\n\n​\t2.2、配置文件application.yml（指定用户名密码...配置Druid的配置参数，修改sql文件加载的默认名）\n\n​\t2.3、将Druid组件加入到容器中（监控）重点\n\n​\t具体同上\n\n3、创建数据表department和employee表\n\n​\t3.1、根据sql文件，新建两张表\n\n​\t3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）\n\n```yaml\nspring:\n  datasource:\n    schema:\n      - classpath:sql/department.sql\n      - classpath:sql/employeee.sql\n```\n\n​\t3.3、运行程序检查数据库是否创建成功\n\n4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） \n\n在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类\n\n```yaml\nmybatis:\n  configuration:\n    map-underscore-to-camel-case: true\n```\n\n```java\n//类名冲突所以全类名\n@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig {\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer(){\n\n        return new ConfigurationCustomizer() {\n            @Override\n            public void customize(Configuration configuration) {\n                configuration.setMapUnderscoreToCamelCase(true);\n            }\n        };\n    }\n}\n```\n\n### 注解方式\n\n5、新建mapper\n\n```yaml\n//指定是一个mapper\n@Mapper\npublic interface DepartmentMapper {\n\n    @Insert(\"insert into department(dept_name) value(#{deptName})\")\n    public int insertDept(Department department);\n\n    @Delete(\"delete from department where id=#{id}\")\n    public int deleteDeptById(Integer id);\n\n    @Update(\"update department set dept_Name=#{deptName} where id=#{id}\")\n    public int updateDept(Department department);\n\n    @Select(\"select * from department where id=#{id}\")\n    public Department getDeptById(Integer id);\n\n}\n```\n\n6、编写controller测试\n\n```java\n@RestController\npublic class DeptController {\n\n    @Autowired\n    DepartmentMapper departmentMapper;\n\n    @RequestMapping(\"/getDept/{id}\")\n    public Department getDepartment(@PathVariable(\"id\") Integer id){\n        return departmentMapper.getDeptById(id);\n    }\n\n    @RequestMapping(\"/delDept/{id}\")\n    public int delDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.deleteDeptById(id);\n    }\n\n    @RequestMapping(\"/update/{id}\")\n    public int updateDept(@PathVariable(\"id\") Integer id){\n        return departmentMapper.updateDept(new Department(id, \"开发部\"));\n    }\n\n    @GetMapping(\"/insert\")\n    public int insertDept(Department department){\n        return departmentMapper.insertDept(department);\n    }\n}\n```\n\n问题：\n\nmapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文\n\n件夹下的mapper\n\n```java\n//主配置类或者mybatis配置类\n@MapperScan(value = \"com.wdjr.springboot.mapper\")\n```\n\n### 配置文件方式\n\n1、新建文件\n\n![50.mybatisxml](E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg)\n\n2、新建mybatis的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n\n3、新建Employee的接口方法\n\n```java\npublic interface EmployeeMapper {\n\n    public Employee getEmpById(Integer id);\n\n    public void insetEmp(Employee employee);\n}\n```\n\n4、新建Employee的mapper.xml的映射文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.wdjr.springboot.mapper.EmployeeMapper\">\n    <select id=\"getEmpById\" resultType=\"com.wdjr.springboot.bean.Employee\">\n      select * from employee where id=#{id}\n   </select>\n\n    <insert id=\"insetEmp\">\n        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})\n    </insert>\n</mapper>\n```\n\n5、修改application.yml配置文件\n\n```yaml\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml\n  mapper-locations: classpath:mybatis/mapper/*.xml\n```\n\n6、新建一个Controller访问方法\n\n```java\n@RestController\npublic class EmployeeController {\n    @Autowired\n    EmployeeMapper employeeMapper;\n\n    @RequestMapping(\"/getEmp/{id}\")\n    public Employee getEmp(@PathVariable(\"id\") Integer id){\n        return employeeMapper.getEmpById(id);\n    }\n\n    @GetMapping(\"/insertEmp\")\n    public Employee insertEmp(Employee employee){\n        employeeMapper.insetEmp(employee);\n        return employee;\n    }\n}\n```\n## 4、JPA数据访问\n\n新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC\n\n目录结构\n\n![51.JPA](E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg)\n\n\n\n1、新建一个实体类User\n\n```java\n//使用JPA注解配置映射关系\n@Entity//告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name=\"tbl_user\") //@Table来指定和那个数据表对应，如果省略默认表明就是user;\n\npublic class User {\n\n    @Id //这是一个主键\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增组件\n    private Integer id ;\n\n    @Column(name=\"last_name\",length = 50) //这是和数据表对应的一个列\n    private String lastName;\n    @Column//省略默认列名就是属性名\n    private String email;\n    @Column\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n2、新建一个UserRepository来继承jpa的绝大多数功能\n\n```java\n//继承jpaRepository\npublic interface UserRepository extends JpaRepository<User,Integer> {\n\n}\n```\n\n3、编写配置文件application.yml\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://192.168.179.131/jpa\n    username: root\n    password: Welcome_1\n    driver-class-name: com.mysql.jdbc.Driver\n  jpa:\n    hibernate:\n    #更新或创建\n      ddl-auto: update\n    show-sql: true\n```\n\n4、编写Controller测试\n\n```java\n@RestController\npublic class UserController {\n    @Autowired\n    UserRepository userRepository;\n\n    @GetMapping(\"/user/{id}\")\n    public User getUser(@PathVariable(\"id\") Integer id){\n        User user = userRepository.findOne(id);\n        return user;\n    }\n\n    @GetMapping(\"/insert\")\n    public User insertUser(User user){\n        User user1 = userRepository.save(user);\n        return  user1;\n    }\n}\n```\n\n# 七、启动配置原理\n\n几个重要的事件回调机制\n\n加载配置文件META-INF/spring.factories\n\n​\tApplicationContextInitializer\n\n​\tSpringApplicationRunListener\n\nioc容器中\n\n​\tApplicationRunner\n\n​\tCommandLineRunner\n\n启动流程\n\n## 1、创建SpringApplicaiotn对象   \n\n```java\nprivate void initialize(Object[] sources) {\n    //保存主配置类\n   if (sources != null && sources.length > 0) {\n      this.sources.addAll(Arrays.asList(sources));\n   }\n    //判断当前是否是个web应用\n   this.webEnvironment = deduceWebEnvironment();\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来\n   setInitializers((Collection) getSpringFactoriesInstances(\n         ApplicationContextInitializer.class));\n    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来\n   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    //决定哪一个是主程序\n   this.mainApplicationClass = deduceMainApplicationClass();\n}\n```\n\nApplicationInitializer\n\n![52.applicationCotextInitializer](E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg)\n\n ApplicationListener\n\n![53.Listener](E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg)\n\n## 2、运行Run方法\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n    //获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n    //回调所有的SpringApplicationRunListener.starting()方法\n   listeners.starting();\n   try {\n       //封装命令行参数\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n       //准备环境\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n       //创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成\n       //打印SpringBoot图标\n      Banner printedBanner = printBanner(environment);\n       //创建ApplicationContext，决定创建web的ioc容器还是普通的ioc\n      context = createApplicationContext();\n       //异常分析\n      analyzers = new FailureAnalyzers(context);\n       //重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法\n       \n       //回调所有的SpringApplicationRunListener的contextPrepare()\n       //告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       //重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat\n       //扫描 创建加载所有组件的地方\n      refreshContext(context);\n       //从ioc中获取所有的ApplicationRunner和CommandLineRunner\n       //ApplicationRunner先回调\n      afterRefresh(context, applicationArguments);\n       //所有的SpringApplicationRunListener回调finished方法\n      listeners.finished(context, null);\n       //保存应用状态\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n       //整个springboot启动完成以后返回启动的ioc容器\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n## 3、事件监听机制\n\n新建listener监听\n\n文件目录\n\n![54.listener2](E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg)\n\n\n\n1、HelloApplicationContextInitializer\n\n```java\n//泛型监听ioc容器\npublic class HelloApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        System.out.println(\"ApplicationContextInitializer...跑起来了.....\"+applicationContext);\n    }\n}\n```\n\n2、HelloSpringApplicationRunListener\n\n加构造器\n\n```java\npublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener {\n\n    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){\n\n    }\n\n    @Override\n    public void starting() {\n        System.out.println(\"监听容器开始......\");\n    }\n\n    @Override\n    public void environmentPrepared(ConfigurableEnvironment environment) {\n        System.out.println(\"环境准备好了......\"+environment.getSystemProperties().get(\"os.name\"));\n    }\n\n    @Override\n    public void contextPrepared(ConfigurableApplicationContext context) {\n        System.out.println(\"ioc容器准备好了......\");\n    }\n\n    @Override\n    public void contextLoaded(ConfigurableApplicationContext context) {\n        System.out.println(\"容器环境已经加载完成......\");\n    }\n\n    @Override\n    public void finished(ConfigurableApplicationContext context, Throwable exception) {\n        System.out.println(\"全部加载完成......\");\n    }\n}\n```\n\n3、HelloApplicationRunner\n\n```java\n@Component\npublic class HelloApplicationRunner implements ApplicationRunner {\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        System.out.println(\"ApplicationRunner.....run....\");\n    }\n}\n```\n\n4、HelloCommandLineRunner\n\n```java\n@Component\npublic class HelloCommandLineRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"CommandLineRunner......run.....\"+Arrays.asList(args));\n    }\n}\n```\n\n事件运行方法\n\nHelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入\n\n```\n# Initializers\norg.springframework.context.ApplicationContextInitializer=\\\ncom.wdjr.springboot.listener.HelloApplicationContextInitializer\n\norg.springframework.boot.SpringApplicationRunListener=\\\ncom.wdjr.springboot.listener.HelloSpringApplicationRunListener\n```\n\nHelloApplicationRunner和HelloCommandLineRunner ioc加入\n\n@Component\n\n# 八、SpringBoot的自定义starter\n\nstarter：场景启动器\n\n1、场景需要使用什么依赖？\n\n2、如何编写自动配置\n\n```java\n@Configuration //指定这个类是一个配置类\n@ConditionalOnXXX //在指定条件下成立的情况下自动配置类生效\n@AutoConfigureAfter //指定自动配置类的顺序\n@Bean //给容器中添加组件\n\n@ConfigurationProperties //结合相关xxxProperties类来绑定相关的配置\n@EnableConfigurationProperties //让xxxProperties生效加到容器中\n\n自动配置类要能加载\n将需要启动就加载的自动配置类，配置在META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\n```\n\n3、模式\n\n启动器空的jar只需要做依赖管理导入；\n\n专门写一个自动配置模块；\n\n启动器依赖自动配置，别人只需要引入starter\n\nxxx-spring-boot-starter\n\n### 新建一个starter\n\n> 绕的你怀疑人生\n\n#### 1、新建一个空项目工程\n\n![56.starter01](E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg)\n\n2、项目命名\n\n![57.starter02](E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg)\n\n\n\n3、导入module\n\n![58.starter03](E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg)\n\n4、新建一个Maven工程\n\n![59.starter04](E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg)\n\n5、项目命名\n\n![60.starter05](E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg)\n\n\n\n![61.starter06](E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg)\n\n6、在新建一个autoconfiguration类的spring\n\n![62.starter07](E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg)\n\n7、项目命名\n\n![63.starter08](E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg)\n\n8、无需导入依赖\n\n![64.starter09](E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg)\n\n9、next\n\n![65.starter10](E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg)\n\n最后配置完成\n\n#### 2、编写starter\n\n##### autoconfigurer\n\n对**lxy-spring-boot-starter-autoconfigurer**进行删减\n\n目录\n\n![66.starter-build01](E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg)\n\n2、pom文件修改\n\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n    </dependencies>\n\n\n</project>\n```\n\n3、编写相关的类\n\n![67.starter-build02](E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg)\n\n4、HelloProperties\n\n```java\npackage com.lxy.starter;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"lxy.hello\")\npublic class HelloProperties {\n    private String prefix;\n    private String suffix;\n\n    public String getPrefix() {\n        return prefix;\n    }\n\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    public String getSuffix() {\n        return suffix;\n    }\n\n    public void setSuffix(String suffix) {\n        this.suffix = suffix;\n    }\n}\n```\n\n5、HelloService\n\n```java\npackage com.lxy.starter;\n\npublic class HelloService {\n\n    HelloProperties helloProperties;\n\n    public HelloProperties getHelloProperties() {\n        return helloProperties;\n    }\n\n    public void setHelloProperties(HelloProperties helloProperties) {\n        this.helloProperties = helloProperties;\n    }\n\n    public String sayHello(String name){\n        return helloProperties.getPrefix()+name+helloProperties.getSuffix();\n    }\n}\n```\n\n6、HelloServiceAutoConfiguration\n\n\n\n```java\npackage com.lxy.starter;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConditionalOnWebApplication\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloServiceAutoConfiguration {\n\n    @Autowired\n    HelloProperties helloProperties;\n    @Bean\n    public HelloService helloService(){\n        HelloService service = new HelloService();\n        service.setHelloProperties(helloProperties);\n        return service;\n    }\n\n}\n```\n\n7、配置文件\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.lxy.starter.HelloServiceAutoConfiguration\n```\n\n8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter-autoconfigurer</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </dependency>\n</dependencies>\n```\n\n9、install生成\n\n![68.starter-build03](E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg)\n\n#### 3、测试\n\n新建一个springboot 1.5+web\n\n1、引入starter\n\n```xml\n    <dependency>\n        <groupId>com.lxy.starter</groupId>\n        <artifactId>lxy-spring-boot-starter</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n</dependencies>\n```\n\n2、新建一个Controller用来测试\n\n```java\n@RestController\npublic class HelloController {\n\n    @Autowired\n    HelloService helloService;\n\n    @GetMapping\n    public  String hello(){\n        return helloService.sayHello(\"test\");\n    }\n}\n```\n\n3、编写配置文件制定前缀和后缀名\n\n```properties\nlxy.hello.prefix=Starter-\nlxy.hello.suffix=-Success\n```\n\n4、运行访问http://localhost:8080/hello\n\n![70.starter-build05](E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg)\n\n成功爽啊","slug":"SpringBoot入门简介","published":1,"date":"2020-12-25T11:50:17.655Z","updated":"2021-05-11T23:19:22.608Z","_id":"ckoknongw0001wp0m9aou5q61","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、Spring-Boot入门\"><a href=\"#一、Spring-Boot入门\" class=\"headerlink\" title=\"一、Spring Boot入门\"></a>一、Spring Boot入门</h1><h2 id=\"1、Spring-Boot简介\"><a href=\"#1、Spring-Boot简介\" class=\"headerlink\" title=\"1、Spring Boot简介\"></a>1、Spring Boot简介</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务，可以通过HTTP的方式进行互通</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元</p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p>环境约束</p>\n<ul>\n<li>jdk1.8</li>\n<li>maven 3.x :maven3.3以上</li>\n<li>IDEA2017</li>\n<li>SpringBoot 1.5.9RELEASE</li>\n</ul>\n<h3 id=\"1、MAVEN设置\"><a href=\"#1、MAVEN设置\" class=\"headerlink\" title=\"1、MAVEN设置\"></a>1、MAVEN设置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置JDK版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk18<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span>     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，</span></span><br><span class=\"line\"><span class=\"comment\">        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。</span></span><br><span class=\"line\"><span class=\"comment\">        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;id&gt;spring-libs-milestone&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;name&gt;Spring Milestones&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/mirror&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 备选镜像，也是可以通过 url 去查找确定一下，</span></span><br><span class=\"line\"><span class=\"comment\">        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        typor<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://central.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件</p>\n<p>​    快捷键：</p>\n<p>​    Ctrl+D 复制一行</p>\n<p>​    Ctrl+Y 删除一行</p>\n<p>​    Ctrl+P 参数提示</p>\n<p>​    Ctrl+Alt+V 自动补齐方法</p>\n<p>​    Ctrl+N 查找类方法</p>\n<p>​    Alt+Ins 构造器、getter/setter toString</p>\n<p>​    Ctrl+O 重载方法提示</p>\n<p>​    Alt+Enter 提示导入类etc</p>\n<p>​    Shift+F6 :文件重命名</p>\n<h2 id=\"4、Spring-Boot的Hello-World\"><a href=\"#4、Spring-Boot的Hello-World\" class=\"headerlink\" title=\"4、Spring Boot的Hello World\"></a>4、Spring Boot的Hello World</h2><h3 id=\"1、创建一个Maven工程\"><a href=\"#1、创建一个Maven工程\" class=\"headerlink\" title=\"1、创建一个Maven工程\"></a>1、创建一个Maven工程</h3><h3 id=\"2、导入Spring-Boot的相关依赖\"><a href=\"#2、导入Spring-Boot的相关依赖\" class=\"headerlink\" title=\"2、导入Spring Boot的相关依赖\"></a>2、导入Spring Boot的相关依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写个主程序\"><a href=\"#3、编写个主程序\" class=\"headerlink\" title=\"3、编写个主程序\"></a>3、编写个主程序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写相应的Controller和Service\"><a href=\"#4、编写相应的Controller和Service\" class=\"headerlink\" title=\"4、编写相应的Controller和Service\"></a>4、编写相应的Controller和Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String  <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><p>访问 localhost:8080/hello</p>\n<h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><p>在pom.xml文件中，导入build插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、HelloWorld深度理解\"><a href=\"#5、HelloWorld深度理解\" class=\"headerlink\" title=\"5、HelloWorld深度理解\"></a>5、HelloWorld深度理解</h2><h3 id=\"1-POM-xml文件\"><a href=\"#1-POM-xml文件\" class=\"headerlink\" title=\"1.POM.xml文件\"></a>1.POM.xml文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个父项目<strong>spring-boot-starter-parent</strong>又依赖一个父项目</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面有个属性，定义了对应的版本号</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activemq.version</span>&gt;</span>5.15.3<span class=\"tag\">&lt;/<span class=\"name\">activemq.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">antlr2.version</span>&gt;</span>2.7.7<span class=\"tag\">&lt;/<span class=\"name\">antlr2.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appengine-sdk.version</span>&gt;</span>1.9.63<span class=\"tag\">&lt;/<span class=\"name\">appengine-sdk.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artemis.version</span>&gt;</span>2.4.0<span class=\"tag\">&lt;/<span class=\"name\">artemis.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aspectj.version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">aspectj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assertj.version</span>&gt;</span>3.9.1<span class=\"tag\">&lt;/<span class=\"name\">assertj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">atomikos.version</span>&gt;</span>4.0.6<span class=\"tag\">&lt;/<span class=\"name\">atomikos.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bitronix.version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">bitronix.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class=\"line\">    。。。。。。。</span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件</p>\n<p><strong>spring boot</strong>将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。</p>\n<h3 id=\"2、主程序入口\"><a href=\"#2、主程序入口\" class=\"headerlink\" title=\"2、主程序入口\"></a>2、主程序入口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootApplication:</strong> 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用</p>\n<p>进入SpringBootApplication注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootConfiguration</strong>：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类</p>\n<p><strong>@Configuration</strong>:配置类上，来标注这个注解；<br>配置类 —- 配置文件，也是容器中的一个组件（@Component）<br><strong>@EnableAutoConfiguration</strong>:开启自动配置功能<br>以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动<br>配置功能；这样自动配置才能生效。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123; </span><br></pre></td></tr></table></figure>\n\n<p><strong>@AutoConfigurationPackage</strong>:自动配置包<br>**@Import({Registrar.class})**：底层注解，给容器导入组件；<br>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； </p>\n<p><strong>@Import({AutoConfigurationImportSelector.class})：</strong><br>给容器导入组件？ </p>\n<p>AutoConfigurationImportSelector：导入组件选择器 </p>\n<p>将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；</p>\n<p>会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置<br>好这些组件。 </p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg\" alt=\"1.configuration\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; configurations =</span><br><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(<span class=\"keyword\">this</span>.getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\"><span class=\"keyword\">this</span>.getBeanClassLoader());</span><br><span class=\"line\">\tAssert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),</code><br><code>this.getBeanClassLoader());</code> </p>\n<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；</p>\n<p>将这些值作为自动配置类导入到容器中，自动配置就生效了。 <img src=\"E:\\工作文档\\SpringBoot\\images\\2.factories.jpg\" alt=\"2.factories\"></p>\n<p>J2EE的整体解决方案</p>\n<p>org\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar </p>\n<h2 id=\"6、使用Spring-Initializer创建一个快速向导\"><a href=\"#6、使用Spring-Initializer创建一个快速向导\" class=\"headerlink\" title=\"6、使用Spring Initializer创建一个快速向导\"></a>6、使用Spring Initializer创建一个快速向导</h2><p>1.IDE支持使用Spring Initializer</p>\n<p>自己选择需要的组件:例如web</p>\n<p>默认生成的SpringBoot项目 </p>\n<ul>\n<li>主程序已经生成好了，我们只需要完成我们的逻辑</li>\n</ul>\n<ul>\n<li><p>resources文件夹目录结构</p>\n<ul>\n<li><p>static:保存所有的静态文件；js css images</p>\n</li>\n<li><p>templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可</p>\n<p>以使用模板引擎（freemarker.thymeleaf）;</p>\n</li>\n<li><p>application.properties:Spring Boot的默认配置，例如 server.port=9000 </p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h1><h2 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h2><p>Spring Boot使用全局配置文件，配置文件名是固定的；</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml </li>\n</ul>\n<p>配置文件作用：修改Spring Boot在底层封装好的默认值；</p>\n<p>YAML（YAML AIN’T Markup Language）</p>\n<p>是一个标记语言</p>\n<p>又不是一个标记语言 </p>\n<p><strong>标记语言：</strong></p>\n<p>以前的配置文件；大多数使用的是 xxx.xml文件；</p>\n<p>以数据为中心，比json、xml等更适合做配置文件</p>\n<p>YAML：配置例子 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span> </span><br></pre></td></tr></table></figure>\n\n<p>XML: </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、YAML语法\"><a href=\"#2、YAML语法\" class=\"headerlink\" title=\"2、YAML语法\"></a>2、YAML语法</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v:表示一堆键值对（空格必须有）；</p>\n<p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">/hello</span> </span><br></pre></td></tr></table></figure>\n\n<p>属性和值也是大小写敏感 </p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><p><strong>字面量：普通的值（数字，字符串，布尔）</strong> </p>\n<p>k: v:字面直接来写；</p>\n<p>字符串默认不用加上单引号或者双引号</p>\n<p>“”:<strong>双引号</strong> 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思</p>\n<p><code>name:&quot;zhangsan\\n lisi&quot;</code> 输出：<code>zhangsan换行 lisi</code></p>\n<p>‘’:<strong>单引号</strong> 会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p><code>name:&#39;zhangsan\\n lisi&#39;</code> 输出：<code>zhangsan\\n lisi</code> </p>\n<p><strong>对象、Map（属性和值）键值对</strong> </p>\n<p>k :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进</p>\n<p>对象还是k:v的方式 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">frends:</span></span><br><span class=\"line\">\t<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">\t<span class=\"attr\">age:</span> <span class=\"number\">20</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span> &#123;<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span>,<span class=\"attr\">age:</span> <span class=\"number\">18</span>&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>数组（List、Set）:</strong><br>用-表示数组中的一个元素 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">pig</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span> [<span class=\"string\">cat</span>,<span class=\"string\">dog</span>,<span class=\"string\">pig</span>] </span><br></pre></td></tr></table></figure>\n\n<p><strong>组合变量</strong></p>\n<p>多个组合到一起 </p>\n<h2 id=\"3、配置文件值注入\"><a href=\"#3、配置文件值注入\" class=\"headerlink\" title=\"3、配置文件值注入\"></a>3、配置文件值注入</h2><h3 id=\"1、-ConfigurationProperties\"><a href=\"#1、-ConfigurationProperties\" class=\"headerlink\" title=\"1、@ConfigurationProperties\"></a>1、@ConfigurationProperties</h3><p>1、application.yml 配置文件 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2017</span><span class=\"string\">/12/12</span></span><br><span class=\"line\">  <span class=\"attr\">maps:</span> &#123;<span class=\"attr\">k1:</span> <span class=\"string\">v1</span>,<span class=\"attr\">k2:</span> <span class=\"number\">12</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">lists:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">zhaoliu</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">wangwang</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">last-name:</span> <span class=\"string\">wanghuahua</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.properties</code> 配置文件（二选一） </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">idea配置文件utf-8</span></span><br><span class=\"line\"><span class=\"attr\">properties</span> <span class=\"string\">默认GBK</span></span><br><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>所以中文输出乱码，改进settings–&gt;file encoding –&gt;[property–&gt;utf-8 ,勾选转成ascii] </p>\n<p>javaBean </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将配置文件的配置每个属性的值，映射到组件中</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@ConfigurationProperties</span>:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\">* prefix = &quot;person&quot; 配置文件爱你的那个属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\">* *</span></span><br><span class=\"line\"><span class=\"comment\">只有这个组件是容器中的组件，才能提供到容器中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n<p>导入配置文件处理器，以后编写配置就有提示了 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring‐boot‐configuration‐processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"2、-Value注解\"><a href=\"#2、-Value注解\" class=\"headerlink\" title=\"2、@Value注解\"></a>2、@Value注解</h3><p>更改javaBean中的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;true&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@ConfigurationProperties</th>\n<th align=\"center\">@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">功能</td>\n<td align=\"center\">批量注入配置文件属性</td>\n<td align=\"center\">单个指定</td>\n</tr>\n<tr>\n<td align=\"center\">松散绑定(语法)</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">spEL</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">JSR303校验</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">复杂类型</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>松散语法：javaBean中last-name(或者lastName) –&gt;application.properties中的last-name;</p>\n<p>spEL语法：#{11*2} </p>\n<p>JSR303：@Value会直接忽略，校验规则</p>\n</blockquote>\n<p>JSR303校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p>复杂类型栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">   <span class=\"comment\">// @Value(&quot;$&#123;person.maps&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br></pre></td></tr></table></figure>\n\n<p>以上会报错，不支持复杂类型</p>\n<p><strong>使用场景分析</strong></p>\n<p>​    如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；</p>\n<p>如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties</p>\n<p>举栗子：</p>\n<p>1、编写新的Controller文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>+ name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试运行</p>\n<p>访问 localhost:9000/hello</p>\n<p>结果为<code>Hello 李四</code></p>\n<h3 id=\"3、其他注解\"><a href=\"#3、其他注解\" class=\"headerlink\" title=\"3、其他注解\"></a>3、其他注解</h3><p> <strong>@PropertySource</strong></p>\n<p>作用：加载指定的properties配置文件</p>\n<p>1、新建一个person.properties文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在javaBean中加入@PropertySource注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@ImportResource</strong></p>\n<p>作用：导入Spring配置文件，并且让这个配置文件生效</p>\n<p>1、新建一个Spring的配置文件，bean.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;HelloService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.wdjr.springboot.service.HelloService&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写测试类，检查容器是否加载Spring配置文件写的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;HelloService&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>import org.springframework.context.ApplicationContext;</p>\n</blockquote>\n<p>3、运行检测</p>\n<p>结果为false，没有加载配置的内容</p>\n<p>4、使用@ImportResource注解</p>\n<p>将@ImportResource标注在主配置类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource(locations=&#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot02ConfigApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、再次运行检测</p>\n<p>结果为true</p>\n<p>缺点：每次指定xml文件太麻烦</p>\n<p>SpringBoot推荐给容器添加组件的方式：</p>\n<p>1、配置类=====Spring的xml配置文件（old）</p>\n<p>2、全注解方式@Configuration+@Bean（new）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg\" alt=\"4.MyAppConfig\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>：指明当前类是一个配置类；就是来代替之前的Spring配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将方法的返回值添加到容器中；容器这个组件id就是方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;配置类给容器添加了HelloService组件&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;helloService01&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <em>容器这个组件id就是方法名</em> </p>\n<h2 id=\"4、配置文件占位符\"><a href=\"#4、配置文件占位符\" class=\"headerlink\" title=\"4、配置文件占位符\"></a>4、配置文件占位符</h2><h4 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$&#123;random.value&#125;</span> <span class=\"string\">、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class=\"line\"><span class=\"attr\">$&#123;random.int(10)&#125;、$&#123;random.int[100,200]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、获取配置值\"><a href=\"#2、获取配置值\" class=\"headerlink\" title=\"2、获取配置值\"></a>2、获取配置值</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.last-name&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>存在以下两种情况</p>\n<p>没有声明<code>person.last-name</code>会报错，新声明的需要加默认值</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.hello:hello&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>结果：输出<code>hello&#39;s wanghuahua</code></p>\n<h2 id=\"5、Profile\"><a href=\"#5、Profile\" class=\"headerlink\" title=\"5、Profile\"></a>5、Profile</h2><h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml</p>\n<ul>\n<li>application.properties</li>\n<li>application-dev.properties</li>\n<li>application-prod.properties</li>\n</ul>\n<p>默认使用application.properties</p>\n<p>application.properties配置文件指定</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、YAML文档块\"><a href=\"#2、YAML文档块\" class=\"headerlink\" title=\"2、YAML文档块\"></a>2、YAML文档块</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>1、在配置文件中激活</p>\n<p>2、命令行：</p>\n<p>–spring.profiles.active=dev</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg\" alt=\"5.comandLine\"></p>\n<p>优先级大于配置文件</p>\n<p>打包 成jar后</p>\n<p><code>java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></p>\n<p>虚拟机参数</p>\n<p><code>-Dspring.profiles.active=dev</code></p>\n<h2 id=\"6、加载配置文件位置\"><a href=\"#6、加载配置文件位置\" class=\"headerlink\" title=\"6、加载配置文件位置\"></a>6、加载配置文件位置</h2><p>SpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<ul>\n<li>file:./config/</li>\n<li>file./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ul>\n<p>优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置</p>\n<p>也可以通过spring.config.location来改变默认配置</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.servlet.context-path&#x3D;&#x2F;boot03</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>注：spring boot1x 是server.context.path=/boot02</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\7.priority.jpg\" alt=\"7.priority\"></p>\n<p>还可以通过spring.config.location来改变配置文件的位置</p>\n<p>项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置</p>\n<p><code>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties</code></p>\n<p>运维比较有用，从外部加载，不用修改别的文件</p>\n<h2 id=\"7-引入外部配置\"><a href=\"#7-引入外部配置\" class=\"headerlink\" title=\"7.引入外部配置\"></a>7.引入外部配置</h2><p><strong>SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补</strong></p>\n<ol>\n<li><p>命令行参数</p>\n<p>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar –server.port=9005 –server.context-path=/abc</p>\n<p>中间一个空格</p>\n</li>\n<li><p>来自java:comp/env的JNDI属性</p>\n</li>\n<li><p>java系统属性（System.getProperties()）</p>\n</li>\n<li><p>操作系统环境变量</p>\n</li>\n<li><p>RandomValuePropertySource配置的random.*属性值</p>\n<p><strong>优先加载profile,    由jar包外到jar包内</strong></p>\n</li>\n<li><p><strong>jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包外部的application.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n</li>\n<li><p>@Configuration注解类的@PropertySource</p>\n</li>\n<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>\n</li>\n</ol>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config\">官方文档</a></p>\n<h2 id=\"8、自动配置\"><a href=\"#8、自动配置\" class=\"headerlink\" title=\"8、自动配置\"></a>8、自动配置</h2><p>配置文件到底怎么写？</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties\">Spring的所有配置参数</a></p>\n<p>自动配置原理很关键</p>\n<h3 id=\"1、自动配置原理\"><a href=\"#1、自动配置原理\" class=\"headerlink\" title=\"1、自动配置原理\"></a>1、自动配置原理</h3><p>1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration</p>\n<p>2）、@EnableAutoConfiguration 作用：</p>\n<ul>\n<li>利用AutoConfigurationImportSelector给容器中导入一些组件？</li>\n<li>可以查看selectImports()方法的内容</li>\n<li>获取候选的配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; configurations = <span class=\"keyword\">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>扫描类路径下的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(）</span><br><span class=\"line\">扫描所有jar包类路径下的 MATA-INF/spring.factories</span><br><span class=\"line\">把扫描到的这些文件的内容包装成properties对象</span><br><span class=\"line\">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中</span><br></pre></td></tr></table></figure>\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；</li>\n</ul>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration</strong> 为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;HttpEncodingProperties.class&#125;)</span><span class=\"comment\">//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span><span class=\"comment\">//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    type = Type.SERVLET</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><span class=\"comment\">//判断当前项目有没有这个类，解决乱码的过滤器</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(</span></span><br><span class=\"line\"><span class=\"meta\">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">    matchIfMissing = true</span></span><br><span class=\"line\"><span class=\"meta\">)</span><span class=\"comment\">//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//给容器添加组件，这个组件的值需要从properties属性中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpEncodingProperties properties;</span><br><span class=\"line\">\t<span class=\"comment\">//只有一个有参数构造器情况下，参数的值就会从容器中拿</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEncodingAutoConfiguration</span><span class=\"params\">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title\">characterEncodingFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CharacterEncodingFilter filter = <span class=\"keyword\">new</span> OrderedCharacterEncodingFilter();</span><br><span class=\"line\">        filter.setEncoding(<span class=\"keyword\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">        filter.setForceRequestEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));</span><br><span class=\"line\">        filter.setForceResponseEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span><span class=\"comment\">//从配置文件中的值进行绑定和bean属性进行绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>根据当前不同条件判断，决定这个配置类是否生效？</p>\n<p>一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的</p>\n<h3 id=\"2、所有的自动配置组件\"><a href=\"#2、所有的自动配置组件\" class=\"headerlink\" title=\"2、所有的自动配置组件\"></a>2、所有的自动配置组件</h3><p>每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；</p>\n<p>作用：用他们做自动配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Auto Configure</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、精髓：\"><a href=\"#3、精髓：\" class=\"headerlink\" title=\"3、精髓：\"></a>3、精髓：</h3><p>1）、SpringBoot启动会加载大量的自动配置类</p>\n<p>2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；</p>\n<p>3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）</p>\n<p>4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值</p>\n<p>xxxAutoConfiguration:自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxProperties:封装配置文件中的属性；</p>\n<p>跟之前的Person类一样，配置文件中值加入bean中</p>\n<h3 id=\"4、细节\"><a href=\"#4、细节\" class=\"headerlink\" title=\"4、细节\"></a>4、细节</h3><h4 id=\"1、-Conditional派生注解\"><a href=\"#1、-Conditional派生注解\" class=\"headerlink\" title=\"1、@Conditional派生注解\"></a>1、@Conditional派生注解</h4><blockquote>\n<p>利用Spring注解版原生的@Conditional作用</p>\n</blockquote>\n<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional派生注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissBean</td>\n<td>容器中不存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足spEL表达式</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean,或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定的资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、自动配置报告\"><a href=\"#2、自动配置报告\" class=\"headerlink\" title=\"2、自动配置报告\"></a>2、自动配置报告</h4><p>自动配置类必须在一定条件下生效</p>\n<p>我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>自动配置报告</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\">CONDITIONS EVALUATION REPORT</span><br><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:（启动的，匹配成功的）</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">   CodecsAutoConfiguration matched:</span><br><span class=\"line\">      - <span class=\"meta\">@ConditionalOnClass</span> found required <span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">http</span>.<span class=\"title\">codec</span>.<span class=\"title\">CodecConfigurer</span>&#x27;</span>; <span class=\"meta\">@ConditionalOnMissingClass</span> <span class=\"function\">did not find unwanted <span class=\"title\">class</span> <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">        ......</span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\"> Negative matches:（没有启动的，没有匹配成功的）</span></span><br><span class=\"line\"><span class=\"function\">-----------------</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   ActiveMQAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">.....</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h1><blockquote>\n<p>Spring Boot2对日志有更改</p>\n</blockquote>\n<h3 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h3><p>小张：开发一个大型系统；</p>\n<p>1、System.out.println(“”);将关键数据打印在控制台；去掉？卸载文件中</p>\n<p>2、框架记录系统的一些运行信息；日志框架zhanglog.jar</p>\n<p>3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?</p>\n<p>4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;</p>\n<p>5、JDBC–数据库驱动；</p>\n<p>​    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;</p>\n<p>​    给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；</p>\n<p>市面上的日志框架</p>\n<table>\n<thead>\n<tr>\n<th>日志抽象层</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL(Jakarta Commons Logging)</del> SLF4j(Simple Logging Facade for Java) <del>jboss-logging</del></td>\n<td>Log4j <del>JUL(java.util.logging)</del> Log4j2 Logback</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>左边的抽象，右边的实现</p>\n<p>SLF4J  – Logback</p>\n<p>Spring Boot:底层是Spring框架，Spring默认框架是JCL；</p>\n<p>​    SpringBoot选用SLF4J和logback</p>\n<h3 id=\"2、SLF4J使用\"><a href=\"#2、SLF4J使用\" class=\"headerlink\" title=\"2、SLF4J使用\"></a>2、SLF4J使用</h3><h4 id=\"1、如何在系统中使用SLF4j\"><a href=\"#1、如何在系统中使用SLF4j\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j\"></a>1、如何在系统中使用SLF4j</h4><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>应该给系统里面导入slf4j的jar包和logback的实现jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg\" alt=\"8.slf4j\"></p>\n<p>每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架本身的配置文件</strong>；</p>\n<h4 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h4><p>a系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis</p>\n<p>统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；</p>\n<p>核心：</p>\n<p>1、将系统中其他日志框架排除出去；</p>\n<p>2、用中间包来替换原有的日志框架/</p>\n<p>3、导入slf4j的其他实现</p>\n<h3 id=\"3、SpingBoot日志框架解析\"><a href=\"#3、SpingBoot日志框架解析\" class=\"headerlink\" title=\"3、SpingBoot日志框架解析\"></a>3、SpingBoot日志框架解析</h3><p>打开IDEA ，打开pom文件的依赖图形化显示</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg\" alt=\"9.IDEAdependencies\"></p>\n<p>SpringBoot的基础框架</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot的日志功能</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg\" alt=\"10.slf4jandlogback\"></p>\n<p>总结：</p>\n<ol>\n<li><p>SpringBoot底层也是使用SLF4J+log4jback</p>\n</li>\n<li><p>SpringBoot也把其他日志替换成了slf4j</p>\n</li>\n<li><p>起着commons.loggings的名字其实new的SLF4J替换中间包</p>\n<p>SpringBoot2中改成了bridge</p>\n</li>\n<li><p>如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层</p>\n</li>\n</ol>\n<h3 id=\"4、日志的使用\"><a href=\"#4、日志的使用\" class=\"headerlink\" title=\"4、日志的使用\"></a>4、日志的使用</h3><h4 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h4><p>trace-debug-info-warn-error</p>\n<p>可以调整需要的日志级别进行输出，不用注释语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//记录器</span></span><br><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日志的级别</span></span><br><span class=\"line\">    <span class=\"comment\">//从低到高</span></span><br><span class=\"line\">    <span class=\"comment\">//可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效</span></span><br><span class=\"line\">    logger.trace(<span class=\"string\">&quot;这是trace日志&quot;</span>);</span><br><span class=\"line\">    logger.debug(<span class=\"string\">&quot;这是debug信息&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//SpringBoot默认给的是info级别，如果没指定就是默认的root级别</span></span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;这是info日志&quot;</span>);</span><br><span class=\"line\">    logger.warn(<span class=\"string\">&quot;这是warn信息&quot;</span>);</span><br><span class=\"line\">    logger.error(<span class=\"string\">&quot;这是Error信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整指定包的日志级别在配置文件中进行配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br></pre></td></tr></table></figure>\n\n<p>日志输出格式</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 </span></span><br><span class=\"line\"><span class=\"comment\">#%d：日期</span></span><br><span class=\"line\"><span class=\"comment\">#%thread：线程号 </span></span><br><span class=\"line\"><span class=\"comment\">#%-5level：靠左 级别 </span></span><br><span class=\"line\"><span class=\"comment\">#%logger&#123;50&#125;：全类名50字符限制,否则按照句号分割</span></span><br><span class=\"line\"><span class=\"comment\">#%msg：消息+换行</span></span><br><span class=\"line\"><span class=\"comment\">#%n：换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot修改日志的默认配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br><span class=\"line\"><span class=\"comment\">#不指定path就是当前目录下生成springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#logging.file=springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认</span></span><br><span class=\"line\"><span class=\"meta\">logging.path</span>=<span class=\"string\">/spring/log</span></span><br><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class=\"line\"><span class=\"comment\">#指定文件中日志输出的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.file</span>=<span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置</p>\n<table>\n<thead>\n<tr>\n<th>logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td>logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy</td>\n</tr>\n<tr>\n<td>Log4J2</td>\n<td>log4j2-spring.xml or log4j2.xml</td>\n</tr>\n<tr>\n<td>JDK(Java Util Logging)</td>\n<td>logging.properties</td>\n</tr>\n</tbody></table>\n<p>logback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>!=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如何调试开发环境,输入命令行参数</p>\n<p>–spring.profiles.active=dev</p>\n<p>如果不带后面的xx-spring.xml就会报错</p>\n<h3 id=\"3、切换日志框架\"><a href=\"#3、切换日志框架\" class=\"headerlink\" title=\"3、切换日志框架\"></a>3、切换日志框架</h3><p>可以根据slf4j的日志适配图，进行相关切换；</p>\n<h4 id=\"1、log4j\"><a href=\"#1、log4j\" class=\"headerlink\" title=\"1、log4j\"></a>1、log4j</h4><p>slf4j+log4j的方式；</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg\" alt=\"11.log4j\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不推荐使用仅作为演示</p>\n<h4 id=\"2、log4j2\"><a href=\"#2、log4j2\" class=\"headerlink\" title=\"2、log4j2\"></a>2、log4j2</h4><p>切换为log4j2</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、web开发\"><a href=\"#四、web开发\" class=\"headerlink\" title=\"四、web开发\"></a>四、web开发</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot;</p>\n<p>1)、创建SpringBoot应用，选中我们需要的模块；</p>\n<p>2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</p>\n<p>3)、自己编写业务代码</p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxAutoConfiguration:帮我们给容器中自动配置组件</span><br><span class=\"line\">xxxProperties:配置类来封装配置文件的内容</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、静态资源文件映射规则\"><a href=\"#2、静态资源文件映射规则\" class=\"headerlink\" title=\"2、静态资源文件映射规则\"></a>2、静态资源文件映射规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span>, <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以设置和静态资源相关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Integer cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCachePeriod();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(registry</span><br><span class=\"line\">            .addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">            .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   String staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(</span><br><span class=\"line\">            registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">                  .addResourceLocations(</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.resourceProperties.getStaticLocations())</span><br><span class=\"line\">                  .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、webjar\"><a href=\"#1、webjar\" class=\"headerlink\" title=\"1、webjar\"></a>1、webjar</h3><p>1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；</p>\n<p>​    webjars：以jar包的方式引入静态资源</p>\n<p><a href=\"http://www.webjars.org/\">http://www.webjars.org/</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg\" alt=\"12.jquery\"></p>\n<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>\n<h3 id=\"2、本地资源\"><a href=\"#2、本地资源\" class=\"headerlink\" title=\"2、本地资源\"></a>2、本地资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String staticPathPattern &#x3D; &quot;&#x2F;**&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>访问任何资源</p>\n<p>2、会在这几文件夹下去找静态路径（静态资源文件夹）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class=\"line\">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;public&#x2F;&quot;,</span><br><span class=\"line\">&quot;&#x2F;&quot;;当前项目的根路径</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\13.static.jpg\" alt=\"13.static\"></p>\n<p>localhost:8080/abc ==&gt;去静态资源文件夹中找abc</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg\" alt=\"14.static-css\"></p>\n<p>3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；</p>\n<p>localhost:8080/  –&gt;index页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title\">welcomePageHandlerMapping</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、喜欢的图标，即网站title的图标favicon</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FaviconConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ResourceProperties resourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaviconConfiguration</span><span class=\"params\">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> SimpleUrlHandlerMapping <span class=\"title\">faviconHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      SimpleUrlHandlerMapping mapping = <span class=\"keyword\">new</span> SimpleUrlHandlerMapping();</span><br><span class=\"line\">      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//把任何favicon的图标都在静态文件夹下找</span></span><br><span class=\"line\">      mapping.setUrlMap(Collections.singletonMap(<span class=\"string\">&quot;**/favicon.ico&quot;</span>,</span><br><span class=\"line\">            faviconRequestHandler()));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mapping;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ResourceHttpRequestHandler <span class=\"title\">faviconRequestHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ResourceHttpRequestHandler requestHandler = <span class=\"keyword\">new</span> ResourceHttpRequestHandler();</span><br><span class=\"line\">      requestHandler</span><br><span class=\"line\">            .setLocations(<span class=\"keyword\">this</span>.resourceProperties.getFaviconLocations());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> requestHandler;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在配置文件配置静态资源文件夹</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.resources.static-locations</span>=<span class=\"string\">classpath:xxxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>将html和数据 结合到一起 输出组装处理好的新文件</p>\n<p>SpringBoot推荐Thymeleaf;语法简单，功能强大</p>\n<h3 id=\"1、引入thymeleaf-3\"><a href=\"#1、引入thymeleaf-3\" class=\"headerlink\" title=\"1、引入thymeleaf 3\"></a>1、引入thymeleaf 3</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认导入thymeleaf2，版本太低 所以使用thymeleaf3.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3\">官方导入办法</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--thymeleaf 3的导入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Thymeleaf使用和语法\"><a href=\"#2、Thymeleaf使用和语法\" class=\"headerlink\" title=\"2、Thymeleaf使用和语法\"></a>2、Thymeleaf使用和语法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">//只要把HTML文件方法类路径下的template文件夹下，就会自动导入</span></span><br></pre></td></tr></table></figure>\n\n<p>只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure>\n\n<p>2、使用thymeleaf语法；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--th:text 将div里面的文本内容设置为--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、语法规则</p>\n<p>1）、th:text=”${hello}”可以使用任意标签 替换原生的任何属性</p>\n<p><strong>在SpringBoot的环境下</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testid&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;testcalss&quot;</span> <span class=\"attr\">th:id</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg\" alt=\"15.thtmeleaf-th01\"></p>\n<p><strong>直接访问HTML页面</strong></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg\" alt=\"15.thtmeleaf-th02\"></p>\n<p><strong>2)、内联写法注意需要在body上加上 th:inline=”text”敲黑板</strong></p>\n<p>不然不起作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>th标签的访问优先级</p>\n<p>Order Feature Attributes</p>\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>功能</th>\n<th>标签</th>\n<th>功能和jsp对比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Fragment inclusion</td>\n<td>th:insert th:replace</td>\n<td>include(片段包含)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Fragment iteration</td>\n<td>th:each</td>\n<td>c:forEach(遍历)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Conditional evaluation</td>\n<td>th:if th:unless th:switch th:case</td>\n<td>c:if(条件判断)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Local variable definition</td>\n<td>th:object  th:with</td>\n<td>c:set(声明变量)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>General attribute modification</td>\n<td>th:attr th:attrprepend th:attrappend</td>\n<td>属性修改支持前面和后面追加内容</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Specific attribute modification</td>\n<td>th:value th:href th:src …</td>\n<td>修改任意属性值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Text (tag body modification)</td>\n<td>th:text th:utext</td>\n<td>修改标签体内容utext：不转义字符<h1>大标题</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Fragment specification</td>\n<td>th:fragment</td>\n<td>声明片段</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Fragment removal</td>\n<td>th:remove</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Simple</span> <span class=\"string\">expressions:(表达式语法)</span></span><br><span class=\"line\">    <span class=\"attr\">Variable</span> <span class=\"string\">Expressions: $&#123;...&#125;</span></span><br><span class=\"line\">    \t<span class=\"attr\">1、获取对象属性、调用方法</span></span><br><span class=\"line\">    \t<span class=\"attr\">2、使用内置基本对象：</span></span><br><span class=\"line\"><span class=\"comment\">    \t    #ctx : the context object.</span></span><br><span class=\"line\"><span class=\"comment\">            #vars: the context variables.</span></span><br><span class=\"line\"><span class=\"comment\">            #locale : the context locale.</span></span><br><span class=\"line\"><span class=\"comment\">            #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class=\"line\"><span class=\"comment\">            #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class=\"line\"><span class=\"comment\">            #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class=\"line\"><span class=\"comment\">            #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class=\"line\">         <span class=\"attr\">3、内置一些工具对象</span></span><br><span class=\"line\"><span class=\"comment\">        \t#execInfo : information about the template being processed.</span></span><br><span class=\"line\"><span class=\"comment\">        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span></span><br><span class=\"line\">            <span class=\"attr\">would</span> <span class=\"string\">be obtained using #&#123;…&#125; syntax.</span></span><br><span class=\"line\"><span class=\"comment\">            #uris : methods for escaping parts of URLs/URIs</span></span><br><span class=\"line\"><span class=\"comment\">            #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class=\"line\"><span class=\"comment\">            #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #numbers : methods for formatting numeric objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #objects : methods for objects in general.</span></span><br><span class=\"line\"><span class=\"comment\">            #bools : methods for boolean evaluation.</span></span><br><span class=\"line\"><span class=\"comment\">            #arrays : methods for arrays.</span></span><br><span class=\"line\"><span class=\"comment\">            #lists : methods for lists.</span></span><br><span class=\"line\"><span class=\"comment\">            #sets : methods for sets.</span></span><br><span class=\"line\"><span class=\"comment\">            #maps : methods for maps.</span></span><br><span class=\"line\"><span class=\"comment\">            #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class=\"line\"><span class=\"comment\">            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class=\"line\">    <span class=\"attr\">Selection</span> <span class=\"string\">Variable Expressions: *&#123;...&#125; //选择表达式：和$&#123;&#125;功能一样，补充功能</span></span><br><span class=\"line\"><span class=\"comment\">   # 配合th:object使用，object=$&#123;object&#125; 以后获取就可以使用*&#123;a&#125;  相当于$&#123;object.a&#125;</span></span><br><span class=\"line\">  \t    <span class=\"meta\">&lt;div</span> <span class=\"string\">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Name</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Surname</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Nationality</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Message</span> <span class=\"string\">Expressions: #&#123;...&#125; //获取国际化内容</span></span><br><span class=\"line\">    <span class=\"attr\">Link</span> <span class=\"string\">URL Expressions: @&#123;...&#125; //定义URL链接</span></span><br><span class=\"line\"><span class=\"comment\">    \t#&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Fragment</span> <span class=\"string\">Expressions: ~&#123;...&#125;//片段文档</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">Literals（字面量）</span></span><br><span class=\"line\">    <span class=\"attr\">Text</span> <span class=\"string\">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Number</span> <span class=\"string\">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">literals: true , false</span></span><br><span class=\"line\">    <span class=\"attr\">Null</span> <span class=\"string\">literal: null</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">tokens: one , sometext , main ,…</span></span><br><span class=\"line\"><span class=\"attr\">Text</span> <span class=\"string\">operations:(文本操作)</span></span><br><span class=\"line\">    <span class=\"attr\">String</span> <span class=\"string\">concatenation: +</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class=\"line\"><span class=\"attr\">Arithmetic</span> <span class=\"string\">operations:（数学运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: + , - , * , / , %</span></span><br><span class=\"line\">    <span class=\"attr\">Minus</span> <span class=\"string\">sign (unary operator): -</span></span><br><span class=\"line\"><span class=\"attr\">Boolean</span> <span class=\"string\">operations:（布尔运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: and , or</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">negation (unary operator): ! , not</span></span><br><span class=\"line\"><span class=\"attr\">Comparisons</span> <span class=\"string\">and equality:（比较运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Comparators</span>: <span class=\"string\">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class=\"line\">    <span class=\"attr\">Equality</span> <span class=\"string\">operators: == , != ( eq , ne )</span></span><br><span class=\"line\"><span class=\"attr\">Conditional</span> <span class=\"string\">operators:（条件运算）</span></span><br><span class=\"line\">    <span class=\"meta\">If-then</span>: <span class=\"string\">(if) ? (then)</span></span><br><span class=\"line\">    <span class=\"meta\">If-then-else</span>: <span class=\"string\">(if) ? (then) : (else)</span></span><br><span class=\"line\">    <span class=\"attr\">Default</span>: <span class=\"string\">(value) ?: (defaultvalue)</span></span><br><span class=\"line\"><span class=\"attr\">Special</span> <span class=\"string\">tokens:（空操作）</span></span><br><span class=\"line\">\t<span class=\"meta\">No-Operation</span>: <span class=\"string\">_</span></span><br></pre></td></tr></table></figure>\n\n<p>inline写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[]] --&gt;th:text</span><br><span class=\"line\">[()] --&gt;th:utext</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4、SpringMVC自动配置\"><a href=\"#4、SpringMVC自动配置\" class=\"headerlink\" title=\"4、SpringMVC自动配置\"></a>4、SpringMVC自动配置</h2><h3 id=\"1、SpringMVC的自动导入\"><a href=\"#1、SpringMVC的自动导入\" class=\"headerlink\" title=\"1、SpringMVC的自动导入\"></a>1、SpringMVC的自动导入</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\">Spring框架</a></p>\n<p>自动配置好了mvc：</p>\n<p>以下是SpringBoot对SpringMVC的默认</p>\n<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)</li>\n<li><code>ContentNegotiatingViewResolver</code>组合所有视图解析器</li>\n<li>如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源</p>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).</p>\n</li>\n<li><p>自动注册 了<code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li><p><code>Converter</code>：类型转换 文本转为字面量</p>\n</li>\n<li><p><code>Formatter</code> ：格式化器 转换后格式转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class=\"comment\">//在文件配置入职格式化的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());<span class=\"comment\">//日期格式化组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自己添加的格式化转换器，只需要放在容器中即可</p>\n</li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p><code>HttpMessageConverters</code> ：转换HTTP转换和响应：User - json</p>\n</li>\n<li><p><code>HttpMessageConverters</code> ：是从容器中确定；获取所有的<code>HttpMessageConverters</code>  ，将自己的组件注册在容器中@Bean </p>\n</li>\n<li><p>If you need to add or customize converters you can use Spring Boot’s <code>HttpMessageConverters</code> class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.web.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">customConverters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; additional = ...</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; another = ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpMessageConverters(additional, another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).</p>\n<ul>\n<li>定义错误代码生成规则</li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<ul>\n<li>```java<br>@Override<br>protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {<br>   try {<pre><code>  return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n</code></pre>\n   }<br>   catch (NoSuchBeanDefinitionException ex) {<pre><code>  return super.getConfigurableWebBindingInitializer();\n</code></pre>\n   }<br>}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    在beanFactory：中可以自己创建一个，初始化webDataBinder</span><br><span class=\"line\"></span><br><span class=\"line\">    请求数据 &#x3D;&#x3D;》javaBean</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.16.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own &#96;@Configuration&#96; class of type &#96;WebMvcConfigurerAdapter&#96;, but **without** &#96;@EnableWebMvc&#96;. If you wish to provide custom instances of &#96;RequestMappingHandlerMapping&#96;, &#96;RequestMappingHandlerAdapter&#96; or &#96;ExceptionHandlerExceptionResolver&#96; you can declare a &#96;WebMvcRegistrationsAdapter&#96; instance providing such components.</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to take complete control of Spring MVC, you can add your own &#96;@Configuration&#96; annotated with &#96;@EnableWebMvc&#96;.</span><br><span class=\"line\"></span><br><span class=\"line\">思想：修改默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">### 2、扩展SpringMVC</span><br><span class=\"line\"></span><br><span class=\"line\">编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class MyMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;        super.addViewControllers(registry);</span><br><span class=\"line\">        &#x2F;&#x2F;浏览器发送wdjr请求，也来到success页面</span><br><span class=\"line\">        registry.addViewController(&quot;&#x2F;wdjr&quot;).setViewName(&quot;success&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>原理：</p>\n<p>1）、WebMvcAutoConfiguration是SpringMVC的自动配置</p>\n<p>2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcConfigurerComposite configurers = <span class=\"keyword\">new</span> WebMvcConfigurerComposite();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从容器中获取所有webMVCconfigurer</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">            </span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.configurers.addViewControllers(registry);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）</span></span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"comment\">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\">                   <span class=\"comment\">// for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"comment\">//delegate.addViewControllers(registry);</span></span><br><span class=\"line\">                    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<p>3）、自己的配置被调用</p>\n<p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用</p>\n<h3 id=\"3、全面接管mvc\"><a href=\"#3、全面接管mvc\" class=\"headerlink\" title=\"3、全面接管mvc\"></a>3、全面接管mvc</h3><p>不需要SpringBoot对SpringMVC的自动配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送wdjr请求，也来到success页面</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">&quot;/wdjr&quot;</span>).setViewName(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如静态资源访问，不推荐全面接管</p>\n<p>原理：</p>\n<p>为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了</p>\n<p>1）、核心配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2）、DelegatingWebMvcConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>3）、WebMvcAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span></span><br><span class=\"line\"><span class=\"meta\">      WebMvcConfigurerAdapter.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//容器没有这个组件的时候，这个自动配置类才生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">      ValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能</p>\n<h2 id=\"5、修改SpringMVC默认配置\"><a href=\"#5、修改SpringMVC默认配置\" class=\"headerlink\" title=\"5、修改SpringMVC默认配置\"></a>5、修改SpringMVC默认配置</h2><p>模式:</p>\n<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​    2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。</p>\n<h2 id=\"6、RestfulCRUD\"><a href=\"#6、RestfulCRUD\" class=\"headerlink\" title=\"6、RestfulCRUD\"></a>6、RestfulCRUD</h2><h3 id=\"1、默认访问首页\"><a href=\"#1、默认访问首页\" class=\"headerlink\" title=\"1、默认访问首页\"></a>1、默认访问首页</h3><p>在config/MyConfig.java中编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/login.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态资源引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、国际化\"><a href=\"#2、国际化\" class=\"headerlink\" title=\"2、国际化\"></a>2、国际化</h3><p>1、编写国际化配置文件</p>\n<p>2、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3、在页面中使用fmt:message，取出国际化内容</p>\n<h4 id=\"1、浏览器切换国际化\"><a href=\"#1、浏览器切换国际化\" class=\"headerlink\" title=\"1、浏览器切换国际化\"></a>1、浏览器切换国际化</h4><p>步骤</p>\n<p>1、编写国际化配置文件，抽取页面需要的显示的国际化消息</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\16.national.jpg\" alt=\"16.national\"></p>\n<p>2、SpringBoot自动配置好了国际化配置的资源文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//我们的配置文件可以直接放在类路径下叫messages.properties</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String basename = <span class=\"string\">&quot;messages&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> MessageSource <span class=\"title\">messageSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tResourceBundleMessageSource messageSource = <span class=\"keyword\">new</span> ResourceBundleMessageSource();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.basename)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置国际化文件的基础名，去掉语言国家代码</span></span><br><span class=\"line\">\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">\t\t\t\t\tStringUtils.trimAllWhitespace(<span class=\"keyword\">this</span>.basename)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.encoding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmessageSource.setDefaultEncoding(<span class=\"keyword\">this</span>.encoding.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageSource.setFallbackToSystemLocale(<span class=\"keyword\">this</span>.fallbackToSystemLocale);</span><br><span class=\"line\">\t\tmessageSource.setCacheSeconds(<span class=\"keyword\">this</span>.cacheSeconds);</span><br><span class=\"line\">\t\tmessageSource.setAlwaysUseMessageFormat(<span class=\"keyword\">this</span>.alwaysUseMessageFormat);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messageSource;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、对IDEA的编码进行设置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg\" alt=\"17.encoding\"></p>\n<p>4、login进行标签插入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./login_files/signin.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-signin&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mb-4&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./login_files/bootstrap-solid.svg&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;72&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;72&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;remember-me&quot;</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果根据浏览器语言的信息切换国际化</p>\n<p>原理：</p>\n<p>国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties</span><br><span class=\"line\">        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FixedLocaleResolver(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AcceptHeaderLocaleResolver localeResolver = <span class=\"keyword\">new</span> AcceptHeaderLocaleResolver();</span><br><span class=\"line\">    localeResolver.setDefaultLocale(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">&#125;            </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg\" alt=\"18.accept-language\"></p>\n<h4 id=\"2、点击链接切换国际化\"><a href=\"#2、点击链接切换国际化\" class=\"headerlink\" title=\"2、点击链接切换国际化\"></a>2、点击链接切换国际化</h4><p>自己编写localResolver，加到容器中</p>\n<p>1、更改HTML代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=zh_CN&#125;&quot;</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=en_US&#125;&quot;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个MyLocaleResolver.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLocaleResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">LocaleResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解析区域信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Locale <span class=\"title\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String l = request.getParameter(<span class=\"string\">&quot;lg&quot;</span>);</span><br><span class=\"line\">        Locale locale = Locale.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class=\"line\">            String[] split = l.split(<span class=\"string\">&quot;_&quot;</span>);</span><br><span class=\"line\">            locale = <span class=\"keyword\">new</span> Locale(split[<span class=\"number\">0</span>], split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> locale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、将MyLocaleResolver加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLocalResolver();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动演示</p>\n<h3 id=\"3、登录拦截器\"><a href=\"#3、登录拦截器\" class=\"headerlink\" title=\"3、登录拦截器\"></a>3、登录拦截器</h3><h4 id=\"1、登录\"><a href=\"#1、登录\" class=\"headerlink\" title=\"1、登录\"></a>1、登录</h4><p>开发技巧</p>\n<p>​    1、清除模板缓存</p>\n<p>​    2、Ctrl+F9刷新</p>\n<p>1、新建一个LoginController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;list&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、登录错误消息显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--判断--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、表单重复提交</p>\n<p>表单重复提交事件 –》重定向来到成功页面–》模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、拦截器\"><a href=\"#4、拦截器\" class=\"headerlink\" title=\"4、拦截器\"></a>4、拦截器</h3><p>作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）</p>\n<p>1、在component下新建一个LoginHandlerInterceptor拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//目标方法执行之前</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object user = request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已经登录</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//未经过验证</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;没权限请先登录&quot;</span>);</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、在MyMvcConfig配置中重写拦截器方法，加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//静态资源 css js img 已经做好了静态资源映射</span></span><br><span class=\"line\">            registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>).</span><br><span class=\"line\">                    excludePathPatterns(<span class=\"string\">&quot;/index.html&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/user/login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在LoginHandler中添加登录成功写入session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        HttpSession session)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">&quot;loginUser&quot;</span>, username);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、CRUD-员工列表\"><a href=\"#5、CRUD-员工列表\" class=\"headerlink\" title=\"5、CRUD-员工列表\"></a>5、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格</p>\n<p>URI:/资源名称/资源标识+HTTP操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp – GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp –POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id=xxx&amp;xxx=xx</td>\n<td>emp/{id} – PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id=1</td>\n<td>emp/{id} –DELETE</td>\n</tr>\n</tbody></table>\n<p>2、实验的请求架构</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>修改页面(回显)</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp/{id}</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp/{id}</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3、员工列表</p>\n<h4 id=\"1、公共页面抽取\"><a href=\"#1、公共页面抽取\" class=\"headerlink\" title=\"1、公共页面抽取\"></a>1、公共页面抽取</h4><p>使用方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、抽取公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--footer.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;footid&quot;</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;copy&quot;</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">2、引入公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--test.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">~&#123;footer::copy&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">~&#123;templatename::selector&#125; 模板名::选择器  footer::#footid</span><br><span class=\"line\">~&#123;templatename::fragmentname&#125; 模板名::片段名称 footer::copy</span><br><span class=\"line\">行内写法可以加~&#123;xx::xx&#125; 标签体可以 xx::xx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>三种引用方式</strong></p>\n<p><strong>th:insert</strong> :加个外层标签 +1</p>\n<p><strong>th:replace</strong> :完全替换 1</p>\n<p><strong>th:include</strong>：就替换里面的内容 -1</p>\n<p>公共页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- th:insert --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">            <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:replace--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">   \t\t<span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:include--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用此种方法将公共页面引入</p>\n<h4 id=\"2、列表高亮\"><a href=\"#2、列表高亮\" class=\"headerlink\" title=\"2、列表高亮\"></a>2、列表高亮</h4><p>引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html</p>\n<p>模板引入变量名</p>\n<p>dashboard</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link active&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-home&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">    Dashboard <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>员工管理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;emps&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-users&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;9&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;7&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">        员工管理</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入模板的时候传入参数</p>\n<p>dashboard.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar :: sidebar(activeUri=&#x27;main.html&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>list.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar::sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、列表数据显示（查）\"><a href=\"#6、列表数据显示（查）\" class=\"headerlink\" title=\"6、列表数据显示（查）\"></a>6、列表数据显示（查）</h3><h4 id=\"1、传入员工对象\"><a href=\"#1、传入员工对象\" class=\"headerlink\" title=\"1、传入员工对象\"></a>1、传入员工对象</h4><p>EmployeeController类,传入员工对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeDao employeeDao;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有员工返回列表页面</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/emps&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">list</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;emps&quot;</span>,employees);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/list&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、-遍历对象\"><a href=\"#2、-遍历对象\" class=\"headerlink\" title=\"2、 遍历对象\"></a>2、 遍历对象</h4><p>list.html中 使用模板的 <code>th:each</code>方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table class=&quot;table table-striped table-sm&quot;&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>lastName<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>gender<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>birth<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.gender&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、效果显示\"><a href=\"#3、效果显示\" class=\"headerlink\" title=\"3、效果显示\"></a>3、效果显示</h4><p>![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)</p>\n<h3 id=\"7、员工添加（增）\"><a href=\"#7、员工添加（增）\" class=\"headerlink\" title=\"7、员工添加（增）\"></a>7、员工添加（增）</h3><p>功能：点击添加按钮，出现新增页面</p>\n<h4 id=\"1、新增页面\"><a href=\"#1、新增页面\" class=\"headerlink\" title=\"1、新增页面\"></a>1、新增页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Birth--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、页面跳转\"><a href=\"#2、页面跳转\" class=\"headerlink\" title=\"2、页面跳转\"></a>2、页面跳转</h4><p>在EmployeeController中添加addEmpPage方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toAddPage</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//来到添加页面,查出所有部门显示</span></span><br><span class=\"line\">    Collection&lt;Department&gt; depts = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,depts);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息</p>\n<h4 id=\"3、添加功能完成\"><a href=\"#3、添加功能完成\" class=\"headerlink\" title=\"3、添加功能完成\"></a>3、添加功能完成</h4><p>新建一个PostMapping</p>\n<blockquote>\n<p>ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；</p>\n</blockquote>\n<p>1、新建一个postMapping的方法用来接受页面的添加POST请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工添加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeDao.save(employee);</span><br><span class=\"line\">    <span class=\"comment\">//来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、修改添加页面，添加name属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1、部门对象问题？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、日期格式化？</p>\n<p>属性中添加 date-formate 默认是 / </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageCodesResolver <span class=\"title\">getMessageCodesResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      DefaultMessageCodesResolver resolver = <span class=\"keyword\">new</span> DefaultMessageCodesResolver();</span><br><span class=\"line\">      resolver.setMessageCodeFormatter(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.date-format</span>=<span class=\"string\">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、员工编辑（改）\"><a href=\"#8、员工编辑（改）\" class=\"headerlink\" title=\"8、员工编辑（改）\"></a>8、员工编辑（改）</h3><p>思路使用add页面，并且数据回显，然后区分添加，PUT请求</p>\n<h4 id=\"1、修改按钮\"><a href=\"#1、修改按钮\" class=\"headerlink\" title=\"1、修改按钮\"></a>1、修改按钮</h4><p>在list.html的<code>编辑</code>按钮加上链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、编写跳转页面\"><a href=\"#2、编写跳转页面\" class=\"headerlink\" title=\"2、编写跳转页面\"></a>2、编写跳转页面</h4><p>跳转到员工编辑页面的Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工编辑页面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toEditPage</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id ,Model model)</span></span>&#123;</span><br><span class=\"line\">    Employee emp = employeeDao.getEmpById(id);</span><br><span class=\"line\">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;emp&quot;</span>,emp);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,departments);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、对页面修改\"><a href=\"#3、对页面修改\" class=\"headerlink\" title=\"3、对页面修改\"></a>3、对页面修改</h4><p>对add页面进行修改</p>\n<p>1）、添加回显</p>\n<p>2）、添加判断是否emp!=null（区分add or edit）</p>\n<p>3）、添加put请求 –两个input的hidden标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--发送put请求--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--1.SpringMVC配置HiddenHttpMethodFilter</span></span><br><span class=\"line\"><span class=\"comment\">            2.页面创建一个post表单</span></span><br><span class=\"line\"><span class=\"comment\">            3.创建一个 input name_method 值就是我们请求的方式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==0&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span> &gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9、员工删除（删）\"><a href=\"#9、员工删除（删）\" class=\"headerlink\" title=\"9、员工删除（删）\"></a>9、员工删除（删）</h3><h4 id=\"1、新建Contoller\"><a href=\"#1、新建Contoller\" class=\"headerlink\" title=\"1、新建Contoller\"></a>1、新建Contoller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工删除</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.deleteEmpById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、修改删除标签\"><a href=\"#2、修改删除标签\" class=\"headerlink\" title=\"2、修改删除标签\"></a>2、修改删除标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:attr</span>=<span class=\"string\">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span></span><br><span class=\"line\">    删除</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、写Form表单\"><a href=\"#3、写Form表单\" class=\"headerlink\" title=\"3、写Form表单\"></a>3、写Form表单</h4><p>form表单卸载外面，input 中 name=”_method” value=”delete” 模拟delete请求</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteEmpForm&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、写JS提交\"><a href=\"#4、写JS提交\" class=\"headerlink\" title=\"4、写JS提交\"></a>4、写JS提交</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.deleteBtn&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">&quot;#deleteEmpForm&quot;</span>).attr(<span class=\"string\">&quot;action&quot;</span>,$(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;del_uri&quot;</span>)).submit();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>return false;禁用btn提交效果</p>\n</blockquote>\n<h2 id=\"7、错误机制的处理\"><a href=\"#7、错误机制的处理\" class=\"headerlink\" title=\"7、错误机制的处理\"></a>7、错误机制的处理</h2><h3 id=\"1、默认的错误处理机制\"><a href=\"#1、默认的错误处理机制\" class=\"headerlink\" title=\"1、默认的错误处理机制\"></a>1、默认的错误处理机制</h3><p>默认错误页面</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\20.error.jpg\" alt=\"20.error\"></p>\n<p>原理参照</p>\n<p>ErrorMvcAutoConfiguration:错误处理的自动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>DefaultErrorAttributes</p>\n<p>帮我们在页面共享信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">   Map&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class=\"line\">   errorAttributes.put(<span class=\"string\">&quot;timestamp&quot;</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">   addStatus(errorAttributes, requestAttributes);</span><br><span class=\"line\">   addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class=\"line\">   addPath(errorAttributes, requestAttributes);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BasicErrorController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractErrorController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//产生HTML数据</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(produces = &quot;text/html&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class=\"line\">\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\t\tresponse.setStatus(status.value());</span><br><span class=\"line\">\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (modelAndView == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//产生Json数据</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ErrorPageCustomizer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String path = <span class=\"string\">&quot;/error&quot;</span>;<span class=\"comment\">//系统出现错误以后来到error请求进行处理，(web.xml)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>DefaultErrorViewResolver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (modelAndView == <span class=\"keyword\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">      modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认SpringBoot可以找到一个页面？error/状态码</span></span><br><span class=\"line\">   String errorViewName = <span class=\"string\">&quot;error/&quot;</span> + viewName;</span><br><span class=\"line\">    <span class=\"comment\">//如果模板引擎可以解析地址，就返回模板引擎解析</span></span><br><span class=\"line\">   TemplateAvailabilityProvider provider = <span class=\"keyword\">this</span>.templateAvailabilityProviders</span><br><span class=\"line\">         .getProvider(errorViewName, <span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//有模板引擎就返回到errorViewName指定的视图地址</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(errorViewName, model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller</p>\n<p>1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ErrorViewResolver resolver : <span class=\"keyword\">this</span>.errorViewResolvers) &#123;</span><br><span class=\"line\">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (modelAndView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>l浏览器发送请求 accpt:text/html</p>\n<p>客户端请求：accept:/*</p>\n<h3 id=\"2、如何定制错误响应\"><a href=\"#2、如何定制错误响应\" class=\"headerlink\" title=\"2、如何定制错误响应\"></a>2、如何定制错误响应</h3><p>​    1）、如何定制错误的页面</p>\n<p>​        1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html</p>\n<p>​        有精确的404和4xx优先选择404</p>\n<p>​        页面获得的数据</p>\n<p>​            timestamp：时间戳</p>\n<p>​            status：状态码</p>\n<p>​            error：错误提示</p>\n<p>​            exception：异常对象</p>\n<p>​            message：异常信息</p>\n<p>​            errors:JSR303有关</p>\n<p>​        2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值</p>\n<p>​        3.没有放模板引擎，没放静态，会显示默认的错误</p>\n<p>​    2）、如何定义错误的数据</p>\n<p>举例子：新建4xx和5xx文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg\" alt=\"21.error-static\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>status: [[$&#123;status&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>timestamp: [[$&#123;timestamp&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>error: [[$&#123;error&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>message: [[$&#123;message&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>exception: [[$&#123;exception&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg\" alt=\"22.4xxhtml\"></p>\n<h3 id=\"3、如何定制Json数据\"><a href=\"#3、如何定制Json数据\" class=\"headerlink\" title=\"3、如何定制Json数据\"></a>3、如何定制Json数据</h3><h4 id=\"1、仅发送json数据\"><a href=\"#1、仅发送json数据\" class=\"headerlink\" title=\"1、仅发送json数据\"></a>1、仅发送json数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserNotExitsException</span> <span class=\"keyword\">extends</span>  <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserNotExitsException</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">&quot;用户不存在&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异常处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">handlerException</span><span class=\"params\">(Exception e)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无法自适应 都是返回的json数据</p>\n<h4 id=\"2、转发到error自适应处理\"><a href=\"#2、转发到error自适应处理\" class=\"headerlink\" title=\"2、转发到error自适应处理\"></a>2、转发到error自适应处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">    <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序默认获取状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HttpStatus <span class=\"title\">getStatus</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">   Integer statusCode = (Integer) request</span><br><span class=\"line\">         .getAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (statusCode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.valueOf(statusCode);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有自己写的自定义异常数据</p>\n<h4 id=\"3、自适应和定制数据传入\"><a href=\"#3、自适应和定制数据传入\" class=\"headerlink\" title=\"3、自适应和定制数据传入\"></a>3、自适应和定制数据传入</h4><p>Spring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；</p>\n<p>1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；</p>\n<p>2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyErrorAttributes</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultErrorAttributes</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes, <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;company&quot;</span>, <span class=\"string\">&quot;wdjr&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异常处理：把map方法请求域中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;ext&quot;</span>, map);</span><br><span class=\"line\">        <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的MyErrorAttributes类中加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们的异常处理器</span></span><br><span class=\"line\">Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) requestAttributes.getAttribute(<span class=\"string\">&quot;ext&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;ext&quot;</span>, ext);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、配置嵌入式servlet容器\"><a href=\"#8、配置嵌入式servlet容器\" class=\"headerlink\" title=\"8、配置嵌入式servlet容器\"></a>8、配置嵌入式servlet容器</h2><h3 id=\"1、定制和修改Servlet容器\"><a href=\"#1、定制和修改Servlet容器\" class=\"headerlink\" title=\"1、定制和修改Servlet容器\"></a>1、定制和修改Servlet容器</h3><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p>![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)</p>\n<p>问题？</p>\n<p>1）、如何定制和修改Servlet容器；</p>\n<p>1、 修改Server相关的配置文件 application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通用的servlet容器配置</span></span><br><span class=\"line\"><span class=\"attr\">server.xxx</span></span><br><span class=\"line\"><span class=\"comment\">#tomcat的配置</span></span><br><span class=\"line\"><span class=\"attr\">server.tomcat.xxxx</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">embeddedServletContainerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定制嵌入式Servlet的容器相关规则</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.setPort(<span class=\"number\">8999</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实同理，都是实现EmbeddedServletContainerCustomizer</p>\n<h3 id=\"2、注册Servlet三大组件\"><a href=\"#2、注册Servlet三大组件\" class=\"headerlink\" title=\"2、注册Servlet三大组件\"></a>2、注册Servlet三大组件</h3><p>三大组件 Servlet Filter Listener</p>\n<p>由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml</p>\n<p>注册三大组件</p>\n<h4 id=\"ServletRegistrationBean\"><a href=\"#ServletRegistrationBean\" class=\"headerlink\" title=\"ServletRegistrationBean\"></a>ServletRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean servletRegistrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> MyServlet(),<span class=\"string\">&quot;/servlet&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> servletRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">&quot;Hello Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FilterRegistrationBean\"><a href=\"#FilterRegistrationBean\" class=\"headerlink\" title=\"FilterRegistrationBean\"></a>FilterRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/hello&quot;</span>,<span class=\"string\">&quot;/myServlet&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyFilter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyFilter process&quot;</span>);</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ServletListenerRegistrationBean\"><a href=\"#ServletListenerRegistrationBean\" class=\"headerlink\" title=\"ServletListenerRegistrationBean\"></a>ServletListenerRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> MyListener());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用启动..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用销毁..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">dispatcherServletRegistration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class=\"line\">      ServletRegistrationBean registration = <span class=\"keyword\">new</span> ServletRegistrationBean(</span><br><span class=\"line\">            dispatcherServlet, <span class=\"keyword\">this</span>.serverProperties.getServletMapping());</span><br><span class=\"line\">       <span class=\"comment\">//默认拦截 /所有请求 包括静态资源 不包括jsp</span></span><br><span class=\"line\">       <span class=\"comment\">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class=\"line\">      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">      registration.setLoadOnStartup(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.multipartConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         registration.setMultipartConfig(<span class=\"keyword\">this</span>.multipartConfig);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、切换其他的Servlet容器\"><a href=\"#3、切换其他的Servlet容器\" class=\"headerlink\" title=\"3、切换其他的Servlet容器\"></a>3、切换其他的Servlet容器</h3><p>在ServerProperties中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Jetty jetty = <span class=\"keyword\">new</span> Jetty();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Undertow undertow = <span class=\"keyword\">new</span> Undertow();</span><br></pre></td></tr></table></figure>\n\n<p>tomcat(默认支持)</p>\n<p>jetty（长连接）</p>\n<p>undertow（多并发）</p>\n<p>切换容器 仅仅需要修改pom文件的依赖就可以</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、嵌入式Servlet容器自动配置原理\"><a href=\"#4、嵌入式Servlet容器自动配置原理\" class=\"headerlink\" title=\"4、嵌入式Servlet容器自动配置原理\"></a>4、嵌入式Servlet容器自动配置原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import(BeanPostProcessorsRegistrar.class)</span></span><br><span class=\"line\"><span class=\"comment\">//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class=\"comment\">//当前是否引入tomcat依赖</span></span><br><span class=\"line\">    <span class=\"comment\">//判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedTomcat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取嵌入式的Servlet容器</span></span><br><span class=\"line\">   <span class=\"function\">EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         ServletContextInitializer... initializers)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承关系</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg\" alt=\"24.EmdServletFactory\"></p>\n<p>2）、EmbeddedServletContainer:(嵌入式的Servlet容器)</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg\" alt=\"25.EmdServletContainer\"></p>\n<p>3）、TomcatEmbeddedServletContainerFactory为例 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class=\"line\">   Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\">    <span class=\"comment\">//配置tomcat的基本环节</span></span><br><span class=\"line\">   File baseDir = (<span class=\"keyword\">this</span>.baseDirectory != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.baseDirectory</span><br><span class=\"line\">         : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>));</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   Connector connector = <span class=\"keyword\">new</span> Connector(<span class=\"keyword\">this</span>.protocol);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"keyword\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    <span class=\"comment\">//将配置好的tomcat传入进去；并且启动tomcat容器</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、嵌入式配置修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>\n\n<p>EmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？</p>\n<p>怎么修改？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.beanFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;embeddedServletContainerCustomizerBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         EmbeddedServletContainerCustomizerBeanPostProcessor.class);</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;errorPageRegistrarBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class=\"line\">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class=\"line\">        customizer.customize(bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class=\"title\">getCustomizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customizers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Look up does not include the parent context</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = <span class=\"keyword\">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanFactory</span><br><span class=\"line\">            <span class=\"comment\">//从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class=\"line\">            <span class=\"comment\">//定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class=\"line\">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class=\"line\">                            <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            .values());</span><br><span class=\"line\">        Collections.sort(<span class=\"keyword\">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = Collections.unmodifiableList(<span class=\"keyword\">this</span>.customizers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customizers;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ServerProperties也是EmbeddedServletContainerCustomizer定制器</p>\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat</p>\n<p>EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就要通过后置处理器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerCustomizerBeanPostProcessor</span><br></pre></td></tr></table></figure>\n\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法</p>\n<h3 id=\"5、嵌入式Servlet容器启动原理\"><a href=\"#5、嵌入式Servlet容器启动原理\" class=\"headerlink\" title=\"5、嵌入式Servlet容器启动原理\"></a>5、嵌入式Servlet容器启动原理</h3><p>什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;</p>\n<p>获取嵌入式的容器工厂</p>\n<p>1）、SpringBoot应用启动Run方法</p>\n<p>2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (contextClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      contextClass = Class.forName(<span class=\"keyword\">this</span>.webEnvironment</span><br><span class=\"line\">            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3）、refresh(context);刷新创建好的IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">   postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">   invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">   registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">   initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">   initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">   onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">   registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">   finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">   finishRefresh();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、 onRefresh();web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer</p>\n<p>6）、获取嵌入式的Servlet容器工厂；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br></pre></td></tr></table></figure>\n\n<p>从ioc容器中获取EmbeddedServletContainerFactory组件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；</p>\n<p>7）、使用容器工厂获取嵌入式的Servlet容器</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p>先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来</p>\n<p>ioc启动创建Servlet容器</p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式的Servlet容器：应用达成jar包</p>\n<p>​    优点：简单、便携</p>\n<p>​    缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）</p>\n<p>外置的Servlet容器：外面安装Tomcat是以war包的方式打包。</p>\n<h3 id=\"1、IDEA操作外部Servlet\"><a href=\"#1、IDEA操作外部Servlet\" class=\"headerlink\" title=\"1、IDEA操作外部Servlet\"></a>1、IDEA操作外部Servlet</h3><p>1、创建程序为war程序</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg\" alt=\"26.tomcat1\"></p>\n<p>2、选择版本</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg\" alt=\"27.tomcat2\"></p>\n<p>3、添加tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg\" alt=\"28.tomcat3\"></p>\n<p>4、选择tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg\" alt=\"30.tomcat4\"></p>\n<p>5、选择本地的Tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg\" alt=\"31.tomcat5\"></p>\n<p>6、配置tomcat路径</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg\" alt=\"32.tomcat6\"></p>\n<p>7、添加服务器</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg\" alt=\"33.tomcat7\"></p>\n<p>8、添加exploded的war配置，应用OK tomcat配置完成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg\" alt=\"34.tomcat8\"></p>\n<p>二、配置webapp文件夹</p>\n<p>1、点击配置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg\" alt=\"35.tomcat9\"></p>\n<p>2、添加webapp目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg\" alt=\"36.tomcat10\"></p>\n<p>3、默认配置就可以</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg\" alt=\"37.tomcat11\"></p>\n<p>4、配置web.xml文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg\" alt=\"38.tomcat12\"></p>\n<p>5、文档目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg\" alt=\"39.tomcat13\"></p>\n<h3 id=\"2、运行一个示例\"><a href=\"#2、运行一个示例\" class=\"headerlink\" title=\"2、运行一个示例\"></a>2、运行一个示例</h3><p>1、项目目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg\" alt=\"40.demo1\"></p>\n<p>2、配置文件写视图解析前后缀</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.view.prefix</span>=<span class=\"string\">/WEB-INF/jsp/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.mvc.view.suffix</span>=<span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n\n<p>3、HelloController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;message&quot;</span>,<span class=\"string\">&quot;这是Controller传过来的message&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、success.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Success&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class=\"line\">message:$&#123;message&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行结果</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg\" alt=\"41.demo2\"></p>\n<p>步骤</p>\n<p>1、必须创建一个war项目；</p>\n<p>2、将嵌入式的Tomcat指定为provided</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入SpringBoot的主程序，</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动服务器就可以；</p>\n<h3 id=\"3、原理\"><a href=\"#3、原理\" class=\"headerlink\" title=\"3、原理\"></a>3、原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；</p>\n<p>war包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器</p>\n<p>servlet3.0规范</p>\n<p> 8.2.4 共享库和运行时插件</p>\n<p>规则：</p>\n<p>1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例</p>\n<p>2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名</p>\n<p>3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类</p>\n<p>流程：</p>\n<p>1、启动Tomcat服务器</p>\n<p>2、spring web模块里有这个文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg\" alt=\"42.servletContainerInit\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure>\n\n<p>3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set&lt;Class&lt;?&gt;&gt;;为这些感兴趣类创建实例</p>\n<p>4、每个创建好的WebApplicationInitializer调用自己的onStratup</p>\n<p>5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createRootApplicationContext</span><span class=\"params\">(ServletContext servletContext)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplicationBuilder builder = <span class=\"keyword\">this</span>.createSpringApplicationBuilder();</span><br><span class=\"line\">    <span class=\"comment\">//环境构建器</span></span><br><span class=\"line\">    StandardServletEnvironment environment = <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    environment.initPropertySources(servletContext, (ServletConfig)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    builder.environment(environment);</span><br><span class=\"line\">    builder.main(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    ApplicationContext parent = <span class=\"keyword\">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.info(<span class=\"string\">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class=\"line\">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ParentContextApplicationContextInitializer(parent)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ServletContextApplicationContextInitializer(servletContext)&#125;);</span><br><span class=\"line\">    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class=\"line\">    <span class=\"comment\">//调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来</span></span><br><span class=\"line\">    builder = <span class=\"keyword\">this</span>.configure(builder);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个spring应用</span></span><br><span class=\"line\">    SpringApplication application = builder.build();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(<span class=\"keyword\">this</span>.getClass(), Configuration.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        application.getSources().add(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.state(!application.getSources().isEmpty(), <span class=\"string\">&quot;No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.registerErrorPageFilter) &#123;</span><br><span class=\"line\">        application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//最后启动Spring容器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.run(application);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、Spring的应用就启动完了并且创建IOC容器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、Docker\"><a href=\"#五、Docker\" class=\"headerlink\" title=\"五、Docker\"></a>五、Docker</h1><h2 id=\"1、简介-1\"><a href=\"#1、简介-1\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎</p>\n<p>将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；</p>\n<h2 id=\"2、Docker的核心概念\"><a href=\"#2、Docker的核心概念\" class=\"headerlink\" title=\"2、Docker的核心概念\"></a>2、Docker的核心概念</h2><p>docker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）</p>\n<p>docker客户端（Client）:操作docker主机</p>\n<p>docker仓库（Registry）：用来保存打包好的软件镜像</p>\n<p>docker镜像（Image）:软件打好包的镜像，放到docker的仓库中</p>\n<p>docker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）</p>\n<p>docker的步骤：</p>\n<p>​    1、安装Docker</p>\n<p>​    2、去Docker仓库找到这个软件对应的镜像；</p>\n<p>​    3、使用Docker运行的这个镜像，镜像就会生成一个容器</p>\n<p>​    4、对容器的启动停止，就是对软件的启动和停止</p>\n<h2 id=\"3、安装Docker\"><a href=\"#3、安装Docker\" class=\"headerlink\" title=\"3、安装Docker\"></a>3、安装Docker</h2><h3 id=\"1、安装Linux\"><a href=\"#1、安装Linux\" class=\"headerlink\" title=\"1、安装Linux\"></a>1、安装Linux</h3><p><a href=\"http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1\">安装vxbox并且安装ubuntu</a></p>\n<h3 id=\"2、在linux上安装docker\"><a href=\"#2、在linux上安装docker\" class=\"headerlink\" title=\"2、在linux上安装docker\"></a>2、在linux上安装docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看centos版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> uname -r</span></span><br><span class=\"line\">3.10.0-693.el7.x86_64</span><br><span class=\"line\">要求：大于3.10</span><br><span class=\"line\">如果小于的话升级*（选做）</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum update</span></span><br><span class=\"line\">2、安装docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install docker</span></span><br><span class=\"line\">3、启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker -v</span></span><br><span class=\"line\">4、开机启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\">5、停止docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop docker</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、docker的常用操作\"><a href=\"#4、docker的常用操作\" class=\"headerlink\" title=\"4、docker的常用操作\"></a>4、docker的常用操作</h2><h3 id=\"1、镜像操作\"><a href=\"#1、镜像操作\" class=\"headerlink\" title=\"1、镜像操作\"></a>1、镜像操作</h3><p>1、搜索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<p>默认去docker hub网站查找<img src=\"E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg\" alt=\"44.docker1\"></p>\n<p>2、拉取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认最新版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docekr pull mysql</span></span><br><span class=\"line\">安装指定版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull mysql:5.5</span></span><br></pre></td></tr></table></figure>\n\n<p>3、查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p>4、删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、容器操作\"><a href=\"#2、容器操作\" class=\"headerlink\" title=\"2、容器操作\"></a>2、容器操作</h3><p>软件的镜像（qq.exe） – 运行镜像 – 产生一个容器（正在运行的软件）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、搜索镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search tomcat</span></span><br><span class=\"line\">2、拉取镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull tomcat</span></span><br><span class=\"line\">3、根据镜像启动容器</span><br><span class=\"line\">[root@lion ~]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">docker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d tomcat:latest</span><br><span class=\"line\">2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249</span><br><span class=\"line\">4、查看那个进程正在进行</span><br><span class=\"line\">[root@lion ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat</span><br><span class=\"line\">5、停止运行中容器</span><br><span class=\"line\">[root@lion ~]# docker stop 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">6、查看所有容器</span><br><span class=\"line\">[root@lion ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat</span><br><span class=\"line\">7、启动容器</span><br><span class=\"line\">[root@lion ~]# docker start 2f0348702f5f</span><br><span class=\"line\">8、删除docker容器</span><br><span class=\"line\">[root@lion ~]# docker rm 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">9、端口映射</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat</span><br><span class=\"line\">692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29</span><br><span class=\"line\">虚拟机:8888</span><br><span class=\"line\">容器的:8080</span><br><span class=\"line\">-d:后台运行</span><br><span class=\"line\">-p:主机端口映射到容器端口</span><br><span class=\"line\">浏览器：192.168.179.129:8888</span><br><span class=\"line\">10、docker的日志</span><br><span class=\"line\">[root@lion ~]# docker logs 692c408c2201</span><br><span class=\"line\">11、多个启动</span><br><span class=\"line\">[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat</span><br><span class=\"line\">浏览器：192.168.179.129:9000</span><br></pre></td></tr></table></figure>\n\n<p>更多命令参考docker镜像文档</p>\n<h3 id=\"3、安装Mysql\"><a href=\"#3、安装Mysql\" class=\"headerlink\" title=\"3、安装Mysql\"></a>3、安装Mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、数据访问\"><a href=\"#六、数据访问\" class=\"headerlink\" title=\"六、数据访问\"></a>六、数据访问</h1><h2 id=\"1、整合JDBC数据源\"><a href=\"#1、整合JDBC数据源\" class=\"headerlink\" title=\"1、整合JDBC数据源\"></a>1、整合JDBC数据源</h2><p>1、新建项目 spring-boot-06-data-jdbc</p>\n<ul>\n<li>WEB</li>\n<li>Mysql</li>\n<li>JDBC</li>\n<li>SpringBoot1.5</li>\n</ul>\n<p>2、编写配置文件appliction.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写测试类测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot06DataJdbcApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(dataSource.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class org.apache.tomcat.jdbc.pool.DataSource</span><br><span class=\"line\">ProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]</span><br></pre></td></tr></table></figure>\n\n<p>数据源相关配置都在DataSourceProperties属性里</p>\n<p>自动配置原理</p>\n<p>E:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc</p>\n<h3 id=\"1、DataSource\"><a href=\"#1、DataSource\" class=\"headerlink\" title=\"1、DataSource\"></a>1、DataSource</h3><p>参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源</p>\n<h3 id=\"2、SpringBoot默认支持\"><a href=\"#2、SpringBoot默认支持\" class=\"headerlink\" title=\"2、SpringBoot默认支持\"></a>2、SpringBoot默认支持</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tomcat数据源</span><br><span class=\"line\">HikariDataSource</span><br><span class=\"line\">dbcp.BasicDataSource</span><br><span class=\"line\">dbcp2.BasicDataSource</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、自定义数据源\"><a href=\"#3、自定义数据源\" class=\"headerlink\" title=\"3、自定义数据源\"></a>3、自定义数据源</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、运行sql建表\"><a href=\"#4、运行sql建表\" class=\"headerlink\" title=\"4、运行sql建表\"></a>4、运行sql建表</h3><p>在DataSourceAutoConfiguration中<strong>DataSourceInitializer</strong>类</p>\n<p>监听器</p>\n<p>作用：</p>\n<p>1）、postConstruct -》runSchemaScript 运行建表sql文件</p>\n<p>2）、runDataScript运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span> data<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span></span><br><span class=\"line\">默认规则：schema.sql ,schema<span class=\"operator\">-</span>all.sql;</span><br></pre></td></tr></table></figure>\n\n<p><strong>举个栗子</strong></p>\n<p>创建department表</p>\n<p>1、department.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Navicat MySQL Data Transfer</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Source Server         : 192.168.179.131</span></span><br><span class=\"line\"><span class=\"comment\">Source Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">Source Host           : 192.168.179.131:3306</span></span><br><span class=\"line\"><span class=\"comment\">Source Database       : jdbc</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Target Server Type    : MYSQL</span></span><br><span class=\"line\"><span class=\"comment\">Target Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">File Encoding         : 65001</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Date: 2018-05-14 14:28:52</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- Table structure for department</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `department`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `department` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `departmentName` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、将department.sql命名为schema-all.sql</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg\" alt=\"45.schema-all\"></p>\n<p>3、运行测试类</p>\n<p>自定义sql的文件名，department.sql在配置文件中</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">schema:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">classpath:department.sql</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5、操作JdbcTemplate\"><a href=\"#5、操作JdbcTemplate\" class=\"headerlink\" title=\"5、操作JdbcTemplate\"></a>5、操作JdbcTemplate</h3><p><strong>FBI warning</strong>:将department.sql删除或者改名，因为运行文件会将表中数据清除</p>\n<p>1、新建一个Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class=\"string\">&quot;select * from department&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、表中添加数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\46.department.jpg\" alt=\"46.department\"></p>\n<p>3、访问请求查询数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\47.hello.jpg\" alt=\"47.hello\"></p>\n<h2 id=\"2、自定义数据源\"><a href=\"#2、自定义数据源\" class=\"headerlink\" title=\"2、自定义数据源\"></a>2、自定义数据源</h2><p>1、导入Druid的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>已经替换了原来的tomcat数据源</p>\n<p>3、配置Druid数据源配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">\t<span class=\"comment\"># 初始化大小，最小，最大  </span></span><br><span class=\"line\">    <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置获取连接等待超时的时间  </span></span><br><span class=\"line\">    <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">    <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙</span></span><br><span class=\"line\">    <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">userGlobalDataSourceStat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录  </span></span><br><span class=\"line\">    <span class=\"attr\">connectionProperties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>4、Druid配置监控</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Druid的监控</span></span><br><span class=\"line\">    <span class=\"comment\">//1、配置一个管理后台</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> StatViewServlet(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginUsername&quot;</span>, <span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginPassword&quot;</span>, <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2、配置监控的filter</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webstatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;exclusions&quot;</span>, <span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行测试，访问 localhost:9000/druid</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\48.druid.jpg\" alt=\"48.druid\"></p>\n<p>输入刚才调好的用户名密码即可访问</p>\n<h2 id=\"3、整合Mybatis\"><a href=\"#3、整合Mybatis\" class=\"headerlink\" title=\"3、整合Mybatis\"></a>3、整合Mybatis</h2><p>1、新建工程，SpringBoot1.5+web+JDBC+Mysql</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、导入配置文件中关于Druid的配置</p>\n<p>​    2.1、导入依赖</p>\n<p>​    2.2、配置文件application.yml（指定用户名密码…配置Druid的配置参数，修改sql文件加载的默认名）</p>\n<p>​    2.3、将Druid组件加入到容器中（监控）重点</p>\n<p>​    具体同上</p>\n<p>3、创建数据表department和employee表</p>\n<p>​    3.1、根据sql文件，新建两张表</p>\n<p>​    3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">schema:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/department.sql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/employeee.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>​    3.3、运行程序检查数据库是否创建成功</p>\n<p>4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） </p>\n<p>在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类名冲突所以全类名</span></span><br><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title\">configurationCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConfigurationCustomizer() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">                configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><p>5、新建mapper</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//指定是一个mapper</span></span><br><span class=\"line\"><span class=\"string\">@Mapper</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">interface</span> <span class=\"string\">DepartmentMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Insert(&quot;insert</span> <span class=\"string\">into</span> <span class=\"string\">department(dept_name)</span> <span class=\"string\">value(#</span>&#123;<span class=\"string\">deptName</span>&#125;<span class=\"string\">)&quot;)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">int</span> <span class=\"string\">insertDept(Department</span> <span class=\"string\">department);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Delete(&quot;delete</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int deleteDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Update(&quot;</span><span class=\"string\">update</span> <span class=\"string\">department</span> <span class=\"string\">set</span> <span class=\"string\">dept_Name=#</span>&#123;<span class=\"string\">deptName</span>&#125; <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int updateDept(Department department);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Select(&quot;</span><span class=\"string\">select</span> <span class=\"string\">*</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public Department getDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>6、编写controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeptController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DepartmentMapper departmentMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDepartment</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.getDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/delDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.deleteDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.updateDept(<span class=\"keyword\">new</span> Department(id, <span class=\"string\">&quot;开发部&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertDept</span><span class=\"params\">(Department department)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.insertDept(department);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>mapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文</p>\n<p>件夹下的mapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主配置类或者mybatis配置类</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(value = &quot;com.wdjr.springboot.mapper&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件方式\"><a href=\"#配置文件方式\" class=\"headerlink\" title=\"配置文件方式\"></a>配置文件方式</h3><p>1、新建文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg\" alt=\"50.mybatisxml\"></p>\n<p>2、新建mybatis的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、新建Employee的接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insetEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、新建Employee的mapper.xml的映射文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.wdjr.springboot.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getEmpById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.wdjr.springboot.bean.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">      select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insetEmp&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、修改application.yml配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>6、新建一个Controller访问方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeMapper employeeMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getEmp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeMapper.getEmpById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insertEmp&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">insertEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">        employeeMapper.insetEmp(employee);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、JPA数据访问\"><a href=\"#4、JPA数据访问\" class=\"headerlink\" title=\"4、JPA数据访问\"></a>4、JPA数据访问</h2><p>新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC</p>\n<p>目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg\" alt=\"51.JPA\"></p>\n<p>1、新建一个实体类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用JPA注解配置映射关系</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span><span class=\"comment\">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name=&quot;tbl_user&quot;)</span> <span class=\"comment\">//@Table来指定和那个数据表对应，如果省略默认表明就是user;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//这是一个主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class=\"comment\">//自增组件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;last_name&quot;,length = 50)</span> <span class=\"comment\">//这是和数据表对应的一个列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span><span class=\"comment\">//省略默认列名就是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个UserRepository来继承jpa的绝大多数功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承jpaRepository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131/jpa</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">    <span class=\"comment\">#更新或创建</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>4、编写Controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        User user = userRepository.findOne(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">insertUser</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">        User user1 = userRepository.save(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  user1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七、启动配置原理\"><a href=\"#七、启动配置原理\" class=\"headerlink\" title=\"七、启动配置原理\"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>\n<p>加载配置文件META-INF/spring.factories</p>\n<p>​    ApplicationContextInitializer</p>\n<p>​    SpringApplicationRunListener</p>\n<p>ioc容器中</p>\n<p>​    ApplicationRunner</p>\n<p>​    CommandLineRunner</p>\n<p>启动流程</p>\n<h2 id=\"1、创建SpringApplicaiotn对象\"><a href=\"#1、创建SpringApplicaiotn对象\" class=\"headerlink\" title=\"1、创建SpringApplicaiotn对象\"></a>1、创建SpringApplicaiotn对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Object[] sources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存主配置类</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sources != <span class=\"keyword\">null</span> &amp;&amp; sources.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前是否是个web应用</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来</span></span><br><span class=\"line\">   setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">         ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来</span></span><br><span class=\"line\">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">//决定哪一个是主程序</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ApplicationInitializer</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg\" alt=\"52.applicationCotextInitializer\"></p>\n<p> ApplicationListener</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg\" alt=\"53.Listener\"></p>\n<h2 id=\"2、运行Run方法\"><a href=\"#2、运行Run方法\" class=\"headerlink\" title=\"2、运行Run方法\"></a>2、运行Run方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">//获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory</span></span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">//回调所有的SpringApplicationRunListener.starting()方法</span></span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//封装命令行参数</span></span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">       <span class=\"comment\">//准备环境</span></span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成</span></span><br><span class=\"line\">       <span class=\"comment\">//打印SpringBoot图标</span></span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">       <span class=\"comment\">//创建ApplicationContext，决定创建web的ioc容器还是普通的ioc</span></span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">       <span class=\"comment\">//异常分析</span></span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">       <span class=\"comment\">//重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//回调所有的SpringApplicationRunListener的contextPrepare()</span></span><br><span class=\"line\">       <span class=\"comment\">//告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded</span></span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">       <span class=\"comment\">//重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat</span></span><br><span class=\"line\">       <span class=\"comment\">//扫描 创建加载所有组件的地方</span></span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">       <span class=\"comment\">//从ioc中获取所有的ApplicationRunner和CommandLineRunner</span></span><br><span class=\"line\">       <span class=\"comment\">//ApplicationRunner先回调</span></span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">//保存应用状态</span></span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//整个springboot启动完成以后返回启动的ioc容器</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、事件监听机制\"><a href=\"#3、事件监听机制\" class=\"headerlink\" title=\"3、事件监听机制\"></a>3、事件监听机制</h2><p>新建listener监听</p>\n<p>文件目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg\" alt=\"54.listener2\"></p>\n<p>1、HelloApplicationContextInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型监听ioc容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextInitializer</span>&lt;<span class=\"title\">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationContextInitializer...跑起来了.....&quot;</span>+applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、HelloSpringApplicationRunListener</p>\n<p>加构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloSpringApplicationRunListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloSpringApplicationRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听容器开始......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环境准备好了......&quot;</span>+environment.getSystemProperties().get(<span class=\"string\">&quot;os.name&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ioc容器准备好了......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器环境已经加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finished</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;全部加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、HelloApplicationRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationRunner.....run....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、HelloCommandLineRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CommandLineRunner......run.....&quot;</span>+Arrays.asList(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件运行方法</p>\n<p>HelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Initializers</span><br><span class=\"line\">org.springframework.context.ApplicationContextInitializer&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloApplicationContextInitializer</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.boot.SpringApplicationRunListener&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloSpringApplicationRunListener</span><br></pre></td></tr></table></figure>\n\n<p>HelloApplicationRunner和HelloCommandLineRunner ioc加入</p>\n<p>@Component</p>\n<h1 id=\"八、SpringBoot的自定义starter\"><a href=\"#八、SpringBoot的自定义starter\" class=\"headerlink\" title=\"八、SpringBoot的自定义starter\"></a>八、SpringBoot的自定义starter</h1><p>starter：场景启动器</p>\n<p>1、场景需要使用什么依赖？</p>\n<p>2、如何编写自动配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//指定这个类是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnXXX</span> <span class=\"comment\">//在指定条件下成立的情况下自动配置类生效</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span> <span class=\"comment\">//指定自动配置类的顺序</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//给容器中添加组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span> <span class=\"comment\">//结合相关xxxProperties类来绑定相关的配置</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span> <span class=\"comment\">//让xxxProperties生效加到容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\">自动配置类要能加载</span><br><span class=\"line\">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br></pre></td></tr></table></figure>\n\n<p>3、模式</p>\n<p>启动器空的jar只需要做依赖管理导入；</p>\n<p>专门写一个自动配置模块；</p>\n<p>启动器依赖自动配置，别人只需要引入starter</p>\n<p>xxx-spring-boot-starter</p>\n<h3 id=\"新建一个starter\"><a href=\"#新建一个starter\" class=\"headerlink\" title=\"新建一个starter\"></a>新建一个starter</h3><blockquote>\n<p>绕的你怀疑人生</p>\n</blockquote>\n<h4 id=\"1、新建一个空项目工程\"><a href=\"#1、新建一个空项目工程\" class=\"headerlink\" title=\"1、新建一个空项目工程\"></a>1、新建一个空项目工程</h4><p><img src=\"E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg\" alt=\"56.starter01\"></p>\n<p>2、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg\" alt=\"57.starter02\"></p>\n<p>3、导入module</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg\" alt=\"58.starter03\"></p>\n<p>4、新建一个Maven工程</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg\" alt=\"59.starter04\"></p>\n<p>5、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg\" alt=\"60.starter05\"></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg\" alt=\"61.starter06\"></p>\n<p>6、在新建一个autoconfiguration类的spring</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg\" alt=\"62.starter07\"></p>\n<p>7、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg\" alt=\"63.starter08\"></p>\n<p>8、无需导入依赖</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg\" alt=\"64.starter09\"></p>\n<p>9、next</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg\" alt=\"65.starter10\"></p>\n<p>最后配置完成</p>\n<h4 id=\"2、编写starter\"><a href=\"#2、编写starter\" class=\"headerlink\" title=\"2、编写starter\"></a>2、编写starter</h4><h5 id=\"autoconfigurer\"><a href=\"#autoconfigurer\" class=\"headerlink\" title=\"autoconfigurer\"></a>autoconfigurer</h5><p>对<strong>lxy-spring-boot-starter-autoconfigurer</strong>进行删减</p>\n<p>目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg\" alt=\"66.starter-build01\"></p>\n<p>2、pom文件修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写相关的类</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg\" alt=\"67.starter-build02\"></p>\n<p>4、HelloProperties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;lxy.hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPrefix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrefix</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSuffix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuffix</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、HelloService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloProperties <span class=\"title\">getHelloProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHelloProperties</span><span class=\"params\">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.helloProperties = helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+name+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、HelloServiceAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        HelloService service = <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">        service.setHelloProperties(helloProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\</span><br><span class=\"line\">com.lxy.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter-autoconfigurer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>9、install生成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg\" alt=\"68.starter-build03\"></p>\n<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><p>新建一个springboot 1.5+web</p>\n<p>1、引入starter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个Controller用来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService.sayHello(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件制定前缀和后缀名</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">lxy.hello.prefix</span>=<span class=\"string\">Starter-</span></span><br><span class=\"line\"><span class=\"meta\">lxy.hello.suffix</span>=<span class=\"string\">-Success</span></span><br></pre></td></tr></table></figure>\n\n<p>4、运行访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg\" alt=\"70.starter-build05\"></p>\n<p>成功爽啊</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、Spring-Boot入门\"><a href=\"#一、Spring-Boot入门\" class=\"headerlink\" title=\"一、Spring Boot入门\"></a>一、Spring Boot入门</h1><h2 id=\"1、Spring-Boot简介\"><a href=\"#1、Spring-Boot简介\" class=\"headerlink\" title=\"1、Spring Boot简介\"></a>1、Spring Boot简介</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务，可以通过HTTP的方式进行互通</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元</p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p>环境约束</p>\n<ul>\n<li>jdk1.8</li>\n<li>maven 3.x :maven3.3以上</li>\n<li>IDEA2017</li>\n<li>SpringBoot 1.5.9RELEASE</li>\n</ul>\n<h3 id=\"1、MAVEN设置\"><a href=\"#1、MAVEN设置\" class=\"headerlink\" title=\"1、MAVEN设置\"></a>1、MAVEN设置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置JDK版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk18<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span>     </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，</span></span><br><span class=\"line\"><span class=\"comment\">        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。</span></span><br><span class=\"line\"><span class=\"comment\">        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;mirror&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;id&gt;spring-libs-milestone&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;name&gt;Spring Milestones&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/mirror&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 备选镜像，也是可以通过 url 去查找确定一下，</span></span><br><span class=\"line\"><span class=\"comment\">        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        typor<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://central.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>​    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件</p>\n<p>​    快捷键：</p>\n<p>​    Ctrl+D 复制一行</p>\n<p>​    Ctrl+Y 删除一行</p>\n<p>​    Ctrl+P 参数提示</p>\n<p>​    Ctrl+Alt+V 自动补齐方法</p>\n<p>​    Ctrl+N 查找类方法</p>\n<p>​    Alt+Ins 构造器、getter/setter toString</p>\n<p>​    Ctrl+O 重载方法提示</p>\n<p>​    Alt+Enter 提示导入类etc</p>\n<p>​    Shift+F6 :文件重命名</p>\n<h2 id=\"4、Spring-Boot的Hello-World\"><a href=\"#4、Spring-Boot的Hello-World\" class=\"headerlink\" title=\"4、Spring Boot的Hello World\"></a>4、Spring Boot的Hello World</h2><h3 id=\"1、创建一个Maven工程\"><a href=\"#1、创建一个Maven工程\" class=\"headerlink\" title=\"1、创建一个Maven工程\"></a>1、创建一个Maven工程</h3><h3 id=\"2、导入Spring-Boot的相关依赖\"><a href=\"#2、导入Spring-Boot的相关依赖\" class=\"headerlink\" title=\"2、导入Spring Boot的相关依赖\"></a>2、导入Spring Boot的相关依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写个主程序\"><a href=\"#3、编写个主程序\" class=\"headerlink\" title=\"3、编写个主程序\"></a>3、编写个主程序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写相应的Controller和Service\"><a href=\"#4、编写相应的Controller和Service\" class=\"headerlink\" title=\"4、编写相应的Controller和Service\"></a>4、编写相应的Controller和Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String  <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><p>访问 localhost:8080/hello</p>\n<h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><p>在pom.xml文件中，导入build插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、HelloWorld深度理解\"><a href=\"#5、HelloWorld深度理解\" class=\"headerlink\" title=\"5、HelloWorld深度理解\"></a>5、HelloWorld深度理解</h2><h3 id=\"1-POM-xml文件\"><a href=\"#1-POM-xml文件\" class=\"headerlink\" title=\"1.POM.xml文件\"></a>1.POM.xml文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个父项目<strong>spring-boot-starter-parent</strong>又依赖一个父项目</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面有个属性，定义了对应的版本号</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activemq.version</span>&gt;</span>5.15.3<span class=\"tag\">&lt;/<span class=\"name\">activemq.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">antlr2.version</span>&gt;</span>2.7.7<span class=\"tag\">&lt;/<span class=\"name\">antlr2.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appengine-sdk.version</span>&gt;</span>1.9.63<span class=\"tag\">&lt;/<span class=\"name\">appengine-sdk.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artemis.version</span>&gt;</span>2.4.0<span class=\"tag\">&lt;/<span class=\"name\">artemis.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aspectj.version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">aspectj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">assertj.version</span>&gt;</span>3.9.1<span class=\"tag\">&lt;/<span class=\"name\">assertj.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">atomikos.version</span>&gt;</span>4.0.6<span class=\"tag\">&lt;/<span class=\"name\">atomikos.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bitronix.version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">bitronix.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class=\"line\">    。。。。。。。</span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件</p>\n<p><strong>spring boot</strong>将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。</p>\n<h3 id=\"2、主程序入口\"><a href=\"#2、主程序入口\" class=\"headerlink\" title=\"2、主程序入口\"></a>2、主程序入口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot01HelloQuickApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootApplication:</strong> 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用</p>\n<p>进入SpringBootApplication注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@SpringBootConfiguration</strong>：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类</p>\n<p><strong>@Configuration</strong>:配置类上，来标注这个注解；<br>配置类 —- 配置文件，也是容器中的一个组件（@Component）<br><strong>@EnableAutoConfiguration</strong>:开启自动配置功能<br>以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动<br>配置功能；这样自动配置才能生效。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123; </span><br></pre></td></tr></table></figure>\n\n<p><strong>@AutoConfigurationPackage</strong>:自动配置包<br>**@Import({Registrar.class})**：底层注解，给容器导入组件；<br>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； </p>\n<p><strong>@Import({AutoConfigurationImportSelector.class})：</strong><br>给容器导入组件？ </p>\n<p>AutoConfigurationImportSelector：导入组件选择器 </p>\n<p>将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；</p>\n<p>会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置<br>好这些组件。 </p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\1.configuration.jpg\" alt=\"1.configuration\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; configurations =</span><br><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(<span class=\"keyword\">this</span>.getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\"><span class=\"keyword\">this</span>.getBeanClassLoader());</span><br><span class=\"line\">\tAssert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),</code><br><code>this.getBeanClassLoader());</code> </p>\n<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；</p>\n<p>将这些值作为自动配置类导入到容器中，自动配置就生效了。 <img src=\"E:\\工作文档\\SpringBoot\\images\\2.factories.jpg\" alt=\"2.factories\"></p>\n<p>J2EE的整体解决方案</p>\n<p>org\\springframework\\boot\\spring-boot-autoconfigure\\2.0.1.RELEASE\\spring-boot-autoconfigure-2.0.1.RELEASE.jar </p>\n<h2 id=\"6、使用Spring-Initializer创建一个快速向导\"><a href=\"#6、使用Spring-Initializer创建一个快速向导\" class=\"headerlink\" title=\"6、使用Spring Initializer创建一个快速向导\"></a>6、使用Spring Initializer创建一个快速向导</h2><p>1.IDE支持使用Spring Initializer</p>\n<p>自己选择需要的组件:例如web</p>\n<p>默认生成的SpringBoot项目 </p>\n<ul>\n<li>主程序已经生成好了，我们只需要完成我们的逻辑</li>\n</ul>\n<ul>\n<li><p>resources文件夹目录结构</p>\n<ul>\n<li><p>static:保存所有的静态文件；js css images</p>\n</li>\n<li><p>templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可</p>\n<p>以使用模板引擎（freemarker.thymeleaf）;</p>\n</li>\n<li><p>application.properties:Spring Boot的默认配置，例如 server.port=9000 </p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h1><h2 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h2><p>Spring Boot使用全局配置文件，配置文件名是固定的；</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml </li>\n</ul>\n<p>配置文件作用：修改Spring Boot在底层封装好的默认值；</p>\n<p>YAML（YAML AIN’T Markup Language）</p>\n<p>是一个标记语言</p>\n<p>又不是一个标记语言 </p>\n<p><strong>标记语言：</strong></p>\n<p>以前的配置文件；大多数使用的是 xxx.xml文件；</p>\n<p>以数据为中心，比json、xml等更适合做配置文件</p>\n<p>YAML：配置例子 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span> </span><br></pre></td></tr></table></figure>\n\n<p>XML: </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、YAML语法\"><a href=\"#2、YAML语法\" class=\"headerlink\" title=\"2、YAML语法\"></a>2、YAML语法</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v:表示一堆键值对（空格必须有）；</p>\n<p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">/hello</span> </span><br></pre></td></tr></table></figure>\n\n<p>属性和值也是大小写敏感 </p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><p><strong>字面量：普通的值（数字，字符串，布尔）</strong> </p>\n<p>k: v:字面直接来写；</p>\n<p>字符串默认不用加上单引号或者双引号</p>\n<p>“”:<strong>双引号</strong> 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思</p>\n<p><code>name:&quot;zhangsan\\n lisi&quot;</code> 输出：<code>zhangsan换行 lisi</code></p>\n<p>‘’:<strong>单引号</strong> 会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p><code>name:&#39;zhangsan\\n lisi&#39;</code> 输出：<code>zhangsan\\n lisi</code> </p>\n<p><strong>对象、Map（属性和值）键值对</strong> </p>\n<p>k :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进</p>\n<p>对象还是k:v的方式 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">frends:</span></span><br><span class=\"line\">\t<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">\t<span class=\"attr\">age:</span> <span class=\"number\">20</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span> &#123;<span class=\"attr\">lastName:</span> <span class=\"string\">zhangsan</span>,<span class=\"attr\">age:</span> <span class=\"number\">18</span>&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>数组（List、Set）:</strong><br>用-表示数组中的一个元素 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"string\">‐</span> <span class=\"string\">pig</span> </span><br></pre></td></tr></table></figure>\n\n<p>行内写法 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span> [<span class=\"string\">cat</span>,<span class=\"string\">dog</span>,<span class=\"string\">pig</span>] </span><br></pre></td></tr></table></figure>\n\n<p><strong>组合变量</strong></p>\n<p>多个组合到一起 </p>\n<h2 id=\"3、配置文件值注入\"><a href=\"#3、配置文件值注入\" class=\"headerlink\" title=\"3、配置文件值注入\"></a>3、配置文件值注入</h2><h3 id=\"1、-ConfigurationProperties\"><a href=\"#1、-ConfigurationProperties\" class=\"headerlink\" title=\"1、@ConfigurationProperties\"></a>1、@ConfigurationProperties</h3><p>1、application.yml 配置文件 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2017</span><span class=\"string\">/12/12</span></span><br><span class=\"line\">  <span class=\"attr\">maps:</span> &#123;<span class=\"attr\">k1:</span> <span class=\"string\">v1</span>,<span class=\"attr\">k2:</span> <span class=\"number\">12</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">lists:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">zhaoliu</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">wangwang</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">last-name:</span> <span class=\"string\">wanghuahua</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.properties</code> 配置文件（二选一） </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">idea配置文件utf-8</span></span><br><span class=\"line\"><span class=\"attr\">properties</span> <span class=\"string\">默认GBK</span></span><br><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>所以中文输出乱码，改进settings–&gt;file encoding –&gt;[property–&gt;utf-8 ,勾选转成ascii] </p>\n<p>javaBean </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将配置文件的配置每个属性的值，映射到组件中</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@ConfigurationProperties</span>:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\">* prefix = &quot;person&quot; 配置文件爱你的那个属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\">* *</span></span><br><span class=\"line\"><span class=\"comment\">只有这个组件是容器中的组件，才能提供到容器中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n<p>导入配置文件处理器，以后编写配置就有提示了 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring‐boot‐configuration‐processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"2、-Value注解\"><a href=\"#2、-Value注解\" class=\"headerlink\" title=\"2、@Value注解\"></a>2、@Value注解</h3><p>更改javaBean中的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;true&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@ConfigurationProperties</th>\n<th align=\"center\">@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">功能</td>\n<td align=\"center\">批量注入配置文件属性</td>\n<td align=\"center\">单个指定</td>\n</tr>\n<tr>\n<td align=\"center\">松散绑定(语法)</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">spEL</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">JSR303校验</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">复杂类型</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>松散语法：javaBean中last-name(或者lastName) –&gt;application.properties中的last-name;</p>\n<p>spEL语法：#{11*2} </p>\n<p>JSR303：@Value会直接忽略，校验规则</p>\n</blockquote>\n<p>JSR303校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p>复杂类型栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *     &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量/#&#123;spEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">   <span class=\"comment\">// @Value(&quot;$&#123;person.maps&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br></pre></td></tr></table></figure>\n\n<p>以上会报错，不支持复杂类型</p>\n<p><strong>使用场景分析</strong></p>\n<p>​    如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；</p>\n<p>如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties</p>\n<p>举栗子：</p>\n<p>1、编写新的Controller文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>+ name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试运行</p>\n<p>访问 localhost:9000/hello</p>\n<p>结果为<code>Hello 李四</code></p>\n<h3 id=\"3、其他注解\"><a href=\"#3、其他注解\" class=\"headerlink\" title=\"3、其他注解\"></a>3、其他注解</h3><p> <strong>@PropertySource</strong></p>\n<p>作用：加载指定的properties配置文件</p>\n<p>1、新建一个person.properties文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">12</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">李四</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在javaBean中加入@PropertySource注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@ImportResource</strong></p>\n<p>作用：导入Spring配置文件，并且让这个配置文件生效</p>\n<p>1、新建一个Spring的配置文件，bean.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;HelloService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.wdjr.springboot.service.HelloService&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写测试类，检查容器是否加载Spring配置文件写的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;HelloService&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>import org.springframework.context.ApplicationContext;</p>\n</blockquote>\n<p>3、运行检测</p>\n<p>结果为false，没有加载配置的内容</p>\n<p>4、使用@ImportResource注解</p>\n<p>将@ImportResource标注在主配置类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource(locations=&#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBoot02ConfigApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、再次运行检测</p>\n<p>结果为true</p>\n<p>缺点：每次指定xml文件太麻烦</p>\n<p>SpringBoot推荐给容器添加组件的方式：</p>\n<p>1、配置类=====Spring的xml配置文件（old）</p>\n<p>2、全注解方式@Configuration+@Bean（new）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\4.MyAppConfig.jpg\" alt=\"4.MyAppConfig\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>：指明当前类是一个配置类；就是来代替之前的Spring配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将方法的返回值添加到容器中；容器这个组件id就是方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;配置类给容器添加了HelloService组件&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext ioc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHelloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = ioc.containsBean(<span class=\"string\">&quot;helloService01&quot;</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <em>容器这个组件id就是方法名</em> </p>\n<h2 id=\"4、配置文件占位符\"><a href=\"#4、配置文件占位符\" class=\"headerlink\" title=\"4、配置文件占位符\"></a>4、配置文件占位符</h2><h4 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$&#123;random.value&#125;</span> <span class=\"string\">、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class=\"line\"><span class=\"attr\">$&#123;random.int(10)&#125;、$&#123;random.int[100,200]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、获取配置值\"><a href=\"#2、获取配置值\" class=\"headerlink\" title=\"2、获取配置值\"></a>2、获取配置值</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.last-name&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>存在以下两种情况</p>\n<p>没有声明<code>person.last-name</code>会报错，新声明的需要加默认值</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">张三$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.hello:hello&#125;&#x27;s wanghuahu</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>结果：输出<code>hello&#39;s wanghuahua</code></p>\n<h2 id=\"5、Profile\"><a href=\"#5、Profile\" class=\"headerlink\" title=\"5、Profile\"></a>5、Profile</h2><h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml</p>\n<ul>\n<li>application.properties</li>\n<li>application-dev.properties</li>\n<li>application-prod.properties</li>\n</ul>\n<p>默认使用application.properties</p>\n<p>application.properties配置文件指定</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、YAML文档块\"><a href=\"#2、YAML文档块\" class=\"headerlink\" title=\"2、YAML文档块\"></a>2、YAML文档块</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>1、在配置文件中激活</p>\n<p>2、命令行：</p>\n<p>–spring.profiles.active=dev</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\5.comandLine.jpg\" alt=\"5.comandLine\"></p>\n<p>优先级大于配置文件</p>\n<p>打包 成jar后</p>\n<p><code>java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></p>\n<p>虚拟机参数</p>\n<p><code>-Dspring.profiles.active=dev</code></p>\n<h2 id=\"6、加载配置文件位置\"><a href=\"#6、加载配置文件位置\" class=\"headerlink\" title=\"6、加载配置文件位置\"></a>6、加载配置文件位置</h2><p>SpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<ul>\n<li>file:./config/</li>\n<li>file./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ul>\n<p>优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置</p>\n<p>也可以通过spring.config.location来改变默认配置</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.servlet.context-path&#x3D;&#x2F;boot03</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>注：spring boot1x 是server.context.path=/boot02</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\7.priority.jpg\" alt=\"7.priority\"></p>\n<p>还可以通过spring.config.location来改变配置文件的位置</p>\n<p>项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置</p>\n<p><code>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties</code></p>\n<p>运维比较有用，从外部加载，不用修改别的文件</p>\n<h2 id=\"7-引入外部配置\"><a href=\"#7-引入外部配置\" class=\"headerlink\" title=\"7.引入外部配置\"></a>7.引入外部配置</h2><p><strong>SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补</strong></p>\n<ol>\n<li><p>命令行参数</p>\n<p>java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar –server.port=9005 –server.context-path=/abc</p>\n<p>中间一个空格</p>\n</li>\n<li><p>来自java:comp/env的JNDI属性</p>\n</li>\n<li><p>java系统属性（System.getProperties()）</p>\n</li>\n<li><p>操作系统环境变量</p>\n</li>\n<li><p>RandomValuePropertySource配置的random.*属性值</p>\n<p><strong>优先加载profile,    由jar包外到jar包内</strong></p>\n</li>\n<li><p><strong>jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包外部的application.properties或application.yml(带Spring.profile)配置文件</strong></p>\n</li>\n<li><p><strong>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n</li>\n<li><p>@Configuration注解类的@PropertySource</p>\n</li>\n<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>\n</li>\n</ol>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config\">官方文档</a></p>\n<h2 id=\"8、自动配置\"><a href=\"#8、自动配置\" class=\"headerlink\" title=\"8、自动配置\"></a>8、自动配置</h2><p>配置文件到底怎么写？</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties\">Spring的所有配置参数</a></p>\n<p>自动配置原理很关键</p>\n<h3 id=\"1、自动配置原理\"><a href=\"#1、自动配置原理\" class=\"headerlink\" title=\"1、自动配置原理\"></a>1、自动配置原理</h3><p>1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration</p>\n<p>2）、@EnableAutoConfiguration 作用：</p>\n<ul>\n<li>利用AutoConfigurationImportSelector给容器中导入一些组件？</li>\n<li>可以查看selectImports()方法的内容</li>\n<li>获取候选的配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; configurations = <span class=\"keyword\">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>扫描类路径下的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpringFactoriesLoader.loadFactoryNames(）</span><br><span class=\"line\">扫描所有jar包类路径下的 MATA-INF/spring.factories</span><br><span class=\"line\">把扫描到的这些文件的内容包装成properties对象</span><br><span class=\"line\">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中</span><br></pre></td></tr></table></figure>\n将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；</li>\n</ul>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration</strong> 为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;HttpEncodingProperties.class&#125;)</span><span class=\"comment\">//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span><span class=\"comment\">//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    type = Type.SERVLET</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><span class=\"comment\">//判断当前项目有没有这个类，解决乱码的过滤器</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(</span></span><br><span class=\"line\"><span class=\"meta\">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">    matchIfMissing = true</span></span><br><span class=\"line\"><span class=\"meta\">)</span><span class=\"comment\">//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//给容器添加组件，这个组件的值需要从properties属性中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpEncodingProperties properties;</span><br><span class=\"line\">\t<span class=\"comment\">//只有一个有参数构造器情况下，参数的值就会从容器中拿</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEncodingAutoConfiguration</span><span class=\"params\">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title\">characterEncodingFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CharacterEncodingFilter filter = <span class=\"keyword\">new</span> OrderedCharacterEncodingFilter();</span><br><span class=\"line\">        filter.setEncoding(<span class=\"keyword\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">        filter.setForceRequestEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));</span><br><span class=\"line\">        filter.setForceResponseEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span><span class=\"comment\">//从配置文件中的值进行绑定和bean属性进行绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>根据当前不同条件判断，决定这个配置类是否生效？</p>\n<p>一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的</p>\n<h3 id=\"2、所有的自动配置组件\"><a href=\"#2、所有的自动配置组件\" class=\"headerlink\" title=\"2、所有的自动配置组件\"></a>2、所有的自动配置组件</h3><p>每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；</p>\n<p>作用：用他们做自动配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Auto Configure</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、精髓：\"><a href=\"#3、精髓：\" class=\"headerlink\" title=\"3、精髓：\"></a>3、精髓：</h3><p>1）、SpringBoot启动会加载大量的自动配置类</p>\n<p>2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；</p>\n<p>3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）</p>\n<p>4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值</p>\n<p>xxxAutoConfiguration:自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxProperties:封装配置文件中的属性；</p>\n<p>跟之前的Person类一样，配置文件中值加入bean中</p>\n<h3 id=\"4、细节\"><a href=\"#4、细节\" class=\"headerlink\" title=\"4、细节\"></a>4、细节</h3><h4 id=\"1、-Conditional派生注解\"><a href=\"#1、-Conditional派生注解\" class=\"headerlink\" title=\"1、@Conditional派生注解\"></a>1、@Conditional派生注解</h4><blockquote>\n<p>利用Spring注解版原生的@Conditional作用</p>\n</blockquote>\n<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional派生注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissBean</td>\n<td>容器中不存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足spEL表达式</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean,或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定的资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、自动配置报告\"><a href=\"#2、自动配置报告\" class=\"headerlink\" title=\"2、自动配置报告\"></a>2、自动配置报告</h4><p>自动配置类必须在一定条件下生效</p>\n<p>我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>自动配置报告</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\">CONDITIONS EVALUATION REPORT</span><br><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:（启动的，匹配成功的）</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">   CodecsAutoConfiguration matched:</span><br><span class=\"line\">      - <span class=\"meta\">@ConditionalOnClass</span> found required <span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">http</span>.<span class=\"title\">codec</span>.<span class=\"title\">CodecConfigurer</span>&#x27;</span>; <span class=\"meta\">@ConditionalOnMissingClass</span> <span class=\"function\">did not find unwanted <span class=\"title\">class</span> <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">        ......</span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\"> Negative matches:（没有启动的，没有匹配成功的）</span></span><br><span class=\"line\"><span class=\"function\">-----------------</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   ActiveMQAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">.....</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h1><blockquote>\n<p>Spring Boot2对日志有更改</p>\n</blockquote>\n<h3 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h3><p>小张：开发一个大型系统；</p>\n<p>1、System.out.println(“”);将关键数据打印在控制台；去掉？卸载文件中</p>\n<p>2、框架记录系统的一些运行信息；日志框架zhanglog.jar</p>\n<p>3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?</p>\n<p>4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;</p>\n<p>5、JDBC–数据库驱动；</p>\n<p>​    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;</p>\n<p>​    给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；</p>\n<p>市面上的日志框架</p>\n<table>\n<thead>\n<tr>\n<th>日志抽象层</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL(Jakarta Commons Logging)</del> SLF4j(Simple Logging Facade for Java) <del>jboss-logging</del></td>\n<td>Log4j <del>JUL(java.util.logging)</del> Log4j2 Logback</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>左边的抽象，右边的实现</p>\n<p>SLF4J  – Logback</p>\n<p>Spring Boot:底层是Spring框架，Spring默认框架是JCL；</p>\n<p>​    SpringBoot选用SLF4J和logback</p>\n<h3 id=\"2、SLF4J使用\"><a href=\"#2、SLF4J使用\" class=\"headerlink\" title=\"2、SLF4J使用\"></a>2、SLF4J使用</h3><h4 id=\"1、如何在系统中使用SLF4j\"><a href=\"#1、如何在系统中使用SLF4j\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j\"></a>1、如何在系统中使用SLF4j</h4><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>应该给系统里面导入slf4j的jar包和logback的实现jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\8.slf4j.jpg\" alt=\"8.slf4j\"></p>\n<p>每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架本身的配置文件</strong>；</p>\n<h4 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h4><p>a系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis</p>\n<p>统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；</p>\n<p>核心：</p>\n<p>1、将系统中其他日志框架排除出去；</p>\n<p>2、用中间包来替换原有的日志框架/</p>\n<p>3、导入slf4j的其他实现</p>\n<h3 id=\"3、SpingBoot日志框架解析\"><a href=\"#3、SpingBoot日志框架解析\" class=\"headerlink\" title=\"3、SpingBoot日志框架解析\"></a>3、SpingBoot日志框架解析</h3><p>打开IDEA ，打开pom文件的依赖图形化显示</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\9.IDEAdependencies.jpg\" alt=\"9.IDEAdependencies\"></p>\n<p>SpringBoot的基础框架</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot的日志功能</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\10.slf4jandlogback.jpg\" alt=\"10.slf4jandlogback\"></p>\n<p>总结：</p>\n<ol>\n<li><p>SpringBoot底层也是使用SLF4J+log4jback</p>\n</li>\n<li><p>SpringBoot也把其他日志替换成了slf4j</p>\n</li>\n<li><p>起着commons.loggings的名字其实new的SLF4J替换中间包</p>\n<p>SpringBoot2中改成了bridge</p>\n</li>\n<li><p>如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层</p>\n</li>\n</ol>\n<h3 id=\"4、日志的使用\"><a href=\"#4、日志的使用\" class=\"headerlink\" title=\"4、日志的使用\"></a>4、日志的使用</h3><h4 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h4><p>trace-debug-info-warn-error</p>\n<p>可以调整需要的日志级别进行输出，不用注释语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//记录器</span></span><br><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日志的级别</span></span><br><span class=\"line\">    <span class=\"comment\">//从低到高</span></span><br><span class=\"line\">    <span class=\"comment\">//可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效</span></span><br><span class=\"line\">    logger.trace(<span class=\"string\">&quot;这是trace日志&quot;</span>);</span><br><span class=\"line\">    logger.debug(<span class=\"string\">&quot;这是debug信息&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//SpringBoot默认给的是info级别，如果没指定就是默认的root级别</span></span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;这是info日志&quot;</span>);</span><br><span class=\"line\">    logger.warn(<span class=\"string\">&quot;这是warn信息&quot;</span>);</span><br><span class=\"line\">    logger.error(<span class=\"string\">&quot;这是Error信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整指定包的日志级别在配置文件中进行配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br></pre></td></tr></table></figure>\n\n<p>日志输出格式</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 </span></span><br><span class=\"line\"><span class=\"comment\">#%d：日期</span></span><br><span class=\"line\"><span class=\"comment\">#%thread：线程号 </span></span><br><span class=\"line\"><span class=\"comment\">#%-5level：靠左 级别 </span></span><br><span class=\"line\"><span class=\"comment\">#%logger&#123;50&#125;：全类名50字符限制,否则按照句号分割</span></span><br><span class=\"line\"><span class=\"comment\">#%msg：消息+换行</span></span><br><span class=\"line\"><span class=\"comment\">#%n：换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot修改日志的默认配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.wdjr</span>=<span class=\"string\">trace</span></span><br><span class=\"line\"><span class=\"comment\">#不指定path就是当前目录下生成springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#logging.file=springboot.log</span></span><br><span class=\"line\"><span class=\"comment\">#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认</span></span><br><span class=\"line\"><span class=\"meta\">logging.path</span>=<span class=\"string\">/spring/log</span></span><br><span class=\"line\"><span class=\"comment\">#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class=\"line\"><span class=\"comment\">#指定文件中日志输出的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.file</span>=<span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置</p>\n<table>\n<thead>\n<tr>\n<th>logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td>logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy</td>\n</tr>\n<tr>\n<td>Log4J2</td>\n<td>log4j2-spring.xml or log4j2.xml</td>\n</tr>\n<tr>\n<td>JDK(Java Util Logging)</td>\n<td>logging.properties</td>\n</tr>\n</tbody></table>\n<p>logback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>!=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如何调试开发环境,输入命令行参数</p>\n<p>–spring.profiles.active=dev</p>\n<p>如果不带后面的xx-spring.xml就会报错</p>\n<h3 id=\"3、切换日志框架\"><a href=\"#3、切换日志框架\" class=\"headerlink\" title=\"3、切换日志框架\"></a>3、切换日志框架</h3><p>可以根据slf4j的日志适配图，进行相关切换；</p>\n<h4 id=\"1、log4j\"><a href=\"#1、log4j\" class=\"headerlink\" title=\"1、log4j\"></a>1、log4j</h4><p>slf4j+log4j的方式；</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\11.log4j.jpg\" alt=\"11.log4j\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不推荐使用仅作为演示</p>\n<h4 id=\"2、log4j2\"><a href=\"#2、log4j2\" class=\"headerlink\" title=\"2、log4j2\"></a>2、log4j2</h4><p>切换为log4j2</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、web开发\"><a href=\"#四、web开发\" class=\"headerlink\" title=\"四、web开发\"></a>四、web开发</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot;</p>\n<p>1)、创建SpringBoot应用，选中我们需要的模块；</p>\n<p>2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</p>\n<p>3)、自己编写业务代码</p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxAutoConfiguration:帮我们给容器中自动配置组件</span><br><span class=\"line\">xxxProperties:配置类来封装配置文件的内容</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、静态资源文件映射规则\"><a href=\"#2、静态资源文件映射规则\" class=\"headerlink\" title=\"2、静态资源文件映射规则\"></a>2、静态资源文件映射规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span>, <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以设置和静态资源相关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Integer cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCachePeriod();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(registry</span><br><span class=\"line\">            .addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">            .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   String staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(</span><br><span class=\"line\">            registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">                  .addResourceLocations(</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.resourceProperties.getStaticLocations())</span><br><span class=\"line\">                  .setCachePeriod(cachePeriod));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、webjar\"><a href=\"#1、webjar\" class=\"headerlink\" title=\"1、webjar\"></a>1、webjar</h3><p>1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；</p>\n<p>​    webjars：以jar包的方式引入静态资源</p>\n<p><a href=\"http://www.webjars.org/\">http://www.webjars.org/</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\12.jquery.jpg\" alt=\"12.jquery\"></p>\n<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>\n<h3 id=\"2、本地资源\"><a href=\"#2、本地资源\" class=\"headerlink\" title=\"2、本地资源\"></a>2、本地资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String staticPathPattern &#x3D; &quot;&#x2F;**&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>访问任何资源</p>\n<p>2、会在这几文件夹下去找静态路径（静态资源文件夹）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class=\"line\">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;public&#x2F;&quot;,</span><br><span class=\"line\">&quot;&#x2F;&quot;;当前项目的根路径</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\13.static.jpg\" alt=\"13.static\"></p>\n<p>localhost:8080/abc ==&gt;去静态资源文件夹中找abc</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\14.static-css.jpg\" alt=\"14.static-css\"></p>\n<p>3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；</p>\n<p>localhost:8080/  –&gt;index页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title\">welcomePageHandlerMapping</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、喜欢的图标，即网站title的图标favicon</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FaviconConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ResourceProperties resourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaviconConfiguration</span><span class=\"params\">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> SimpleUrlHandlerMapping <span class=\"title\">faviconHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      SimpleUrlHandlerMapping mapping = <span class=\"keyword\">new</span> SimpleUrlHandlerMapping();</span><br><span class=\"line\">      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//把任何favicon的图标都在静态文件夹下找</span></span><br><span class=\"line\">      mapping.setUrlMap(Collections.singletonMap(<span class=\"string\">&quot;**/favicon.ico&quot;</span>,</span><br><span class=\"line\">            faviconRequestHandler()));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mapping;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ResourceHttpRequestHandler <span class=\"title\">faviconRequestHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ResourceHttpRequestHandler requestHandler = <span class=\"keyword\">new</span> ResourceHttpRequestHandler();</span><br><span class=\"line\">      requestHandler</span><br><span class=\"line\">            .setLocations(<span class=\"keyword\">this</span>.resourceProperties.getFaviconLocations());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> requestHandler;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在配置文件配置静态资源文件夹</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.resources.static-locations</span>=<span class=\"string\">classpath:xxxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>将html和数据 结合到一起 输出组装处理好的新文件</p>\n<p>SpringBoot推荐Thymeleaf;语法简单，功能强大</p>\n<h3 id=\"1、引入thymeleaf-3\"><a href=\"#1、引入thymeleaf-3\" class=\"headerlink\" title=\"1、引入thymeleaf 3\"></a>1、引入thymeleaf 3</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认导入thymeleaf2，版本太低 所以使用thymeleaf3.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3\">官方导入办法</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--thymeleaf 3的导入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Thymeleaf使用和语法\"><a href=\"#2、Thymeleaf使用和语法\" class=\"headerlink\" title=\"2、Thymeleaf使用和语法\"></a>2、Thymeleaf使用和语法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">//只要把HTML文件方法类路径下的template文件夹下，就会自动导入</span></span><br></pre></td></tr></table></figure>\n\n<p>只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure>\n\n<p>2、使用thymeleaf语法；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--th:text 将div里面的文本内容设置为--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、语法规则</p>\n<p>1）、th:text=”${hello}”可以使用任意标签 替换原生的任何属性</p>\n<p><strong>在SpringBoot的环境下</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testid&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;testcalss&quot;</span> <span class=\"attr\">th:id</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;Lion&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t前端数据</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th01.jpg\" alt=\"15.thtmeleaf-th01\"></p>\n<p><strong>直接访问HTML页面</strong></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\15.thtmeleaf-th02.jpg\" alt=\"15.thtmeleaf-th02\"></p>\n<p><strong>2)、内联写法注意需要在body上加上 th:inline=”text”敲黑板</strong></p>\n<p>不然不起作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>th标签的访问优先级</p>\n<p>Order Feature Attributes</p>\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>功能</th>\n<th>标签</th>\n<th>功能和jsp对比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Fragment inclusion</td>\n<td>th:insert th:replace</td>\n<td>include(片段包含)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Fragment iteration</td>\n<td>th:each</td>\n<td>c:forEach(遍历)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Conditional evaluation</td>\n<td>th:if th:unless th:switch th:case</td>\n<td>c:if(条件判断)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Local variable definition</td>\n<td>th:object  th:with</td>\n<td>c:set(声明变量)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>General attribute modification</td>\n<td>th:attr th:attrprepend th:attrappend</td>\n<td>属性修改支持前面和后面追加内容</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Specific attribute modification</td>\n<td>th:value th:href th:src …</td>\n<td>修改任意属性值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Text (tag body modification)</td>\n<td>th:text th:utext</td>\n<td>修改标签体内容utext：不转义字符<h1>大标题</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Fragment specification</td>\n<td>th:fragment</td>\n<td>声明片段</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Fragment removal</td>\n<td>th:remove</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Simple</span> <span class=\"string\">expressions:(表达式语法)</span></span><br><span class=\"line\">    <span class=\"attr\">Variable</span> <span class=\"string\">Expressions: $&#123;...&#125;</span></span><br><span class=\"line\">    \t<span class=\"attr\">1、获取对象属性、调用方法</span></span><br><span class=\"line\">    \t<span class=\"attr\">2、使用内置基本对象：</span></span><br><span class=\"line\"><span class=\"comment\">    \t    #ctx : the context object.</span></span><br><span class=\"line\"><span class=\"comment\">            #vars: the context variables.</span></span><br><span class=\"line\"><span class=\"comment\">            #locale : the context locale.</span></span><br><span class=\"line\"><span class=\"comment\">            #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class=\"line\"><span class=\"comment\">            #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class=\"line\"><span class=\"comment\">            #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class=\"line\"><span class=\"comment\">            #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class=\"line\">         <span class=\"attr\">3、内置一些工具对象</span></span><br><span class=\"line\"><span class=\"comment\">        \t#execInfo : information about the template being processed.</span></span><br><span class=\"line\"><span class=\"comment\">        \t#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span></span><br><span class=\"line\">            <span class=\"attr\">would</span> <span class=\"string\">be obtained using #&#123;…&#125; syntax.</span></span><br><span class=\"line\"><span class=\"comment\">            #uris : methods for escaping parts of URLs/URIs</span></span><br><span class=\"line\"><span class=\"comment\">            #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class=\"line\"><span class=\"comment\">            #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #numbers : methods for formatting numeric objects.</span></span><br><span class=\"line\"><span class=\"comment\">            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class=\"line\"><span class=\"comment\">            #objects : methods for objects in general.</span></span><br><span class=\"line\"><span class=\"comment\">            #bools : methods for boolean evaluation.</span></span><br><span class=\"line\"><span class=\"comment\">            #arrays : methods for arrays.</span></span><br><span class=\"line\"><span class=\"comment\">            #lists : methods for lists.</span></span><br><span class=\"line\"><span class=\"comment\">            #sets : methods for sets.</span></span><br><span class=\"line\"><span class=\"comment\">            #maps : methods for maps.</span></span><br><span class=\"line\"><span class=\"comment\">            #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class=\"line\"><span class=\"comment\">            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class=\"line\">    <span class=\"attr\">Selection</span> <span class=\"string\">Variable Expressions: *&#123;...&#125; //选择表达式：和$&#123;&#125;功能一样，补充功能</span></span><br><span class=\"line\"><span class=\"comment\">   # 配合th:object使用，object=$&#123;object&#125; 以后获取就可以使用*&#123;a&#125;  相当于$&#123;object.a&#125;</span></span><br><span class=\"line\">  \t    <span class=\"meta\">&lt;div</span> <span class=\"string\">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Name</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Surname</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;p&gt;Nationality</span>: <span class=\"string\">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&lt;/div&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Message</span> <span class=\"string\">Expressions: #&#123;...&#125; //获取国际化内容</span></span><br><span class=\"line\">    <span class=\"attr\">Link</span> <span class=\"string\">URL Expressions: @&#123;...&#125; //定义URL链接</span></span><br><span class=\"line\"><span class=\"comment\">    \t#&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Fragment</span> <span class=\"string\">Expressions: ~&#123;...&#125;//片段文档</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">Literals（字面量）</span></span><br><span class=\"line\">    <span class=\"attr\">Text</span> <span class=\"string\">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Number</span> <span class=\"string\">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">literals: true , false</span></span><br><span class=\"line\">    <span class=\"attr\">Null</span> <span class=\"string\">literal: null</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">tokens: one , sometext , main ,…</span></span><br><span class=\"line\"><span class=\"attr\">Text</span> <span class=\"string\">operations:(文本操作)</span></span><br><span class=\"line\">    <span class=\"attr\">String</span> <span class=\"string\">concatenation: +</span></span><br><span class=\"line\">    <span class=\"attr\">Literal</span> <span class=\"string\">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class=\"line\"><span class=\"attr\">Arithmetic</span> <span class=\"string\">operations:（数学运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: + , - , * , / , %</span></span><br><span class=\"line\">    <span class=\"attr\">Minus</span> <span class=\"string\">sign (unary operator): -</span></span><br><span class=\"line\"><span class=\"attr\">Boolean</span> <span class=\"string\">operations:（布尔运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Binary</span> <span class=\"string\">operators: and , or</span></span><br><span class=\"line\">    <span class=\"attr\">Boolean</span> <span class=\"string\">negation (unary operator): ! , not</span></span><br><span class=\"line\"><span class=\"attr\">Comparisons</span> <span class=\"string\">and equality:（比较运算）</span></span><br><span class=\"line\">    <span class=\"attr\">Comparators</span>: <span class=\"string\">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class=\"line\">    <span class=\"attr\">Equality</span> <span class=\"string\">operators: == , != ( eq , ne )</span></span><br><span class=\"line\"><span class=\"attr\">Conditional</span> <span class=\"string\">operators:（条件运算）</span></span><br><span class=\"line\">    <span class=\"meta\">If-then</span>: <span class=\"string\">(if) ? (then)</span></span><br><span class=\"line\">    <span class=\"meta\">If-then-else</span>: <span class=\"string\">(if) ? (then) : (else)</span></span><br><span class=\"line\">    <span class=\"attr\">Default</span>: <span class=\"string\">(value) ?: (defaultvalue)</span></span><br><span class=\"line\"><span class=\"attr\">Special</span> <span class=\"string\">tokens:（空操作）</span></span><br><span class=\"line\">\t<span class=\"meta\">No-Operation</span>: <span class=\"string\">_</span></span><br></pre></td></tr></table></figure>\n\n<p>inline写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[]] --&gt;th:text</span><br><span class=\"line\">[()] --&gt;th:utext</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4、SpringMVC自动配置\"><a href=\"#4、SpringMVC自动配置\" class=\"headerlink\" title=\"4、SpringMVC自动配置\"></a>4、SpringMVC自动配置</h2><h3 id=\"1、SpringMVC的自动导入\"><a href=\"#1、SpringMVC的自动导入\" class=\"headerlink\" title=\"1、SpringMVC的自动导入\"></a>1、SpringMVC的自动导入</h3><p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\">Spring框架</a></p>\n<p>自动配置好了mvc：</p>\n<p>以下是SpringBoot对SpringMVC的默认</p>\n<p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)</li>\n<li><code>ContentNegotiatingViewResolver</code>组合所有视图解析器</li>\n<li>如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源</p>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).</p>\n</li>\n<li><p>自动注册 了<code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li><p><code>Converter</code>：类型转换 文本转为字面量</p>\n</li>\n<li><p><code>Formatter</code> ：格式化器 转换后格式转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class=\"comment\">//在文件配置入职格式化的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());<span class=\"comment\">//日期格式化组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自己添加的格式化转换器，只需要放在容器中即可</p>\n</li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p><code>HttpMessageConverters</code> ：转换HTTP转换和响应：User - json</p>\n</li>\n<li><p><code>HttpMessageConverters</code> ：是从容器中确定；获取所有的<code>HttpMessageConverters</code>  ，将自己的组件注册在容器中@Bean </p>\n</li>\n<li><p>If you need to add or customize converters you can use Spring Boot’s <code>HttpMessageConverters</code> class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.web.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">customConverters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; additional = ...</span><br><span class=\"line\">        HttpMessageConverter&lt;?&gt; another = ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpMessageConverters(additional, another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).</p>\n<ul>\n<li>定义错误代码生成规则</li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<ul>\n<li>```java<br>@Override<br>protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {<br>   try {<pre><code>  return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);\n</code></pre>\n   }<br>   catch (NoSuchBeanDefinitionException ex) {<pre><code>  return super.getConfigurableWebBindingInitializer();\n</code></pre>\n   }<br>}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    在beanFactory：中可以自己创建一个，初始化webDataBinder</span><br><span class=\"line\"></span><br><span class=\"line\">    请求数据 &#x3D;&#x3D;》javaBean</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.16.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own &#96;@Configuration&#96; class of type &#96;WebMvcConfigurerAdapter&#96;, but **without** &#96;@EnableWebMvc&#96;. If you wish to provide custom instances of &#96;RequestMappingHandlerMapping&#96;, &#96;RequestMappingHandlerAdapter&#96; or &#96;ExceptionHandlerExceptionResolver&#96; you can declare a &#96;WebMvcRegistrationsAdapter&#96; instance providing such components.</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to take complete control of Spring MVC, you can add your own &#96;@Configuration&#96; annotated with &#96;@EnableWebMvc&#96;.</span><br><span class=\"line\"></span><br><span class=\"line\">思想：修改默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">### 2、扩展SpringMVC</span><br><span class=\"line\"></span><br><span class=\"line\">编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class MyMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;        super.addViewControllers(registry);</span><br><span class=\"line\">        &#x2F;&#x2F;浏览器发送wdjr请求，也来到success页面</span><br><span class=\"line\">        registry.addViewController(&quot;&#x2F;wdjr&quot;).setViewName(&quot;success&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>原理：</p>\n<p>1）、WebMvcAutoConfiguration是SpringMVC的自动配置</p>\n<p>2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcConfigurerComposite configurers = <span class=\"keyword\">new</span> WebMvcConfigurerComposite();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从容器中获取所有webMVCconfigurer</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">            </span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.configurers.addViewControllers(registry);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）</span></span><br><span class=\"line\">            \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"comment\">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\">                   <span class=\"comment\">// for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"comment\">//delegate.addViewControllers(registry);</span></span><br><span class=\"line\">                    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<p>3）、自己的配置被调用</p>\n<p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用</p>\n<h3 id=\"3、全面接管mvc\"><a href=\"#3、全面接管mvc\" class=\"headerlink\" title=\"3、全面接管mvc\"></a>3、全面接管mvc</h3><p>不需要SpringBoot对SpringMVC的自动配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送wdjr请求，也来到success页面</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">&quot;/wdjr&quot;</span>).setViewName(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如静态资源访问，不推荐全面接管</p>\n<p>原理：</p>\n<p>为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了</p>\n<p>1）、核心配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2）、DelegatingWebMvcConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>3）、WebMvcAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span></span><br><span class=\"line\"><span class=\"meta\">      WebMvcConfigurerAdapter.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//容器没有这个组件的时候，这个自动配置类才生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">      ValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能</p>\n<h2 id=\"5、修改SpringMVC默认配置\"><a href=\"#5、修改SpringMVC默认配置\" class=\"headerlink\" title=\"5、修改SpringMVC默认配置\"></a>5、修改SpringMVC默认配置</h2><p>模式:</p>\n<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​    2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。</p>\n<h2 id=\"6、RestfulCRUD\"><a href=\"#6、RestfulCRUD\" class=\"headerlink\" title=\"6、RestfulCRUD\"></a>6、RestfulCRUD</h2><h3 id=\"1、默认访问首页\"><a href=\"#1、默认访问首页\" class=\"headerlink\" title=\"1、默认访问首页\"></a>1、默认访问首页</h3><p>在config/MyConfig.java中编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/login.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态资源引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、国际化\"><a href=\"#2、国际化\" class=\"headerlink\" title=\"2、国际化\"></a>2、国际化</h3><p>1、编写国际化配置文件</p>\n<p>2、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3、在页面中使用fmt:message，取出国际化内容</p>\n<h4 id=\"1、浏览器切换国际化\"><a href=\"#1、浏览器切换国际化\" class=\"headerlink\" title=\"1、浏览器切换国际化\"></a>1、浏览器切换国际化</h4><p>步骤</p>\n<p>1、编写国际化配置文件，抽取页面需要的显示的国际化消息</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\16.national.jpg\" alt=\"16.national\"></p>\n<p>2、SpringBoot自动配置好了国际化配置的资源文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//我们的配置文件可以直接放在类路径下叫messages.properties</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String basename = <span class=\"string\">&quot;messages&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> MessageSource <span class=\"title\">messageSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tResourceBundleMessageSource messageSource = <span class=\"keyword\">new</span> ResourceBundleMessageSource();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.basename)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置国际化文件的基础名，去掉语言国家代码</span></span><br><span class=\"line\">\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">\t\t\t\t\tStringUtils.trimAllWhitespace(<span class=\"keyword\">this</span>.basename)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.encoding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmessageSource.setDefaultEncoding(<span class=\"keyword\">this</span>.encoding.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageSource.setFallbackToSystemLocale(<span class=\"keyword\">this</span>.fallbackToSystemLocale);</span><br><span class=\"line\">\t\tmessageSource.setCacheSeconds(<span class=\"keyword\">this</span>.cacheSeconds);</span><br><span class=\"line\">\t\tmessageSource.setAlwaysUseMessageFormat(<span class=\"keyword\">this</span>.alwaysUseMessageFormat);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messageSource;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、对IDEA的编码进行设置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\17.encoding.jpg\" alt=\"17.encoding\"></p>\n<p>4、login进行标签插入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./login_files/signin.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-signin&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mb-4&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./login_files/bootstrap-solid.svg&quot;</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;72&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;72&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputPassword&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span> <span class=\"attr\">required</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;remember-me&quot;</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果根据浏览器语言的信息切换国际化</p>\n<p>原理：</p>\n<p>国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties</span><br><span class=\"line\">        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FixedLocaleResolver(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AcceptHeaderLocaleResolver localeResolver = <span class=\"keyword\">new</span> AcceptHeaderLocaleResolver();</span><br><span class=\"line\">    localeResolver.setDefaultLocale(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">&#125;            </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\18.accept-language.jpg\" alt=\"18.accept-language\"></p>\n<h4 id=\"2、点击链接切换国际化\"><a href=\"#2、点击链接切换国际化\" class=\"headerlink\" title=\"2、点击链接切换国际化\"></a>2、点击链接切换国际化</h4><p>自己编写localResolver，加到容器中</p>\n<p>1、更改HTML代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=zh_CN&#125;&quot;</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/index.html?lg=en_US&#125;&quot;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个MyLocaleResolver.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLocaleResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">LocaleResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解析区域信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Locale <span class=\"title\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String l = request.getParameter(<span class=\"string\">&quot;lg&quot;</span>);</span><br><span class=\"line\">        Locale locale = Locale.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class=\"line\">            String[] split = l.split(<span class=\"string\">&quot;_&quot;</span>);</span><br><span class=\"line\">            locale = <span class=\"keyword\">new</span> Locale(split[<span class=\"number\">0</span>], split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> locale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、将MyLocaleResolver加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLocalResolver();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动演示</p>\n<h3 id=\"3、登录拦截器\"><a href=\"#3、登录拦截器\" class=\"headerlink\" title=\"3、登录拦截器\"></a>3、登录拦截器</h3><h4 id=\"1、登录\"><a href=\"#1、登录\" class=\"headerlink\" title=\"1、登录\"></a>1、登录</h4><p>开发技巧</p>\n<p>​    1、清除模板缓存</p>\n<p>​    2、Ctrl+F9刷新</p>\n<p>1、新建一个LoginController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;list&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、登录错误消息显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--判断--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、表单重复提交</p>\n<p>表单重复提交事件 –》重定向来到成功页面–》模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板引擎解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、拦截器\"><a href=\"#4、拦截器\" class=\"headerlink\" title=\"4、拦截器\"></a>4、拦截器</h3><p>作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）</p>\n<p>1、在component下新建一个LoginHandlerInterceptor拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//目标方法执行之前</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object user = request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已经登录</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//未经过验证</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;没权限请先登录&quot;</span>);</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、在MyMvcConfig配置中重写拦截器方法，加入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的webMvcConfigurerAdapter组件会一起起作用</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//註冊到容器去</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/index.html&quot;</span>).setViewName(<span class=\"string\">&quot;login&quot;</span>);</span><br><span class=\"line\">            registry.addViewController(<span class=\"string\">&quot;/main.html&quot;</span>).setViewName(<span class=\"string\">&quot;Dashboard&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//静态资源 css js img 已经做好了静态资源映射</span></span><br><span class=\"line\">            registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>).</span><br><span class=\"line\">                    excludePathPatterns(<span class=\"string\">&quot;/index.html&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/user/login&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在LoginHandler中添加登录成功写入session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value =&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"meta\">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Map&lt;String,Object&gt; map,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        HttpSession session)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class=\"string\">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登录成功,防止重复提交</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">&quot;loginUser&quot;</span>, username);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/main.html&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;用户名密码错误&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、CRUD-员工列表\"><a href=\"#5、CRUD-员工列表\" class=\"headerlink\" title=\"5、CRUD-员工列表\"></a>5、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格</p>\n<p>URI:/资源名称/资源标识+HTTP操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp – GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp –POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id=xxx&amp;xxx=xx</td>\n<td>emp/{id} – PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id=1</td>\n<td>emp/{id} –DELETE</td>\n</tr>\n</tbody></table>\n<p>2、实验的请求架构</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>修改页面(回显)</td>\n<td>emp/{id}</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp/{id}</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp/{id}</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3、员工列表</p>\n<h4 id=\"1、公共页面抽取\"><a href=\"#1、公共页面抽取\" class=\"headerlink\" title=\"1、公共页面抽取\"></a>1、公共页面抽取</h4><p>使用方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、抽取公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--footer.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;footid&quot;</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;copy&quot;</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">2、引入公共片段</span><br><span class=\"line\"><span class=\"comment\">&lt;!--test.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">~&#123;footer::copy&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">~&#123;templatename::selector&#125; 模板名::选择器  footer::#footid</span><br><span class=\"line\">~&#123;templatename::fragmentname&#125; 模板名::片段名称 footer::copy</span><br><span class=\"line\">行内写法可以加~&#123;xx::xx&#125; 标签体可以 xx::xx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>三种引用方式</strong></p>\n<p><strong>th:insert</strong> :加个外层标签 +1</p>\n<p><strong>th:replace</strong> :完全替换 1</p>\n<p><strong>th:include</strong>：就替换里面的内容 -1</p>\n<p>公共页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- th:insert --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">            <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:replace--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">   \t\t<span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:include--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用此种方法将公共页面引入</p>\n<h4 id=\"2、列表高亮\"><a href=\"#2、列表高亮\" class=\"headerlink\" title=\"2、列表高亮\"></a>2、列表高亮</h4><p>引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html</p>\n<p>模板引入变量名</p>\n<p>dashboard</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link active&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-home&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">    Dashboard <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>员工管理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;activeUri&#125;==&#x27;emps&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://getbootstrap.com/docs/4.1/examples/dashboard/#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;24&quot;</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">&quot;0 0 24 24&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;currentColor&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">&quot;round&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;feather feather-users&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;9&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;7&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">        员工管理</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入模板的时候传入参数</p>\n<p>dashboard.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar :: sidebar(activeUri=&#x27;main.html&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>list.html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;commons/bar::sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、列表数据显示（查）\"><a href=\"#6、列表数据显示（查）\" class=\"headerlink\" title=\"6、列表数据显示（查）\"></a>6、列表数据显示（查）</h3><h4 id=\"1、传入员工对象\"><a href=\"#1、传入员工对象\" class=\"headerlink\" title=\"1、传入员工对象\"></a>1、传入员工对象</h4><p>EmployeeController类,传入员工对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeDao employeeDao;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有员工返回列表页面</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/emps&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">list</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;emps&quot;</span>,employees);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/list&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、-遍历对象\"><a href=\"#2、-遍历对象\" class=\"headerlink\" title=\"2、 遍历对象\"></a>2、 遍历对象</h4><p>list.html中 使用模板的 <code>th:each</code>方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table class=&quot;table table-striped table-sm&quot;&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>lastName<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>gender<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>birth<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.gender&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、效果显示\"><a href=\"#3、效果显示\" class=\"headerlink\" title=\"3、效果显示\"></a>3、效果显示</h4><p>![19.table list](E:\\工作文档\\SpringBoot\\images\\19.table list.jpg)</p>\n<h3 id=\"7、员工添加（增）\"><a href=\"#7、员工添加（增）\" class=\"headerlink\" title=\"7、员工添加（增）\"></a>7、员工添加（增）</h3><p>功能：点击添加按钮，出现新增页面</p>\n<h4 id=\"1、新增页面\"><a href=\"#1、新增页面\" class=\"headerlink\" title=\"1、新增页面\"></a>1、新增页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleFormControlSelect1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Birth--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、页面跳转\"><a href=\"#2、页面跳转\" class=\"headerlink\" title=\"2、页面跳转\"></a>2、页面跳转</h4><p>在EmployeeController中添加addEmpPage方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toAddPage</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//来到添加页面,查出所有部门显示</span></span><br><span class=\"line\">    Collection&lt;Department&gt; depts = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,depts);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息</p>\n<h4 id=\"3、添加功能完成\"><a href=\"#3、添加功能完成\" class=\"headerlink\" title=\"3、添加功能完成\"></a>3、添加功能完成</h4><p>新建一个PostMapping</p>\n<blockquote>\n<p>ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；</p>\n</blockquote>\n<p>1、新建一个postMapping的方法用来接受页面的添加POST请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工添加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/emp&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeDao.save(employee);</span><br><span class=\"line\">    <span class=\"comment\">//来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、修改添加页面，添加name属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1、部门对象问题？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、日期格式化？</p>\n<p>属性中添加 date-formate 默认是 / </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageCodesResolver <span class=\"title\">getMessageCodesResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      DefaultMessageCodesResolver resolver = <span class=\"keyword\">new</span> DefaultMessageCodesResolver();</span><br><span class=\"line\">      resolver.setMessageCodeFormatter(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mvcProperties.getMessageCodesResolverFormat());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.date-format</span>=<span class=\"string\">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、员工编辑（改）\"><a href=\"#8、员工编辑（改）\" class=\"headerlink\" title=\"8、员工编辑（改）\"></a>8、员工编辑（改）</h3><p>思路使用add页面，并且数据回显，然后区分添加，PUT请求</p>\n<h4 id=\"1、修改按钮\"><a href=\"#1、修改按钮\" class=\"headerlink\" title=\"1、修改按钮\"></a>1、修改按钮</h4><p>在list.html的<code>编辑</code>按钮加上链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、编写跳转页面\"><a href=\"#2、编写跳转页面\" class=\"headerlink\" title=\"2、编写跳转页面\"></a>2、编写跳转页面</h4><p>跳转到员工编辑页面的Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工编辑页面</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toEditPage</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id ,Model model)</span></span>&#123;</span><br><span class=\"line\">    Employee emp = employeeDao.getEmpById(id);</span><br><span class=\"line\">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;emp&quot;</span>,emp);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;depts&quot;</span>,departments);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;emp/add&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、对页面修改\"><a href=\"#3、对页面修改\" class=\"headerlink\" title=\"3、对页面修改\"></a>3、对页面修改</h4><p>对add页面进行修改</p>\n<p>1）、添加回显</p>\n<p>2）、添加判断是否emp!=null（区分add or edit）</p>\n<p>3）、添加put请求 –两个input的hidden标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/emp&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--发送put请求--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--1.SpringMVC配置HiddenHttpMethodFilter</span></span><br><span class=\"line\"><span class=\"comment\">            2.页面创建一个post表单</span></span><br><span class=\"line\"><span class=\"comment\">            3.创建一个 input name_method 值就是我们请求的方式--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp.id&#125;&quot;</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- LastName --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;LastName&quot;</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;LastName&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Email --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;Email&quot;</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Email&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;zhangsan@163.com&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--gender--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender&#125;==0&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> &gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- department --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;department.id&quot;</span> &gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;dept:$&#123;depts&#125;&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;dept.id&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;birthDate&quot;</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;birthDate&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;2012-12-12&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;birth&quot;</span> <span class=\"attr\">th:value</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添 加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9、员工删除（删）\"><a href=\"#9、员工删除（删）\" class=\"headerlink\" title=\"9、员工删除（删）\"></a>9、员工删除（删）</h3><h4 id=\"1、新建Contoller\"><a href=\"#1、新建Contoller\" class=\"headerlink\" title=\"1、新建Contoller\"></a>1、新建Contoller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工删除</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">    employeeDao.deleteEmpById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/emps&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、修改删除标签\"><a href=\"#2、修改删除标签\" class=\"headerlink\" title=\"2、修改删除标签\"></a>2、修改删除标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:attr</span>=<span class=\"string\">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span></span><br><span class=\"line\">    删除</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、写Form表单\"><a href=\"#3、写Form表单\" class=\"headerlink\" title=\"3、写Form表单\"></a>3、写Form表单</h4><p>form表单卸载外面，input 中 name=”_method” value=”delete” 模拟delete请求</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteEmpForm&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、写JS提交\"><a href=\"#4、写JS提交\" class=\"headerlink\" title=\"4、写JS提交\"></a>4、写JS提交</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.deleteBtn&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">&quot;#deleteEmpForm&quot;</span>).attr(<span class=\"string\">&quot;action&quot;</span>,$(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;del_uri&quot;</span>)).submit();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>return false;禁用btn提交效果</p>\n</blockquote>\n<h2 id=\"7、错误机制的处理\"><a href=\"#7、错误机制的处理\" class=\"headerlink\" title=\"7、错误机制的处理\"></a>7、错误机制的处理</h2><h3 id=\"1、默认的错误处理机制\"><a href=\"#1、默认的错误处理机制\" class=\"headerlink\" title=\"1、默认的错误处理机制\"></a>1、默认的错误处理机制</h3><p>默认错误页面</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\20.error.jpg\" alt=\"20.error\"></p>\n<p>原理参照</p>\n<p>ErrorMvcAutoConfiguration:错误处理的自动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.12.RELEASE\\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\web\\ErrorMvcAutoConfiguration.class</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>DefaultErrorAttributes</p>\n<p>帮我们在页面共享信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">   Map&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class=\"line\">   errorAttributes.put(<span class=\"string\">&quot;timestamp&quot;</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">   addStatus(errorAttributes, requestAttributes);</span><br><span class=\"line\">   addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class=\"line\">   addPath(errorAttributes, requestAttributes);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BasicErrorController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractErrorController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//产生HTML数据</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(produces = &quot;text/html&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class=\"line\">\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\t\tresponse.setStatus(status.value());</span><br><span class=\"line\">\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (modelAndView == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//产生Json数据</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ErrorPageCustomizer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String path = <span class=\"string\">&quot;/error&quot;</span>;<span class=\"comment\">//系统出现错误以后来到error请求进行处理，(web.xml)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>DefaultErrorViewResolver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (modelAndView == <span class=\"keyword\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">      modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认SpringBoot可以找到一个页面？error/状态码</span></span><br><span class=\"line\">   String errorViewName = <span class=\"string\">&quot;error/&quot;</span> + viewName;</span><br><span class=\"line\">    <span class=\"comment\">//如果模板引擎可以解析地址，就返回模板引擎解析</span></span><br><span class=\"line\">   TemplateAvailabilityProvider provider = <span class=\"keyword\">this</span>.templateAvailabilityProviders</span><br><span class=\"line\">         .getProvider(errorViewName, <span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//有模板引擎就返回到errorViewName指定的视图地址</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(errorViewName, model);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller</p>\n<p>1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ErrorViewResolver resolver : <span class=\"keyword\">this</span>.errorViewResolvers) &#123;</span><br><span class=\"line\">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (modelAndView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>l浏览器发送请求 accpt:text/html</p>\n<p>客户端请求：accept:/*</p>\n<h3 id=\"2、如何定制错误响应\"><a href=\"#2、如何定制错误响应\" class=\"headerlink\" title=\"2、如何定制错误响应\"></a>2、如何定制错误响应</h3><p>​    1）、如何定制错误的页面</p>\n<p>​        1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html</p>\n<p>​        有精确的404和4xx优先选择404</p>\n<p>​        页面获得的数据</p>\n<p>​            timestamp：时间戳</p>\n<p>​            status：状态码</p>\n<p>​            error：错误提示</p>\n<p>​            exception：异常对象</p>\n<p>​            message：异常信息</p>\n<p>​            errors:JSR303有关</p>\n<p>​        2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值</p>\n<p>​        3.没有放模板引擎，没放静态，会显示默认的错误</p>\n<p>​    2）、如何定义错误的数据</p>\n<p>举例子：新建4xx和5xx文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\21.error-static.jpg\" alt=\"21.error-static\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>status: [[$&#123;status&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>timestamp: [[$&#123;timestamp&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>error: [[$&#123;error&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>message: [[$&#123;message&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>exception: [[$&#123;exception&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\22.4xxhtml.jpg\" alt=\"22.4xxhtml\"></p>\n<h3 id=\"3、如何定制Json数据\"><a href=\"#3、如何定制Json数据\" class=\"headerlink\" title=\"3、如何定制Json数据\"></a>3、如何定制Json数据</h3><h4 id=\"1、仅发送json数据\"><a href=\"#1、仅发送json数据\" class=\"headerlink\" title=\"1、仅发送json数据\"></a>1、仅发送json数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserNotExitsException</span> <span class=\"keyword\">extends</span>  <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserNotExitsException</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">&quot;用户不存在&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异常处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">handlerException</span><span class=\"params\">(Exception e)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无法自适应 都是返回的json数据</p>\n<h4 id=\"2、转发到error自适应处理\"><a href=\"#2、转发到error自适应处理\" class=\"headerlink\" title=\"2、转发到error自适应处理\"></a>2、转发到error自适应处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">    <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序默认获取状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HttpStatus <span class=\"title\">getStatus</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">   Integer statusCode = (Integer) request</span><br><span class=\"line\">         .getAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (statusCode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.valueOf(statusCode);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>没有自己写的自定义异常数据</p>\n<h4 id=\"3、自适应和定制数据传入\"><a href=\"#3、自适应和定制数据传入\" class=\"headerlink\" title=\"3、自适应和定制数据传入\"></a>3、自适应和定制数据传入</h4><p>Spring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；</p>\n<p>1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；</p>\n<p>2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyErrorAttributes</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultErrorAttributes</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes, <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;company&quot;</span>, <span class=\"string\">&quot;wdjr&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异常处理：把map方法请求域中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(UserNotExitsException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlerException</span><span class=\"params\">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String ,Object&gt; map =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//传入自己的状态码</span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;javax.servlet.error.status_code&quot;</span>, <span class=\"number\">432</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;user not exist&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;message&quot;</span>, e.getMessage());</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;ext&quot;</span>, map);</span><br><span class=\"line\">        <span class=\"comment\">//转发到error</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/error&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的MyErrorAttributes类中加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们的异常处理器</span></span><br><span class=\"line\">Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) requestAttributes.getAttribute(<span class=\"string\">&quot;ext&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;ext&quot;</span>, ext);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、配置嵌入式servlet容器\"><a href=\"#8、配置嵌入式servlet容器\" class=\"headerlink\" title=\"8、配置嵌入式servlet容器\"></a>8、配置嵌入式servlet容器</h2><h3 id=\"1、定制和修改Servlet容器\"><a href=\"#1、定制和修改Servlet容器\" class=\"headerlink\" title=\"1、定制和修改Servlet容器\"></a>1、定制和修改Servlet容器</h3><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p>![23.tomcat emd](E:\\工作文档\\SpringBoot\\images\\23.tomcat emd.jpg)</p>\n<p>问题？</p>\n<p>1）、如何定制和修改Servlet容器；</p>\n<p>1、 修改Server相关的配置文件 application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通用的servlet容器配置</span></span><br><span class=\"line\"><span class=\"attr\">server.xxx</span></span><br><span class=\"line\"><span class=\"comment\">#tomcat的配置</span></span><br><span class=\"line\"><span class=\"attr\">server.tomcat.xxxx</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">embeddedServletContainerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定制嵌入式Servlet的容器相关规则</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.setPort(<span class=\"number\">8999</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实同理，都是实现EmbeddedServletContainerCustomizer</p>\n<h3 id=\"2、注册Servlet三大组件\"><a href=\"#2、注册Servlet三大组件\" class=\"headerlink\" title=\"2、注册Servlet三大组件\"></a>2、注册Servlet三大组件</h3><p>三大组件 Servlet Filter Listener</p>\n<p>由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml</p>\n<p>注册三大组件</p>\n<h4 id=\"ServletRegistrationBean\"><a href=\"#ServletRegistrationBean\" class=\"headerlink\" title=\"ServletRegistrationBean\"></a>ServletRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean servletRegistrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> MyServlet(),<span class=\"string\">&quot;/servlet&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> servletRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">&quot;Hello Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FilterRegistrationBean\"><a href=\"#FilterRegistrationBean\" class=\"headerlink\" title=\"FilterRegistrationBean\"></a>FilterRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/hello&quot;</span>,<span class=\"string\">&quot;/myServlet&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyFilter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyFilter process&quot;</span>);</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ServletListenerRegistrationBean\"><a href=\"#ServletListenerRegistrationBean\" class=\"headerlink\" title=\"ServletListenerRegistrationBean\"></a>ServletListenerRegistrationBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> MyListener());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MyListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用启动..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;.........web应用销毁..........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">dispatcherServletRegistration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class=\"line\">      ServletRegistrationBean registration = <span class=\"keyword\">new</span> ServletRegistrationBean(</span><br><span class=\"line\">            dispatcherServlet, <span class=\"keyword\">this</span>.serverProperties.getServletMapping());</span><br><span class=\"line\">       <span class=\"comment\">//默认拦截 /所有请求 包括静态资源 不包括jsp</span></span><br><span class=\"line\">       <span class=\"comment\">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class=\"line\">      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">      registration.setLoadOnStartup(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.multipartConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         registration.setMultipartConfig(<span class=\"keyword\">this</span>.multipartConfig);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、切换其他的Servlet容器\"><a href=\"#3、切换其他的Servlet容器\" class=\"headerlink\" title=\"3、切换其他的Servlet容器\"></a>3、切换其他的Servlet容器</h3><p>在ServerProperties中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Jetty jetty = <span class=\"keyword\">new</span> Jetty();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Undertow undertow = <span class=\"keyword\">new</span> Undertow();</span><br></pre></td></tr></table></figure>\n\n<p>tomcat(默认支持)</p>\n<p>jetty（长连接）</p>\n<p>undertow（多并发）</p>\n<p>切换容器 仅仅需要修改pom文件的依赖就可以</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、嵌入式Servlet容器自动配置原理\"><a href=\"#4、嵌入式Servlet容器自动配置原理\" class=\"headerlink\" title=\"4、嵌入式Servlet容器自动配置原理\"></a>4、嵌入式Servlet容器自动配置原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import(BeanPostProcessorsRegistrar.class)</span></span><br><span class=\"line\"><span class=\"comment\">//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class=\"comment\">//当前是否引入tomcat依赖</span></span><br><span class=\"line\">    <span class=\"comment\">//判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedTomcat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取嵌入式的Servlet容器</span></span><br><span class=\"line\">   <span class=\"function\">EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         ServletContextInitializer... initializers)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承关系</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\24.EmdServletFactory.jpg\" alt=\"24.EmdServletFactory\"></p>\n<p>2）、EmbeddedServletContainer:(嵌入式的Servlet容器)</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\25.EmdServletContainer.jpg\" alt=\"25.EmdServletContainer\"></p>\n<p>3）、TomcatEmbeddedServletContainerFactory为例 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class=\"line\">   Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\">    <span class=\"comment\">//配置tomcat的基本环节</span></span><br><span class=\"line\">   File baseDir = (<span class=\"keyword\">this</span>.baseDirectory != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.baseDirectory</span><br><span class=\"line\">         : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>));</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   Connector connector = <span class=\"keyword\">new</span> Connector(<span class=\"keyword\">this</span>.protocol);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"keyword\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    <span class=\"comment\">//将配置好的tomcat传入进去；并且启动tomcat容器</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、嵌入式配置修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>\n\n<p>EmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？</p>\n<p>怎么修改？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.beanFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;embeddedServletContainerCustomizerBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         EmbeddedServletContainerCustomizerBeanPostProcessor.class);</span><br><span class=\"line\">   registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">         <span class=\"string\">&quot;errorPageRegistrarBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">         ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class=\"line\">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class=\"line\">        customizer.customize(bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class=\"title\">getCustomizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customizers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Look up does not include the parent context</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = <span class=\"keyword\">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanFactory</span><br><span class=\"line\">            <span class=\"comment\">//从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class=\"line\">            <span class=\"comment\">//定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class=\"line\">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class=\"line\">                            <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>)</span><br><span class=\"line\">            .values());</span><br><span class=\"line\">        Collections.sort(<span class=\"keyword\">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = Collections.unmodifiableList(<span class=\"keyword\">this</span>.customizers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customizers;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ServerProperties也是EmbeddedServletContainerCustomizer定制器</p>\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcat</p>\n<p>EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就要通过后置处理器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerCustomizerBeanPostProcessor</span><br></pre></td></tr></table></figure>\n\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法</p>\n<h3 id=\"5、嵌入式Servlet容器启动原理\"><a href=\"#5、嵌入式Servlet容器启动原理\" class=\"headerlink\" title=\"5、嵌入式Servlet容器启动原理\"></a>5、嵌入式Servlet容器启动原理</h3><p>什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;</p>\n<p>获取嵌入式的容器工厂</p>\n<p>1）、SpringBoot应用启动Run方法</p>\n<p>2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (contextClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      contextClass = Class.forName(<span class=\"keyword\">this</span>.webEnvironment</span><br><span class=\"line\">            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3）、refresh(context);刷新创建好的IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">   postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">   invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">   registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">   initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">   initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">   onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">   registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">   finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">   finishRefresh();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、 onRefresh();web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer</p>\n<p>6）、获取嵌入式的Servlet容器工厂；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br></pre></td></tr></table></figure>\n\n<p>从ioc容器中获取EmbeddedServletContainerFactory组件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；</p>\n<p>7）、使用容器工厂获取嵌入式的Servlet容器</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p>先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来</p>\n<p>ioc启动创建Servlet容器</p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式的Servlet容器：应用达成jar包</p>\n<p>​    优点：简单、便携</p>\n<p>​    缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）</p>\n<p>外置的Servlet容器：外面安装Tomcat是以war包的方式打包。</p>\n<h3 id=\"1、IDEA操作外部Servlet\"><a href=\"#1、IDEA操作外部Servlet\" class=\"headerlink\" title=\"1、IDEA操作外部Servlet\"></a>1、IDEA操作外部Servlet</h3><p>1、创建程序为war程序</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\26.tomcat1.jpg\" alt=\"26.tomcat1\"></p>\n<p>2、选择版本</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\27.tomcat2.jpg\" alt=\"27.tomcat2\"></p>\n<p>3、添加tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\28.tomcat3.jpg\" alt=\"28.tomcat3\"></p>\n<p>4、选择tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\30.tomcat4.jpg\" alt=\"30.tomcat4\"></p>\n<p>5、选择本地的Tomcat</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\31.tomcat5.jpg\" alt=\"31.tomcat5\"></p>\n<p>6、配置tomcat路径</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\32.tomcat6.jpg\" alt=\"32.tomcat6\"></p>\n<p>7、添加服务器</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\33.tomcat7.jpg\" alt=\"33.tomcat7\"></p>\n<p>8、添加exploded的war配置，应用OK tomcat配置完成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\34.tomcat8.jpg\" alt=\"34.tomcat8\"></p>\n<p>二、配置webapp文件夹</p>\n<p>1、点击配置</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\35.tomcat9.jpg\" alt=\"35.tomcat9\"></p>\n<p>2、添加webapp目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\36.tomcat10.jpg\" alt=\"36.tomcat10\"></p>\n<p>3、默认配置就可以</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\37.tomcat11.jpg\" alt=\"37.tomcat11\"></p>\n<p>4、配置web.xml文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\38.tomcat12.jpg\" alt=\"38.tomcat12\"></p>\n<p>5、文档目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\39.tomcat13.jpg\" alt=\"39.tomcat13\"></p>\n<h3 id=\"2、运行一个示例\"><a href=\"#2、运行一个示例\" class=\"headerlink\" title=\"2、运行一个示例\"></a>2、运行一个示例</h3><p>1、项目目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\40.demo1.jpg\" alt=\"40.demo1\"></p>\n<p>2、配置文件写视图解析前后缀</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.view.prefix</span>=<span class=\"string\">/WEB-INF/jsp/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.mvc.view.suffix</span>=<span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n\n<p>3、HelloController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;message&quot;</span>,<span class=\"string\">&quot;这是Controller传过来的message&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、success.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Success&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class=\"line\">message:$&#123;message&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行结果</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\41.demo2.jpg\" alt=\"41.demo2\"></p>\n<p>步骤</p>\n<p>1、必须创建一个war项目；</p>\n<p>2、将嵌入式的Tomcat指定为provided</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入SpringBoot的主程序，</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、启动服务器就可以；</p>\n<h3 id=\"3、原理\"><a href=\"#3、原理\" class=\"headerlink\" title=\"3、原理\"></a>3、原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；</p>\n<p>war包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器</p>\n<p>servlet3.0规范</p>\n<p> 8.2.4 共享库和运行时插件</p>\n<p>规则：</p>\n<p>1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例</p>\n<p>2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名</p>\n<p>3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类</p>\n<p>流程：</p>\n<p>1、启动Tomcat服务器</p>\n<p>2、spring web模块里有这个文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\42.servletContainerInit.jpg\" alt=\"42.servletContainerInit\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure>\n\n<p>3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set&lt;Class&lt;?&gt;&gt;;为这些感兴趣类创建实例</p>\n<p>4、每个创建好的WebApplicationInitializer调用自己的onStratup</p>\n<p>5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createRootApplicationContext</span><span class=\"params\">(ServletContext servletContext)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplicationBuilder builder = <span class=\"keyword\">this</span>.createSpringApplicationBuilder();</span><br><span class=\"line\">    <span class=\"comment\">//环境构建器</span></span><br><span class=\"line\">    StandardServletEnvironment environment = <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    environment.initPropertySources(servletContext, (ServletConfig)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    builder.environment(environment);</span><br><span class=\"line\">    builder.main(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    ApplicationContext parent = <span class=\"keyword\">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.info(<span class=\"string\">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class=\"line\">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ParentContextApplicationContextInitializer(parent)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    builder.initializers(<span class=\"keyword\">new</span> ApplicationContextInitializer[]&#123;<span class=\"keyword\">new</span> ServletContextApplicationContextInitializer(servletContext)&#125;);</span><br><span class=\"line\">    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class=\"line\">    <span class=\"comment\">//调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来</span></span><br><span class=\"line\">    builder = <span class=\"keyword\">this</span>.configure(builder);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个spring应用</span></span><br><span class=\"line\">    SpringApplication application = builder.build();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(<span class=\"keyword\">this</span>.getClass(), Configuration.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        application.getSources().add(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.state(!application.getSources().isEmpty(), <span class=\"string\">&quot;No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.registerErrorPageFilter) &#123;</span><br><span class=\"line\">        application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//最后启动Spring容器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.run(application);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、Spring的应用就启动完了并且创建IOC容器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、Docker\"><a href=\"#五、Docker\" class=\"headerlink\" title=\"五、Docker\"></a>五、Docker</h1><h2 id=\"1、简介-1\"><a href=\"#1、简介-1\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎</p>\n<p>将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；</p>\n<h2 id=\"2、Docker的核心概念\"><a href=\"#2、Docker的核心概念\" class=\"headerlink\" title=\"2、Docker的核心概念\"></a>2、Docker的核心概念</h2><p>docker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）</p>\n<p>docker客户端（Client）:操作docker主机</p>\n<p>docker仓库（Registry）：用来保存打包好的软件镜像</p>\n<p>docker镜像（Image）:软件打好包的镜像，放到docker的仓库中</p>\n<p>docker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）</p>\n<p>docker的步骤：</p>\n<p>​    1、安装Docker</p>\n<p>​    2、去Docker仓库找到这个软件对应的镜像；</p>\n<p>​    3、使用Docker运行的这个镜像，镜像就会生成一个容器</p>\n<p>​    4、对容器的启动停止，就是对软件的启动和停止</p>\n<h2 id=\"3、安装Docker\"><a href=\"#3、安装Docker\" class=\"headerlink\" title=\"3、安装Docker\"></a>3、安装Docker</h2><h3 id=\"1、安装Linux\"><a href=\"#1、安装Linux\" class=\"headerlink\" title=\"1、安装Linux\"></a>1、安装Linux</h3><p><a href=\"http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1\">安装vxbox并且安装ubuntu</a></p>\n<h3 id=\"2、在linux上安装docker\"><a href=\"#2、在linux上安装docker\" class=\"headerlink\" title=\"2、在linux上安装docker\"></a>2、在linux上安装docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看centos版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> uname -r</span></span><br><span class=\"line\">3.10.0-693.el7.x86_64</span><br><span class=\"line\">要求：大于3.10</span><br><span class=\"line\">如果小于的话升级*（选做）</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum update</span></span><br><span class=\"line\">2、安装docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install docker</span></span><br><span class=\"line\">3、启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker -v</span></span><br><span class=\"line\">4、开机启动docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\">5、停止docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop docker</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、docker的常用操作\"><a href=\"#4、docker的常用操作\" class=\"headerlink\" title=\"4、docker的常用操作\"></a>4、docker的常用操作</h2><h3 id=\"1、镜像操作\"><a href=\"#1、镜像操作\" class=\"headerlink\" title=\"1、镜像操作\"></a>1、镜像操作</h3><p>1、搜索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<p>默认去docker hub网站查找<img src=\"E:\\工作文档\\SpringBoot\\images\\44.docker1.jpg\" alt=\"44.docker1\"></p>\n<p>2、拉取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认最新版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docekr pull mysql</span></span><br><span class=\"line\">安装指定版本</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull mysql:5.5</span></span><br></pre></td></tr></table></figure>\n\n<p>3、查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p>4、删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、容器操作\"><a href=\"#2、容器操作\" class=\"headerlink\" title=\"2、容器操作\"></a>2、容器操作</h3><p>软件的镜像（qq.exe） – 运行镜像 – 产生一个容器（正在运行的软件）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、搜索镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search tomcat</span></span><br><span class=\"line\">2、拉取镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull tomcat</span></span><br><span class=\"line\">3、根据镜像启动容器</span><br><span class=\"line\">[root@lion ~]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">docker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d tomcat:latest</span><br><span class=\"line\">2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e249</span><br><span class=\"line\">4、查看那个进程正在进行</span><br><span class=\"line\">[root@lion ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat</span><br><span class=\"line\">5、停止运行中容器</span><br><span class=\"line\">[root@lion ~]# docker stop 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">6、查看所有容器</span><br><span class=\"line\">[root@lion ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class=\"line\">2f0348702f5f        tomcat:latest       &quot;catalina.sh run&quot;   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat</span><br><span class=\"line\">7、启动容器</span><br><span class=\"line\">[root@lion ~]# docker start 2f0348702f5f</span><br><span class=\"line\">8、删除docker容器</span><br><span class=\"line\">[root@lion ~]# docker rm 2f0348702f5f</span><br><span class=\"line\">2f0348702f5f</span><br><span class=\"line\">9、端口映射</span><br><span class=\"line\">[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat</span><br><span class=\"line\">692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29</span><br><span class=\"line\">虚拟机:8888</span><br><span class=\"line\">容器的:8080</span><br><span class=\"line\">-d:后台运行</span><br><span class=\"line\">-p:主机端口映射到容器端口</span><br><span class=\"line\">浏览器：192.168.179.129:8888</span><br><span class=\"line\">10、docker的日志</span><br><span class=\"line\">[root@lion ~]# docker logs 692c408c2201</span><br><span class=\"line\">11、多个启动</span><br><span class=\"line\">[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat</span><br><span class=\"line\">浏览器：192.168.179.129:9000</span><br></pre></td></tr></table></figure>\n\n<p>更多命令参考docker镜像文档</p>\n<h3 id=\"3、安装Mysql\"><a href=\"#3、安装Mysql\" class=\"headerlink\" title=\"3、安装Mysql\"></a>3、安装Mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、数据访问\"><a href=\"#六、数据访问\" class=\"headerlink\" title=\"六、数据访问\"></a>六、数据访问</h1><h2 id=\"1、整合JDBC数据源\"><a href=\"#1、整合JDBC数据源\" class=\"headerlink\" title=\"1、整合JDBC数据源\"></a>1、整合JDBC数据源</h2><p>1、新建项目 spring-boot-06-data-jdbc</p>\n<ul>\n<li>WEB</li>\n<li>Mysql</li>\n<li>JDBC</li>\n<li>SpringBoot1.5</li>\n</ul>\n<p>2、编写配置文件appliction.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写测试类测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot06DataJdbcApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(dataSource.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class org.apache.tomcat.jdbc.pool.DataSource</span><br><span class=\"line\">ProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]</span><br></pre></td></tr></table></figure>\n\n<p>数据源相关配置都在DataSourceProperties属性里</p>\n<p>自动配置原理</p>\n<p>E:\\Develop\\Maven_Repo\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.13.RELEASE\\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\\org\\springframework\\boot\\autoconfigure\\jdbc</p>\n<h3 id=\"1、DataSource\"><a href=\"#1、DataSource\" class=\"headerlink\" title=\"1、DataSource\"></a>1、DataSource</h3><p>参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源</p>\n<h3 id=\"2、SpringBoot默认支持\"><a href=\"#2、SpringBoot默认支持\" class=\"headerlink\" title=\"2、SpringBoot默认支持\"></a>2、SpringBoot默认支持</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tomcat数据源</span><br><span class=\"line\">HikariDataSource</span><br><span class=\"line\">dbcp.BasicDataSource</span><br><span class=\"line\">dbcp2.BasicDataSource</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、自定义数据源\"><a href=\"#3、自定义数据源\" class=\"headerlink\" title=\"3、自定义数据源\"></a>3、自定义数据源</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、运行sql建表\"><a href=\"#4、运行sql建表\" class=\"headerlink\" title=\"4、运行sql建表\"></a>4、运行sql建表</h3><p>在DataSourceAutoConfiguration中<strong>DataSourceInitializer</strong>类</p>\n<p>监听器</p>\n<p>作用：</p>\n<p>1）、postConstruct -》runSchemaScript 运行建表sql文件</p>\n<p>2）、runDataScript运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span> data<span class=\"operator\">-</span><span class=\"operator\">*</span>.<span class=\"keyword\">sql</span></span><br><span class=\"line\">默认规则：schema.sql ,schema<span class=\"operator\">-</span>all.sql;</span><br></pre></td></tr></table></figure>\n\n<p><strong>举个栗子</strong></p>\n<p>创建department表</p>\n<p>1、department.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Navicat MySQL Data Transfer</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Source Server         : 192.168.179.131</span></span><br><span class=\"line\"><span class=\"comment\">Source Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">Source Host           : 192.168.179.131:3306</span></span><br><span class=\"line\"><span class=\"comment\">Source Database       : jdbc</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Target Server Type    : MYSQL</span></span><br><span class=\"line\"><span class=\"comment\">Target Server Version : 50719</span></span><br><span class=\"line\"><span class=\"comment\">File Encoding         : 65001</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Date: 2018-05-14 14:28:52</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS<span class=\"operator\">=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- Table structure for department</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `department`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `department` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `departmentName` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、将department.sql命名为schema-all.sql</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\45.schema-all.jpg\" alt=\"45.schema-all\"></p>\n<p>3、运行测试类</p>\n<p>自定义sql的文件名，department.sql在配置文件中</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">schema:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">classpath:department.sql</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5、操作JdbcTemplate\"><a href=\"#5、操作JdbcTemplate\" class=\"headerlink\" title=\"5、操作JdbcTemplate\"></a>5、操作JdbcTemplate</h3><p><strong>FBI warning</strong>:将department.sql删除或者改名，因为运行文件会将表中数据清除</p>\n<p>1、新建一个Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String ,Object&gt; <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class=\"string\">&quot;select * from department&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、表中添加数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\46.department.jpg\" alt=\"46.department\"></p>\n<p>3、访问请求查询数据</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\47.hello.jpg\" alt=\"47.hello\"></p>\n<h2 id=\"2、自定义数据源\"><a href=\"#2、自定义数据源\" class=\"headerlink\" title=\"2、自定义数据源\"></a>2、自定义数据源</h2><p>1、导入Druid的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>已经替换了原来的tomcat数据源</p>\n<p>3、配置Druid数据源配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">\t<span class=\"comment\"># 初始化大小，最小，最大  </span></span><br><span class=\"line\">    <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置获取连接等待超时的时间  </span></span><br><span class=\"line\">    <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒 </span></span><br><span class=\"line\">    <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">    <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙</span></span><br><span class=\"line\">    <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">userGlobalDataSourceStat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录  </span></span><br><span class=\"line\">    <span class=\"attr\">connectionProperties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class=\"line\"><span class=\"comment\">#    schema:</span></span><br><span class=\"line\"><span class=\"comment\">#      - classpath:department.sql</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n<p>4、Druid配置监控</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Druid的监控</span></span><br><span class=\"line\">    <span class=\"comment\">//1、配置一个管理后台</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> StatViewServlet(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginUsername&quot;</span>, <span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;loginPassword&quot;</span>, <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2、配置监控的filter</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webstatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams =<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">&quot;exclusions&quot;</span>, <span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、运行测试，访问 localhost:9000/druid</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\48.druid.jpg\" alt=\"48.druid\"></p>\n<p>输入刚才调好的用户名密码即可访问</p>\n<h2 id=\"3、整合Mybatis\"><a href=\"#3、整合Mybatis\" class=\"headerlink\" title=\"3、整合Mybatis\"></a>3、整合Mybatis</h2><p>1、新建工程，SpringBoot1.5+web+JDBC+Mysql</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、导入配置文件中关于Druid的配置</p>\n<p>​    2.1、导入依赖</p>\n<p>​    2.2、配置文件application.yml（指定用户名密码…配置Druid的配置参数，修改sql文件加载的默认名）</p>\n<p>​    2.3、将Druid组件加入到容器中（监控）重点</p>\n<p>​    具体同上</p>\n<p>3、创建数据表department和employee表</p>\n<p>​    3.1、根据sql文件，新建两张表</p>\n<p>​    3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">schema:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/department.sql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">classpath:sql/employeee.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>​    3.3、运行程序检查数据库是否创建成功</p>\n<p>4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） </p>\n<p>在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类名冲突所以全类名</span></span><br><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title\">configurationCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConfigurationCustomizer() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">                configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><p>5、新建mapper</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//指定是一个mapper</span></span><br><span class=\"line\"><span class=\"string\">@Mapper</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">interface</span> <span class=\"string\">DepartmentMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Insert(&quot;insert</span> <span class=\"string\">into</span> <span class=\"string\">department(dept_name)</span> <span class=\"string\">value(#</span>&#123;<span class=\"string\">deptName</span>&#125;<span class=\"string\">)&quot;)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">int</span> <span class=\"string\">insertDept(Department</span> <span class=\"string\">department);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Delete(&quot;delete</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int deleteDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Update(&quot;</span><span class=\"string\">update</span> <span class=\"string\">department</span> <span class=\"string\">set</span> <span class=\"string\">dept_Name=#</span>&#123;<span class=\"string\">deptName</span>&#125; <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public int updateDept(Department department);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    @Select(&quot;</span><span class=\"string\">select</span> <span class=\"string\">*</span> <span class=\"string\">from</span> <span class=\"string\">department</span> <span class=\"string\">where</span> <span class=\"string\">id=#</span>&#123;<span class=\"string\">id</span>&#125;<span class=\"string\">&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    public Department getDeptById(Integer id);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>6、编写controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeptController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DepartmentMapper departmentMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDepartment</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.getDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/delDept/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.deleteDeptById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateDept</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.updateDept(<span class=\"keyword\">new</span> Department(id, <span class=\"string\">&quot;开发部&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertDept</span><span class=\"params\">(Department department)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> departmentMapper.insertDept(department);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>mapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文</p>\n<p>件夹下的mapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主配置类或者mybatis配置类</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(value = &quot;com.wdjr.springboot.mapper&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件方式\"><a href=\"#配置文件方式\" class=\"headerlink\" title=\"配置文件方式\"></a>配置文件方式</h3><p>1、新建文件</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\50.mybatisxml.jpg\" alt=\"50.mybatisxml\"></p>\n<p>2、新建mybatis的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、新建Employee的接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insetEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、新建Employee的mapper.xml的映射文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.wdjr.springboot.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getEmpById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.wdjr.springboot.bean.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">      select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insetEmp&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、修改application.yml配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>6、新建一个Controller访问方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    EmployeeMapper employeeMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/getEmp/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmp</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeMapper.getEmpById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insertEmp&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">insertEmp</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">        employeeMapper.insetEmp(employee);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、JPA数据访问\"><a href=\"#4、JPA数据访问\" class=\"headerlink\" title=\"4、JPA数据访问\"></a>4、JPA数据访问</h2><p>新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC</p>\n<p>目录结构</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\51.JPA.jpg\" alt=\"51.JPA\"></p>\n<p>1、新建一个实体类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用JPA注解配置映射关系</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span><span class=\"comment\">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name=&quot;tbl_user&quot;)</span> <span class=\"comment\">//@Table来指定和那个数据表对应，如果省略默认表明就是user;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//这是一个主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class=\"comment\">//自增组件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;last_name&quot;,length = 50)</span> <span class=\"comment\">//这是和数据表对应的一个列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span><span class=\"comment\">//省略默认列名就是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个UserRepository来继承jpa的绝大多数功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承jpaRepository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.179.131/jpa</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Welcome_1</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">    <span class=\"comment\">#更新或创建</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>4、编写Controller测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        User user = userRepository.findOne(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/insert&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">insertUser</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">        User user1 = userRepository.save(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  user1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七、启动配置原理\"><a href=\"#七、启动配置原理\" class=\"headerlink\" title=\"七、启动配置原理\"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p>\n<p>加载配置文件META-INF/spring.factories</p>\n<p>​    ApplicationContextInitializer</p>\n<p>​    SpringApplicationRunListener</p>\n<p>ioc容器中</p>\n<p>​    ApplicationRunner</p>\n<p>​    CommandLineRunner</p>\n<p>启动流程</p>\n<h2 id=\"1、创建SpringApplicaiotn对象\"><a href=\"#1、创建SpringApplicaiotn对象\" class=\"headerlink\" title=\"1、创建SpringApplicaiotn对象\"></a>1、创建SpringApplicaiotn对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Object[] sources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存主配置类</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sources != <span class=\"keyword\">null</span> &amp;&amp; sources.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前是否是个web应用</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来</span></span><br><span class=\"line\">   setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">         ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">//从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来</span></span><br><span class=\"line\">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">//决定哪一个是主程序</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ApplicationInitializer</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\52.applicationCotextInitializer.jpg\" alt=\"52.applicationCotextInitializer\"></p>\n<p> ApplicationListener</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\53.Listener.jpg\" alt=\"53.Listener\"></p>\n<h2 id=\"2、运行Run方法\"><a href=\"#2、运行Run方法\" class=\"headerlink\" title=\"2、运行Run方法\"></a>2、运行Run方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">//获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory</span></span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">//回调所有的SpringApplicationRunListener.starting()方法</span></span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//封装命令行参数</span></span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">       <span class=\"comment\">//准备环境</span></span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成</span></span><br><span class=\"line\">       <span class=\"comment\">//打印SpringBoot图标</span></span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">       <span class=\"comment\">//创建ApplicationContext，决定创建web的ioc容器还是普通的ioc</span></span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">       <span class=\"comment\">//异常分析</span></span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">       <span class=\"comment\">//重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//回调所有的SpringApplicationRunListener的contextPrepare()</span></span><br><span class=\"line\">       <span class=\"comment\">//告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded</span></span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">       <span class=\"comment\">//重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat</span></span><br><span class=\"line\">       <span class=\"comment\">//扫描 创建加载所有组件的地方</span></span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">       <span class=\"comment\">//从ioc中获取所有的ApplicationRunner和CommandLineRunner</span></span><br><span class=\"line\">       <span class=\"comment\">//ApplicationRunner先回调</span></span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">       <span class=\"comment\">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">//保存应用状态</span></span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//整个springboot启动完成以后返回启动的ioc容器</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、事件监听机制\"><a href=\"#3、事件监听机制\" class=\"headerlink\" title=\"3、事件监听机制\"></a>3、事件监听机制</h2><p>新建listener监听</p>\n<p>文件目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\54.listener2.jpg\" alt=\"54.listener2\"></p>\n<p>1、HelloApplicationContextInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型监听ioc容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextInitializer</span>&lt;<span class=\"title\">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationContextInitializer...跑起来了.....&quot;</span>+applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、HelloSpringApplicationRunListener</p>\n<p>加构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloSpringApplicationRunListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloSpringApplicationRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听容器开始......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环境准备好了......&quot;</span>+environment.getSystemProperties().get(<span class=\"string\">&quot;os.name&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ioc容器准备好了......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器环境已经加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finished</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;全部加载完成......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、HelloApplicationRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloApplicationRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationRunner.....run....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、HelloCommandLineRunner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CommandLineRunner......run.....&quot;</span>+Arrays.asList(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件运行方法</p>\n<p>HelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Initializers</span><br><span class=\"line\">org.springframework.context.ApplicationContextInitializer&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloApplicationContextInitializer</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.boot.SpringApplicationRunListener&#x3D;\\</span><br><span class=\"line\">com.wdjr.springboot.listener.HelloSpringApplicationRunListener</span><br></pre></td></tr></table></figure>\n\n<p>HelloApplicationRunner和HelloCommandLineRunner ioc加入</p>\n<p>@Component</p>\n<h1 id=\"八、SpringBoot的自定义starter\"><a href=\"#八、SpringBoot的自定义starter\" class=\"headerlink\" title=\"八、SpringBoot的自定义starter\"></a>八、SpringBoot的自定义starter</h1><p>starter：场景启动器</p>\n<p>1、场景需要使用什么依赖？</p>\n<p>2、如何编写自动配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//指定这个类是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnXXX</span> <span class=\"comment\">//在指定条件下成立的情况下自动配置类生效</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span> <span class=\"comment\">//指定自动配置类的顺序</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">//给容器中添加组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span> <span class=\"comment\">//结合相关xxxProperties类来绑定相关的配置</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span> <span class=\"comment\">//让xxxProperties生效加到容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\">自动配置类要能加载</span><br><span class=\"line\">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br></pre></td></tr></table></figure>\n\n<p>3、模式</p>\n<p>启动器空的jar只需要做依赖管理导入；</p>\n<p>专门写一个自动配置模块；</p>\n<p>启动器依赖自动配置，别人只需要引入starter</p>\n<p>xxx-spring-boot-starter</p>\n<h3 id=\"新建一个starter\"><a href=\"#新建一个starter\" class=\"headerlink\" title=\"新建一个starter\"></a>新建一个starter</h3><blockquote>\n<p>绕的你怀疑人生</p>\n</blockquote>\n<h4 id=\"1、新建一个空项目工程\"><a href=\"#1、新建一个空项目工程\" class=\"headerlink\" title=\"1、新建一个空项目工程\"></a>1、新建一个空项目工程</h4><p><img src=\"E:\\工作文档\\SpringBoot\\images\\56.starter01.jpg\" alt=\"56.starter01\"></p>\n<p>2、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\57.starter02.jpg\" alt=\"57.starter02\"></p>\n<p>3、导入module</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\58.starter03.jpg\" alt=\"58.starter03\"></p>\n<p>4、新建一个Maven工程</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\59.starter04.jpg\" alt=\"59.starter04\"></p>\n<p>5、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\60.starter05.jpg\" alt=\"60.starter05\"></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\61.starter06.jpg\" alt=\"61.starter06\"></p>\n<p>6、在新建一个autoconfiguration类的spring</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\62.starter07.jpg\" alt=\"62.starter07\"></p>\n<p>7、项目命名</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\63.starter08.jpg\" alt=\"63.starter08\"></p>\n<p>8、无需导入依赖</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\64.starter09.jpg\" alt=\"64.starter09\"></p>\n<p>9、next</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\65.starter10.jpg\" alt=\"65.starter10\"></p>\n<p>最后配置完成</p>\n<h4 id=\"2、编写starter\"><a href=\"#2、编写starter\" class=\"headerlink\" title=\"2、编写starter\"></a>2、编写starter</h4><h5 id=\"autoconfigurer\"><a href=\"#autoconfigurer\" class=\"headerlink\" title=\"autoconfigurer\"></a>autoconfigurer</h5><p>对<strong>lxy-spring-boot-starter-autoconfigurer</strong>进行删减</p>\n<p>目录</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\66.starter-build01.jpg\" alt=\"66.starter-build01\"></p>\n<p>2、pom文件修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写相关的类</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\67.starter-build02.jpg\" alt=\"67.starter-build02\"></p>\n<p>4、HelloProperties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;lxy.hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPrefix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrefix</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSuffix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuffix</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、HelloService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloProperties <span class=\"title\">getHelloProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHelloProperties</span><span class=\"params\">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.helloProperties = helloProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+name+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、HelloServiceAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxy.starter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        HelloService service = <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">        service.setHelloProperties(helloProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\</span><br><span class=\"line\">com.lxy.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter-autoconfigurer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>9、install生成</p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\68.starter-build03.jpg\" alt=\"68.starter-build03\"></p>\n<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><p>新建一个springboot 1.5+web</p>\n<p>1、引入starter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lxy.starter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lxy-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、新建一个Controller用来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService.sayHello(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件制定前缀和后缀名</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">lxy.hello.prefix</span>=<span class=\"string\">Starter-</span></span><br><span class=\"line\"><span class=\"meta\">lxy.hello.suffix</span>=<span class=\"string\">-Success</span></span><br></pre></td></tr></table></figure>\n\n<p>4、运行访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></p>\n<p><img src=\"E:\\工作文档\\SpringBoot\\images\\70.starter-build05.jpg\" alt=\"70.starter-build05\"></p>\n<p>成功爽啊</p>\n"},{"title":"历史逻辑的思考","_content":"\n\n# 历史从来不是关于过去的，历史从来都是关于未来的\n\n## 【背景】Q:年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\n\n\n\n## 历史是关于未来的\n\n戴：只有占据未来的言说权，引导权，和相信自己拥有未来的人，才有权利去言说历史，“历史就在描述着、勾勒着、召唤着未来”？。历史也可能在抹除未来，消灭未来。\n\n评：【对于历史的解释方向，就昭示着解读者对于未来的舆论导向，最高的权利是定义权/话语权】\n\n\n\n戴：当代文化中存在的矛盾现象，一边是历史的涌现，一边是历史的含混。\n\n涌现的事中国的前现代历史。因为当中国崛起，中国赢得了作为一个大国的份额的时候，我们也赢回了自己的历史，而自鸦片战争开始，我们逐渐丧失了我们的历史。\n\n**五四新文化运动，开启现代中国历史的时候，也祭献了自己全部的前现代历史，作为代价去开启我们的历史**。《狂人日记》用“仁义道德”和“吃人”，概括几千年的中华文明史。只有如此，才能进入现代，中国才能赢得未来。而当中国崛起之后，才有资格回收这段历史，有位置把中国历史镶嵌进世界历史当中去。\n\n评：【舍弃历史来抛开见知障】\n\n\n\n## 不同的历史逻辑\n\n戴：历史逻辑，决定历史叙述，决定着历史在整体的文化宏图中的地位。\n\n**西方资本主义现代的历史逻辑**，与**前现代中国曾经形成的历史逻辑**，它们的不兼容。当西方资本主义现代的历史逻辑，且表现为巨大的强势的时候，我们只能否认我们的历史，牺牲我们的历史，自己抹除自己的历史，以空白的方式再次切入到世界的景观中去。\n\n我们经常会忽略到，二十世纪，尤其是二战之后，全球的社会主义实践，全球的国际共产主义运动，曾经也带入了一种，不一样的历史观。一种不是以统治者，以统治更迭来贯穿的历史叙述，而是**一个以人民，以人民反抗，以劳动，以劳动者来主导的这样的一种历史观**\n\n\n\n## 历史祭献、继承与轮回\n\n戴：那么当我们在现代化的高歌猛进当中，当我们曲终奏雅，中国崛起的时候，我们终于能够赢得中国前现代的历史，能够在现代民族国家的这个起点上，延续起辉煌璀璨的，丰富多彩的，具有延续性的前现代中国历史的时候。\n\n**我们又献祭了50到70年代的历史、历史观，曾经创造出来的一种不一样的历史观**。\n\n【祭献的是人民的思潮】\n\n【1979年？】历史的第一幕不是秦始皇，而是陈胜吴广，一个农民起义，被反抗，失败，再举义旗的，这样的的一个完全不同的历史脉络贯穿起来的历史。【史记中，孔子与陈胜吴广是两个特色的篇章】【教材 陈涉世家】\n\n评【批判性地继承，这是一个宏大的历史命题，甚至是我们这一代的历史使命。】\n\n【只有这代人还存活的时候(20世纪30年代起)，我们才能倾听到这段历史的无声之处，即失败者。只有距今百年的失败者， 会载入历史，时间维度很大的历史观，只会存留胜利者。】\n\n英历史学家 ep汤普森:“历史是那些大人物的声音，所汇成的这样的一个声音空间，对于历史学家来说，要倾听历史的无声处”\n\n【于无声处听惊雷】\n\n戴：要倾听失败者的声音，历史不能只是胜利者的清单，历史始终必须包含了失败者。\n\n\n\n## 当我们在谈论历史的时候，我们在谈论什么\n\n戴：当我们在谈论xx的时候，我们在谈论什么？\n\n​\t\t当我们在谈论xx的时候，在谈论谁的xx？\n\n​\t\t谁在谈论xx？我们为什么要谈论xx？\n\n当这种强烈的历史意识和历史的表象，大规模涌现的时候。【历史的主体与客体，内容与意义】\n\n米歇尔福柯：《历史与人民的记忆》。历史是群体的宏观的，记忆是个人的微观的。\n\n历史是由无数人的记忆汇聚而成的？福柯：**历史与人民的记忆是一组对抗的元素，是在压抑人民的记忆，改写人民的记忆，抹除人民记忆的一种政治实践**。\n\n三种历史观：1、西方现代化主导的历史观；2、前现代中国历史逻辑所形成的历史观；3、当代中国对于历史唯物主义的历史观。\n\n三种历史观都包含了与人民记忆的对抗。因为：人民记忆的历史观，未必是人民记忆的代言人，也包含了某些对人民记忆的压抑。\n\n历史以它所携带的权利，所携带的权威性，是一个不断抹除和改写人民记忆的这样一个过程。\n\n在实践过程中，我们也经常以个人的，某一些社会群体，某一些社会集体的记忆之名，去质询历史，去改写历史这样的一种努力。我们的现实当中，我们包含了不同的历史叙述，我们经常用记忆，去质询去对话不同的历史叙述。或者非常奇特的，我们可能赋予记忆以某种特权，说“我的生活是这样的”，所以“你的(历史的)叙述是虚假的”\n\n然后另一个层次：并不是每一个记忆着的热播，都有资格言说自己的记忆。并不是每一个言说记忆的人，他的言说都可能被倾听。于是历史不是一个自外于历史，自外于权力的存在，记忆是权利实践的一种形态。","source":"_posts/历史从来不是关于过去的，历史从来都是关于未来的.md","raw":"---\ntitle: 历史逻辑的思考\n---\n\n\n# 历史从来不是关于过去的，历史从来都是关于未来的\n\n## 【背景】Q:年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\n\n\n\n## 历史是关于未来的\n\n戴：只有占据未来的言说权，引导权，和相信自己拥有未来的人，才有权利去言说历史，“历史就在描述着、勾勒着、召唤着未来”？。历史也可能在抹除未来，消灭未来。\n\n评：【对于历史的解释方向，就昭示着解读者对于未来的舆论导向，最高的权利是定义权/话语权】\n\n\n\n戴：当代文化中存在的矛盾现象，一边是历史的涌现，一边是历史的含混。\n\n涌现的事中国的前现代历史。因为当中国崛起，中国赢得了作为一个大国的份额的时候，我们也赢回了自己的历史，而自鸦片战争开始，我们逐渐丧失了我们的历史。\n\n**五四新文化运动，开启现代中国历史的时候，也祭献了自己全部的前现代历史，作为代价去开启我们的历史**。《狂人日记》用“仁义道德”和“吃人”，概括几千年的中华文明史。只有如此，才能进入现代，中国才能赢得未来。而当中国崛起之后，才有资格回收这段历史，有位置把中国历史镶嵌进世界历史当中去。\n\n评：【舍弃历史来抛开见知障】\n\n\n\n## 不同的历史逻辑\n\n戴：历史逻辑，决定历史叙述，决定着历史在整体的文化宏图中的地位。\n\n**西方资本主义现代的历史逻辑**，与**前现代中国曾经形成的历史逻辑**，它们的不兼容。当西方资本主义现代的历史逻辑，且表现为巨大的强势的时候，我们只能否认我们的历史，牺牲我们的历史，自己抹除自己的历史，以空白的方式再次切入到世界的景观中去。\n\n我们经常会忽略到，二十世纪，尤其是二战之后，全球的社会主义实践，全球的国际共产主义运动，曾经也带入了一种，不一样的历史观。一种不是以统治者，以统治更迭来贯穿的历史叙述，而是**一个以人民，以人民反抗，以劳动，以劳动者来主导的这样的一种历史观**\n\n\n\n## 历史祭献、继承与轮回\n\n戴：那么当我们在现代化的高歌猛进当中，当我们曲终奏雅，中国崛起的时候，我们终于能够赢得中国前现代的历史，能够在现代民族国家的这个起点上，延续起辉煌璀璨的，丰富多彩的，具有延续性的前现代中国历史的时候。\n\n**我们又献祭了50到70年代的历史、历史观，曾经创造出来的一种不一样的历史观**。\n\n【祭献的是人民的思潮】\n\n【1979年？】历史的第一幕不是秦始皇，而是陈胜吴广，一个农民起义，被反抗，失败，再举义旗的，这样的的一个完全不同的历史脉络贯穿起来的历史。【史记中，孔子与陈胜吴广是两个特色的篇章】【教材 陈涉世家】\n\n评【批判性地继承，这是一个宏大的历史命题，甚至是我们这一代的历史使命。】\n\n【只有这代人还存活的时候(20世纪30年代起)，我们才能倾听到这段历史的无声之处，即失败者。只有距今百年的失败者， 会载入历史，时间维度很大的历史观，只会存留胜利者。】\n\n英历史学家 ep汤普森:“历史是那些大人物的声音，所汇成的这样的一个声音空间，对于历史学家来说，要倾听历史的无声处”\n\n【于无声处听惊雷】\n\n戴：要倾听失败者的声音，历史不能只是胜利者的清单，历史始终必须包含了失败者。\n\n\n\n## 当我们在谈论历史的时候，我们在谈论什么\n\n戴：当我们在谈论xx的时候，我们在谈论什么？\n\n​\t\t当我们在谈论xx的时候，在谈论谁的xx？\n\n​\t\t谁在谈论xx？我们为什么要谈论xx？\n\n当这种强烈的历史意识和历史的表象，大规模涌现的时候。【历史的主体与客体，内容与意义】\n\n米歇尔福柯：《历史与人民的记忆》。历史是群体的宏观的，记忆是个人的微观的。\n\n历史是由无数人的记忆汇聚而成的？福柯：**历史与人民的记忆是一组对抗的元素，是在压抑人民的记忆，改写人民的记忆，抹除人民记忆的一种政治实践**。\n\n三种历史观：1、西方现代化主导的历史观；2、前现代中国历史逻辑所形成的历史观；3、当代中国对于历史唯物主义的历史观。\n\n三种历史观都包含了与人民记忆的对抗。因为：人民记忆的历史观，未必是人民记忆的代言人，也包含了某些对人民记忆的压抑。\n\n历史以它所携带的权利，所携带的权威性，是一个不断抹除和改写人民记忆的这样一个过程。\n\n在实践过程中，我们也经常以个人的，某一些社会群体，某一些社会集体的记忆之名，去质询历史，去改写历史这样的一种努力。我们的现实当中，我们包含了不同的历史叙述，我们经常用记忆，去质询去对话不同的历史叙述。或者非常奇特的，我们可能赋予记忆以某种特权，说“我的生活是这样的”，所以“你的(历史的)叙述是虚假的”\n\n然后另一个层次：并不是每一个记忆着的热播，都有资格言说自己的记忆。并不是每一个言说记忆的人，他的言说都可能被倾听。于是历史不是一个自外于历史，自外于权力的存在，记忆是权利实践的一种形态。","slug":"历史从来不是关于过去的，历史从来都是关于未来的","published":1,"date":"2021-06-09T23:11:21.663Z","updated":"2022-04-12T09:53:44.820Z","_id":"cl1vyonv30000k60m4r0f995h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"历史从来不是关于过去的，历史从来都是关于未来的\"><a href=\"#历史从来不是关于过去的，历史从来都是关于未来的\" class=\"headerlink\" title=\"历史从来不是关于过去的，历史从来都是关于未来的\"></a>历史从来不是关于过去的，历史从来都是关于未来的</h1><h2 id=\"【背景】Q-年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\"><a href=\"#【背景】Q-年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\" class=\"headerlink\" title=\"【背景】Q:年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\"></a>【背景】Q:年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？</h2><h2 id=\"历史是关于未来的\"><a href=\"#历史是关于未来的\" class=\"headerlink\" title=\"历史是关于未来的\"></a>历史是关于未来的</h2><p>戴：只有占据未来的言说权，引导权，和相信自己拥有未来的人，才有权利去言说历史，“历史就在描述着、勾勒着、召唤着未来”？。历史也可能在抹除未来，消灭未来。</p>\n<p>评：【对于历史的解释方向，就昭示着解读者对于未来的舆论导向，最高的权利是定义权/话语权】</p>\n<p>戴：当代文化中存在的矛盾现象，一边是历史的涌现，一边是历史的含混。</p>\n<p>涌现的事中国的前现代历史。因为当中国崛起，中国赢得了作为一个大国的份额的时候，我们也赢回了自己的历史，而自鸦片战争开始，我们逐渐丧失了我们的历史。</p>\n<p><strong>五四新文化运动，开启现代中国历史的时候，也祭献了自己全部的前现代历史，作为代价去开启我们的历史</strong>。《狂人日记》用“仁义道德”和“吃人”，概括几千年的中华文明史。只有如此，才能进入现代，中国才能赢得未来。而当中国崛起之后，才有资格回收这段历史，有位置把中国历史镶嵌进世界历史当中去。</p>\n<p>评：【舍弃历史来抛开见知障】</p>\n<h2 id=\"不同的历史逻辑\"><a href=\"#不同的历史逻辑\" class=\"headerlink\" title=\"不同的历史逻辑\"></a>不同的历史逻辑</h2><p>戴：历史逻辑，决定历史叙述，决定着历史在整体的文化宏图中的地位。</p>\n<p><strong>西方资本主义现代的历史逻辑</strong>，与<strong>前现代中国曾经形成的历史逻辑</strong>，它们的不兼容。当西方资本主义现代的历史逻辑，且表现为巨大的强势的时候，我们只能否认我们的历史，牺牲我们的历史，自己抹除自己的历史，以空白的方式再次切入到世界的景观中去。</p>\n<p>我们经常会忽略到，二十世纪，尤其是二战之后，全球的社会主义实践，全球的国际共产主义运动，曾经也带入了一种，不一样的历史观。一种不是以统治者，以统治更迭来贯穿的历史叙述，而是<strong>一个以人民，以人民反抗，以劳动，以劳动者来主导的这样的一种历史观</strong></p>\n<h2 id=\"历史祭献、继承与轮回\"><a href=\"#历史祭献、继承与轮回\" class=\"headerlink\" title=\"历史祭献、继承与轮回\"></a>历史祭献、继承与轮回</h2><p>戴：那么当我们在现代化的高歌猛进当中，当我们曲终奏雅，中国崛起的时候，我们终于能够赢得中国前现代的历史，能够在现代民族国家的这个起点上，延续起辉煌璀璨的，丰富多彩的，具有延续性的前现代中国历史的时候。</p>\n<p><strong>我们又献祭了50到70年代的历史、历史观，曾经创造出来的一种不一样的历史观</strong>。</p>\n<p>【祭献的是人民的思潮】</p>\n<p>【1979年？】历史的第一幕不是秦始皇，而是陈胜吴广，一个农民起义，被反抗，失败，再举义旗的，这样的的一个完全不同的历史脉络贯穿起来的历史。【史记中，孔子与陈胜吴广是两个特色的篇章】【教材 陈涉世家】</p>\n<p>评【批判性地继承，这是一个宏大的历史命题，甚至是我们这一代的历史使命。】</p>\n<p>【只有这代人还存活的时候(20世纪30年代起)，我们才能倾听到这段历史的无声之处，即失败者。只有距今百年的失败者， 会载入历史，时间维度很大的历史观，只会存留胜利者。】</p>\n<p>英历史学家 ep汤普森:“历史是那些大人物的声音，所汇成的这样的一个声音空间，对于历史学家来说，要倾听历史的无声处”</p>\n<p>【于无声处听惊雷】</p>\n<p>戴：要倾听失败者的声音，历史不能只是胜利者的清单，历史始终必须包含了失败者。</p>\n<h2 id=\"当我们在谈论历史的时候，我们在谈论什么\"><a href=\"#当我们在谈论历史的时候，我们在谈论什么\" class=\"headerlink\" title=\"当我们在谈论历史的时候，我们在谈论什么\"></a>当我们在谈论历史的时候，我们在谈论什么</h2><p>戴：当我们在谈论xx的时候，我们在谈论什么？</p>\n<p>​        当我们在谈论xx的时候，在谈论谁的xx？</p>\n<p>​        谁在谈论xx？我们为什么要谈论xx？</p>\n<p>当这种强烈的历史意识和历史的表象，大规模涌现的时候。【历史的主体与客体，内容与意义】</p>\n<p>米歇尔福柯：《历史与人民的记忆》。历史是群体的宏观的，记忆是个人的微观的。</p>\n<p>历史是由无数人的记忆汇聚而成的？福柯：<strong>历史与人民的记忆是一组对抗的元素，是在压抑人民的记忆，改写人民的记忆，抹除人民记忆的一种政治实践</strong>。</p>\n<p>三种历史观：1、西方现代化主导的历史观；2、前现代中国历史逻辑所形成的历史观；3、当代中国对于历史唯物主义的历史观。</p>\n<p>三种历史观都包含了与人民记忆的对抗。因为：人民记忆的历史观，未必是人民记忆的代言人，也包含了某些对人民记忆的压抑。</p>\n<p>历史以它所携带的权利，所携带的权威性，是一个不断抹除和改写人民记忆的这样一个过程。</p>\n<p>在实践过程中，我们也经常以个人的，某一些社会群体，某一些社会集体的记忆之名，去质询历史，去改写历史这样的一种努力。我们的现实当中，我们包含了不同的历史叙述，我们经常用记忆，去质询去对话不同的历史叙述。或者非常奇特的，我们可能赋予记忆以某种特权，说“我的生活是这样的”，所以“你的(历史的)叙述是虚假的”</p>\n<p>然后另一个层次：并不是每一个记忆着的热播，都有资格言说自己的记忆。并不是每一个言说记忆的人，他的言说都可能被倾听。于是历史不是一个自外于历史，自外于权力的存在，记忆是权利实践的一种形态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"历史从来不是关于过去的，历史从来都是关于未来的\"><a href=\"#历史从来不是关于过去的，历史从来都是关于未来的\" class=\"headerlink\" title=\"历史从来不是关于过去的，历史从来都是关于未来的\"></a>历史从来不是关于过去的，历史从来都是关于未来的</h1><h2 id=\"【背景】Q-年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\"><a href=\"#【背景】Q-年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\" class=\"headerlink\" title=\"【背景】Q:年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？\"></a>【背景】Q:年轻人应该怎样切入20世纪，尤其是60年代历史资源，才有可能真正地继承遗产，然后摆脱资本主义走向非现代性的未来？</h2><h2 id=\"历史是关于未来的\"><a href=\"#历史是关于未来的\" class=\"headerlink\" title=\"历史是关于未来的\"></a>历史是关于未来的</h2><p>戴：只有占据未来的言说权，引导权，和相信自己拥有未来的人，才有权利去言说历史，“历史就在描述着、勾勒着、召唤着未来”？。历史也可能在抹除未来，消灭未来。</p>\n<p>评：【对于历史的解释方向，就昭示着解读者对于未来的舆论导向，最高的权利是定义权/话语权】</p>\n<p>戴：当代文化中存在的矛盾现象，一边是历史的涌现，一边是历史的含混。</p>\n<p>涌现的事中国的前现代历史。因为当中国崛起，中国赢得了作为一个大国的份额的时候，我们也赢回了自己的历史，而自鸦片战争开始，我们逐渐丧失了我们的历史。</p>\n<p><strong>五四新文化运动，开启现代中国历史的时候，也祭献了自己全部的前现代历史，作为代价去开启我们的历史</strong>。《狂人日记》用“仁义道德”和“吃人”，概括几千年的中华文明史。只有如此，才能进入现代，中国才能赢得未来。而当中国崛起之后，才有资格回收这段历史，有位置把中国历史镶嵌进世界历史当中去。</p>\n<p>评：【舍弃历史来抛开见知障】</p>\n<h2 id=\"不同的历史逻辑\"><a href=\"#不同的历史逻辑\" class=\"headerlink\" title=\"不同的历史逻辑\"></a>不同的历史逻辑</h2><p>戴：历史逻辑，决定历史叙述，决定着历史在整体的文化宏图中的地位。</p>\n<p><strong>西方资本主义现代的历史逻辑</strong>，与<strong>前现代中国曾经形成的历史逻辑</strong>，它们的不兼容。当西方资本主义现代的历史逻辑，且表现为巨大的强势的时候，我们只能否认我们的历史，牺牲我们的历史，自己抹除自己的历史，以空白的方式再次切入到世界的景观中去。</p>\n<p>我们经常会忽略到，二十世纪，尤其是二战之后，全球的社会主义实践，全球的国际共产主义运动，曾经也带入了一种，不一样的历史观。一种不是以统治者，以统治更迭来贯穿的历史叙述，而是<strong>一个以人民，以人民反抗，以劳动，以劳动者来主导的这样的一种历史观</strong></p>\n<h2 id=\"历史祭献、继承与轮回\"><a href=\"#历史祭献、继承与轮回\" class=\"headerlink\" title=\"历史祭献、继承与轮回\"></a>历史祭献、继承与轮回</h2><p>戴：那么当我们在现代化的高歌猛进当中，当我们曲终奏雅，中国崛起的时候，我们终于能够赢得中国前现代的历史，能够在现代民族国家的这个起点上，延续起辉煌璀璨的，丰富多彩的，具有延续性的前现代中国历史的时候。</p>\n<p><strong>我们又献祭了50到70年代的历史、历史观，曾经创造出来的一种不一样的历史观</strong>。</p>\n<p>【祭献的是人民的思潮】</p>\n<p>【1979年？】历史的第一幕不是秦始皇，而是陈胜吴广，一个农民起义，被反抗，失败，再举义旗的，这样的的一个完全不同的历史脉络贯穿起来的历史。【史记中，孔子与陈胜吴广是两个特色的篇章】【教材 陈涉世家】</p>\n<p>评【批判性地继承，这是一个宏大的历史命题，甚至是我们这一代的历史使命。】</p>\n<p>【只有这代人还存活的时候(20世纪30年代起)，我们才能倾听到这段历史的无声之处，即失败者。只有距今百年的失败者， 会载入历史，时间维度很大的历史观，只会存留胜利者。】</p>\n<p>英历史学家 ep汤普森:“历史是那些大人物的声音，所汇成的这样的一个声音空间，对于历史学家来说，要倾听历史的无声处”</p>\n<p>【于无声处听惊雷】</p>\n<p>戴：要倾听失败者的声音，历史不能只是胜利者的清单，历史始终必须包含了失败者。</p>\n<h2 id=\"当我们在谈论历史的时候，我们在谈论什么\"><a href=\"#当我们在谈论历史的时候，我们在谈论什么\" class=\"headerlink\" title=\"当我们在谈论历史的时候，我们在谈论什么\"></a>当我们在谈论历史的时候，我们在谈论什么</h2><p>戴：当我们在谈论xx的时候，我们在谈论什么？</p>\n<p>​        当我们在谈论xx的时候，在谈论谁的xx？</p>\n<p>​        谁在谈论xx？我们为什么要谈论xx？</p>\n<p>当这种强烈的历史意识和历史的表象，大规模涌现的时候。【历史的主体与客体，内容与意义】</p>\n<p>米歇尔福柯：《历史与人民的记忆》。历史是群体的宏观的，记忆是个人的微观的。</p>\n<p>历史是由无数人的记忆汇聚而成的？福柯：<strong>历史与人民的记忆是一组对抗的元素，是在压抑人民的记忆，改写人民的记忆，抹除人民记忆的一种政治实践</strong>。</p>\n<p>三种历史观：1、西方现代化主导的历史观；2、前现代中国历史逻辑所形成的历史观；3、当代中国对于历史唯物主义的历史观。</p>\n<p>三种历史观都包含了与人民记忆的对抗。因为：人民记忆的历史观，未必是人民记忆的代言人，也包含了某些对人民记忆的压抑。</p>\n<p>历史以它所携带的权利，所携带的权威性，是一个不断抹除和改写人民记忆的这样一个过程。</p>\n<p>在实践过程中，我们也经常以个人的，某一些社会群体，某一些社会集体的记忆之名，去质询历史，去改写历史这样的一种努力。我们的现实当中，我们包含了不同的历史叙述，我们经常用记忆，去质询去对话不同的历史叙述。或者非常奇特的，我们可能赋予记忆以某种特权，说“我的生活是这样的”，所以“你的(历史的)叙述是虚假的”</p>\n<p>然后另一个层次：并不是每一个记忆着的热播，都有资格言说自己的记忆。并不是每一个言说记忆的人，他的言说都可能被倾听。于是历史不是一个自外于历史，自外于权力的存在，记忆是权利实践的一种形态。</p>\n"},{"title":"中国道路问题——官僚资本主义","_content":"\n# 中国道路问题——官僚资本主义\n\n## 毛泽东三座大山最后一座\n\n帝国主义，封建主义，官僚资本主义\n\n## 原因和时间\n\n中国后改革开放实践，进入到新世纪的时间(2000前后)，比较快速发展的状况\n\n第二个百年，2049年间28年，最大的问题就是官僚垄断资本主义\n\n### 背景\n\n\n\n## 美国的道路问题——金融垄断资本主义\n\n体制内**桑德斯**的解决方案失败了，体制外**占领华尔街运动**失败了。\n\n","source":"_posts/中国道路问题——官僚资本主义.md","raw":"---\ntitle: 中国道路问题——官僚资本主义\n---\n\n# 中国道路问题——官僚资本主义\n\n## 毛泽东三座大山最后一座\n\n帝国主义，封建主义，官僚资本主义\n\n## 原因和时间\n\n中国后改革开放实践，进入到新世纪的时间(2000前后)，比较快速发展的状况\n\n第二个百年，2049年间28年，最大的问题就是官僚垄断资本主义\n\n### 背景\n\n\n\n## 美国的道路问题——金融垄断资本主义\n\n体制内**桑德斯**的解决方案失败了，体制外**占领华尔街运动**失败了。\n\n","slug":"中国道路问题——官僚资本主义","published":1,"date":"2021-06-09T22:57:06.500Z","updated":"2022-04-12T09:52:16.746Z","_id":"cl1vyonvk0001k60m969rc9or","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"中国道路问题——官僚资本主义\"><a href=\"#中国道路问题——官僚资本主义\" class=\"headerlink\" title=\"中国道路问题——官僚资本主义\"></a>中国道路问题——官僚资本主义</h1><h2 id=\"毛泽东三座大山最后一座\"><a href=\"#毛泽东三座大山最后一座\" class=\"headerlink\" title=\"毛泽东三座大山最后一座\"></a>毛泽东三座大山最后一座</h2><p>帝国主义，封建主义，官僚资本主义</p>\n<h2 id=\"原因和时间\"><a href=\"#原因和时间\" class=\"headerlink\" title=\"原因和时间\"></a>原因和时间</h2><p>中国后改革开放实践，进入到新世纪的时间(2000前后)，比较快速发展的状况</p>\n<p>第二个百年，2049年间28年，最大的问题就是官僚垄断资本主义</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><h2 id=\"美国的道路问题——金融垄断资本主义\"><a href=\"#美国的道路问题——金融垄断资本主义\" class=\"headerlink\" title=\"美国的道路问题——金融垄断资本主义\"></a>美国的道路问题——金融垄断资本主义</h2><p>体制内<strong>桑德斯</strong>的解决方案失败了，体制外<strong>占领华尔街运动</strong>失败了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"中国道路问题——官僚资本主义\"><a href=\"#中国道路问题——官僚资本主义\" class=\"headerlink\" title=\"中国道路问题——官僚资本主义\"></a>中国道路问题——官僚资本主义</h1><h2 id=\"毛泽东三座大山最后一座\"><a href=\"#毛泽东三座大山最后一座\" class=\"headerlink\" title=\"毛泽东三座大山最后一座\"></a>毛泽东三座大山最后一座</h2><p>帝国主义，封建主义，官僚资本主义</p>\n<h2 id=\"原因和时间\"><a href=\"#原因和时间\" class=\"headerlink\" title=\"原因和时间\"></a>原因和时间</h2><p>中国后改革开放实践，进入到新世纪的时间(2000前后)，比较快速发展的状况</p>\n<p>第二个百年，2049年间28年，最大的问题就是官僚垄断资本主义</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><h2 id=\"美国的道路问题——金融垄断资本主义\"><a href=\"#美国的道路问题——金融垄断资本主义\" class=\"headerlink\" title=\"美国的道路问题——金融垄断资本主义\"></a>美国的道路问题——金融垄断资本主义</h2><p>体制内<strong>桑德斯</strong>的解决方案失败了，体制外<strong>占领华尔街运动</strong>失败了。</p>\n"},{"title":"悬浮时代 项飙","_content":"\n 大家好，欢迎收听 Matters 流动课，这是项飙老师和大家分享的最后一课了。过去几节课，我们聊过留学、世界公民、移民、中介、跨国、全球流动，看上去这几个词背后都是飞速流转的漩涡，仿佛每个人都马不停蹄，从一个点奔向另一个点，奔跑的过程中也带着对生活的期待和不安。伴随着高度流动的是普遍存在一种悬浮状态，不只是中国社会如此，全球都有相似的现象。接下来，项飙老师会详细解释悬浮这个词，也希望大家能够静下心来想一想，我们是不是正在悬浮的状态中，有没有勇气，摆脱悬浮，脚踏实地活在当下，活出自己呢？\n\n我有一句话叫**焦虑面前人人平等**。\n\n所以在中国，我们知道从政治经济学的意义上，如果你要拿这个关于收入或者是财产的统计来看，中国显然是一个在大分化的社会，用社会学家的话讲，阶层分化固定化的一个社会。但是非常有意思的是，**各个阶层的心态，他的心智结构，他的认知，他的娱乐方式，他用的话语，有的时候是高度一致的。**\n\n所以这个是一个很吊诡的现象：就是高度分化的客观生活状态和高度一致主观意识是并存的，那么这个高度一致的主观感知里面的一个重要的原因，就是咱们刚才提到这焦虑的问题，特别焦虑是成为一种不断的焦虑，就他**不是一个可以解决的焦虑**，为什么是这样？\n\n因为像早发早移的这批群体，前面提到，移民作为一个目标，他是要去**逃离现在不满意的东西**，但是他要蹦向哪一个？什么东西是他满意的东西，他并不清楚的，他只知道他要摆脱现在，**他要奔向哪里？不知道**。所以在这个情况下，如果你永远是**在一种否定的状况下去定义自己的行为的意义，那这个必然会永远在一个焦虑的过程当中**。就说你早发，辛勤的工作是为了发，发了是为了离开，为了移。所以这一切的逻辑链条多是否定性的。\n\n这个状态我把它叫做**悬浮**，它是在中国今天的社会一个非常普遍的心态。\n\n那么悬浮这个概念，我最早意识到是在 1994 年我在珠江三角洲做农民工调查的时候。我发现一个现象，就是农民工很少在一个工厂打工超过一年的。所以近些年有人提说，农民工打工短工化的现象，其实这个一直存在，至少从 90 年代初就存在。然后我问那些农民工，他们也就是 20 来岁左右，你为什么不在一个工厂工作的时间长一点？其实农民工他这样不断的跳，他在经济上损失是蛮大的，因为工厂会克扣他的工资，如果你很早离开的话，有些工厂也会给你这个叫做就是长期服务奖，如果你要超过一年的话，你会得到额外的奖励。那他为什么会这样不断的跳槽？\n\n原因让我非常惊讶，原因非常简单，有的时候是说他跟他那个工头就是他那个车间的管理者有矛盾，有的时候是因为他和他同宿舍的工友吵架了，有的时候就是因为他感到单调孤燥，因为每天就干一样的活，所以他就想**用跳槽这个方式来解决**。所以我们看到的是这些农民工永远不仅在流动，而且是超速的高度的流动，所以是充满了能量，然后用流动来解决这个当时面临的一个问题。但是我们知道他这样的不断的流动，显然是不能够解决这些问题本身的，所以他流来流去，这些问题永远存在。\n\n然后你问他为什么不坐下来想一想，怎么样去解决宿舍内部的工人之间的关系，为什么不跟其他的工友商量一下，怎么样跟经理或者厂长更好地沟通？咱们不谈说要成立工会那个层次上更加正式性的行动。我然后问农民工，他就觉得那个可能会是浪费时间，与其花那个时间和精力去面对当时的问题，**还不如赶快跳槽，尽量多尽量快的攒钱**。**然后攒完钱他就再也不用当农民工了**。\n\n他那时候的想象就是赶快回乡买一个房子，或者买一个车出租出去当出租车，或者是有一个小店铺去卖衣服，或者开理发店等等，这是当时比较普遍的一些计划。**但是我们知道大部分或者说是绝大部分的农民工，这么多年下来，其实一直还在做农民工**，做了 20 年 30 年，一直到他做不下去为止。所以他那种说我赶快与其花时间面对我当时的具体问题，还不如我攒够钱，然后跳出我这个生存状态，那个只是一个，不能说自欺欺人，但就只是一个非常大的一个假设。\n\n刘小东《人鸟》\n\n所以我脑子里当时想到的一个意向就是悬浮，**大家都在高速地流动，非常勤快，非常的辛苦，工作非常努力**。但他工作努力不断高速流动，并不是因为喜欢这个工作，他努力工作，而正是因为他不喜欢甚至痛恨这个工作，他努力地工作，然后以至于他能够赶快的攒到钱，然后哪一天他就再也不用去做这样的工作。所以在这里一个关键的环节，就是说他失去了那份耐心，失去了那份意志来直接面对当时那个很具体的问题。\n\n为什么这个工作他不喜欢？为什么那个工作环境不好？有没有办法在当时的情况下做一点改变？他要做出的选择不是改变，而是赶快的逃离，逃离那个具体的场景，然后想象着哪一天他可以彻底逃离他的那种身份，这种所以悬浮就很本质的一个特征，就是说**对当下的一种悬置**，他不直接面对当下，他总是要想迈向一个未来，然后当下存在的意义，不过是他迈向未来的一个台阶。所以你越快的跨越过这个当下越好。\n\n所以你要停下来说反思当下，**问一些问题就当下本身有什么意义**，我为什么要做这个当下这个都是浪费时间，是让你自己苦恼的事情，所以一个明智的选择是不问！就是只顾我们原来有句话叫做只顾埋头拉车，不顾抬头看路，从来不顾抬头看路，它就是说你这个明智的选择就是不要去抬头看路，问问题，就是只顾闭上眼睛往前冲。所以它解释了一个我觉得中国社会一个总体的比较有意思，但是也是令人疑惑，也令人担忧的一个现象，**就是我们的经济增长非常快，我们每个人好像是充满了能量，大家工作非常的辛苦，但是我们的社会的变化基本上是非常缓慢甚至停滞的**。\n\n这个听起来有点奇怪，但是我们认真想一下，我们社会生活方式似乎变化很快，社会组织似乎变化很快，是什么推进的？基本上是因为**技术变迁**。\n\n比方说从微博到微信，那这个变化过程其实是很难预测的，是一个比较随机的一个过程，所以我们的社会生活的变化就是越来越被这个外在的物质技术的变化而推动。**而社会本身不再成为一个变化我们生活方式，变化我们思想意识的一个推动力。**\n\n所以这个悬浮状态希望是**解释为什么一方面每个人会有那么强大的一个经济能动力，但另外一方面放在一起，在集体上，我们对自己的生活方式、生产方式、公共组织方式，基本上很少有反思**。很少有坐下来说，今天我们为什么社区的这个基本的垃圾处理方式不可以改一改，或者说这个小学的教育方式难道不可以改一改吗？\n\n哪怕是很小的身边的事情，我们很多人都成天就是抱怨觉得不合理，但是觉得要停下来做过多的反思，这个事就是浪费时间，所以最重要的就是赶快在既定的这个条件下积累最多的资源，然后往前冲，这个就是我所说的这个悬浮状态。那么当然这个早发早移是一个比较典型的，就可以说是一个在物理上给我们具体化了的悬浮的一个状态，就是他要逃离，但是不知道去哪里。**然后去了之后他还是悬在空中，这个在社会意义上落在这个迁入地，也不是在他的这个生命意义上嵌入到他的流出地。**\n\n这个悬浮状态，我觉得他是**具有全球性**，特别在城市里的**中产**这一层，现在在发达国家，在其他的转型国家比方说是拉美，然后在甚至在一些不发达国家，这可能都是比较普遍存在的一个现象。\n\n**但有中国特色的一个点是什么？**\n\n就是中国的**比较低收入阶层**，也面临着这样的**高度悬浮**的一个心态。\n\n这个是要回到我们中国改革开放的特殊的历程。中国的改革开放的起点，我们不能忘记它是国家主导下的社会主义经济。国家主导下的社会经济，意味着每个人所占有的资源基本上是比较平等的，同时也意味着每个人在思想意识上有很强烈的平等主义诉求。每个人觉得他应该跟别人一样，然后在这个时候开始了以市场经济为导向的经济改革。然后到了 1992 年之后，私有化的进程更加深入了。这意味着什么呢？意味着把 10 亿人民大家都拥有，比较相似的，差不多资源的人，同时推到了一个巨大的市场竞争里面。这么多人同时要捞到第一桶金，要同时完成他的原始积累，所有的人都害怕会被挤，就会被落在后头，所有人都想比别人快一步或者半步。在这个情况下，你停下来问，确实是有点傻，所以大家都要一起往前冲。这个也当然是解释了为什么中国的经济增长有这样奇迹般的快。你想一想，10 亿人民一条心都往前冲。\n\n所以这个悬浮状态里面，也让我们反思，就是这个一个平等和不平等之间的辩证关系，就是我们的起点的这个平等主义，其实是对中国的经济增长非常重要的贡献。但是这种平等的起点，当它突然转化为一个市场经济之后，特别是在市场经济没有相应的社会福利、社会保护、社会保障作为依托，所以大家都觉得他必须要通过市场上竞争才能获得基本的资源，才能够保证他有一个体面的生活的时候。那么这**种原来的那个平等也会造成巨大的精神压力和焦虑**。\n\n所以今后我觉得从个体上讲，可以想象**是不是可以慢下来，可以多想一想当下**。\n\n想想你今天做的事情本身有什么意义？**不要想说我今天做的事情对我明天做别的事情有什么意义**。因为你可能永远达不到明天，那个你想做的别的事情，你如果不从此刻开始的话，**你可能永远达不到彼岸。**\n\n所以那个彼岸其实只是你说给自己听的一个**谎言**，然后劝说自己能够咬牙把今天不喜欢做的事情做下去。然后从更宏观的制度设计上看，一个更加安全的有保障的体制、一个社会环境可能也是非常重要的，使大家能够慢下来，能够更加从容地体会这个生活。\n\n所以这个从微观和宏观两个层面，可能悬浮这个概念帮助我们反思今天的生活状态，也去考虑我们下一步应该怎么走。","source":"_posts/悬浮时代 项飙.md","raw":"---\ntitle: 悬浮时代 项飙\n---\n\n 大家好，欢迎收听 Matters 流动课，这是项飙老师和大家分享的最后一课了。过去几节课，我们聊过留学、世界公民、移民、中介、跨国、全球流动，看上去这几个词背后都是飞速流转的漩涡，仿佛每个人都马不停蹄，从一个点奔向另一个点，奔跑的过程中也带着对生活的期待和不安。伴随着高度流动的是普遍存在一种悬浮状态，不只是中国社会如此，全球都有相似的现象。接下来，项飙老师会详细解释悬浮这个词，也希望大家能够静下心来想一想，我们是不是正在悬浮的状态中，有没有勇气，摆脱悬浮，脚踏实地活在当下，活出自己呢？\n\n我有一句话叫**焦虑面前人人平等**。\n\n所以在中国，我们知道从政治经济学的意义上，如果你要拿这个关于收入或者是财产的统计来看，中国显然是一个在大分化的社会，用社会学家的话讲，阶层分化固定化的一个社会。但是非常有意思的是，**各个阶层的心态，他的心智结构，他的认知，他的娱乐方式，他用的话语，有的时候是高度一致的。**\n\n所以这个是一个很吊诡的现象：就是高度分化的客观生活状态和高度一致主观意识是并存的，那么这个高度一致的主观感知里面的一个重要的原因，就是咱们刚才提到这焦虑的问题，特别焦虑是成为一种不断的焦虑，就他**不是一个可以解决的焦虑**，为什么是这样？\n\n因为像早发早移的这批群体，前面提到，移民作为一个目标，他是要去**逃离现在不满意的东西**，但是他要蹦向哪一个？什么东西是他满意的东西，他并不清楚的，他只知道他要摆脱现在，**他要奔向哪里？不知道**。所以在这个情况下，如果你永远是**在一种否定的状况下去定义自己的行为的意义，那这个必然会永远在一个焦虑的过程当中**。就说你早发，辛勤的工作是为了发，发了是为了离开，为了移。所以这一切的逻辑链条多是否定性的。\n\n这个状态我把它叫做**悬浮**，它是在中国今天的社会一个非常普遍的心态。\n\n那么悬浮这个概念，我最早意识到是在 1994 年我在珠江三角洲做农民工调查的时候。我发现一个现象，就是农民工很少在一个工厂打工超过一年的。所以近些年有人提说，农民工打工短工化的现象，其实这个一直存在，至少从 90 年代初就存在。然后我问那些农民工，他们也就是 20 来岁左右，你为什么不在一个工厂工作的时间长一点？其实农民工他这样不断的跳，他在经济上损失是蛮大的，因为工厂会克扣他的工资，如果你很早离开的话，有些工厂也会给你这个叫做就是长期服务奖，如果你要超过一年的话，你会得到额外的奖励。那他为什么会这样不断的跳槽？\n\n原因让我非常惊讶，原因非常简单，有的时候是说他跟他那个工头就是他那个车间的管理者有矛盾，有的时候是因为他和他同宿舍的工友吵架了，有的时候就是因为他感到单调孤燥，因为每天就干一样的活，所以他就想**用跳槽这个方式来解决**。所以我们看到的是这些农民工永远不仅在流动，而且是超速的高度的流动，所以是充满了能量，然后用流动来解决这个当时面临的一个问题。但是我们知道他这样的不断的流动，显然是不能够解决这些问题本身的，所以他流来流去，这些问题永远存在。\n\n然后你问他为什么不坐下来想一想，怎么样去解决宿舍内部的工人之间的关系，为什么不跟其他的工友商量一下，怎么样跟经理或者厂长更好地沟通？咱们不谈说要成立工会那个层次上更加正式性的行动。我然后问农民工，他就觉得那个可能会是浪费时间，与其花那个时间和精力去面对当时的问题，**还不如赶快跳槽，尽量多尽量快的攒钱**。**然后攒完钱他就再也不用当农民工了**。\n\n他那时候的想象就是赶快回乡买一个房子，或者买一个车出租出去当出租车，或者是有一个小店铺去卖衣服，或者开理发店等等，这是当时比较普遍的一些计划。**但是我们知道大部分或者说是绝大部分的农民工，这么多年下来，其实一直还在做农民工**，做了 20 年 30 年，一直到他做不下去为止。所以他那种说我赶快与其花时间面对我当时的具体问题，还不如我攒够钱，然后跳出我这个生存状态，那个只是一个，不能说自欺欺人，但就只是一个非常大的一个假设。\n\n刘小东《人鸟》\n\n所以我脑子里当时想到的一个意向就是悬浮，**大家都在高速地流动，非常勤快，非常的辛苦，工作非常努力**。但他工作努力不断高速流动，并不是因为喜欢这个工作，他努力工作，而正是因为他不喜欢甚至痛恨这个工作，他努力地工作，然后以至于他能够赶快的攒到钱，然后哪一天他就再也不用去做这样的工作。所以在这里一个关键的环节，就是说他失去了那份耐心，失去了那份意志来直接面对当时那个很具体的问题。\n\n为什么这个工作他不喜欢？为什么那个工作环境不好？有没有办法在当时的情况下做一点改变？他要做出的选择不是改变，而是赶快的逃离，逃离那个具体的场景，然后想象着哪一天他可以彻底逃离他的那种身份，这种所以悬浮就很本质的一个特征，就是说**对当下的一种悬置**，他不直接面对当下，他总是要想迈向一个未来，然后当下存在的意义，不过是他迈向未来的一个台阶。所以你越快的跨越过这个当下越好。\n\n所以你要停下来说反思当下，**问一些问题就当下本身有什么意义**，我为什么要做这个当下这个都是浪费时间，是让你自己苦恼的事情，所以一个明智的选择是不问！就是只顾我们原来有句话叫做只顾埋头拉车，不顾抬头看路，从来不顾抬头看路，它就是说你这个明智的选择就是不要去抬头看路，问问题，就是只顾闭上眼睛往前冲。所以它解释了一个我觉得中国社会一个总体的比较有意思，但是也是令人疑惑，也令人担忧的一个现象，**就是我们的经济增长非常快，我们每个人好像是充满了能量，大家工作非常的辛苦，但是我们的社会的变化基本上是非常缓慢甚至停滞的**。\n\n这个听起来有点奇怪，但是我们认真想一下，我们社会生活方式似乎变化很快，社会组织似乎变化很快，是什么推进的？基本上是因为**技术变迁**。\n\n比方说从微博到微信，那这个变化过程其实是很难预测的，是一个比较随机的一个过程，所以我们的社会生活的变化就是越来越被这个外在的物质技术的变化而推动。**而社会本身不再成为一个变化我们生活方式，变化我们思想意识的一个推动力。**\n\n所以这个悬浮状态希望是**解释为什么一方面每个人会有那么强大的一个经济能动力，但另外一方面放在一起，在集体上，我们对自己的生活方式、生产方式、公共组织方式，基本上很少有反思**。很少有坐下来说，今天我们为什么社区的这个基本的垃圾处理方式不可以改一改，或者说这个小学的教育方式难道不可以改一改吗？\n\n哪怕是很小的身边的事情，我们很多人都成天就是抱怨觉得不合理，但是觉得要停下来做过多的反思，这个事就是浪费时间，所以最重要的就是赶快在既定的这个条件下积累最多的资源，然后往前冲，这个就是我所说的这个悬浮状态。那么当然这个早发早移是一个比较典型的，就可以说是一个在物理上给我们具体化了的悬浮的一个状态，就是他要逃离，但是不知道去哪里。**然后去了之后他还是悬在空中，这个在社会意义上落在这个迁入地，也不是在他的这个生命意义上嵌入到他的流出地。**\n\n这个悬浮状态，我觉得他是**具有全球性**，特别在城市里的**中产**这一层，现在在发达国家，在其他的转型国家比方说是拉美，然后在甚至在一些不发达国家，这可能都是比较普遍存在的一个现象。\n\n**但有中国特色的一个点是什么？**\n\n就是中国的**比较低收入阶层**，也面临着这样的**高度悬浮**的一个心态。\n\n这个是要回到我们中国改革开放的特殊的历程。中国的改革开放的起点，我们不能忘记它是国家主导下的社会主义经济。国家主导下的社会经济，意味着每个人所占有的资源基本上是比较平等的，同时也意味着每个人在思想意识上有很强烈的平等主义诉求。每个人觉得他应该跟别人一样，然后在这个时候开始了以市场经济为导向的经济改革。然后到了 1992 年之后，私有化的进程更加深入了。这意味着什么呢？意味着把 10 亿人民大家都拥有，比较相似的，差不多资源的人，同时推到了一个巨大的市场竞争里面。这么多人同时要捞到第一桶金，要同时完成他的原始积累，所有的人都害怕会被挤，就会被落在后头，所有人都想比别人快一步或者半步。在这个情况下，你停下来问，确实是有点傻，所以大家都要一起往前冲。这个也当然是解释了为什么中国的经济增长有这样奇迹般的快。你想一想，10 亿人民一条心都往前冲。\n\n所以这个悬浮状态里面，也让我们反思，就是这个一个平等和不平等之间的辩证关系，就是我们的起点的这个平等主义，其实是对中国的经济增长非常重要的贡献。但是这种平等的起点，当它突然转化为一个市场经济之后，特别是在市场经济没有相应的社会福利、社会保护、社会保障作为依托，所以大家都觉得他必须要通过市场上竞争才能获得基本的资源，才能够保证他有一个体面的生活的时候。那么这**种原来的那个平等也会造成巨大的精神压力和焦虑**。\n\n所以今后我觉得从个体上讲，可以想象**是不是可以慢下来，可以多想一想当下**。\n\n想想你今天做的事情本身有什么意义？**不要想说我今天做的事情对我明天做别的事情有什么意义**。因为你可能永远达不到明天，那个你想做的别的事情，你如果不从此刻开始的话，**你可能永远达不到彼岸。**\n\n所以那个彼岸其实只是你说给自己听的一个**谎言**，然后劝说自己能够咬牙把今天不喜欢做的事情做下去。然后从更宏观的制度设计上看，一个更加安全的有保障的体制、一个社会环境可能也是非常重要的，使大家能够慢下来，能够更加从容地体会这个生活。\n\n所以这个从微观和宏观两个层面，可能悬浮这个概念帮助我们反思今天的生活状态，也去考虑我们下一步应该怎么走。","slug":"悬浮时代 项飙","published":1,"date":"2022-04-11T13:27:51.598Z","updated":"2022-04-12T09:54:36.375Z","_id":"cl1vyonvl0002k60mfrkpe17m","comments":1,"layout":"post","photos":[],"link":"","content":"<p> 大家好，欢迎收听 Matters 流动课，这是项飙老师和大家分享的最后一课了。过去几节课，我们聊过留学、世界公民、移民、中介、跨国、全球流动，看上去这几个词背后都是飞速流转的漩涡，仿佛每个人都马不停蹄，从一个点奔向另一个点，奔跑的过程中也带着对生活的期待和不安。伴随着高度流动的是普遍存在一种悬浮状态，不只是中国社会如此，全球都有相似的现象。接下来，项飙老师会详细解释悬浮这个词，也希望大家能够静下心来想一想，我们是不是正在悬浮的状态中，有没有勇气，摆脱悬浮，脚踏实地活在当下，活出自己呢？</p>\n<p>我有一句话叫<strong>焦虑面前人人平等</strong>。</p>\n<p>所以在中国，我们知道从政治经济学的意义上，如果你要拿这个关于收入或者是财产的统计来看，中国显然是一个在大分化的社会，用社会学家的话讲，阶层分化固定化的一个社会。但是非常有意思的是，<strong>各个阶层的心态，他的心智结构，他的认知，他的娱乐方式，他用的话语，有的时候是高度一致的。</strong></p>\n<p>所以这个是一个很吊诡的现象：就是高度分化的客观生活状态和高度一致主观意识是并存的，那么这个高度一致的主观感知里面的一个重要的原因，就是咱们刚才提到这焦虑的问题，特别焦虑是成为一种不断的焦虑，就他<strong>不是一个可以解决的焦虑</strong>，为什么是这样？</p>\n<p>因为像早发早移的这批群体，前面提到，移民作为一个目标，他是要去<strong>逃离现在不满意的东西</strong>，但是他要蹦向哪一个？什么东西是他满意的东西，他并不清楚的，他只知道他要摆脱现在，<strong>他要奔向哪里？不知道</strong>。所以在这个情况下，如果你永远是<strong>在一种否定的状况下去定义自己的行为的意义，那这个必然会永远在一个焦虑的过程当中</strong>。就说你早发，辛勤的工作是为了发，发了是为了离开，为了移。所以这一切的逻辑链条多是否定性的。</p>\n<p>这个状态我把它叫做<strong>悬浮</strong>，它是在中国今天的社会一个非常普遍的心态。</p>\n<p>那么悬浮这个概念，我最早意识到是在 1994 年我在珠江三角洲做农民工调查的时候。我发现一个现象，就是农民工很少在一个工厂打工超过一年的。所以近些年有人提说，农民工打工短工化的现象，其实这个一直存在，至少从 90 年代初就存在。然后我问那些农民工，他们也就是 20 来岁左右，你为什么不在一个工厂工作的时间长一点？其实农民工他这样不断的跳，他在经济上损失是蛮大的，因为工厂会克扣他的工资，如果你很早离开的话，有些工厂也会给你这个叫做就是长期服务奖，如果你要超过一年的话，你会得到额外的奖励。那他为什么会这样不断的跳槽？</p>\n<p>原因让我非常惊讶，原因非常简单，有的时候是说他跟他那个工头就是他那个车间的管理者有矛盾，有的时候是因为他和他同宿舍的工友吵架了，有的时候就是因为他感到单调孤燥，因为每天就干一样的活，所以他就想<strong>用跳槽这个方式来解决</strong>。所以我们看到的是这些农民工永远不仅在流动，而且是超速的高度的流动，所以是充满了能量，然后用流动来解决这个当时面临的一个问题。但是我们知道他这样的不断的流动，显然是不能够解决这些问题本身的，所以他流来流去，这些问题永远存在。</p>\n<p>然后你问他为什么不坐下来想一想，怎么样去解决宿舍内部的工人之间的关系，为什么不跟其他的工友商量一下，怎么样跟经理或者厂长更好地沟通？咱们不谈说要成立工会那个层次上更加正式性的行动。我然后问农民工，他就觉得那个可能会是浪费时间，与其花那个时间和精力去面对当时的问题，<strong>还不如赶快跳槽，尽量多尽量快的攒钱</strong>。<strong>然后攒完钱他就再也不用当农民工了</strong>。</p>\n<p>他那时候的想象就是赶快回乡买一个房子，或者买一个车出租出去当出租车，或者是有一个小店铺去卖衣服，或者开理发店等等，这是当时比较普遍的一些计划。<strong>但是我们知道大部分或者说是绝大部分的农民工，这么多年下来，其实一直还在做农民工</strong>，做了 20 年 30 年，一直到他做不下去为止。所以他那种说我赶快与其花时间面对我当时的具体问题，还不如我攒够钱，然后跳出我这个生存状态，那个只是一个，不能说自欺欺人，但就只是一个非常大的一个假设。</p>\n<p>刘小东《人鸟》</p>\n<p>所以我脑子里当时想到的一个意向就是悬浮，<strong>大家都在高速地流动，非常勤快，非常的辛苦，工作非常努力</strong>。但他工作努力不断高速流动，并不是因为喜欢这个工作，他努力工作，而正是因为他不喜欢甚至痛恨这个工作，他努力地工作，然后以至于他能够赶快的攒到钱，然后哪一天他就再也不用去做这样的工作。所以在这里一个关键的环节，就是说他失去了那份耐心，失去了那份意志来直接面对当时那个很具体的问题。</p>\n<p>为什么这个工作他不喜欢？为什么那个工作环境不好？有没有办法在当时的情况下做一点改变？他要做出的选择不是改变，而是赶快的逃离，逃离那个具体的场景，然后想象着哪一天他可以彻底逃离他的那种身份，这种所以悬浮就很本质的一个特征，就是说<strong>对当下的一种悬置</strong>，他不直接面对当下，他总是要想迈向一个未来，然后当下存在的意义，不过是他迈向未来的一个台阶。所以你越快的跨越过这个当下越好。</p>\n<p>所以你要停下来说反思当下，<strong>问一些问题就当下本身有什么意义</strong>，我为什么要做这个当下这个都是浪费时间，是让你自己苦恼的事情，所以一个明智的选择是不问！就是只顾我们原来有句话叫做只顾埋头拉车，不顾抬头看路，从来不顾抬头看路，它就是说你这个明智的选择就是不要去抬头看路，问问题，就是只顾闭上眼睛往前冲。所以它解释了一个我觉得中国社会一个总体的比较有意思，但是也是令人疑惑，也令人担忧的一个现象，<strong>就是我们的经济增长非常快，我们每个人好像是充满了能量，大家工作非常的辛苦，但是我们的社会的变化基本上是非常缓慢甚至停滞的</strong>。</p>\n<p>这个听起来有点奇怪，但是我们认真想一下，我们社会生活方式似乎变化很快，社会组织似乎变化很快，是什么推进的？基本上是因为<strong>技术变迁</strong>。</p>\n<p>比方说从微博到微信，那这个变化过程其实是很难预测的，是一个比较随机的一个过程，所以我们的社会生活的变化就是越来越被这个外在的物质技术的变化而推动。<strong>而社会本身不再成为一个变化我们生活方式，变化我们思想意识的一个推动力。</strong></p>\n<p>所以这个悬浮状态希望是<strong>解释为什么一方面每个人会有那么强大的一个经济能动力，但另外一方面放在一起，在集体上，我们对自己的生活方式、生产方式、公共组织方式，基本上很少有反思</strong>。很少有坐下来说，今天我们为什么社区的这个基本的垃圾处理方式不可以改一改，或者说这个小学的教育方式难道不可以改一改吗？</p>\n<p>哪怕是很小的身边的事情，我们很多人都成天就是抱怨觉得不合理，但是觉得要停下来做过多的反思，这个事就是浪费时间，所以最重要的就是赶快在既定的这个条件下积累最多的资源，然后往前冲，这个就是我所说的这个悬浮状态。那么当然这个早发早移是一个比较典型的，就可以说是一个在物理上给我们具体化了的悬浮的一个状态，就是他要逃离，但是不知道去哪里。<strong>然后去了之后他还是悬在空中，这个在社会意义上落在这个迁入地，也不是在他的这个生命意义上嵌入到他的流出地。</strong></p>\n<p>这个悬浮状态，我觉得他是<strong>具有全球性</strong>，特别在城市里的<strong>中产</strong>这一层，现在在发达国家，在其他的转型国家比方说是拉美，然后在甚至在一些不发达国家，这可能都是比较普遍存在的一个现象。</p>\n<p><strong>但有中国特色的一个点是什么？</strong></p>\n<p>就是中国的<strong>比较低收入阶层</strong>，也面临着这样的<strong>高度悬浮</strong>的一个心态。</p>\n<p>这个是要回到我们中国改革开放的特殊的历程。中国的改革开放的起点，我们不能忘记它是国家主导下的社会主义经济。国家主导下的社会经济，意味着每个人所占有的资源基本上是比较平等的，同时也意味着每个人在思想意识上有很强烈的平等主义诉求。每个人觉得他应该跟别人一样，然后在这个时候开始了以市场经济为导向的经济改革。然后到了 1992 年之后，私有化的进程更加深入了。这意味着什么呢？意味着把 10 亿人民大家都拥有，比较相似的，差不多资源的人，同时推到了一个巨大的市场竞争里面。这么多人同时要捞到第一桶金，要同时完成他的原始积累，所有的人都害怕会被挤，就会被落在后头，所有人都想比别人快一步或者半步。在这个情况下，你停下来问，确实是有点傻，所以大家都要一起往前冲。这个也当然是解释了为什么中国的经济增长有这样奇迹般的快。你想一想，10 亿人民一条心都往前冲。</p>\n<p>所以这个悬浮状态里面，也让我们反思，就是这个一个平等和不平等之间的辩证关系，就是我们的起点的这个平等主义，其实是对中国的经济增长非常重要的贡献。但是这种平等的起点，当它突然转化为一个市场经济之后，特别是在市场经济没有相应的社会福利、社会保护、社会保障作为依托，所以大家都觉得他必须要通过市场上竞争才能获得基本的资源，才能够保证他有一个体面的生活的时候。那么这<strong>种原来的那个平等也会造成巨大的精神压力和焦虑</strong>。</p>\n<p>所以今后我觉得从个体上讲，可以想象<strong>是不是可以慢下来，可以多想一想当下</strong>。</p>\n<p>想想你今天做的事情本身有什么意义？<strong>不要想说我今天做的事情对我明天做别的事情有什么意义</strong>。因为你可能永远达不到明天，那个你想做的别的事情，你如果不从此刻开始的话，<strong>你可能永远达不到彼岸。</strong></p>\n<p>所以那个彼岸其实只是你说给自己听的一个<strong>谎言</strong>，然后劝说自己能够咬牙把今天不喜欢做的事情做下去。然后从更宏观的制度设计上看，一个更加安全的有保障的体制、一个社会环境可能也是非常重要的，使大家能够慢下来，能够更加从容地体会这个生活。</p>\n<p>所以这个从微观和宏观两个层面，可能悬浮这个概念帮助我们反思今天的生活状态，也去考虑我们下一步应该怎么走。</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 大家好，欢迎收听 Matters 流动课，这是项飙老师和大家分享的最后一课了。过去几节课，我们聊过留学、世界公民、移民、中介、跨国、全球流动，看上去这几个词背后都是飞速流转的漩涡，仿佛每个人都马不停蹄，从一个点奔向另一个点，奔跑的过程中也带着对生活的期待和不安。伴随着高度流动的是普遍存在一种悬浮状态，不只是中国社会如此，全球都有相似的现象。接下来，项飙老师会详细解释悬浮这个词，也希望大家能够静下心来想一想，我们是不是正在悬浮的状态中，有没有勇气，摆脱悬浮，脚踏实地活在当下，活出自己呢？</p>\n<p>我有一句话叫<strong>焦虑面前人人平等</strong>。</p>\n<p>所以在中国，我们知道从政治经济学的意义上，如果你要拿这个关于收入或者是财产的统计来看，中国显然是一个在大分化的社会，用社会学家的话讲，阶层分化固定化的一个社会。但是非常有意思的是，<strong>各个阶层的心态，他的心智结构，他的认知，他的娱乐方式，他用的话语，有的时候是高度一致的。</strong></p>\n<p>所以这个是一个很吊诡的现象：就是高度分化的客观生活状态和高度一致主观意识是并存的，那么这个高度一致的主观感知里面的一个重要的原因，就是咱们刚才提到这焦虑的问题，特别焦虑是成为一种不断的焦虑，就他<strong>不是一个可以解决的焦虑</strong>，为什么是这样？</p>\n<p>因为像早发早移的这批群体，前面提到，移民作为一个目标，他是要去<strong>逃离现在不满意的东西</strong>，但是他要蹦向哪一个？什么东西是他满意的东西，他并不清楚的，他只知道他要摆脱现在，<strong>他要奔向哪里？不知道</strong>。所以在这个情况下，如果你永远是<strong>在一种否定的状况下去定义自己的行为的意义，那这个必然会永远在一个焦虑的过程当中</strong>。就说你早发，辛勤的工作是为了发，发了是为了离开，为了移。所以这一切的逻辑链条多是否定性的。</p>\n<p>这个状态我把它叫做<strong>悬浮</strong>，它是在中国今天的社会一个非常普遍的心态。</p>\n<p>那么悬浮这个概念，我最早意识到是在 1994 年我在珠江三角洲做农民工调查的时候。我发现一个现象，就是农民工很少在一个工厂打工超过一年的。所以近些年有人提说，农民工打工短工化的现象，其实这个一直存在，至少从 90 年代初就存在。然后我问那些农民工，他们也就是 20 来岁左右，你为什么不在一个工厂工作的时间长一点？其实农民工他这样不断的跳，他在经济上损失是蛮大的，因为工厂会克扣他的工资，如果你很早离开的话，有些工厂也会给你这个叫做就是长期服务奖，如果你要超过一年的话，你会得到额外的奖励。那他为什么会这样不断的跳槽？</p>\n<p>原因让我非常惊讶，原因非常简单，有的时候是说他跟他那个工头就是他那个车间的管理者有矛盾，有的时候是因为他和他同宿舍的工友吵架了，有的时候就是因为他感到单调孤燥，因为每天就干一样的活，所以他就想<strong>用跳槽这个方式来解决</strong>。所以我们看到的是这些农民工永远不仅在流动，而且是超速的高度的流动，所以是充满了能量，然后用流动来解决这个当时面临的一个问题。但是我们知道他这样的不断的流动，显然是不能够解决这些问题本身的，所以他流来流去，这些问题永远存在。</p>\n<p>然后你问他为什么不坐下来想一想，怎么样去解决宿舍内部的工人之间的关系，为什么不跟其他的工友商量一下，怎么样跟经理或者厂长更好地沟通？咱们不谈说要成立工会那个层次上更加正式性的行动。我然后问农民工，他就觉得那个可能会是浪费时间，与其花那个时间和精力去面对当时的问题，<strong>还不如赶快跳槽，尽量多尽量快的攒钱</strong>。<strong>然后攒完钱他就再也不用当农民工了</strong>。</p>\n<p>他那时候的想象就是赶快回乡买一个房子，或者买一个车出租出去当出租车，或者是有一个小店铺去卖衣服，或者开理发店等等，这是当时比较普遍的一些计划。<strong>但是我们知道大部分或者说是绝大部分的农民工，这么多年下来，其实一直还在做农民工</strong>，做了 20 年 30 年，一直到他做不下去为止。所以他那种说我赶快与其花时间面对我当时的具体问题，还不如我攒够钱，然后跳出我这个生存状态，那个只是一个，不能说自欺欺人，但就只是一个非常大的一个假设。</p>\n<p>刘小东《人鸟》</p>\n<p>所以我脑子里当时想到的一个意向就是悬浮，<strong>大家都在高速地流动，非常勤快，非常的辛苦，工作非常努力</strong>。但他工作努力不断高速流动，并不是因为喜欢这个工作，他努力工作，而正是因为他不喜欢甚至痛恨这个工作，他努力地工作，然后以至于他能够赶快的攒到钱，然后哪一天他就再也不用去做这样的工作。所以在这里一个关键的环节，就是说他失去了那份耐心，失去了那份意志来直接面对当时那个很具体的问题。</p>\n<p>为什么这个工作他不喜欢？为什么那个工作环境不好？有没有办法在当时的情况下做一点改变？他要做出的选择不是改变，而是赶快的逃离，逃离那个具体的场景，然后想象着哪一天他可以彻底逃离他的那种身份，这种所以悬浮就很本质的一个特征，就是说<strong>对当下的一种悬置</strong>，他不直接面对当下，他总是要想迈向一个未来，然后当下存在的意义，不过是他迈向未来的一个台阶。所以你越快的跨越过这个当下越好。</p>\n<p>所以你要停下来说反思当下，<strong>问一些问题就当下本身有什么意义</strong>，我为什么要做这个当下这个都是浪费时间，是让你自己苦恼的事情，所以一个明智的选择是不问！就是只顾我们原来有句话叫做只顾埋头拉车，不顾抬头看路，从来不顾抬头看路，它就是说你这个明智的选择就是不要去抬头看路，问问题，就是只顾闭上眼睛往前冲。所以它解释了一个我觉得中国社会一个总体的比较有意思，但是也是令人疑惑，也令人担忧的一个现象，<strong>就是我们的经济增长非常快，我们每个人好像是充满了能量，大家工作非常的辛苦，但是我们的社会的变化基本上是非常缓慢甚至停滞的</strong>。</p>\n<p>这个听起来有点奇怪，但是我们认真想一下，我们社会生活方式似乎变化很快，社会组织似乎变化很快，是什么推进的？基本上是因为<strong>技术变迁</strong>。</p>\n<p>比方说从微博到微信，那这个变化过程其实是很难预测的，是一个比较随机的一个过程，所以我们的社会生活的变化就是越来越被这个外在的物质技术的变化而推动。<strong>而社会本身不再成为一个变化我们生活方式，变化我们思想意识的一个推动力。</strong></p>\n<p>所以这个悬浮状态希望是<strong>解释为什么一方面每个人会有那么强大的一个经济能动力，但另外一方面放在一起，在集体上，我们对自己的生活方式、生产方式、公共组织方式，基本上很少有反思</strong>。很少有坐下来说，今天我们为什么社区的这个基本的垃圾处理方式不可以改一改，或者说这个小学的教育方式难道不可以改一改吗？</p>\n<p>哪怕是很小的身边的事情，我们很多人都成天就是抱怨觉得不合理，但是觉得要停下来做过多的反思，这个事就是浪费时间，所以最重要的就是赶快在既定的这个条件下积累最多的资源，然后往前冲，这个就是我所说的这个悬浮状态。那么当然这个早发早移是一个比较典型的，就可以说是一个在物理上给我们具体化了的悬浮的一个状态，就是他要逃离，但是不知道去哪里。<strong>然后去了之后他还是悬在空中，这个在社会意义上落在这个迁入地，也不是在他的这个生命意义上嵌入到他的流出地。</strong></p>\n<p>这个悬浮状态，我觉得他是<strong>具有全球性</strong>，特别在城市里的<strong>中产</strong>这一层，现在在发达国家，在其他的转型国家比方说是拉美，然后在甚至在一些不发达国家，这可能都是比较普遍存在的一个现象。</p>\n<p><strong>但有中国特色的一个点是什么？</strong></p>\n<p>就是中国的<strong>比较低收入阶层</strong>，也面临着这样的<strong>高度悬浮</strong>的一个心态。</p>\n<p>这个是要回到我们中国改革开放的特殊的历程。中国的改革开放的起点，我们不能忘记它是国家主导下的社会主义经济。国家主导下的社会经济，意味着每个人所占有的资源基本上是比较平等的，同时也意味着每个人在思想意识上有很强烈的平等主义诉求。每个人觉得他应该跟别人一样，然后在这个时候开始了以市场经济为导向的经济改革。然后到了 1992 年之后，私有化的进程更加深入了。这意味着什么呢？意味着把 10 亿人民大家都拥有，比较相似的，差不多资源的人，同时推到了一个巨大的市场竞争里面。这么多人同时要捞到第一桶金，要同时完成他的原始积累，所有的人都害怕会被挤，就会被落在后头，所有人都想比别人快一步或者半步。在这个情况下，你停下来问，确实是有点傻，所以大家都要一起往前冲。这个也当然是解释了为什么中国的经济增长有这样奇迹般的快。你想一想，10 亿人民一条心都往前冲。</p>\n<p>所以这个悬浮状态里面，也让我们反思，就是这个一个平等和不平等之间的辩证关系，就是我们的起点的这个平等主义，其实是对中国的经济增长非常重要的贡献。但是这种平等的起点，当它突然转化为一个市场经济之后，特别是在市场经济没有相应的社会福利、社会保护、社会保障作为依托，所以大家都觉得他必须要通过市场上竞争才能获得基本的资源，才能够保证他有一个体面的生活的时候。那么这<strong>种原来的那个平等也会造成巨大的精神压力和焦虑</strong>。</p>\n<p>所以今后我觉得从个体上讲，可以想象<strong>是不是可以慢下来，可以多想一想当下</strong>。</p>\n<p>想想你今天做的事情本身有什么意义？<strong>不要想说我今天做的事情对我明天做别的事情有什么意义</strong>。因为你可能永远达不到明天，那个你想做的别的事情，你如果不从此刻开始的话，<strong>你可能永远达不到彼岸。</strong></p>\n<p>所以那个彼岸其实只是你说给自己听的一个<strong>谎言</strong>，然后劝说自己能够咬牙把今天不喜欢做的事情做下去。然后从更宏观的制度设计上看，一个更加安全的有保障的体制、一个社会环境可能也是非常重要的，使大家能够慢下来，能够更加从容地体会这个生活。</p>\n<p>所以这个从微观和宏观两个层面，可能悬浮这个概念帮助我们反思今天的生活状态，也去考虑我们下一步应该怎么走。</p>\n"},{"title":"游戏中的自由","_content":"\n\n大家好，欢迎收听 Matters 游戏课，我是刘梦霏。今天我们来谈一谈**游戏中的自由**。\n\n我们在前几课里也反复提到过，游戏是建立在玩家主体性之上的一种互动媒介，它的一切走向和流程，都得依靠玩家的主动行为去推进。所以**游戏的精神就是自由**，它和我们在现实世界中最本质的自由是一脉相承的。\n\n但是最近几年出现了这样一种现象，就是有些游戏越来越喜欢「勒索」玩家了，以至于玩家的大部分游戏体验其实就是氪金而已，也就是用现实世界中的真金白银去换取虚拟世界里的一些权利。但我也发现很多玩家是享受这种模式的，好像完全不介意被这样的游戏压榨，也就是说，他们其实是「**自由地选择了一种『被奴役』的状态**」。\n\n所以接下来就先来分析一下，这种奇怪的现象是怎么在国产游戏的领域大行其道的。然后我们再在这个基础上讨论：**玩家在游戏中到底有没有真正的自由，「自由」是不是一种幻觉。**\n\n这个现象产生的根源，是游戏付费模式的变更。传统的模式是，你先付钱把这个游戏买回来，然后你就可以无限次享受它。但是就在过去的五六年间，大部分游戏都变成免费下载了，你是在中途玩到什么特定的地方，想要更好的游戏体验，才需要花钱，俗称氪金。\n\n我们作为普通用户对这种模式已经习以为常，但是我们可能没想到，这带来的是我们在游戏之中自由和平等状态的变化，也造成了游戏本质的变化。简单来说，**在传统的付费模式里面，游戏是商品，而变成免费下载之后，作为玩家的你才是那个商品**。\n\n我们都知道，游戏的开发是要成本的，当你免费下载一个游戏的时候，开发者的成本要靠什么来填呢？ 一般来说有两种渠道，一种是广告，另一种就是在国产手游里面更常见的，玩着玩着就会出现的「氪金时刻」。比如说你在游戏里面的体力值用完了，你要花钱充一下，才能继续往下玩。要不然就是这两年很流行的抽卡游戏，你为了要更好的装备或者是别的什么，你就要花钱去买这个卡，然后这个卡呢还是有几率掉落的，不一定百分百就能给你。那你为了要这个装备就会买更多的卡、花更多的钱。\n\n在传统的模式里面，你把钱交了，开发者得到了他的报酬、你得到了你的游戏，这个服务和劳动关系就终结了。但在这个新的模式下，没有这样一个「终结」的点了，所以就变成开发者必须想尽办法地给你设置一些坑，为了赚你的钱，吊着你、绑着你。\n\n所以这种模式的变更很明显就会影响到游戏开发者的追求。传统的追求是，「我想做一个好游戏」，不管它是让你爽，还是让你快乐，让你感动，让你有一些深层的反思和讨论，都是可能的。但是在现在这一类免费下载的游戏里，核心目标只剩下赚钱了，游戏就变成了一种诱饵，这就限制了游戏去表达更多更深刻的内容。\n\n那这个模式明显是不怎么健康的。但是我们会发现，这个模式，在中国非常成功。\n\n为什么这些不太健康的游戏能在中国活得那么好呢？\n\n这就涉及到我想跟大家分享的一个之前调研的成果。这是清华和宝马合作的一个游戏项目，当时对方希望我们回答的问题，在中国的游戏是因为什么原因才流行。当时我们提炼出来的最后结论，就是，**能在中国流行起来的游戏，一定是强社交中的强竞技**。不是说大家在一块儿共同「完成」一个什么，而是我们要在里面「与天斗，与地斗，与人斗，其乐无穷」。这就可以直接解释王者荣耀、吃鸡等等这些 moba 类手游在国内的风靡，MOBA 的意思就是「多人在线战术竞技」。大家应该记得，在这些手游出现之前，上一波火的是三国杀和狼人杀，他们也都是强社交强竞技的游戏。\n\n我们知道，有不少优秀的单机游戏独立游戏是能提供很棒的个人深度体验的，但他们没有办法吻合「强社交中的强竞技」这两个关键点，于是就很难流行起来，很难获得一种商业上的成功。\n\n但相反，只要抓住了这两个命门的游戏，一般都可以在国内活得很好，就算它不太健康也没关系，在市场上是站得住脚的。比如我们刚刚说到的那种「抽卡」游戏，它很容易就可以跟「强社交强竞技」的元素结合起来，让玩家去攀比谁抽到的卡更好，在这个过程中就可以不断压榨玩家的时间和金钱，所以玩家的状态其实是很不自由的。\n\n那么这就回到了我们这节课的核心命题，什么叫游戏里的自由，玩家有没有真正的自由。\n\n我们说，在一个好的游戏里，你永远都可以选择要不要遵守规则，也可以选择要不要在现有的规则之上叠加你自定义的规则，这就是一种「自由」的体验。\n\n但归根到底，作为玩家来说，你是在一套别人设计的规则里行动，也就是说其实本质上是不自由的。那难道，**我们在游戏中感受到的只是一种「自由的幻觉」吗**？\n\n这个问题要分成两个层面说。\n\n第一个层面是，你在游戏中体验到的自由，跟你在现实中体验到的自由，有什么区别。\n\n大家一般会觉得，游戏就是在一个「虚拟世界」里进行的事情，所以跟「现实世界」相对。那么，现实世界的东西都是真的、虚拟世界的东西就都是假的。但这个分法其实有点问题。因为很多精神实体和概念实体是同时存在于虚实之间的。比如说「友谊」这种概念，你打网游认识的素未谋面的朋友，难道说就不是朋友了吗？这些属于精神空间的体验，就算它不是来源于现实世界，它也是真实存在的。\n\n而且，换一个角度想，**现实世界就是你所能体验到的最大型的游戏**，因为你同样是**在限定规则内追求自由**，比方说你抢银行会被抓，跳楼会摔死，那这些都是限定规则的体现。所以，我们在游戏里遇到的自由的幻觉，同样也是我们在现实中的自由的幻觉。\n\n那这就说到第二个层面了，既然无论游戏还是现实，我们都「无往不在枷锁之中」，我们为什么还会觉得自己「生而自由」的呢？这其实可以从游戏来举例，反推现实。\n\n**自由的幻觉，其实来源于一个叫「主体性」的东西**。我们之前也提到过，游戏是完全依赖于玩家的主动行为推动的，不像小说啊电影啊，有你没你都一样。一个设计师能让你在游戏里面建立起主体性，基本上可以分为三步走：\n\n第一步，就是你一进去往往可以挑一个角色，条件允许的话，还可以给它起名字，给它捏脸，选一选穿着打扮。这一步就是要让你选中一个可以认同、可以移情的对象。只有你看中了他，觉得这是你在另一个世界里的自我的延伸，你才会愿意在游戏里面多付出时间和精力来让他体验在那个世界的一切。\n\n第二步，就是一个类似于操作指南的环节。你可以学习操纵你的角色，大体上了解这个角色能做些什么，能不能跑、能不能跳、能不能射击之类的。然后也会慢慢掌握一些关于这个游戏世界的背景知识，试图理清你的角色在游戏世界中的位置，也可能会去跟其他角色产生互动，建立一些社交关系。这个第二步完成之后，你和你的角色基本上都掌握了在新世界里冒险和战斗的技能了。\n\n第三步，就是游戏设计师会给你一些机会，让你主动去完成一些东西。而随着你跟你的角色在规则和世界观方面的同调，你越了解他的历史、越掌握他的行动方式，你就越觉得那个角色是你，就越会相信你可以在这个世界的规则之内有能力做出一些什么。\n\n简单来说，这个建立主体性的三步就是：**选择自己的角色、认识自己的角色、通过这个角色来施展自己的意志和抱负**。走完这三步，你往往就会深化自己对角色的了解，也许你会更加坚定自己对它的选择、利用它做更多的事情，或者也可以换一个角色、开始新的身份新的冒险。\n\n这个思路在现实世界里也是一样的，而且在这个过程中，你会觉得自己是自由的。\n\n而游戏设计师要完成的工作，就是让你在这种「觉得」自己很自由的状态下，乖乖地服从于规则。\n\n这里可以举一个例子，一个非常经典也非常流行的游戏，GTA，中文叫做《侠盗飞车》。它的分类是「开放世界动作冒险游戏」，所以它的自由度非常高，你可以完全无视它的主线剧情，去抢车撞人、跟警车展开追击大战，然后一直听着收音机里面的音乐漫游。但如果你一直这样不激发主线剧情，你就会慢慢发现：它的游戏性变得有点可疑，你会觉得它没那么好玩了，它不再是一个可以带来惊喜的的这个设计良好的系统了。但它其实原本是一个能不断带来惊喜的系统，只不过你自由地选择了不去激发它。\n\n所以我们也看到，有一部分玩家是「自由地选择了限制自己的自由」：我放弃我开着车漫游的美好旅程，选择去完成剧情，去前往系统要求我前往的那个地方。某种意义上，确实是我的自由受到限制了，但这是我愿意去做的，那这个选择同样也是我本身主体性和自由的体现。\n\n实际上，在一个完善的游戏系统里面，你的每一个选择都会收到反馈，它可以来自世界观或者人物角色，比如你在 GTA 里开车撞了人会有警车追，或者在上古卷轴里面偷了东西被 NPC 看见会报警，这些都属于消极反馈。你会通过这些反馈会越来越多地理解这个游戏世界、理解它的动机、理解它的限制。\n\n而当你选择了乖乖按照剧情发展去走的时候，你往往就会收到一些积极反馈，比如你这个角色可以解锁新地图、新角色、新技能，这样一来你就可以去更多的地方，认识更多的人，做更多你以前做不到的事。\n\n那这样一些反馈会让你觉得：没错，我出让了一点自由，但我还是可以做自己想做的事，甚至交换更多的可能性。从你的体验来说，你不会觉得这是什么损失，甚至是一个可以获得快感的过程。\n\n我们在前几节课也提到过，游戏的本质，就是克服不必要的障碍。所谓不必要的障碍，就是自找的限制、自找的不自由。**但游戏，恰恰就是因为那一点点的不自由，才得以存在，才变得好玩，才会激发我们更多的创造力，也就是我们的主体性和自由**。\n\n而回到这节课最开始讲的那些不健康的游戏，我一般把他们叫三包游戏，包死包抬包埋。在这些游戏里面你可以一键寻路、可以自动打怪、可以跳过所有的剧情，玩家在其中等于就不会有任何艰难险阻和障碍了，但随之死去的就是游戏性和玩家自己的创造力。而且更匪夷所思的是，你绕过这些障碍的方式，是通过在现实世界里付费来完成的。于是有些玩家就选择了「一边让这些游戏杀死自己的创造力，一边还给罪魁祸首送钱」。\n\n这种境况，只能说是「自由地选择了被奴役」。\n\n既然说到了「被奴役」，接下来我就想讲一个极端的例子。\n\n大家可能听过一个叫做《饥饿游戏》的电影。给不熟悉的听众解释一下，这个电影描述的就是一个反乌托邦的极权世界，里面贫富分化非常严重，所有的人被按照工作被放在不同的区域里，然后这个世界没有任何形式的娱乐，唯一的一个娱乐形式就叫做「饥饿游戏」。这个「饥饿游戏」就是每个区域选出一个少年，把他们都放在一个游戏场里面互相屠杀，最后活下来的人可以获得奖励。\n\n这个例子为什么有趣呢？因为当我们讨论游戏中的自由的时候，不可避免地会遇到游戏和极权社会的一个关系。大家如果读过奥威尔《1984》或者赫胥黎的《美丽新世界》的话，你会发现**所有这些极权社会都是反游戏的**。为什么呢？\n\n大家小时候可能都玩过老鹰捉小鸡，这个游戏，不管你是老师还是学生，你进去了以后就只有两种身份，要么老鹰，要么小鸡，你现实中的身份就失效了。要是你被分配到了小鸡，老鹰碰到你，你就在这个游戏里死了，就算你现实中有一百万也没用，在这个游戏里你就是死了。**这样一种「和现实社会身份的不同」，体现的是游戏本身的自由性，也造成了他和极权社会的理想是不相容的**。\n\n老鹰捉小鸡只是一个比喻，大家可能还记得我们之前提到过，我们恒常处在游戏之中。比如艺术，比如法律，都是自游戏发展而来，都是广义的游戏。\n\n我们一直在强调，游戏是基于玩家主体性而存在的。当你进入了游戏，你作为一个个体，是可以去支配、去操控、去施展自己的意志和抱负、去实现自己的创造的。你不是一个大机器里面的小小部分，你是一个凭自己就能够造成影响的主动的独立的存在。所以在这个意义下，所有的极权社会都不能容忍游戏的存在，哪怕有所谓的游戏，它只能以一种集体狂欢的形式做出来，里面的角色都是非常面具化的。在这种游戏里面，是个人服从于角色，而不是角色听命于个人。\n\n所以，为什么说我们要保护自己的游戏的精神，因为他和我们作为每个人最本质的自由是相关的。\n\n而我们能够如何利用这份自由，去创造一个更好的世界呢？咱们下节课接着说。","source":"_posts/游戏中的自由.md","raw":"---\ntitle: 游戏中的自由\n---\n\n\n大家好，欢迎收听 Matters 游戏课，我是刘梦霏。今天我们来谈一谈**游戏中的自由**。\n\n我们在前几课里也反复提到过，游戏是建立在玩家主体性之上的一种互动媒介，它的一切走向和流程，都得依靠玩家的主动行为去推进。所以**游戏的精神就是自由**，它和我们在现实世界中最本质的自由是一脉相承的。\n\n但是最近几年出现了这样一种现象，就是有些游戏越来越喜欢「勒索」玩家了，以至于玩家的大部分游戏体验其实就是氪金而已，也就是用现实世界中的真金白银去换取虚拟世界里的一些权利。但我也发现很多玩家是享受这种模式的，好像完全不介意被这样的游戏压榨，也就是说，他们其实是「**自由地选择了一种『被奴役』的状态**」。\n\n所以接下来就先来分析一下，这种奇怪的现象是怎么在国产游戏的领域大行其道的。然后我们再在这个基础上讨论：**玩家在游戏中到底有没有真正的自由，「自由」是不是一种幻觉。**\n\n这个现象产生的根源，是游戏付费模式的变更。传统的模式是，你先付钱把这个游戏买回来，然后你就可以无限次享受它。但是就在过去的五六年间，大部分游戏都变成免费下载了，你是在中途玩到什么特定的地方，想要更好的游戏体验，才需要花钱，俗称氪金。\n\n我们作为普通用户对这种模式已经习以为常，但是我们可能没想到，这带来的是我们在游戏之中自由和平等状态的变化，也造成了游戏本质的变化。简单来说，**在传统的付费模式里面，游戏是商品，而变成免费下载之后，作为玩家的你才是那个商品**。\n\n我们都知道，游戏的开发是要成本的，当你免费下载一个游戏的时候，开发者的成本要靠什么来填呢？ 一般来说有两种渠道，一种是广告，另一种就是在国产手游里面更常见的，玩着玩着就会出现的「氪金时刻」。比如说你在游戏里面的体力值用完了，你要花钱充一下，才能继续往下玩。要不然就是这两年很流行的抽卡游戏，你为了要更好的装备或者是别的什么，你就要花钱去买这个卡，然后这个卡呢还是有几率掉落的，不一定百分百就能给你。那你为了要这个装备就会买更多的卡、花更多的钱。\n\n在传统的模式里面，你把钱交了，开发者得到了他的报酬、你得到了你的游戏，这个服务和劳动关系就终结了。但在这个新的模式下，没有这样一个「终结」的点了，所以就变成开发者必须想尽办法地给你设置一些坑，为了赚你的钱，吊着你、绑着你。\n\n所以这种模式的变更很明显就会影响到游戏开发者的追求。传统的追求是，「我想做一个好游戏」，不管它是让你爽，还是让你快乐，让你感动，让你有一些深层的反思和讨论，都是可能的。但是在现在这一类免费下载的游戏里，核心目标只剩下赚钱了，游戏就变成了一种诱饵，这就限制了游戏去表达更多更深刻的内容。\n\n那这个模式明显是不怎么健康的。但是我们会发现，这个模式，在中国非常成功。\n\n为什么这些不太健康的游戏能在中国活得那么好呢？\n\n这就涉及到我想跟大家分享的一个之前调研的成果。这是清华和宝马合作的一个游戏项目，当时对方希望我们回答的问题，在中国的游戏是因为什么原因才流行。当时我们提炼出来的最后结论，就是，**能在中国流行起来的游戏，一定是强社交中的强竞技**。不是说大家在一块儿共同「完成」一个什么，而是我们要在里面「与天斗，与地斗，与人斗，其乐无穷」。这就可以直接解释王者荣耀、吃鸡等等这些 moba 类手游在国内的风靡，MOBA 的意思就是「多人在线战术竞技」。大家应该记得，在这些手游出现之前，上一波火的是三国杀和狼人杀，他们也都是强社交强竞技的游戏。\n\n我们知道，有不少优秀的单机游戏独立游戏是能提供很棒的个人深度体验的，但他们没有办法吻合「强社交中的强竞技」这两个关键点，于是就很难流行起来，很难获得一种商业上的成功。\n\n但相反，只要抓住了这两个命门的游戏，一般都可以在国内活得很好，就算它不太健康也没关系，在市场上是站得住脚的。比如我们刚刚说到的那种「抽卡」游戏，它很容易就可以跟「强社交强竞技」的元素结合起来，让玩家去攀比谁抽到的卡更好，在这个过程中就可以不断压榨玩家的时间和金钱，所以玩家的状态其实是很不自由的。\n\n那么这就回到了我们这节课的核心命题，什么叫游戏里的自由，玩家有没有真正的自由。\n\n我们说，在一个好的游戏里，你永远都可以选择要不要遵守规则，也可以选择要不要在现有的规则之上叠加你自定义的规则，这就是一种「自由」的体验。\n\n但归根到底，作为玩家来说，你是在一套别人设计的规则里行动，也就是说其实本质上是不自由的。那难道，**我们在游戏中感受到的只是一种「自由的幻觉」吗**？\n\n这个问题要分成两个层面说。\n\n第一个层面是，你在游戏中体验到的自由，跟你在现实中体验到的自由，有什么区别。\n\n大家一般会觉得，游戏就是在一个「虚拟世界」里进行的事情，所以跟「现实世界」相对。那么，现实世界的东西都是真的、虚拟世界的东西就都是假的。但这个分法其实有点问题。因为很多精神实体和概念实体是同时存在于虚实之间的。比如说「友谊」这种概念，你打网游认识的素未谋面的朋友，难道说就不是朋友了吗？这些属于精神空间的体验，就算它不是来源于现实世界，它也是真实存在的。\n\n而且，换一个角度想，**现实世界就是你所能体验到的最大型的游戏**，因为你同样是**在限定规则内追求自由**，比方说你抢银行会被抓，跳楼会摔死，那这些都是限定规则的体现。所以，我们在游戏里遇到的自由的幻觉，同样也是我们在现实中的自由的幻觉。\n\n那这就说到第二个层面了，既然无论游戏还是现实，我们都「无往不在枷锁之中」，我们为什么还会觉得自己「生而自由」的呢？这其实可以从游戏来举例，反推现实。\n\n**自由的幻觉，其实来源于一个叫「主体性」的东西**。我们之前也提到过，游戏是完全依赖于玩家的主动行为推动的，不像小说啊电影啊，有你没你都一样。一个设计师能让你在游戏里面建立起主体性，基本上可以分为三步走：\n\n第一步，就是你一进去往往可以挑一个角色，条件允许的话，还可以给它起名字，给它捏脸，选一选穿着打扮。这一步就是要让你选中一个可以认同、可以移情的对象。只有你看中了他，觉得这是你在另一个世界里的自我的延伸，你才会愿意在游戏里面多付出时间和精力来让他体验在那个世界的一切。\n\n第二步，就是一个类似于操作指南的环节。你可以学习操纵你的角色，大体上了解这个角色能做些什么，能不能跑、能不能跳、能不能射击之类的。然后也会慢慢掌握一些关于这个游戏世界的背景知识，试图理清你的角色在游戏世界中的位置，也可能会去跟其他角色产生互动，建立一些社交关系。这个第二步完成之后，你和你的角色基本上都掌握了在新世界里冒险和战斗的技能了。\n\n第三步，就是游戏设计师会给你一些机会，让你主动去完成一些东西。而随着你跟你的角色在规则和世界观方面的同调，你越了解他的历史、越掌握他的行动方式，你就越觉得那个角色是你，就越会相信你可以在这个世界的规则之内有能力做出一些什么。\n\n简单来说，这个建立主体性的三步就是：**选择自己的角色、认识自己的角色、通过这个角色来施展自己的意志和抱负**。走完这三步，你往往就会深化自己对角色的了解，也许你会更加坚定自己对它的选择、利用它做更多的事情，或者也可以换一个角色、开始新的身份新的冒险。\n\n这个思路在现实世界里也是一样的，而且在这个过程中，你会觉得自己是自由的。\n\n而游戏设计师要完成的工作，就是让你在这种「觉得」自己很自由的状态下，乖乖地服从于规则。\n\n这里可以举一个例子，一个非常经典也非常流行的游戏，GTA，中文叫做《侠盗飞车》。它的分类是「开放世界动作冒险游戏」，所以它的自由度非常高，你可以完全无视它的主线剧情，去抢车撞人、跟警车展开追击大战，然后一直听着收音机里面的音乐漫游。但如果你一直这样不激发主线剧情，你就会慢慢发现：它的游戏性变得有点可疑，你会觉得它没那么好玩了，它不再是一个可以带来惊喜的的这个设计良好的系统了。但它其实原本是一个能不断带来惊喜的系统，只不过你自由地选择了不去激发它。\n\n所以我们也看到，有一部分玩家是「自由地选择了限制自己的自由」：我放弃我开着车漫游的美好旅程，选择去完成剧情，去前往系统要求我前往的那个地方。某种意义上，确实是我的自由受到限制了，但这是我愿意去做的，那这个选择同样也是我本身主体性和自由的体现。\n\n实际上，在一个完善的游戏系统里面，你的每一个选择都会收到反馈，它可以来自世界观或者人物角色，比如你在 GTA 里开车撞了人会有警车追，或者在上古卷轴里面偷了东西被 NPC 看见会报警，这些都属于消极反馈。你会通过这些反馈会越来越多地理解这个游戏世界、理解它的动机、理解它的限制。\n\n而当你选择了乖乖按照剧情发展去走的时候，你往往就会收到一些积极反馈，比如你这个角色可以解锁新地图、新角色、新技能，这样一来你就可以去更多的地方，认识更多的人，做更多你以前做不到的事。\n\n那这样一些反馈会让你觉得：没错，我出让了一点自由，但我还是可以做自己想做的事，甚至交换更多的可能性。从你的体验来说，你不会觉得这是什么损失，甚至是一个可以获得快感的过程。\n\n我们在前几节课也提到过，游戏的本质，就是克服不必要的障碍。所谓不必要的障碍，就是自找的限制、自找的不自由。**但游戏，恰恰就是因为那一点点的不自由，才得以存在，才变得好玩，才会激发我们更多的创造力，也就是我们的主体性和自由**。\n\n而回到这节课最开始讲的那些不健康的游戏，我一般把他们叫三包游戏，包死包抬包埋。在这些游戏里面你可以一键寻路、可以自动打怪、可以跳过所有的剧情，玩家在其中等于就不会有任何艰难险阻和障碍了，但随之死去的就是游戏性和玩家自己的创造力。而且更匪夷所思的是，你绕过这些障碍的方式，是通过在现实世界里付费来完成的。于是有些玩家就选择了「一边让这些游戏杀死自己的创造力，一边还给罪魁祸首送钱」。\n\n这种境况，只能说是「自由地选择了被奴役」。\n\n既然说到了「被奴役」，接下来我就想讲一个极端的例子。\n\n大家可能听过一个叫做《饥饿游戏》的电影。给不熟悉的听众解释一下，这个电影描述的就是一个反乌托邦的极权世界，里面贫富分化非常严重，所有的人被按照工作被放在不同的区域里，然后这个世界没有任何形式的娱乐，唯一的一个娱乐形式就叫做「饥饿游戏」。这个「饥饿游戏」就是每个区域选出一个少年，把他们都放在一个游戏场里面互相屠杀，最后活下来的人可以获得奖励。\n\n这个例子为什么有趣呢？因为当我们讨论游戏中的自由的时候，不可避免地会遇到游戏和极权社会的一个关系。大家如果读过奥威尔《1984》或者赫胥黎的《美丽新世界》的话，你会发现**所有这些极权社会都是反游戏的**。为什么呢？\n\n大家小时候可能都玩过老鹰捉小鸡，这个游戏，不管你是老师还是学生，你进去了以后就只有两种身份，要么老鹰，要么小鸡，你现实中的身份就失效了。要是你被分配到了小鸡，老鹰碰到你，你就在这个游戏里死了，就算你现实中有一百万也没用，在这个游戏里你就是死了。**这样一种「和现实社会身份的不同」，体现的是游戏本身的自由性，也造成了他和极权社会的理想是不相容的**。\n\n老鹰捉小鸡只是一个比喻，大家可能还记得我们之前提到过，我们恒常处在游戏之中。比如艺术，比如法律，都是自游戏发展而来，都是广义的游戏。\n\n我们一直在强调，游戏是基于玩家主体性而存在的。当你进入了游戏，你作为一个个体，是可以去支配、去操控、去施展自己的意志和抱负、去实现自己的创造的。你不是一个大机器里面的小小部分，你是一个凭自己就能够造成影响的主动的独立的存在。所以在这个意义下，所有的极权社会都不能容忍游戏的存在，哪怕有所谓的游戏，它只能以一种集体狂欢的形式做出来，里面的角色都是非常面具化的。在这种游戏里面，是个人服从于角色，而不是角色听命于个人。\n\n所以，为什么说我们要保护自己的游戏的精神，因为他和我们作为每个人最本质的自由是相关的。\n\n而我们能够如何利用这份自由，去创造一个更好的世界呢？咱们下节课接着说。","slug":"游戏中的自由","published":1,"date":"2022-04-11T13:27:10.651Z","updated":"2022-04-12T09:55:45.336Z","_id":"cl1vyonvm0003k60mgy142sqz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大家好，欢迎收听 Matters 游戏课，我是刘梦霏。今天我们来谈一谈<strong>游戏中的自由</strong>。</p>\n<p>我们在前几课里也反复提到过，游戏是建立在玩家主体性之上的一种互动媒介，它的一切走向和流程，都得依靠玩家的主动行为去推进。所以<strong>游戏的精神就是自由</strong>，它和我们在现实世界中最本质的自由是一脉相承的。</p>\n<p>但是最近几年出现了这样一种现象，就是有些游戏越来越喜欢「勒索」玩家了，以至于玩家的大部分游戏体验其实就是氪金而已，也就是用现实世界中的真金白银去换取虚拟世界里的一些权利。但我也发现很多玩家是享受这种模式的，好像完全不介意被这样的游戏压榨，也就是说，他们其实是「<strong>自由地选择了一种『被奴役』的状态</strong>」。</p>\n<p>所以接下来就先来分析一下，这种奇怪的现象是怎么在国产游戏的领域大行其道的。然后我们再在这个基础上讨论：<strong>玩家在游戏中到底有没有真正的自由，「自由」是不是一种幻觉。</strong></p>\n<p>这个现象产生的根源，是游戏付费模式的变更。传统的模式是，你先付钱把这个游戏买回来，然后你就可以无限次享受它。但是就在过去的五六年间，大部分游戏都变成免费下载了，你是在中途玩到什么特定的地方，想要更好的游戏体验，才需要花钱，俗称氪金。</p>\n<p>我们作为普通用户对这种模式已经习以为常，但是我们可能没想到，这带来的是我们在游戏之中自由和平等状态的变化，也造成了游戏本质的变化。简单来说，<strong>在传统的付费模式里面，游戏是商品，而变成免费下载之后，作为玩家的你才是那个商品</strong>。</p>\n<p>我们都知道，游戏的开发是要成本的，当你免费下载一个游戏的时候，开发者的成本要靠什么来填呢？ 一般来说有两种渠道，一种是广告，另一种就是在国产手游里面更常见的，玩着玩着就会出现的「氪金时刻」。比如说你在游戏里面的体力值用完了，你要花钱充一下，才能继续往下玩。要不然就是这两年很流行的抽卡游戏，你为了要更好的装备或者是别的什么，你就要花钱去买这个卡，然后这个卡呢还是有几率掉落的，不一定百分百就能给你。那你为了要这个装备就会买更多的卡、花更多的钱。</p>\n<p>在传统的模式里面，你把钱交了，开发者得到了他的报酬、你得到了你的游戏，这个服务和劳动关系就终结了。但在这个新的模式下，没有这样一个「终结」的点了，所以就变成开发者必须想尽办法地给你设置一些坑，为了赚你的钱，吊着你、绑着你。</p>\n<p>所以这种模式的变更很明显就会影响到游戏开发者的追求。传统的追求是，「我想做一个好游戏」，不管它是让你爽，还是让你快乐，让你感动，让你有一些深层的反思和讨论，都是可能的。但是在现在这一类免费下载的游戏里，核心目标只剩下赚钱了，游戏就变成了一种诱饵，这就限制了游戏去表达更多更深刻的内容。</p>\n<p>那这个模式明显是不怎么健康的。但是我们会发现，这个模式，在中国非常成功。</p>\n<p>为什么这些不太健康的游戏能在中国活得那么好呢？</p>\n<p>这就涉及到我想跟大家分享的一个之前调研的成果。这是清华和宝马合作的一个游戏项目，当时对方希望我们回答的问题，在中国的游戏是因为什么原因才流行。当时我们提炼出来的最后结论，就是，<strong>能在中国流行起来的游戏，一定是强社交中的强竞技</strong>。不是说大家在一块儿共同「完成」一个什么，而是我们要在里面「与天斗，与地斗，与人斗，其乐无穷」。这就可以直接解释王者荣耀、吃鸡等等这些 moba 类手游在国内的风靡，MOBA 的意思就是「多人在线战术竞技」。大家应该记得，在这些手游出现之前，上一波火的是三国杀和狼人杀，他们也都是强社交强竞技的游戏。</p>\n<p>我们知道，有不少优秀的单机游戏独立游戏是能提供很棒的个人深度体验的，但他们没有办法吻合「强社交中的强竞技」这两个关键点，于是就很难流行起来，很难获得一种商业上的成功。</p>\n<p>但相反，只要抓住了这两个命门的游戏，一般都可以在国内活得很好，就算它不太健康也没关系，在市场上是站得住脚的。比如我们刚刚说到的那种「抽卡」游戏，它很容易就可以跟「强社交强竞技」的元素结合起来，让玩家去攀比谁抽到的卡更好，在这个过程中就可以不断压榨玩家的时间和金钱，所以玩家的状态其实是很不自由的。</p>\n<p>那么这就回到了我们这节课的核心命题，什么叫游戏里的自由，玩家有没有真正的自由。</p>\n<p>我们说，在一个好的游戏里，你永远都可以选择要不要遵守规则，也可以选择要不要在现有的规则之上叠加你自定义的规则，这就是一种「自由」的体验。</p>\n<p>但归根到底，作为玩家来说，你是在一套别人设计的规则里行动，也就是说其实本质上是不自由的。那难道，<strong>我们在游戏中感受到的只是一种「自由的幻觉」吗</strong>？</p>\n<p>这个问题要分成两个层面说。</p>\n<p>第一个层面是，你在游戏中体验到的自由，跟你在现实中体验到的自由，有什么区别。</p>\n<p>大家一般会觉得，游戏就是在一个「虚拟世界」里进行的事情，所以跟「现实世界」相对。那么，现实世界的东西都是真的、虚拟世界的东西就都是假的。但这个分法其实有点问题。因为很多精神实体和概念实体是同时存在于虚实之间的。比如说「友谊」这种概念，你打网游认识的素未谋面的朋友，难道说就不是朋友了吗？这些属于精神空间的体验，就算它不是来源于现实世界，它也是真实存在的。</p>\n<p>而且，换一个角度想，<strong>现实世界就是你所能体验到的最大型的游戏</strong>，因为你同样是<strong>在限定规则内追求自由</strong>，比方说你抢银行会被抓，跳楼会摔死，那这些都是限定规则的体现。所以，我们在游戏里遇到的自由的幻觉，同样也是我们在现实中的自由的幻觉。</p>\n<p>那这就说到第二个层面了，既然无论游戏还是现实，我们都「无往不在枷锁之中」，我们为什么还会觉得自己「生而自由」的呢？这其实可以从游戏来举例，反推现实。</p>\n<p><strong>自由的幻觉，其实来源于一个叫「主体性」的东西</strong>。我们之前也提到过，游戏是完全依赖于玩家的主动行为推动的，不像小说啊电影啊，有你没你都一样。一个设计师能让你在游戏里面建立起主体性，基本上可以分为三步走：</p>\n<p>第一步，就是你一进去往往可以挑一个角色，条件允许的话，还可以给它起名字，给它捏脸，选一选穿着打扮。这一步就是要让你选中一个可以认同、可以移情的对象。只有你看中了他，觉得这是你在另一个世界里的自我的延伸，你才会愿意在游戏里面多付出时间和精力来让他体验在那个世界的一切。</p>\n<p>第二步，就是一个类似于操作指南的环节。你可以学习操纵你的角色，大体上了解这个角色能做些什么，能不能跑、能不能跳、能不能射击之类的。然后也会慢慢掌握一些关于这个游戏世界的背景知识，试图理清你的角色在游戏世界中的位置，也可能会去跟其他角色产生互动，建立一些社交关系。这个第二步完成之后，你和你的角色基本上都掌握了在新世界里冒险和战斗的技能了。</p>\n<p>第三步，就是游戏设计师会给你一些机会，让你主动去完成一些东西。而随着你跟你的角色在规则和世界观方面的同调，你越了解他的历史、越掌握他的行动方式，你就越觉得那个角色是你，就越会相信你可以在这个世界的规则之内有能力做出一些什么。</p>\n<p>简单来说，这个建立主体性的三步就是：<strong>选择自己的角色、认识自己的角色、通过这个角色来施展自己的意志和抱负</strong>。走完这三步，你往往就会深化自己对角色的了解，也许你会更加坚定自己对它的选择、利用它做更多的事情，或者也可以换一个角色、开始新的身份新的冒险。</p>\n<p>这个思路在现实世界里也是一样的，而且在这个过程中，你会觉得自己是自由的。</p>\n<p>而游戏设计师要完成的工作，就是让你在这种「觉得」自己很自由的状态下，乖乖地服从于规则。</p>\n<p>这里可以举一个例子，一个非常经典也非常流行的游戏，GTA，中文叫做《侠盗飞车》。它的分类是「开放世界动作冒险游戏」，所以它的自由度非常高，你可以完全无视它的主线剧情，去抢车撞人、跟警车展开追击大战，然后一直听着收音机里面的音乐漫游。但如果你一直这样不激发主线剧情，你就会慢慢发现：它的游戏性变得有点可疑，你会觉得它没那么好玩了，它不再是一个可以带来惊喜的的这个设计良好的系统了。但它其实原本是一个能不断带来惊喜的系统，只不过你自由地选择了不去激发它。</p>\n<p>所以我们也看到，有一部分玩家是「自由地选择了限制自己的自由」：我放弃我开着车漫游的美好旅程，选择去完成剧情，去前往系统要求我前往的那个地方。某种意义上，确实是我的自由受到限制了，但这是我愿意去做的，那这个选择同样也是我本身主体性和自由的体现。</p>\n<p>实际上，在一个完善的游戏系统里面，你的每一个选择都会收到反馈，它可以来自世界观或者人物角色，比如你在 GTA 里开车撞了人会有警车追，或者在上古卷轴里面偷了东西被 NPC 看见会报警，这些都属于消极反馈。你会通过这些反馈会越来越多地理解这个游戏世界、理解它的动机、理解它的限制。</p>\n<p>而当你选择了乖乖按照剧情发展去走的时候，你往往就会收到一些积极反馈，比如你这个角色可以解锁新地图、新角色、新技能，这样一来你就可以去更多的地方，认识更多的人，做更多你以前做不到的事。</p>\n<p>那这样一些反馈会让你觉得：没错，我出让了一点自由，但我还是可以做自己想做的事，甚至交换更多的可能性。从你的体验来说，你不会觉得这是什么损失，甚至是一个可以获得快感的过程。</p>\n<p>我们在前几节课也提到过，游戏的本质，就是克服不必要的障碍。所谓不必要的障碍，就是自找的限制、自找的不自由。<strong>但游戏，恰恰就是因为那一点点的不自由，才得以存在，才变得好玩，才会激发我们更多的创造力，也就是我们的主体性和自由</strong>。</p>\n<p>而回到这节课最开始讲的那些不健康的游戏，我一般把他们叫三包游戏，包死包抬包埋。在这些游戏里面你可以一键寻路、可以自动打怪、可以跳过所有的剧情，玩家在其中等于就不会有任何艰难险阻和障碍了，但随之死去的就是游戏性和玩家自己的创造力。而且更匪夷所思的是，你绕过这些障碍的方式，是通过在现实世界里付费来完成的。于是有些玩家就选择了「一边让这些游戏杀死自己的创造力，一边还给罪魁祸首送钱」。</p>\n<p>这种境况，只能说是「自由地选择了被奴役」。</p>\n<p>既然说到了「被奴役」，接下来我就想讲一个极端的例子。</p>\n<p>大家可能听过一个叫做《饥饿游戏》的电影。给不熟悉的听众解释一下，这个电影描述的就是一个反乌托邦的极权世界，里面贫富分化非常严重，所有的人被按照工作被放在不同的区域里，然后这个世界没有任何形式的娱乐，唯一的一个娱乐形式就叫做「饥饿游戏」。这个「饥饿游戏」就是每个区域选出一个少年，把他们都放在一个游戏场里面互相屠杀，最后活下来的人可以获得奖励。</p>\n<p>这个例子为什么有趣呢？因为当我们讨论游戏中的自由的时候，不可避免地会遇到游戏和极权社会的一个关系。大家如果读过奥威尔《1984》或者赫胥黎的《美丽新世界》的话，你会发现<strong>所有这些极权社会都是反游戏的</strong>。为什么呢？</p>\n<p>大家小时候可能都玩过老鹰捉小鸡，这个游戏，不管你是老师还是学生，你进去了以后就只有两种身份，要么老鹰，要么小鸡，你现实中的身份就失效了。要是你被分配到了小鸡，老鹰碰到你，你就在这个游戏里死了，就算你现实中有一百万也没用，在这个游戏里你就是死了。<strong>这样一种「和现实社会身份的不同」，体现的是游戏本身的自由性，也造成了他和极权社会的理想是不相容的</strong>。</p>\n<p>老鹰捉小鸡只是一个比喻，大家可能还记得我们之前提到过，我们恒常处在游戏之中。比如艺术，比如法律，都是自游戏发展而来，都是广义的游戏。</p>\n<p>我们一直在强调，游戏是基于玩家主体性而存在的。当你进入了游戏，你作为一个个体，是可以去支配、去操控、去施展自己的意志和抱负、去实现自己的创造的。你不是一个大机器里面的小小部分，你是一个凭自己就能够造成影响的主动的独立的存在。所以在这个意义下，所有的极权社会都不能容忍游戏的存在，哪怕有所谓的游戏，它只能以一种集体狂欢的形式做出来，里面的角色都是非常面具化的。在这种游戏里面，是个人服从于角色，而不是角色听命于个人。</p>\n<p>所以，为什么说我们要保护自己的游戏的精神，因为他和我们作为每个人最本质的自由是相关的。</p>\n<p>而我们能够如何利用这份自由，去创造一个更好的世界呢？咱们下节课接着说。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家好，欢迎收听 Matters 游戏课，我是刘梦霏。今天我们来谈一谈<strong>游戏中的自由</strong>。</p>\n<p>我们在前几课里也反复提到过，游戏是建立在玩家主体性之上的一种互动媒介，它的一切走向和流程，都得依靠玩家的主动行为去推进。所以<strong>游戏的精神就是自由</strong>，它和我们在现实世界中最本质的自由是一脉相承的。</p>\n<p>但是最近几年出现了这样一种现象，就是有些游戏越来越喜欢「勒索」玩家了，以至于玩家的大部分游戏体验其实就是氪金而已，也就是用现实世界中的真金白银去换取虚拟世界里的一些权利。但我也发现很多玩家是享受这种模式的，好像完全不介意被这样的游戏压榨，也就是说，他们其实是「<strong>自由地选择了一种『被奴役』的状态</strong>」。</p>\n<p>所以接下来就先来分析一下，这种奇怪的现象是怎么在国产游戏的领域大行其道的。然后我们再在这个基础上讨论：<strong>玩家在游戏中到底有没有真正的自由，「自由」是不是一种幻觉。</strong></p>\n<p>这个现象产生的根源，是游戏付费模式的变更。传统的模式是，你先付钱把这个游戏买回来，然后你就可以无限次享受它。但是就在过去的五六年间，大部分游戏都变成免费下载了，你是在中途玩到什么特定的地方，想要更好的游戏体验，才需要花钱，俗称氪金。</p>\n<p>我们作为普通用户对这种模式已经习以为常，但是我们可能没想到，这带来的是我们在游戏之中自由和平等状态的变化，也造成了游戏本质的变化。简单来说，<strong>在传统的付费模式里面，游戏是商品，而变成免费下载之后，作为玩家的你才是那个商品</strong>。</p>\n<p>我们都知道，游戏的开发是要成本的，当你免费下载一个游戏的时候，开发者的成本要靠什么来填呢？ 一般来说有两种渠道，一种是广告，另一种就是在国产手游里面更常见的，玩着玩着就会出现的「氪金时刻」。比如说你在游戏里面的体力值用完了，你要花钱充一下，才能继续往下玩。要不然就是这两年很流行的抽卡游戏，你为了要更好的装备或者是别的什么，你就要花钱去买这个卡，然后这个卡呢还是有几率掉落的，不一定百分百就能给你。那你为了要这个装备就会买更多的卡、花更多的钱。</p>\n<p>在传统的模式里面，你把钱交了，开发者得到了他的报酬、你得到了你的游戏，这个服务和劳动关系就终结了。但在这个新的模式下，没有这样一个「终结」的点了，所以就变成开发者必须想尽办法地给你设置一些坑，为了赚你的钱，吊着你、绑着你。</p>\n<p>所以这种模式的变更很明显就会影响到游戏开发者的追求。传统的追求是，「我想做一个好游戏」，不管它是让你爽，还是让你快乐，让你感动，让你有一些深层的反思和讨论，都是可能的。但是在现在这一类免费下载的游戏里，核心目标只剩下赚钱了，游戏就变成了一种诱饵，这就限制了游戏去表达更多更深刻的内容。</p>\n<p>那这个模式明显是不怎么健康的。但是我们会发现，这个模式，在中国非常成功。</p>\n<p>为什么这些不太健康的游戏能在中国活得那么好呢？</p>\n<p>这就涉及到我想跟大家分享的一个之前调研的成果。这是清华和宝马合作的一个游戏项目，当时对方希望我们回答的问题，在中国的游戏是因为什么原因才流行。当时我们提炼出来的最后结论，就是，<strong>能在中国流行起来的游戏，一定是强社交中的强竞技</strong>。不是说大家在一块儿共同「完成」一个什么，而是我们要在里面「与天斗，与地斗，与人斗，其乐无穷」。这就可以直接解释王者荣耀、吃鸡等等这些 moba 类手游在国内的风靡，MOBA 的意思就是「多人在线战术竞技」。大家应该记得，在这些手游出现之前，上一波火的是三国杀和狼人杀，他们也都是强社交强竞技的游戏。</p>\n<p>我们知道，有不少优秀的单机游戏独立游戏是能提供很棒的个人深度体验的，但他们没有办法吻合「强社交中的强竞技」这两个关键点，于是就很难流行起来，很难获得一种商业上的成功。</p>\n<p>但相反，只要抓住了这两个命门的游戏，一般都可以在国内活得很好，就算它不太健康也没关系，在市场上是站得住脚的。比如我们刚刚说到的那种「抽卡」游戏，它很容易就可以跟「强社交强竞技」的元素结合起来，让玩家去攀比谁抽到的卡更好，在这个过程中就可以不断压榨玩家的时间和金钱，所以玩家的状态其实是很不自由的。</p>\n<p>那么这就回到了我们这节课的核心命题，什么叫游戏里的自由，玩家有没有真正的自由。</p>\n<p>我们说，在一个好的游戏里，你永远都可以选择要不要遵守规则，也可以选择要不要在现有的规则之上叠加你自定义的规则，这就是一种「自由」的体验。</p>\n<p>但归根到底，作为玩家来说，你是在一套别人设计的规则里行动，也就是说其实本质上是不自由的。那难道，<strong>我们在游戏中感受到的只是一种「自由的幻觉」吗</strong>？</p>\n<p>这个问题要分成两个层面说。</p>\n<p>第一个层面是，你在游戏中体验到的自由，跟你在现实中体验到的自由，有什么区别。</p>\n<p>大家一般会觉得，游戏就是在一个「虚拟世界」里进行的事情，所以跟「现实世界」相对。那么，现实世界的东西都是真的、虚拟世界的东西就都是假的。但这个分法其实有点问题。因为很多精神实体和概念实体是同时存在于虚实之间的。比如说「友谊」这种概念，你打网游认识的素未谋面的朋友，难道说就不是朋友了吗？这些属于精神空间的体验，就算它不是来源于现实世界，它也是真实存在的。</p>\n<p>而且，换一个角度想，<strong>现实世界就是你所能体验到的最大型的游戏</strong>，因为你同样是<strong>在限定规则内追求自由</strong>，比方说你抢银行会被抓，跳楼会摔死，那这些都是限定规则的体现。所以，我们在游戏里遇到的自由的幻觉，同样也是我们在现实中的自由的幻觉。</p>\n<p>那这就说到第二个层面了，既然无论游戏还是现实，我们都「无往不在枷锁之中」，我们为什么还会觉得自己「生而自由」的呢？这其实可以从游戏来举例，反推现实。</p>\n<p><strong>自由的幻觉，其实来源于一个叫「主体性」的东西</strong>。我们之前也提到过，游戏是完全依赖于玩家的主动行为推动的，不像小说啊电影啊，有你没你都一样。一个设计师能让你在游戏里面建立起主体性，基本上可以分为三步走：</p>\n<p>第一步，就是你一进去往往可以挑一个角色，条件允许的话，还可以给它起名字，给它捏脸，选一选穿着打扮。这一步就是要让你选中一个可以认同、可以移情的对象。只有你看中了他，觉得这是你在另一个世界里的自我的延伸，你才会愿意在游戏里面多付出时间和精力来让他体验在那个世界的一切。</p>\n<p>第二步，就是一个类似于操作指南的环节。你可以学习操纵你的角色，大体上了解这个角色能做些什么，能不能跑、能不能跳、能不能射击之类的。然后也会慢慢掌握一些关于这个游戏世界的背景知识，试图理清你的角色在游戏世界中的位置，也可能会去跟其他角色产生互动，建立一些社交关系。这个第二步完成之后，你和你的角色基本上都掌握了在新世界里冒险和战斗的技能了。</p>\n<p>第三步，就是游戏设计师会给你一些机会，让你主动去完成一些东西。而随着你跟你的角色在规则和世界观方面的同调，你越了解他的历史、越掌握他的行动方式，你就越觉得那个角色是你，就越会相信你可以在这个世界的规则之内有能力做出一些什么。</p>\n<p>简单来说，这个建立主体性的三步就是：<strong>选择自己的角色、认识自己的角色、通过这个角色来施展自己的意志和抱负</strong>。走完这三步，你往往就会深化自己对角色的了解，也许你会更加坚定自己对它的选择、利用它做更多的事情，或者也可以换一个角色、开始新的身份新的冒险。</p>\n<p>这个思路在现实世界里也是一样的，而且在这个过程中，你会觉得自己是自由的。</p>\n<p>而游戏设计师要完成的工作，就是让你在这种「觉得」自己很自由的状态下，乖乖地服从于规则。</p>\n<p>这里可以举一个例子，一个非常经典也非常流行的游戏，GTA，中文叫做《侠盗飞车》。它的分类是「开放世界动作冒险游戏」，所以它的自由度非常高，你可以完全无视它的主线剧情，去抢车撞人、跟警车展开追击大战，然后一直听着收音机里面的音乐漫游。但如果你一直这样不激发主线剧情，你就会慢慢发现：它的游戏性变得有点可疑，你会觉得它没那么好玩了，它不再是一个可以带来惊喜的的这个设计良好的系统了。但它其实原本是一个能不断带来惊喜的系统，只不过你自由地选择了不去激发它。</p>\n<p>所以我们也看到，有一部分玩家是「自由地选择了限制自己的自由」：我放弃我开着车漫游的美好旅程，选择去完成剧情，去前往系统要求我前往的那个地方。某种意义上，确实是我的自由受到限制了，但这是我愿意去做的，那这个选择同样也是我本身主体性和自由的体现。</p>\n<p>实际上，在一个完善的游戏系统里面，你的每一个选择都会收到反馈，它可以来自世界观或者人物角色，比如你在 GTA 里开车撞了人会有警车追，或者在上古卷轴里面偷了东西被 NPC 看见会报警，这些都属于消极反馈。你会通过这些反馈会越来越多地理解这个游戏世界、理解它的动机、理解它的限制。</p>\n<p>而当你选择了乖乖按照剧情发展去走的时候，你往往就会收到一些积极反馈，比如你这个角色可以解锁新地图、新角色、新技能，这样一来你就可以去更多的地方，认识更多的人，做更多你以前做不到的事。</p>\n<p>那这样一些反馈会让你觉得：没错，我出让了一点自由，但我还是可以做自己想做的事，甚至交换更多的可能性。从你的体验来说，你不会觉得这是什么损失，甚至是一个可以获得快感的过程。</p>\n<p>我们在前几节课也提到过，游戏的本质，就是克服不必要的障碍。所谓不必要的障碍，就是自找的限制、自找的不自由。<strong>但游戏，恰恰就是因为那一点点的不自由，才得以存在，才变得好玩，才会激发我们更多的创造力，也就是我们的主体性和自由</strong>。</p>\n<p>而回到这节课最开始讲的那些不健康的游戏，我一般把他们叫三包游戏，包死包抬包埋。在这些游戏里面你可以一键寻路、可以自动打怪、可以跳过所有的剧情，玩家在其中等于就不会有任何艰难险阻和障碍了，但随之死去的就是游戏性和玩家自己的创造力。而且更匪夷所思的是，你绕过这些障碍的方式，是通过在现实世界里付费来完成的。于是有些玩家就选择了「一边让这些游戏杀死自己的创造力，一边还给罪魁祸首送钱」。</p>\n<p>这种境况，只能说是「自由地选择了被奴役」。</p>\n<p>既然说到了「被奴役」，接下来我就想讲一个极端的例子。</p>\n<p>大家可能听过一个叫做《饥饿游戏》的电影。给不熟悉的听众解释一下，这个电影描述的就是一个反乌托邦的极权世界，里面贫富分化非常严重，所有的人被按照工作被放在不同的区域里，然后这个世界没有任何形式的娱乐，唯一的一个娱乐形式就叫做「饥饿游戏」。这个「饥饿游戏」就是每个区域选出一个少年，把他们都放在一个游戏场里面互相屠杀，最后活下来的人可以获得奖励。</p>\n<p>这个例子为什么有趣呢？因为当我们讨论游戏中的自由的时候，不可避免地会遇到游戏和极权社会的一个关系。大家如果读过奥威尔《1984》或者赫胥黎的《美丽新世界》的话，你会发现<strong>所有这些极权社会都是反游戏的</strong>。为什么呢？</p>\n<p>大家小时候可能都玩过老鹰捉小鸡，这个游戏，不管你是老师还是学生，你进去了以后就只有两种身份，要么老鹰，要么小鸡，你现实中的身份就失效了。要是你被分配到了小鸡，老鹰碰到你，你就在这个游戏里死了，就算你现实中有一百万也没用，在这个游戏里你就是死了。<strong>这样一种「和现实社会身份的不同」，体现的是游戏本身的自由性，也造成了他和极权社会的理想是不相容的</strong>。</p>\n<p>老鹰捉小鸡只是一个比喻，大家可能还记得我们之前提到过，我们恒常处在游戏之中。比如艺术，比如法律，都是自游戏发展而来，都是广义的游戏。</p>\n<p>我们一直在强调，游戏是基于玩家主体性而存在的。当你进入了游戏，你作为一个个体，是可以去支配、去操控、去施展自己的意志和抱负、去实现自己的创造的。你不是一个大机器里面的小小部分，你是一个凭自己就能够造成影响的主动的独立的存在。所以在这个意义下，所有的极权社会都不能容忍游戏的存在，哪怕有所谓的游戏，它只能以一种集体狂欢的形式做出来，里面的角色都是非常面具化的。在这种游戏里面，是个人服从于角色，而不是角色听命于个人。</p>\n<p>所以，为什么说我们要保护自己的游戏的精神，因为他和我们作为每个人最本质的自由是相关的。</p>\n<p>而我们能够如何利用这份自由，去创造一个更好的世界呢？咱们下节课接着说。</p>\n"},{"title":"漫谈如何寻找投资机会","_content":"\n\n[Random Thoughts on the Identification of Investment Opportunities](https://www.notion.so/Random-Thoughts-on-the-Identification-of-Investment-Opportunities-349b211390d7488b8968c043f81cf069)\n\n### 1. **No group or sector in the investment world enjoys as its birthright the promise of consistent high returns.**\n\n### 1. 在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\n\nThere is no asset class that will do well simply because of what it is. An example of this is real estate. People said, \"You should buy real estate because it's a hedge against inflation,\" and \"You should buy real estate because they're not making any more.\" But done at the wrong time, real estate investing didn't work.\n\n没有哪类资产，就是因为这类资产本身，就能赚钱。以房地产为例。人们说：“买房好啊，可以防通胀。”还说“买房好啊，因为房子越来越少。”但是，时机错了，买房照样赚不着钱。\n\n### 2. **What matters most is not what you invest in, but when and at what price.**\n\n### 2. 重要的不是投资什么，而是什么时候投，价格是多少。\n\nThere is no such thing as a good or bad investment idea per se. For example, the selection of good companies is certainly not enough to assure good results — see Xerox, Avon, Merck and the rest of the \"nifty fifty\" in 1974.\n\n一个投资本身没有好坏之分。例如，选出了好公司，保证不了一定能赚钱，例如，1974 年“漂亮五十”中的施乐、雅芳、默克等公司。\n\nAny investment can be good or bad depending on when it's made and what price is paid. It's been said that \"any bond can be triple-A at a price.\"\n\n任何一项投资都可能是好，也可能是坏，具体要看投资的时机和买入的价格。有句话说得精辟，“只要价格合适，什么债券都是 AAA。”\n\nThere is no security that is so good that it can't be overpriced, or so bad that it can't be underpriced.\n\n没什么证券好到多少钱都不贵，也没什么证券坏到多少钱都不便宜。\n\n### 3. **The discipline which is most important in investing is not accounting or economics, but psychology.**\n\n### 3. 对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\n\nThe key is who likes the investment now and who doesn't. Future prices changes will be determined by whether it comes to be liked by more people or fewer people in the future.\n\n关键是现在看好这个投资的是谁，不看好这个投资的是谁。一个东西将来的价格变化，取决于将来喜欢这个东西的人是多了，还是少了。\n\nInvesting is a popularity contest, and the most dangerous thing is to buy something at the peak of its popularity. At that point, all favorable facts and opinions are already factored into its price, and no new buyers are left to emerge.\n\n投资是一场追逐流行的竞赛，最危险的是在一个东西最流行的时候买入。这时候，所有有利的事实和观点都反映到了价格里，该买的人都买了。\n\nThe safest and most potentially profitable thing is to buy something when no one likes it. Given time its popularity, and thus its price, can only go one way: up.\n\n最安全、获利潜力最大的投资，是在没人喜欢的时候买进。假以时日，一旦证券受到欢迎，那么它的价格只可能向一个方向变化：上涨。\n\nWatch which asset classes they're holding conferences for and how many people are attending. Sold-out conferences are a danger sign. You want to participate in auctions where there are only one or two buyers, not hundreds or thousands.\n\n要关注人们在开会讨论哪些资产类别，有多少人参加。要是会议座无虚席，这就是危险的信号。作为一个投资者，你最好参与只有一两个买家的竞拍，而不是和成百上千人争抢。\n\nYou want to buy things either before they've been discovered or after there's been a shake-out.\n\n你最好在一个东西被发现之前或在萧条发生之后买入。\n\n### 4. **The bottom line is that it is best to act as a contrarian.**\n\n### 4. 关键是最好做一个逆向投资者。\n\nAn investment that \"everyone\" knows to be undervalued is an oxymoron. If everyone knows it's undervalued, why haven't they bought it and driven up its price? And if they have bought, how can the price still be low?\n\n“一笔投资，谁都知道是低估。”这是自相矛盾的说法。既然所有人都知道低估了，为什么他们没买入，没把价格抬高？要是所有人都买了，价格怎么可能还低？\n\nYogi Berra said, \"nobody goes to that restaurant; it's too popular.\" The equally oxy-moronic investment version is \"Everybody likes that security because it's so cheap.\"\n\nYogi Berra 说过：“那家饭店没人去了，因为太挤了。”在投资上有一句同样自相矛盾的话：“所有人都喜欢这只证券，因为它很便宜”。\n\n### 5. **Book the bet that no one else will.**\n\n### 5. 投别人不投的注。\n\nIf everyone likes the favorite in a football game and wants to bet on it, the point spread will grow so wide that the team -- as good as it is — is unlikely to be able to cover the spread. Take the other side of the bet — on the underdog.\n\n在足彩中，所有人都看好一只球队，都希望押这只球队取胜，让分就会让得很多。押注另一只球队——押不被看好的球队。\n\nLikewise, if everyone is too scared of junk bonds to buy them, it will become possible for you to buy them at a yield spread which not only overcompensates for the actual credit risk, but sets the stage for their being the best performing fixed income sector in the world. That was the case in late 1990.\n\n同样，要是所有人都对垃圾债券避之唯恐不及，你的机会可能就来了。你买入的收益率，不但可能足以弥补实际的信用风险，而且还可能成为表现最好的固收品种。1990 年下半年就是这样。\n\nThe bottom line is that one must try to be on the other side of the question from everyone else. If everyone likes it, sell; if no one likes it, buy.\n\n关键是要有虽千万人吾往矣的勇气。众人都看好，卖出；众人都看淡，买入。\n\n### 6. **As Warren Buffet said, “the less care with which others conduct their affairs, the more care with which you should conduct yours.” When others are afraid, you needn’t be; when others are unafraid, you’d better be.**\n\n### 6. 正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\n\nIt is usually said that the market runs on fear and greed. I feel at any given point in time it runs on fear or greed.\n\n人们常说市场的运行被恐惧和贪婪左右。我觉得，在任何时候，市场要么被贪婪左右，要么被恐惧左右。\n\nAs 1991 began, everyone was petrified of high yield bonds. Only the very best bonds could be issued, and thus buyers at that time didn't have to do any credit analysis — the market did it for them. Its collective fear caused high standards to be imposed. But when investors are unafraid, they'll buy anything. Thus the intelligent investor's workload is much increased.\n\n进入 1991 年，所有人都被高收益债券吓傻了，只有质量最上乘的债券能发行出去。当时买入的人根本不必进行信用分析，市场已经帮他们做了。由于参与者的整体恐惧，市场采取了严格的标准。当投资者不害怕时，他们什么都敢买。这时候，作为理智的投资者，工作量就要大多了。\n\n### 7. **Gresham's Law says ’’bad money drives out good.” When paper money appeared, gold disappeared. It works in investing too: bad investors drive out good.**\n\n### 7. 格雷欣法则 (Gresham's Law) 认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\n\nWhen undemanding investors appear, they'll buy anything. Underwriting standards fall, and it gets hard for demanding investors to find opportunities offering the return and risk balance they require, so they're forced to the sidelines.\n\n当毫无顾忌的投资者出现时，他们什么都敢买。承销标准下降，要求严格的投资者按照自己的标准很难找到收益和风险平衡的机会，他们只能靠边站。\n\nDemanding investors must be willing to be inactive at times.\n\n有些时候，要求严格的投资者必须甘愿无为。\n\nJanuary 24, 1994\n\n一九九四年一月二十四日","source":"_posts/漫谈如何寻找投资机会.md","raw":"---\ntitle: 漫谈如何寻找投资机会\n---\n\n\n[Random Thoughts on the Identification of Investment Opportunities](https://www.notion.so/Random-Thoughts-on-the-Identification-of-Investment-Opportunities-349b211390d7488b8968c043f81cf069)\n\n### 1. **No group or sector in the investment world enjoys as its birthright the promise of consistent high returns.**\n\n### 1. 在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\n\nThere is no asset class that will do well simply because of what it is. An example of this is real estate. People said, \"You should buy real estate because it's a hedge against inflation,\" and \"You should buy real estate because they're not making any more.\" But done at the wrong time, real estate investing didn't work.\n\n没有哪类资产，就是因为这类资产本身，就能赚钱。以房地产为例。人们说：“买房好啊，可以防通胀。”还说“买房好啊，因为房子越来越少。”但是，时机错了，买房照样赚不着钱。\n\n### 2. **What matters most is not what you invest in, but when and at what price.**\n\n### 2. 重要的不是投资什么，而是什么时候投，价格是多少。\n\nThere is no such thing as a good or bad investment idea per se. For example, the selection of good companies is certainly not enough to assure good results — see Xerox, Avon, Merck and the rest of the \"nifty fifty\" in 1974.\n\n一个投资本身没有好坏之分。例如，选出了好公司，保证不了一定能赚钱，例如，1974 年“漂亮五十”中的施乐、雅芳、默克等公司。\n\nAny investment can be good or bad depending on when it's made and what price is paid. It's been said that \"any bond can be triple-A at a price.\"\n\n任何一项投资都可能是好，也可能是坏，具体要看投资的时机和买入的价格。有句话说得精辟，“只要价格合适，什么债券都是 AAA。”\n\nThere is no security that is so good that it can't be overpriced, or so bad that it can't be underpriced.\n\n没什么证券好到多少钱都不贵，也没什么证券坏到多少钱都不便宜。\n\n### 3. **The discipline which is most important in investing is not accounting or economics, but psychology.**\n\n### 3. 对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\n\nThe key is who likes the investment now and who doesn't. Future prices changes will be determined by whether it comes to be liked by more people or fewer people in the future.\n\n关键是现在看好这个投资的是谁，不看好这个投资的是谁。一个东西将来的价格变化，取决于将来喜欢这个东西的人是多了，还是少了。\n\nInvesting is a popularity contest, and the most dangerous thing is to buy something at the peak of its popularity. At that point, all favorable facts and opinions are already factored into its price, and no new buyers are left to emerge.\n\n投资是一场追逐流行的竞赛，最危险的是在一个东西最流行的时候买入。这时候，所有有利的事实和观点都反映到了价格里，该买的人都买了。\n\nThe safest and most potentially profitable thing is to buy something when no one likes it. Given time its popularity, and thus its price, can only go one way: up.\n\n最安全、获利潜力最大的投资，是在没人喜欢的时候买进。假以时日，一旦证券受到欢迎，那么它的价格只可能向一个方向变化：上涨。\n\nWatch which asset classes they're holding conferences for and how many people are attending. Sold-out conferences are a danger sign. You want to participate in auctions where there are only one or two buyers, not hundreds or thousands.\n\n要关注人们在开会讨论哪些资产类别，有多少人参加。要是会议座无虚席，这就是危险的信号。作为一个投资者，你最好参与只有一两个买家的竞拍，而不是和成百上千人争抢。\n\nYou want to buy things either before they've been discovered or after there's been a shake-out.\n\n你最好在一个东西被发现之前或在萧条发生之后买入。\n\n### 4. **The bottom line is that it is best to act as a contrarian.**\n\n### 4. 关键是最好做一个逆向投资者。\n\nAn investment that \"everyone\" knows to be undervalued is an oxymoron. If everyone knows it's undervalued, why haven't they bought it and driven up its price? And if they have bought, how can the price still be low?\n\n“一笔投资，谁都知道是低估。”这是自相矛盾的说法。既然所有人都知道低估了，为什么他们没买入，没把价格抬高？要是所有人都买了，价格怎么可能还低？\n\nYogi Berra said, \"nobody goes to that restaurant; it's too popular.\" The equally oxy-moronic investment version is \"Everybody likes that security because it's so cheap.\"\n\nYogi Berra 说过：“那家饭店没人去了，因为太挤了。”在投资上有一句同样自相矛盾的话：“所有人都喜欢这只证券，因为它很便宜”。\n\n### 5. **Book the bet that no one else will.**\n\n### 5. 投别人不投的注。\n\nIf everyone likes the favorite in a football game and wants to bet on it, the point spread will grow so wide that the team -- as good as it is — is unlikely to be able to cover the spread. Take the other side of the bet — on the underdog.\n\n在足彩中，所有人都看好一只球队，都希望押这只球队取胜，让分就会让得很多。押注另一只球队——押不被看好的球队。\n\nLikewise, if everyone is too scared of junk bonds to buy them, it will become possible for you to buy them at a yield spread which not only overcompensates for the actual credit risk, but sets the stage for their being the best performing fixed income sector in the world. That was the case in late 1990.\n\n同样，要是所有人都对垃圾债券避之唯恐不及，你的机会可能就来了。你买入的收益率，不但可能足以弥补实际的信用风险，而且还可能成为表现最好的固收品种。1990 年下半年就是这样。\n\nThe bottom line is that one must try to be on the other side of the question from everyone else. If everyone likes it, sell; if no one likes it, buy.\n\n关键是要有虽千万人吾往矣的勇气。众人都看好，卖出；众人都看淡，买入。\n\n### 6. **As Warren Buffet said, “the less care with which others conduct their affairs, the more care with which you should conduct yours.” When others are afraid, you needn’t be; when others are unafraid, you’d better be.**\n\n### 6. 正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\n\nIt is usually said that the market runs on fear and greed. I feel at any given point in time it runs on fear or greed.\n\n人们常说市场的运行被恐惧和贪婪左右。我觉得，在任何时候，市场要么被贪婪左右，要么被恐惧左右。\n\nAs 1991 began, everyone was petrified of high yield bonds. Only the very best bonds could be issued, and thus buyers at that time didn't have to do any credit analysis — the market did it for them. Its collective fear caused high standards to be imposed. But when investors are unafraid, they'll buy anything. Thus the intelligent investor's workload is much increased.\n\n进入 1991 年，所有人都被高收益债券吓傻了，只有质量最上乘的债券能发行出去。当时买入的人根本不必进行信用分析，市场已经帮他们做了。由于参与者的整体恐惧，市场采取了严格的标准。当投资者不害怕时，他们什么都敢买。这时候，作为理智的投资者，工作量就要大多了。\n\n### 7. **Gresham's Law says ’’bad money drives out good.” When paper money appeared, gold disappeared. It works in investing too: bad investors drive out good.**\n\n### 7. 格雷欣法则 (Gresham's Law) 认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\n\nWhen undemanding investors appear, they'll buy anything. Underwriting standards fall, and it gets hard for demanding investors to find opportunities offering the return and risk balance they require, so they're forced to the sidelines.\n\n当毫无顾忌的投资者出现时，他们什么都敢买。承销标准下降，要求严格的投资者按照自己的标准很难找到收益和风险平衡的机会，他们只能靠边站。\n\nDemanding investors must be willing to be inactive at times.\n\n有些时候，要求严格的投资者必须甘愿无为。\n\nJanuary 24, 1994\n\n一九九四年一月二十四日","slug":"漫谈如何寻找投资机会","published":1,"date":"2021-12-11T13:13:34.891Z","updated":"2022-04-12T09:56:04.227Z","_id":"cl1vyonvp0004k60m7o2h6sp0","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.notion.so/Random-Thoughts-on-the-Identification-of-Investment-Opportunities-349b211390d7488b8968c043f81cf069\">Random Thoughts on the Identification of Investment Opportunities</a></p>\n<h3 id=\"1-No-group-or-sector-in-the-investment-world-enjoys-as-its-birthright-the-promise-of-consistent-high-returns\"><a href=\"#1-No-group-or-sector-in-the-investment-world-enjoys-as-its-birthright-the-promise-of-consistent-high-returns\" class=\"headerlink\" title=\"1. No group or sector in the investment world enjoys as its birthright the promise of consistent high returns.\"></a>1. <strong>No group or sector in the investment world enjoys as its birthright the promise of consistent high returns.</strong></h3><h3 id=\"1-在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\"><a href=\"#1-在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\" class=\"headerlink\" title=\"1. 在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\"></a>1. 在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。</h3><p>There is no asset class that will do well simply because of what it is. An example of this is real estate. People said, “You should buy real estate because it’s a hedge against inflation,” and “You should buy real estate because they’re not making any more.” But done at the wrong time, real estate investing didn’t work.</p>\n<p>没有哪类资产，就是因为这类资产本身，就能赚钱。以房地产为例。人们说：“买房好啊，可以防通胀。”还说“买房好啊，因为房子越来越少。”但是，时机错了，买房照样赚不着钱。</p>\n<h3 id=\"2-What-matters-most-is-not-what-you-invest-in-but-when-and-at-what-price\"><a href=\"#2-What-matters-most-is-not-what-you-invest-in-but-when-and-at-what-price\" class=\"headerlink\" title=\"2. What matters most is not what you invest in, but when and at what price.\"></a>2. <strong>What matters most is not what you invest in, but when and at what price.</strong></h3><h3 id=\"2-重要的不是投资什么，而是什么时候投，价格是多少。\"><a href=\"#2-重要的不是投资什么，而是什么时候投，价格是多少。\" class=\"headerlink\" title=\"2. 重要的不是投资什么，而是什么时候投，价格是多少。\"></a>2. 重要的不是投资什么，而是什么时候投，价格是多少。</h3><p>There is no such thing as a good or bad investment idea per se. For example, the selection of good companies is certainly not enough to assure good results — see Xerox, Avon, Merck and the rest of the “nifty fifty” in 1974.</p>\n<p>一个投资本身没有好坏之分。例如，选出了好公司，保证不了一定能赚钱，例如，1974 年“漂亮五十”中的施乐、雅芳、默克等公司。</p>\n<p>Any investment can be good or bad depending on when it’s made and what price is paid. It’s been said that “any bond can be triple-A at a price.”</p>\n<p>任何一项投资都可能是好，也可能是坏，具体要看投资的时机和买入的价格。有句话说得精辟，“只要价格合适，什么债券都是 AAA。”</p>\n<p>There is no security that is so good that it can’t be overpriced, or so bad that it can’t be underpriced.</p>\n<p>没什么证券好到多少钱都不贵，也没什么证券坏到多少钱都不便宜。</p>\n<h3 id=\"3-The-discipline-which-is-most-important-in-investing-is-not-accounting-or-economics-but-psychology\"><a href=\"#3-The-discipline-which-is-most-important-in-investing-is-not-accounting-or-economics-but-psychology\" class=\"headerlink\" title=\"3. The discipline which is most important in investing is not accounting or economics, but psychology.\"></a>3. <strong>The discipline which is most important in investing is not accounting or economics, but psychology.</strong></h3><h3 id=\"3-对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\"><a href=\"#3-对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\" class=\"headerlink\" title=\"3. 对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\"></a>3. 对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。</h3><p>The key is who likes the investment now and who doesn’t. Future prices changes will be determined by whether it comes to be liked by more people or fewer people in the future.</p>\n<p>关键是现在看好这个投资的是谁，不看好这个投资的是谁。一个东西将来的价格变化，取决于将来喜欢这个东西的人是多了，还是少了。</p>\n<p>Investing is a popularity contest, and the most dangerous thing is to buy something at the peak of its popularity. At that point, all favorable facts and opinions are already factored into its price, and no new buyers are left to emerge.</p>\n<p>投资是一场追逐流行的竞赛，最危险的是在一个东西最流行的时候买入。这时候，所有有利的事实和观点都反映到了价格里，该买的人都买了。</p>\n<p>The safest and most potentially profitable thing is to buy something when no one likes it. Given time its popularity, and thus its price, can only go one way: up.</p>\n<p>最安全、获利潜力最大的投资，是在没人喜欢的时候买进。假以时日，一旦证券受到欢迎，那么它的价格只可能向一个方向变化：上涨。</p>\n<p>Watch which asset classes they’re holding conferences for and how many people are attending. Sold-out conferences are a danger sign. You want to participate in auctions where there are only one or two buyers, not hundreds or thousands.</p>\n<p>要关注人们在开会讨论哪些资产类别，有多少人参加。要是会议座无虚席，这就是危险的信号。作为一个投资者，你最好参与只有一两个买家的竞拍，而不是和成百上千人争抢。</p>\n<p>You want to buy things either before they’ve been discovered or after there’s been a shake-out.</p>\n<p>你最好在一个东西被发现之前或在萧条发生之后买入。</p>\n<h3 id=\"4-The-bottom-line-is-that-it-is-best-to-act-as-a-contrarian\"><a href=\"#4-The-bottom-line-is-that-it-is-best-to-act-as-a-contrarian\" class=\"headerlink\" title=\"4. The bottom line is that it is best to act as a contrarian.\"></a>4. <strong>The bottom line is that it is best to act as a contrarian.</strong></h3><h3 id=\"4-关键是最好做一个逆向投资者。\"><a href=\"#4-关键是最好做一个逆向投资者。\" class=\"headerlink\" title=\"4. 关键是最好做一个逆向投资者。\"></a>4. 关键是最好做一个逆向投资者。</h3><p>An investment that “everyone” knows to be undervalued is an oxymoron. If everyone knows it’s undervalued, why haven’t they bought it and driven up its price? And if they have bought, how can the price still be low?</p>\n<p>“一笔投资，谁都知道是低估。”这是自相矛盾的说法。既然所有人都知道低估了，为什么他们没买入，没把价格抬高？要是所有人都买了，价格怎么可能还低？</p>\n<p>Yogi Berra said, “nobody goes to that restaurant; it’s too popular.” The equally oxy-moronic investment version is “Everybody likes that security because it’s so cheap.”</p>\n<p>Yogi Berra 说过：“那家饭店没人去了，因为太挤了。”在投资上有一句同样自相矛盾的话：“所有人都喜欢这只证券，因为它很便宜”。</p>\n<h3 id=\"5-Book-the-bet-that-no-one-else-will\"><a href=\"#5-Book-the-bet-that-no-one-else-will\" class=\"headerlink\" title=\"5. Book the bet that no one else will.\"></a>5. <strong>Book the bet that no one else will.</strong></h3><h3 id=\"5-投别人不投的注。\"><a href=\"#5-投别人不投的注。\" class=\"headerlink\" title=\"5. 投别人不投的注。\"></a>5. 投别人不投的注。</h3><p>If everyone likes the favorite in a football game and wants to bet on it, the point spread will grow so wide that the team – as good as it is — is unlikely to be able to cover the spread. Take the other side of the bet — on the underdog.</p>\n<p>在足彩中，所有人都看好一只球队，都希望押这只球队取胜，让分就会让得很多。押注另一只球队——押不被看好的球队。</p>\n<p>Likewise, if everyone is too scared of junk bonds to buy them, it will become possible for you to buy them at a yield spread which not only overcompensates for the actual credit risk, but sets the stage for their being the best performing fixed income sector in the world. That was the case in late 1990.</p>\n<p>同样，要是所有人都对垃圾债券避之唯恐不及，你的机会可能就来了。你买入的收益率，不但可能足以弥补实际的信用风险，而且还可能成为表现最好的固收品种。1990 年下半年就是这样。</p>\n<p>The bottom line is that one must try to be on the other side of the question from everyone else. If everyone likes it, sell; if no one likes it, buy.</p>\n<p>关键是要有虽千万人吾往矣的勇气。众人都看好，卖出；众人都看淡，买入。</p>\n<h3 id=\"6-As-Warren-Buffet-said-“the-less-care-with-which-others-conduct-their-affairs-the-more-care-with-which-you-should-conduct-yours-”-When-others-are-afraid-you-needn’t-be-when-others-are-unafraid-you’d-better-be\"><a href=\"#6-As-Warren-Buffet-said-“the-less-care-with-which-others-conduct-their-affairs-the-more-care-with-which-you-should-conduct-yours-”-When-others-are-afraid-you-needn’t-be-when-others-are-unafraid-you’d-better-be\" class=\"headerlink\" title=\"6. As Warren Buffet said, “the less care with which others conduct their affairs, the more care with which you should conduct yours.” When others are afraid, you needn’t be; when others are unafraid, you’d better be.\"></a>6. <strong>As Warren Buffet said, “the less care with which others conduct their affairs, the more care with which you should conduct yours.” When others are afraid, you needn’t be; when others are unafraid, you’d better be.</strong></h3><h3 id=\"6-正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\"><a href=\"#6-正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\" class=\"headerlink\" title=\"6. 正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\"></a>6. 正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。</h3><p>It is usually said that the market runs on fear and greed. I feel at any given point in time it runs on fear or greed.</p>\n<p>人们常说市场的运行被恐惧和贪婪左右。我觉得，在任何时候，市场要么被贪婪左右，要么被恐惧左右。</p>\n<p>As 1991 began, everyone was petrified of high yield bonds. Only the very best bonds could be issued, and thus buyers at that time didn’t have to do any credit analysis — the market did it for them. Its collective fear caused high standards to be imposed. But when investors are unafraid, they’ll buy anything. Thus the intelligent investor’s workload is much increased.</p>\n<p>进入 1991 年，所有人都被高收益债券吓傻了，只有质量最上乘的债券能发行出去。当时买入的人根本不必进行信用分析，市场已经帮他们做了。由于参与者的整体恐惧，市场采取了严格的标准。当投资者不害怕时，他们什么都敢买。这时候，作为理智的投资者，工作量就要大多了。</p>\n<h3 id=\"7-Gresham’s-Law-says-’’bad-money-drives-out-good-”-When-paper-money-appeared-gold-disappeared-It-works-in-investing-too-bad-investors-drive-out-good\"><a href=\"#7-Gresham’s-Law-says-’’bad-money-drives-out-good-”-When-paper-money-appeared-gold-disappeared-It-works-in-investing-too-bad-investors-drive-out-good\" class=\"headerlink\" title=\"7. Gresham’s Law says ’’bad money drives out good.” When paper money appeared, gold disappeared. It works in investing too: bad investors drive out good.\"></a>7. <strong>Gresham’s Law says ’’bad money drives out good.” When paper money appeared, gold disappeared. It works in investing too: bad investors drive out good.</strong></h3><h3 id=\"7-格雷欣法则-Gresham’s-Law-认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\"><a href=\"#7-格雷欣法则-Gresham’s-Law-认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\" class=\"headerlink\" title=\"7. 格雷欣法则 (Gresham’s Law) 认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\"></a>7. 格雷欣法则 (Gresham’s Law) 认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。</h3><p>When undemanding investors appear, they’ll buy anything. Underwriting standards fall, and it gets hard for demanding investors to find opportunities offering the return and risk balance they require, so they’re forced to the sidelines.</p>\n<p>当毫无顾忌的投资者出现时，他们什么都敢买。承销标准下降，要求严格的投资者按照自己的标准很难找到收益和风险平衡的机会，他们只能靠边站。</p>\n<p>Demanding investors must be willing to be inactive at times.</p>\n<p>有些时候，要求严格的投资者必须甘愿无为。</p>\n<p>January 24, 1994</p>\n<p>一九九四年一月二十四日</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.notion.so/Random-Thoughts-on-the-Identification-of-Investment-Opportunities-349b211390d7488b8968c043f81cf069\">Random Thoughts on the Identification of Investment Opportunities</a></p>\n<h3 id=\"1-No-group-or-sector-in-the-investment-world-enjoys-as-its-birthright-the-promise-of-consistent-high-returns\"><a href=\"#1-No-group-or-sector-in-the-investment-world-enjoys-as-its-birthright-the-promise-of-consistent-high-returns\" class=\"headerlink\" title=\"1. No group or sector in the investment world enjoys as its birthright the promise of consistent high returns.\"></a>1. <strong>No group or sector in the investment world enjoys as its birthright the promise of consistent high returns.</strong></h3><h3 id=\"1-在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\"><a href=\"#1-在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\" class=\"headerlink\" title=\"1. 在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。\"></a>1. 在投资行业，没有哪类资产或哪个领域，本身就能持续带来高回报。</h3><p>There is no asset class that will do well simply because of what it is. An example of this is real estate. People said, “You should buy real estate because it’s a hedge against inflation,” and “You should buy real estate because they’re not making any more.” But done at the wrong time, real estate investing didn’t work.</p>\n<p>没有哪类资产，就是因为这类资产本身，就能赚钱。以房地产为例。人们说：“买房好啊，可以防通胀。”还说“买房好啊，因为房子越来越少。”但是，时机错了，买房照样赚不着钱。</p>\n<h3 id=\"2-What-matters-most-is-not-what-you-invest-in-but-when-and-at-what-price\"><a href=\"#2-What-matters-most-is-not-what-you-invest-in-but-when-and-at-what-price\" class=\"headerlink\" title=\"2. What matters most is not what you invest in, but when and at what price.\"></a>2. <strong>What matters most is not what you invest in, but when and at what price.</strong></h3><h3 id=\"2-重要的不是投资什么，而是什么时候投，价格是多少。\"><a href=\"#2-重要的不是投资什么，而是什么时候投，价格是多少。\" class=\"headerlink\" title=\"2. 重要的不是投资什么，而是什么时候投，价格是多少。\"></a>2. 重要的不是投资什么，而是什么时候投，价格是多少。</h3><p>There is no such thing as a good or bad investment idea per se. For example, the selection of good companies is certainly not enough to assure good results — see Xerox, Avon, Merck and the rest of the “nifty fifty” in 1974.</p>\n<p>一个投资本身没有好坏之分。例如，选出了好公司，保证不了一定能赚钱，例如，1974 年“漂亮五十”中的施乐、雅芳、默克等公司。</p>\n<p>Any investment can be good or bad depending on when it’s made and what price is paid. It’s been said that “any bond can be triple-A at a price.”</p>\n<p>任何一项投资都可能是好，也可能是坏，具体要看投资的时机和买入的价格。有句话说得精辟，“只要价格合适，什么债券都是 AAA。”</p>\n<p>There is no security that is so good that it can’t be overpriced, or so bad that it can’t be underpriced.</p>\n<p>没什么证券好到多少钱都不贵，也没什么证券坏到多少钱都不便宜。</p>\n<h3 id=\"3-The-discipline-which-is-most-important-in-investing-is-not-accounting-or-economics-but-psychology\"><a href=\"#3-The-discipline-which-is-most-important-in-investing-is-not-accounting-or-economics-but-psychology\" class=\"headerlink\" title=\"3. The discipline which is most important in investing is not accounting or economics, but psychology.\"></a>3. <strong>The discipline which is most important in investing is not accounting or economics, but psychology.</strong></h3><h3 id=\"3-对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\"><a href=\"#3-对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\" class=\"headerlink\" title=\"3. 对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。\"></a>3. 对投资者而言，最重要的学科不是会计、也不是经济学，而是心理学。</h3><p>The key is who likes the investment now and who doesn’t. Future prices changes will be determined by whether it comes to be liked by more people or fewer people in the future.</p>\n<p>关键是现在看好这个投资的是谁，不看好这个投资的是谁。一个东西将来的价格变化，取决于将来喜欢这个东西的人是多了，还是少了。</p>\n<p>Investing is a popularity contest, and the most dangerous thing is to buy something at the peak of its popularity. At that point, all favorable facts and opinions are already factored into its price, and no new buyers are left to emerge.</p>\n<p>投资是一场追逐流行的竞赛，最危险的是在一个东西最流行的时候买入。这时候，所有有利的事实和观点都反映到了价格里，该买的人都买了。</p>\n<p>The safest and most potentially profitable thing is to buy something when no one likes it. Given time its popularity, and thus its price, can only go one way: up.</p>\n<p>最安全、获利潜力最大的投资，是在没人喜欢的时候买进。假以时日，一旦证券受到欢迎，那么它的价格只可能向一个方向变化：上涨。</p>\n<p>Watch which asset classes they’re holding conferences for and how many people are attending. Sold-out conferences are a danger sign. You want to participate in auctions where there are only one or two buyers, not hundreds or thousands.</p>\n<p>要关注人们在开会讨论哪些资产类别，有多少人参加。要是会议座无虚席，这就是危险的信号。作为一个投资者，你最好参与只有一两个买家的竞拍，而不是和成百上千人争抢。</p>\n<p>You want to buy things either before they’ve been discovered or after there’s been a shake-out.</p>\n<p>你最好在一个东西被发现之前或在萧条发生之后买入。</p>\n<h3 id=\"4-The-bottom-line-is-that-it-is-best-to-act-as-a-contrarian\"><a href=\"#4-The-bottom-line-is-that-it-is-best-to-act-as-a-contrarian\" class=\"headerlink\" title=\"4. The bottom line is that it is best to act as a contrarian.\"></a>4. <strong>The bottom line is that it is best to act as a contrarian.</strong></h3><h3 id=\"4-关键是最好做一个逆向投资者。\"><a href=\"#4-关键是最好做一个逆向投资者。\" class=\"headerlink\" title=\"4. 关键是最好做一个逆向投资者。\"></a>4. 关键是最好做一个逆向投资者。</h3><p>An investment that “everyone” knows to be undervalued is an oxymoron. If everyone knows it’s undervalued, why haven’t they bought it and driven up its price? And if they have bought, how can the price still be low?</p>\n<p>“一笔投资，谁都知道是低估。”这是自相矛盾的说法。既然所有人都知道低估了，为什么他们没买入，没把价格抬高？要是所有人都买了，价格怎么可能还低？</p>\n<p>Yogi Berra said, “nobody goes to that restaurant; it’s too popular.” The equally oxy-moronic investment version is “Everybody likes that security because it’s so cheap.”</p>\n<p>Yogi Berra 说过：“那家饭店没人去了，因为太挤了。”在投资上有一句同样自相矛盾的话：“所有人都喜欢这只证券，因为它很便宜”。</p>\n<h3 id=\"5-Book-the-bet-that-no-one-else-will\"><a href=\"#5-Book-the-bet-that-no-one-else-will\" class=\"headerlink\" title=\"5. Book the bet that no one else will.\"></a>5. <strong>Book the bet that no one else will.</strong></h3><h3 id=\"5-投别人不投的注。\"><a href=\"#5-投别人不投的注。\" class=\"headerlink\" title=\"5. 投别人不投的注。\"></a>5. 投别人不投的注。</h3><p>If everyone likes the favorite in a football game and wants to bet on it, the point spread will grow so wide that the team – as good as it is — is unlikely to be able to cover the spread. Take the other side of the bet — on the underdog.</p>\n<p>在足彩中，所有人都看好一只球队，都希望押这只球队取胜，让分就会让得很多。押注另一只球队——押不被看好的球队。</p>\n<p>Likewise, if everyone is too scared of junk bonds to buy them, it will become possible for you to buy them at a yield spread which not only overcompensates for the actual credit risk, but sets the stage for their being the best performing fixed income sector in the world. That was the case in late 1990.</p>\n<p>同样，要是所有人都对垃圾债券避之唯恐不及，你的机会可能就来了。你买入的收益率，不但可能足以弥补实际的信用风险，而且还可能成为表现最好的固收品种。1990 年下半年就是这样。</p>\n<p>The bottom line is that one must try to be on the other side of the question from everyone else. If everyone likes it, sell; if no one likes it, buy.</p>\n<p>关键是要有虽千万人吾往矣的勇气。众人都看好，卖出；众人都看淡，买入。</p>\n<h3 id=\"6-As-Warren-Buffet-said-“the-less-care-with-which-others-conduct-their-affairs-the-more-care-with-which-you-should-conduct-yours-”-When-others-are-afraid-you-needn’t-be-when-others-are-unafraid-you’d-better-be\"><a href=\"#6-As-Warren-Buffet-said-“the-less-care-with-which-others-conduct-their-affairs-the-more-care-with-which-you-should-conduct-yours-”-When-others-are-afraid-you-needn’t-be-when-others-are-unafraid-you’d-better-be\" class=\"headerlink\" title=\"6. As Warren Buffet said, “the less care with which others conduct their affairs, the more care with which you should conduct yours.” When others are afraid, you needn’t be; when others are unafraid, you’d better be.\"></a>6. <strong>As Warren Buffet said, “the less care with which others conduct their affairs, the more care with which you should conduct yours.” When others are afraid, you needn’t be; when others are unafraid, you’d better be.</strong></h3><h3 id=\"6-正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\"><a href=\"#6-正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\" class=\"headerlink\" title=\"6. 正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。\"></a>6. 正如沃伦·巴菲特所说：“别人越是不小心谨慎，我们自己越要小心谨慎。”当别人害怕时，你不必害怕；当别人不害怕时，你一定要害怕。</h3><p>It is usually said that the market runs on fear and greed. I feel at any given point in time it runs on fear or greed.</p>\n<p>人们常说市场的运行被恐惧和贪婪左右。我觉得，在任何时候，市场要么被贪婪左右，要么被恐惧左右。</p>\n<p>As 1991 began, everyone was petrified of high yield bonds. Only the very best bonds could be issued, and thus buyers at that time didn’t have to do any credit analysis — the market did it for them. Its collective fear caused high standards to be imposed. But when investors are unafraid, they’ll buy anything. Thus the intelligent investor’s workload is much increased.</p>\n<p>进入 1991 年，所有人都被高收益债券吓傻了，只有质量最上乘的债券能发行出去。当时买入的人根本不必进行信用分析，市场已经帮他们做了。由于参与者的整体恐惧，市场采取了严格的标准。当投资者不害怕时，他们什么都敢买。这时候，作为理智的投资者，工作量就要大多了。</p>\n<h3 id=\"7-Gresham’s-Law-says-’’bad-money-drives-out-good-”-When-paper-money-appeared-gold-disappeared-It-works-in-investing-too-bad-investors-drive-out-good\"><a href=\"#7-Gresham’s-Law-says-’’bad-money-drives-out-good-”-When-paper-money-appeared-gold-disappeared-It-works-in-investing-too-bad-investors-drive-out-good\" class=\"headerlink\" title=\"7. Gresham’s Law says ’’bad money drives out good.” When paper money appeared, gold disappeared. It works in investing too: bad investors drive out good.\"></a>7. <strong>Gresham’s Law says ’’bad money drives out good.” When paper money appeared, gold disappeared. It works in investing too: bad investors drive out good.</strong></h3><h3 id=\"7-格雷欣法则-Gresham’s-Law-认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\"><a href=\"#7-格雷欣法则-Gresham’s-Law-认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\" class=\"headerlink\" title=\"7. 格雷欣法则 (Gresham’s Law) 认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。\"></a>7. 格雷欣法则 (Gresham’s Law) 认为“劣币驱逐良币”。纸币出现，金币消失。这个法则同样适用于投资领域：劣等投资者驱逐优秀投资者。</h3><p>When undemanding investors appear, they’ll buy anything. Underwriting standards fall, and it gets hard for demanding investors to find opportunities offering the return and risk balance they require, so they’re forced to the sidelines.</p>\n<p>当毫无顾忌的投资者出现时，他们什么都敢买。承销标准下降，要求严格的投资者按照自己的标准很难找到收益和风险平衡的机会，他们只能靠边站。</p>\n<p>Demanding investors must be willing to be inactive at times.</p>\n<p>有些时候，要求严格的投资者必须甘愿无为。</p>\n<p>January 24, 1994</p>\n<p>一九九四年一月二十四日</p>\n"},{"title":"读 【复旦大学】重读资本论（全28讲）王德峰","_content":"\n读 【复旦大学】重读资本论（全28讲）王德峰\n\nhttps://www.bilibili.com/video/BV1Tf4y1j7Pq?spm_id_from=333.999.0.0\n\n物理事实-->社会事实（通过范畴）\n\n列入：通奸的概念。\n\n资本雇佣劳动关系：事实（资本、工资、商品）\n\n师傅和学徒的关系：半人生依附关系\n\n等价交换：（价值 范畴）\n\n一切看上去似乎买卖双方是平等关系（逻辑上）\n\n资本（过去积累的劳动）没有资本只能通过出卖自己的活劳动\n\n积累的劳动：直接的生活消费品、生产消费品\n\n价值的增值--目前的社会价值（丰收不丰产）\n\n（还原的本质）生产资料行使对活劳动的支配权\n\n社会权力（social power）支配别人的权力\n\n资本->理性研究经济学    ->权力 当代社会权力\n\n经济学家说是按照理性发展的，但是对于社会权力而言这本质上是非理性的\n\n世界上没有什么比消灭自己的敌人更实际的事了\n\n\n\n马克思学说资本论告诉我们：这是一场斗争\n\n马克思讲斗争：消灭人与人的不平等\n\n现在的经济是穷人给富人打工的经济\n\n资本发展的过程就是人与人不平等的扩大（不是政治层面的）\n\n资本制造贫困：不是等级压迫的结果，这一切看上去都是平等的条件下\n\n反全球化：金融资本使得有钱更有钱不断制造社会分裂\n\n资本增值才是现代的财富财富增长的同时非理性的人与人之间的权力斗争\n\n国家权力维护社会权力（social power）（保护这种私人的财产）\n\n货币积累到一定量自动拥有力量，雇佣别人，和个人都愿意被雇佣的力量\n\n资本不以人的意识为转移，类似于地球的-重力\n\n根本就没有解放思想就进入了ggkf\n\n货币-商品交换-趋势人做事情（在计划经济中发挥作用）一定追求利润这一切不可避免\n\n马克思研究的就是非理性的（人）\n\n商品交换：1使用价值。2.价值\n\n两个商品产生的使用价值是完全不同的两个物体\n\n作为商品交换(将劳动抽象化-劳动时间)\n\n使用价值-具体劳动\n\n交换价值-抽象劳动\n\n两者为同一个劳动\n\n商品：w。货币：G\n\n商品经济：w-g-w（这时候货币只是商品的流通手段）使用价值为主导（丰收等于丰产）\n\n商品经济是社会分工造成的\n\n*****    G`>G(剩余价值)\n\n社会生产目的的改变，流通手段的货币成为主体的存在（人是地球上唯一需要货币才能存活的动物了）古代商人将货币转换成田产\n\n动产战胜不动产（货币战胜土地）\n\n自由到一无所有的劳动者（只能出卖自己的劳动）\n\n商人本是商品流通者（告诉行会手工者哪里需要多少量为市场而生产）\n\n手艺者投入商人的怀抱（出现了劳动力）\n\n资本靠增值存活\n\n消费领域和资本未站立的空间=>资本最后增值的空间\n\n货币和自由劳动力=>货币增值\n\n贵族出卖土地\n\n资本的原始积累是土地服从资本运动\n\n工业化的前提是有大部分劳动力（剥夺农民的土地所有权合作社）价格剪刀差来剥夺农民\n\n后发的国家必定要走的路（拥有完整的工业化能力）\n\n工业化浪潮来了让政治从经济中脱离出来\n\n土地不在成为唯一的劳动（凡是使货币增值的劳动都是劳动）\n\n劳动价值理论：价值是☞商品的交换价值  ｜｜ 劳动：一般劳动（通过货币）\n\n你借出去的钱最后也会通过实业实现货币增值\n\n货币是建立起来的过去的劳动（世界工厂的到外汇）\n\n创造出来具有使用价值的东西如果没有成为交换价值的增值你所付出的劳动不能称为劳动--具体劳动收抽象劳动的支配\n\n劳动价值理论中的价值：是抽象劳动的交换价值，是交换价值的增值\n\n\n\n资本就是可以增值的货币\n\n劳动创造剩余价值卖出去就行\n\n现在同时保持本国的粮食安全（薄记学），还有货币资本权\n\n粮食安全问题优先保护本国能源也一样，保护自己的土地和能源供给，不被外国所影响\n\n用电的同时别忘记抽屉里的蜡烛\n\n货币贬值，如何保证钱跑赢通货膨胀（目前是温文尔雅的让你家里的钱快速贬值）\n\n资本让你过去的劳动价值严重贬值\n\n交换价值的增值支配使用价值的生产\n\n生产相对过剩到金融危机\n\n金银并非天然是货币，但货币天然是金银\n\n剩余价值来源于一般劳动\n\nG:生产资料和劳动力（实物）+工资（劳动时间（八小时））\n\n新产品的价格=工资+设备折旧+机器磨损\n\n资本家是资本的逻辑化\n\n必要劳动+剩余劳动=劳动\n\n工资只是你的必要劳动所创造的价值\n\n市场竞争：卖的东西便宜（延长劳动时间、减少必要劳动时间（提高劳动效率=技术+劳动的熟练程度））\n\n绝对剩余价值（放弃）\n\n相对剩余价值（目前主要增加这个）\n\n技艺：对自然界另一种看法（天人合一）\n\n技术：另一种自然观，把自然界抽象化变成资料界\n\n杀死技艺全部转化为技术\n\n将人也抽象化，中国没有这种土壤\n\n拿机器做生产力是资本的要求（生产工具没变，生产关系的到改变）机器代替人的手艺\n\n四大发明都没发展成生产力\n\n有资本主义生产关系发明才能成为生产力\n\n技术和资本是孪生兄弟（延长相对劳动时间（提高技术））\n\n技术要你快速（抹杀了人的人文气息）谈恋爱也是那种快餐式的\n\n劳动价值来源于剩余劳动\n\n（相对剩余价值是资本的生命线）\n\n技术的有利也是不可忽视\n\n农业和医疗和音乐\n\n必要劳动是劳动力商品的交换价值及是工资的界限\n\n技术提高：总的劳动时间不变：必要劳动时间减少和剩余劳动时间增加\n\n面对这个问题资本家会裁掉工人，必要劳动时间规定工资是限定的\n\n产品生产的更多，企业家希望工资不变，出去后希望员工加大力气购买力（资本主义世界无法克服的悖论）\n\n提供二次分配（国家政治的调节）\n\n三座大山捂紧口袋过日子\n\n生产相对过剩和人的购买能力的不足转移到第三世界\n\n剩余价值是剩余劳动和生产力发展的界限\n\n剩余劳动使得有的人解放出来（由奴隶生产出来）\n\n剩余劳动（积累起来的劳动物化为使用价值）粮食五谷多（在仓库里的东西）\n\n在资本眼里在仓库的粮食他就不是剩余价值（剩余劳动没有转化为剩余价值-----的增值）\n\n然后毁掉粮食，从新获得市场需要（1.自然灾害。2.个人行为（倒牛奶--毁掉剩余劳动））\n\n这一切都是为了剩余价值增值而服务\n\n资本主义带来的生产劳动的积累是过去时代都没有的\n\n如果实现不了价值增值就会破坏生产力（悖论）\n\n发展生产力的同时破坏生产力\n\n她不发展生产力，相对剩余价值的生产力的生产不可能。\n\n于是要考虑相对生产过剩\n\n产业链就是基金链-爆发全球的经济危机\n\n一国有难多国遭殃\n\n货币是生产的界限\n\n超发货币\n\n国家投资创造需求\n\n金融资本主义是资本主义的最高形态\n\n\n\n资本主义生产的四个内在界限：\n\n“资本之所以表现为商品，是因为资本被提供到市场上来，货币的使用价值实际上所谓资本被让渡。它的使用价值是：生产利润”\n\n“资本之所以表现为商品，是因为利润分割为利息和本来意义上的利润是由供求，从而由竞争来调节的，这完全和商品的市场价格由它们来调节的一样。工资也是这样。如果供求平衡，供求的作用就会相互抵消，工资就等于劳动力的价值”\n\n\n\n\n货币也可以作为商品，钱投资给别人回报少数投资\n\n价格在价值周围波动\n\n资本本身被买卖（资本被当作商品其中也会有利益的产生：股市（利息（价格）：这个与价值归于、规律不同不围绕一条价值线））\n\n它只有价格没有价值（货币供应量（脱离金本位））\n\n资本主义不行社会主义就来，金融危机来了就走集体合作化\n\n使用价值收到交换价值的影响（利润太少）\n\n保存及的成果不能用资本的方式保存（资本会自己摧毁它所创造的成果）\n\n----------------------------------------------------------分割线--------------------------------------------------------------\n\n\n\n\n人与人的斗争，物质生活关系是非理性的\n\n私有财产的冲突\n\n私有财产：抽象的人格\n\n\n死后的遗嘱，人格独立于人本身\n\n私有财产权力来自与人格、\n\n通过中间的意识形态\n\n封建主义生产关系的核心范式是地租\n\n资本主义生产关系的核心范式是剩余价值\n\n\n生活决定意识\n\n实践是认识的源泉和基础\n\n实践是主观建设与客观的活动\n\n 本质就是过去的存在\n\n本质就是消失的存在\n\n异化劳动：劳动越多受到的支配越多，否定自己的劳动\n\n\n\n关于自然的科学和人的科学将统一\n\n因为人是非理性的所以人与人之间一定会是有冲突\n\n爱情也是符合辩证法发展到极致必将走向反面\n\n（爱情转换为亲情（恩爱））\n\n发展不是否定前期，是同时包含前者 \n\n\n\n作者：白烨艾特 https://www.bilibili.com/read/cv13721309?from=note 出处：bilibili","source":"_posts/资本论_王德峰.md","raw":"---\ntitle: 读 【复旦大学】重读资本论（全28讲）王德峰\n---\n\n读 【复旦大学】重读资本论（全28讲）王德峰\n\nhttps://www.bilibili.com/video/BV1Tf4y1j7Pq?spm_id_from=333.999.0.0\n\n物理事实-->社会事实（通过范畴）\n\n列入：通奸的概念。\n\n资本雇佣劳动关系：事实（资本、工资、商品）\n\n师傅和学徒的关系：半人生依附关系\n\n等价交换：（价值 范畴）\n\n一切看上去似乎买卖双方是平等关系（逻辑上）\n\n资本（过去积累的劳动）没有资本只能通过出卖自己的活劳动\n\n积累的劳动：直接的生活消费品、生产消费品\n\n价值的增值--目前的社会价值（丰收不丰产）\n\n（还原的本质）生产资料行使对活劳动的支配权\n\n社会权力（social power）支配别人的权力\n\n资本->理性研究经济学    ->权力 当代社会权力\n\n经济学家说是按照理性发展的，但是对于社会权力而言这本质上是非理性的\n\n世界上没有什么比消灭自己的敌人更实际的事了\n\n\n\n马克思学说资本论告诉我们：这是一场斗争\n\n马克思讲斗争：消灭人与人的不平等\n\n现在的经济是穷人给富人打工的经济\n\n资本发展的过程就是人与人不平等的扩大（不是政治层面的）\n\n资本制造贫困：不是等级压迫的结果，这一切看上去都是平等的条件下\n\n反全球化：金融资本使得有钱更有钱不断制造社会分裂\n\n资本增值才是现代的财富财富增长的同时非理性的人与人之间的权力斗争\n\n国家权力维护社会权力（social power）（保护这种私人的财产）\n\n货币积累到一定量自动拥有力量，雇佣别人，和个人都愿意被雇佣的力量\n\n资本不以人的意识为转移，类似于地球的-重力\n\n根本就没有解放思想就进入了ggkf\n\n货币-商品交换-趋势人做事情（在计划经济中发挥作用）一定追求利润这一切不可避免\n\n马克思研究的就是非理性的（人）\n\n商品交换：1使用价值。2.价值\n\n两个商品产生的使用价值是完全不同的两个物体\n\n作为商品交换(将劳动抽象化-劳动时间)\n\n使用价值-具体劳动\n\n交换价值-抽象劳动\n\n两者为同一个劳动\n\n商品：w。货币：G\n\n商品经济：w-g-w（这时候货币只是商品的流通手段）使用价值为主导（丰收等于丰产）\n\n商品经济是社会分工造成的\n\n*****    G`>G(剩余价值)\n\n社会生产目的的改变，流通手段的货币成为主体的存在（人是地球上唯一需要货币才能存活的动物了）古代商人将货币转换成田产\n\n动产战胜不动产（货币战胜土地）\n\n自由到一无所有的劳动者（只能出卖自己的劳动）\n\n商人本是商品流通者（告诉行会手工者哪里需要多少量为市场而生产）\n\n手艺者投入商人的怀抱（出现了劳动力）\n\n资本靠增值存活\n\n消费领域和资本未站立的空间=>资本最后增值的空间\n\n货币和自由劳动力=>货币增值\n\n贵族出卖土地\n\n资本的原始积累是土地服从资本运动\n\n工业化的前提是有大部分劳动力（剥夺农民的土地所有权合作社）价格剪刀差来剥夺农民\n\n后发的国家必定要走的路（拥有完整的工业化能力）\n\n工业化浪潮来了让政治从经济中脱离出来\n\n土地不在成为唯一的劳动（凡是使货币增值的劳动都是劳动）\n\n劳动价值理论：价值是☞商品的交换价值  ｜｜ 劳动：一般劳动（通过货币）\n\n你借出去的钱最后也会通过实业实现货币增值\n\n货币是建立起来的过去的劳动（世界工厂的到外汇）\n\n创造出来具有使用价值的东西如果没有成为交换价值的增值你所付出的劳动不能称为劳动--具体劳动收抽象劳动的支配\n\n劳动价值理论中的价值：是抽象劳动的交换价值，是交换价值的增值\n\n\n\n资本就是可以增值的货币\n\n劳动创造剩余价值卖出去就行\n\n现在同时保持本国的粮食安全（薄记学），还有货币资本权\n\n粮食安全问题优先保护本国能源也一样，保护自己的土地和能源供给，不被外国所影响\n\n用电的同时别忘记抽屉里的蜡烛\n\n货币贬值，如何保证钱跑赢通货膨胀（目前是温文尔雅的让你家里的钱快速贬值）\n\n资本让你过去的劳动价值严重贬值\n\n交换价值的增值支配使用价值的生产\n\n生产相对过剩到金融危机\n\n金银并非天然是货币，但货币天然是金银\n\n剩余价值来源于一般劳动\n\nG:生产资料和劳动力（实物）+工资（劳动时间（八小时））\n\n新产品的价格=工资+设备折旧+机器磨损\n\n资本家是资本的逻辑化\n\n必要劳动+剩余劳动=劳动\n\n工资只是你的必要劳动所创造的价值\n\n市场竞争：卖的东西便宜（延长劳动时间、减少必要劳动时间（提高劳动效率=技术+劳动的熟练程度））\n\n绝对剩余价值（放弃）\n\n相对剩余价值（目前主要增加这个）\n\n技艺：对自然界另一种看法（天人合一）\n\n技术：另一种自然观，把自然界抽象化变成资料界\n\n杀死技艺全部转化为技术\n\n将人也抽象化，中国没有这种土壤\n\n拿机器做生产力是资本的要求（生产工具没变，生产关系的到改变）机器代替人的手艺\n\n四大发明都没发展成生产力\n\n有资本主义生产关系发明才能成为生产力\n\n技术和资本是孪生兄弟（延长相对劳动时间（提高技术））\n\n技术要你快速（抹杀了人的人文气息）谈恋爱也是那种快餐式的\n\n劳动价值来源于剩余劳动\n\n（相对剩余价值是资本的生命线）\n\n技术的有利也是不可忽视\n\n农业和医疗和音乐\n\n必要劳动是劳动力商品的交换价值及是工资的界限\n\n技术提高：总的劳动时间不变：必要劳动时间减少和剩余劳动时间增加\n\n面对这个问题资本家会裁掉工人，必要劳动时间规定工资是限定的\n\n产品生产的更多，企业家希望工资不变，出去后希望员工加大力气购买力（资本主义世界无法克服的悖论）\n\n提供二次分配（国家政治的调节）\n\n三座大山捂紧口袋过日子\n\n生产相对过剩和人的购买能力的不足转移到第三世界\n\n剩余价值是剩余劳动和生产力发展的界限\n\n剩余劳动使得有的人解放出来（由奴隶生产出来）\n\n剩余劳动（积累起来的劳动物化为使用价值）粮食五谷多（在仓库里的东西）\n\n在资本眼里在仓库的粮食他就不是剩余价值（剩余劳动没有转化为剩余价值-----的增值）\n\n然后毁掉粮食，从新获得市场需要（1.自然灾害。2.个人行为（倒牛奶--毁掉剩余劳动））\n\n这一切都是为了剩余价值增值而服务\n\n资本主义带来的生产劳动的积累是过去时代都没有的\n\n如果实现不了价值增值就会破坏生产力（悖论）\n\n发展生产力的同时破坏生产力\n\n她不发展生产力，相对剩余价值的生产力的生产不可能。\n\n于是要考虑相对生产过剩\n\n产业链就是基金链-爆发全球的经济危机\n\n一国有难多国遭殃\n\n货币是生产的界限\n\n超发货币\n\n国家投资创造需求\n\n金融资本主义是资本主义的最高形态\n\n\n\n资本主义生产的四个内在界限：\n\n“资本之所以表现为商品，是因为资本被提供到市场上来，货币的使用价值实际上所谓资本被让渡。它的使用价值是：生产利润”\n\n“资本之所以表现为商品，是因为利润分割为利息和本来意义上的利润是由供求，从而由竞争来调节的，这完全和商品的市场价格由它们来调节的一样。工资也是这样。如果供求平衡，供求的作用就会相互抵消，工资就等于劳动力的价值”\n\n\n\n\n货币也可以作为商品，钱投资给别人回报少数投资\n\n价格在价值周围波动\n\n资本本身被买卖（资本被当作商品其中也会有利益的产生：股市（利息（价格）：这个与价值归于、规律不同不围绕一条价值线））\n\n它只有价格没有价值（货币供应量（脱离金本位））\n\n资本主义不行社会主义就来，金融危机来了就走集体合作化\n\n使用价值收到交换价值的影响（利润太少）\n\n保存及的成果不能用资本的方式保存（资本会自己摧毁它所创造的成果）\n\n----------------------------------------------------------分割线--------------------------------------------------------------\n\n\n\n\n人与人的斗争，物质生活关系是非理性的\n\n私有财产的冲突\n\n私有财产：抽象的人格\n\n\n死后的遗嘱，人格独立于人本身\n\n私有财产权力来自与人格、\n\n通过中间的意识形态\n\n封建主义生产关系的核心范式是地租\n\n资本主义生产关系的核心范式是剩余价值\n\n\n生活决定意识\n\n实践是认识的源泉和基础\n\n实践是主观建设与客观的活动\n\n 本质就是过去的存在\n\n本质就是消失的存在\n\n异化劳动：劳动越多受到的支配越多，否定自己的劳动\n\n\n\n关于自然的科学和人的科学将统一\n\n因为人是非理性的所以人与人之间一定会是有冲突\n\n爱情也是符合辩证法发展到极致必将走向反面\n\n（爱情转换为亲情（恩爱））\n\n发展不是否定前期，是同时包含前者 \n\n\n\n作者：白烨艾特 https://www.bilibili.com/read/cv13721309?from=note 出处：bilibili","slug":"资本论_王德峰","published":1,"date":"2021-12-25T12:09:07.736Z","updated":"2022-04-12T09:56:45.017Z","_id":"cl1vyonvq0005k60mdf1m32ll","comments":1,"layout":"post","photos":[],"link":"","content":"<p>读 【复旦大学】重读资本论（全28讲）王德峰</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Tf4y1j7Pq?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1Tf4y1j7Pq?spm_id_from=333.999.0.0</a></p>\n<p>物理事实–&gt;社会事实（通过范畴）</p>\n<p>列入：通奸的概念。</p>\n<p>资本雇佣劳动关系：事实（资本、工资、商品）</p>\n<p>师傅和学徒的关系：半人生依附关系</p>\n<p>等价交换：（价值 范畴）</p>\n<p>一切看上去似乎买卖双方是平等关系（逻辑上）</p>\n<p>资本（过去积累的劳动）没有资本只能通过出卖自己的活劳动</p>\n<p>积累的劳动：直接的生活消费品、生产消费品</p>\n<p>价值的增值–目前的社会价值（丰收不丰产）</p>\n<p>（还原的本质）生产资料行使对活劳动的支配权</p>\n<p>社会权力（social power）支配别人的权力</p>\n<p>资本-&gt;理性研究经济学    -&gt;权力 当代社会权力</p>\n<p>经济学家说是按照理性发展的，但是对于社会权力而言这本质上是非理性的</p>\n<p>世界上没有什么比消灭自己的敌人更实际的事了</p>\n<p>马克思学说资本论告诉我们：这是一场斗争</p>\n<p>马克思讲斗争：消灭人与人的不平等</p>\n<p>现在的经济是穷人给富人打工的经济</p>\n<p>资本发展的过程就是人与人不平等的扩大（不是政治层面的）</p>\n<p>资本制造贫困：不是等级压迫的结果，这一切看上去都是平等的条件下</p>\n<p>反全球化：金融资本使得有钱更有钱不断制造社会分裂</p>\n<p>资本增值才是现代的财富财富增长的同时非理性的人与人之间的权力斗争</p>\n<p>国家权力维护社会权力（social power）（保护这种私人的财产）</p>\n<p>货币积累到一定量自动拥有力量，雇佣别人，和个人都愿意被雇佣的力量</p>\n<p>资本不以人的意识为转移，类似于地球的-重力</p>\n<p>根本就没有解放思想就进入了ggkf</p>\n<p>货币-商品交换-趋势人做事情（在计划经济中发挥作用）一定追求利润这一切不可避免</p>\n<p>马克思研究的就是非理性的（人）</p>\n<p>商品交换：1使用价值。2.价值</p>\n<p>两个商品产生的使用价值是完全不同的两个物体</p>\n<p>作为商品交换(将劳动抽象化-劳动时间)</p>\n<p>使用价值-具体劳动</p>\n<p>交换价值-抽象劳动</p>\n<p>两者为同一个劳动</p>\n<p>商品：w。货币：G</p>\n<p>商品经济：w-g-w（这时候货币只是商品的流通手段）使用价值为主导（丰收等于丰产）</p>\n<p>商品经济是社会分工造成的</p>\n<p>*****    G`&gt;G(剩余价值)</p>\n<p>社会生产目的的改变，流通手段的货币成为主体的存在（人是地球上唯一需要货币才能存活的动物了）古代商人将货币转换成田产</p>\n<p>动产战胜不动产（货币战胜土地）</p>\n<p>自由到一无所有的劳动者（只能出卖自己的劳动）</p>\n<p>商人本是商品流通者（告诉行会手工者哪里需要多少量为市场而生产）</p>\n<p>手艺者投入商人的怀抱（出现了劳动力）</p>\n<p>资本靠增值存活</p>\n<p>消费领域和资本未站立的空间=&gt;资本最后增值的空间</p>\n<p>货币和自由劳动力=&gt;货币增值</p>\n<p>贵族出卖土地</p>\n<p>资本的原始积累是土地服从资本运动</p>\n<p>工业化的前提是有大部分劳动力（剥夺农民的土地所有权合作社）价格剪刀差来剥夺农民</p>\n<p>后发的国家必定要走的路（拥有完整的工业化能力）</p>\n<p>工业化浪潮来了让政治从经济中脱离出来</p>\n<p>土地不在成为唯一的劳动（凡是使货币增值的劳动都是劳动）</p>\n<p>劳动价值理论：价值是☞商品的交换价值  ｜｜ 劳动：一般劳动（通过货币）</p>\n<p>你借出去的钱最后也会通过实业实现货币增值</p>\n<p>货币是建立起来的过去的劳动（世界工厂的到外汇）</p>\n<p>创造出来具有使用价值的东西如果没有成为交换价值的增值你所付出的劳动不能称为劳动–具体劳动收抽象劳动的支配</p>\n<p>劳动价值理论中的价值：是抽象劳动的交换价值，是交换价值的增值</p>\n<p>资本就是可以增值的货币</p>\n<p>劳动创造剩余价值卖出去就行</p>\n<p>现在同时保持本国的粮食安全（薄记学），还有货币资本权</p>\n<p>粮食安全问题优先保护本国能源也一样，保护自己的土地和能源供给，不被外国所影响</p>\n<p>用电的同时别忘记抽屉里的蜡烛</p>\n<p>货币贬值，如何保证钱跑赢通货膨胀（目前是温文尔雅的让你家里的钱快速贬值）</p>\n<p>资本让你过去的劳动价值严重贬值</p>\n<p>交换价值的增值支配使用价值的生产</p>\n<p>生产相对过剩到金融危机</p>\n<p>金银并非天然是货币，但货币天然是金银</p>\n<p>剩余价值来源于一般劳动</p>\n<p>G:生产资料和劳动力（实物）+工资（劳动时间（八小时））</p>\n<p>新产品的价格=工资+设备折旧+机器磨损</p>\n<p>资本家是资本的逻辑化</p>\n<p>必要劳动+剩余劳动=劳动</p>\n<p>工资只是你的必要劳动所创造的价值</p>\n<p>市场竞争：卖的东西便宜（延长劳动时间、减少必要劳动时间（提高劳动效率=技术+劳动的熟练程度））</p>\n<p>绝对剩余价值（放弃）</p>\n<p>相对剩余价值（目前主要增加这个）</p>\n<p>技艺：对自然界另一种看法（天人合一）</p>\n<p>技术：另一种自然观，把自然界抽象化变成资料界</p>\n<p>杀死技艺全部转化为技术</p>\n<p>将人也抽象化，中国没有这种土壤</p>\n<p>拿机器做生产力是资本的要求（生产工具没变，生产关系的到改变）机器代替人的手艺</p>\n<p>四大发明都没发展成生产力</p>\n<p>有资本主义生产关系发明才能成为生产力</p>\n<p>技术和资本是孪生兄弟（延长相对劳动时间（提高技术））</p>\n<p>技术要你快速（抹杀了人的人文气息）谈恋爱也是那种快餐式的</p>\n<p>劳动价值来源于剩余劳动</p>\n<p>（相对剩余价值是资本的生命线）</p>\n<p>技术的有利也是不可忽视</p>\n<p>农业和医疗和音乐</p>\n<p>必要劳动是劳动力商品的交换价值及是工资的界限</p>\n<p>技术提高：总的劳动时间不变：必要劳动时间减少和剩余劳动时间增加</p>\n<p>面对这个问题资本家会裁掉工人，必要劳动时间规定工资是限定的</p>\n<p>产品生产的更多，企业家希望工资不变，出去后希望员工加大力气购买力（资本主义世界无法克服的悖论）</p>\n<p>提供二次分配（国家政治的调节）</p>\n<p>三座大山捂紧口袋过日子</p>\n<p>生产相对过剩和人的购买能力的不足转移到第三世界</p>\n<p>剩余价值是剩余劳动和生产力发展的界限</p>\n<p>剩余劳动使得有的人解放出来（由奴隶生产出来）</p>\n<p>剩余劳动（积累起来的劳动物化为使用价值）粮食五谷多（在仓库里的东西）</p>\n<p>在资本眼里在仓库的粮食他就不是剩余价值（剩余劳动没有转化为剩余价值—–的增值）</p>\n<p>然后毁掉粮食，从新获得市场需要（1.自然灾害。2.个人行为（倒牛奶–毁掉剩余劳动））</p>\n<p>这一切都是为了剩余价值增值而服务</p>\n<p>资本主义带来的生产劳动的积累是过去时代都没有的</p>\n<p>如果实现不了价值增值就会破坏生产力（悖论）</p>\n<p>发展生产力的同时破坏生产力</p>\n<p>她不发展生产力，相对剩余价值的生产力的生产不可能。</p>\n<p>于是要考虑相对生产过剩</p>\n<p>产业链就是基金链-爆发全球的经济危机</p>\n<p>一国有难多国遭殃</p>\n<p>货币是生产的界限</p>\n<p>超发货币</p>\n<p>国家投资创造需求</p>\n<p>金融资本主义是资本主义的最高形态</p>\n<p>资本主义生产的四个内在界限：</p>\n<p>“资本之所以表现为商品，是因为资本被提供到市场上来，货币的使用价值实际上所谓资本被让渡。它的使用价值是：生产利润”</p>\n<p>“资本之所以表现为商品，是因为利润分割为利息和本来意义上的利润是由供求，从而由竞争来调节的，这完全和商品的市场价格由它们来调节的一样。工资也是这样。如果供求平衡，供求的作用就会相互抵消，工资就等于劳动力的价值”</p>\n<p>货币也可以作为商品，钱投资给别人回报少数投资</p>\n<p>价格在价值周围波动</p>\n<p>资本本身被买卖（资本被当作商品其中也会有利益的产生：股市（利息（价格）：这个与价值归于、规律不同不围绕一条价值线））</p>\n<p>它只有价格没有价值（货币供应量（脱离金本位））</p>\n<p>资本主义不行社会主义就来，金融危机来了就走集体合作化</p>\n<p>使用价值收到交换价值的影响（利润太少）</p>\n<p>保存及的成果不能用资本的方式保存（资本会自己摧毁它所创造的成果）</p>\n<p>———————————————————-分割线————————————————————–</p>\n<p>人与人的斗争，物质生活关系是非理性的</p>\n<p>私有财产的冲突</p>\n<p>私有财产：抽象的人格</p>\n<p>死后的遗嘱，人格独立于人本身</p>\n<p>私有财产权力来自与人格、</p>\n<p>通过中间的意识形态</p>\n<p>封建主义生产关系的核心范式是地租</p>\n<p>资本主义生产关系的核心范式是剩余价值</p>\n<p>生活决定意识</p>\n<p>实践是认识的源泉和基础</p>\n<p>实践是主观建设与客观的活动</p>\n<p> 本质就是过去的存在</p>\n<p>本质就是消失的存在</p>\n<p>异化劳动：劳动越多受到的支配越多，否定自己的劳动</p>\n<p>关于自然的科学和人的科学将统一</p>\n<p>因为人是非理性的所以人与人之间一定会是有冲突</p>\n<p>爱情也是符合辩证法发展到极致必将走向反面</p>\n<p>（爱情转换为亲情（恩爱））</p>\n<p>发展不是否定前期，是同时包含前者 </p>\n<p>作者：白烨艾特 <a href=\"https://www.bilibili.com/read/cv13721309?from=note\">https://www.bilibili.com/read/cv13721309?from=note</a> 出处：bilibili</p>\n","site":{"data":{}},"excerpt":"","more":"<p>读 【复旦大学】重读资本论（全28讲）王德峰</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Tf4y1j7Pq?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1Tf4y1j7Pq?spm_id_from=333.999.0.0</a></p>\n<p>物理事实–&gt;社会事实（通过范畴）</p>\n<p>列入：通奸的概念。</p>\n<p>资本雇佣劳动关系：事实（资本、工资、商品）</p>\n<p>师傅和学徒的关系：半人生依附关系</p>\n<p>等价交换：（价值 范畴）</p>\n<p>一切看上去似乎买卖双方是平等关系（逻辑上）</p>\n<p>资本（过去积累的劳动）没有资本只能通过出卖自己的活劳动</p>\n<p>积累的劳动：直接的生活消费品、生产消费品</p>\n<p>价值的增值–目前的社会价值（丰收不丰产）</p>\n<p>（还原的本质）生产资料行使对活劳动的支配权</p>\n<p>社会权力（social power）支配别人的权力</p>\n<p>资本-&gt;理性研究经济学    -&gt;权力 当代社会权力</p>\n<p>经济学家说是按照理性发展的，但是对于社会权力而言这本质上是非理性的</p>\n<p>世界上没有什么比消灭自己的敌人更实际的事了</p>\n<p>马克思学说资本论告诉我们：这是一场斗争</p>\n<p>马克思讲斗争：消灭人与人的不平等</p>\n<p>现在的经济是穷人给富人打工的经济</p>\n<p>资本发展的过程就是人与人不平等的扩大（不是政治层面的）</p>\n<p>资本制造贫困：不是等级压迫的结果，这一切看上去都是平等的条件下</p>\n<p>反全球化：金融资本使得有钱更有钱不断制造社会分裂</p>\n<p>资本增值才是现代的财富财富增长的同时非理性的人与人之间的权力斗争</p>\n<p>国家权力维护社会权力（social power）（保护这种私人的财产）</p>\n<p>货币积累到一定量自动拥有力量，雇佣别人，和个人都愿意被雇佣的力量</p>\n<p>资本不以人的意识为转移，类似于地球的-重力</p>\n<p>根本就没有解放思想就进入了ggkf</p>\n<p>货币-商品交换-趋势人做事情（在计划经济中发挥作用）一定追求利润这一切不可避免</p>\n<p>马克思研究的就是非理性的（人）</p>\n<p>商品交换：1使用价值。2.价值</p>\n<p>两个商品产生的使用价值是完全不同的两个物体</p>\n<p>作为商品交换(将劳动抽象化-劳动时间)</p>\n<p>使用价值-具体劳动</p>\n<p>交换价值-抽象劳动</p>\n<p>两者为同一个劳动</p>\n<p>商品：w。货币：G</p>\n<p>商品经济：w-g-w（这时候货币只是商品的流通手段）使用价值为主导（丰收等于丰产）</p>\n<p>商品经济是社会分工造成的</p>\n<p>*****    G`&gt;G(剩余价值)</p>\n<p>社会生产目的的改变，流通手段的货币成为主体的存在（人是地球上唯一需要货币才能存活的动物了）古代商人将货币转换成田产</p>\n<p>动产战胜不动产（货币战胜土地）</p>\n<p>自由到一无所有的劳动者（只能出卖自己的劳动）</p>\n<p>商人本是商品流通者（告诉行会手工者哪里需要多少量为市场而生产）</p>\n<p>手艺者投入商人的怀抱（出现了劳动力）</p>\n<p>资本靠增值存活</p>\n<p>消费领域和资本未站立的空间=&gt;资本最后增值的空间</p>\n<p>货币和自由劳动力=&gt;货币增值</p>\n<p>贵族出卖土地</p>\n<p>资本的原始积累是土地服从资本运动</p>\n<p>工业化的前提是有大部分劳动力（剥夺农民的土地所有权合作社）价格剪刀差来剥夺农民</p>\n<p>后发的国家必定要走的路（拥有完整的工业化能力）</p>\n<p>工业化浪潮来了让政治从经济中脱离出来</p>\n<p>土地不在成为唯一的劳动（凡是使货币增值的劳动都是劳动）</p>\n<p>劳动价值理论：价值是☞商品的交换价值  ｜｜ 劳动：一般劳动（通过货币）</p>\n<p>你借出去的钱最后也会通过实业实现货币增值</p>\n<p>货币是建立起来的过去的劳动（世界工厂的到外汇）</p>\n<p>创造出来具有使用价值的东西如果没有成为交换价值的增值你所付出的劳动不能称为劳动–具体劳动收抽象劳动的支配</p>\n<p>劳动价值理论中的价值：是抽象劳动的交换价值，是交换价值的增值</p>\n<p>资本就是可以增值的货币</p>\n<p>劳动创造剩余价值卖出去就行</p>\n<p>现在同时保持本国的粮食安全（薄记学），还有货币资本权</p>\n<p>粮食安全问题优先保护本国能源也一样，保护自己的土地和能源供给，不被外国所影响</p>\n<p>用电的同时别忘记抽屉里的蜡烛</p>\n<p>货币贬值，如何保证钱跑赢通货膨胀（目前是温文尔雅的让你家里的钱快速贬值）</p>\n<p>资本让你过去的劳动价值严重贬值</p>\n<p>交换价值的增值支配使用价值的生产</p>\n<p>生产相对过剩到金融危机</p>\n<p>金银并非天然是货币，但货币天然是金银</p>\n<p>剩余价值来源于一般劳动</p>\n<p>G:生产资料和劳动力（实物）+工资（劳动时间（八小时））</p>\n<p>新产品的价格=工资+设备折旧+机器磨损</p>\n<p>资本家是资本的逻辑化</p>\n<p>必要劳动+剩余劳动=劳动</p>\n<p>工资只是你的必要劳动所创造的价值</p>\n<p>市场竞争：卖的东西便宜（延长劳动时间、减少必要劳动时间（提高劳动效率=技术+劳动的熟练程度））</p>\n<p>绝对剩余价值（放弃）</p>\n<p>相对剩余价值（目前主要增加这个）</p>\n<p>技艺：对自然界另一种看法（天人合一）</p>\n<p>技术：另一种自然观，把自然界抽象化变成资料界</p>\n<p>杀死技艺全部转化为技术</p>\n<p>将人也抽象化，中国没有这种土壤</p>\n<p>拿机器做生产力是资本的要求（生产工具没变，生产关系的到改变）机器代替人的手艺</p>\n<p>四大发明都没发展成生产力</p>\n<p>有资本主义生产关系发明才能成为生产力</p>\n<p>技术和资本是孪生兄弟（延长相对劳动时间（提高技术））</p>\n<p>技术要你快速（抹杀了人的人文气息）谈恋爱也是那种快餐式的</p>\n<p>劳动价值来源于剩余劳动</p>\n<p>（相对剩余价值是资本的生命线）</p>\n<p>技术的有利也是不可忽视</p>\n<p>农业和医疗和音乐</p>\n<p>必要劳动是劳动力商品的交换价值及是工资的界限</p>\n<p>技术提高：总的劳动时间不变：必要劳动时间减少和剩余劳动时间增加</p>\n<p>面对这个问题资本家会裁掉工人，必要劳动时间规定工资是限定的</p>\n<p>产品生产的更多，企业家希望工资不变，出去后希望员工加大力气购买力（资本主义世界无法克服的悖论）</p>\n<p>提供二次分配（国家政治的调节）</p>\n<p>三座大山捂紧口袋过日子</p>\n<p>生产相对过剩和人的购买能力的不足转移到第三世界</p>\n<p>剩余价值是剩余劳动和生产力发展的界限</p>\n<p>剩余劳动使得有的人解放出来（由奴隶生产出来）</p>\n<p>剩余劳动（积累起来的劳动物化为使用价值）粮食五谷多（在仓库里的东西）</p>\n<p>在资本眼里在仓库的粮食他就不是剩余价值（剩余劳动没有转化为剩余价值—–的增值）</p>\n<p>然后毁掉粮食，从新获得市场需要（1.自然灾害。2.个人行为（倒牛奶–毁掉剩余劳动））</p>\n<p>这一切都是为了剩余价值增值而服务</p>\n<p>资本主义带来的生产劳动的积累是过去时代都没有的</p>\n<p>如果实现不了价值增值就会破坏生产力（悖论）</p>\n<p>发展生产力的同时破坏生产力</p>\n<p>她不发展生产力，相对剩余价值的生产力的生产不可能。</p>\n<p>于是要考虑相对生产过剩</p>\n<p>产业链就是基金链-爆发全球的经济危机</p>\n<p>一国有难多国遭殃</p>\n<p>货币是生产的界限</p>\n<p>超发货币</p>\n<p>国家投资创造需求</p>\n<p>金融资本主义是资本主义的最高形态</p>\n<p>资本主义生产的四个内在界限：</p>\n<p>“资本之所以表现为商品，是因为资本被提供到市场上来，货币的使用价值实际上所谓资本被让渡。它的使用价值是：生产利润”</p>\n<p>“资本之所以表现为商品，是因为利润分割为利息和本来意义上的利润是由供求，从而由竞争来调节的，这完全和商品的市场价格由它们来调节的一样。工资也是这样。如果供求平衡，供求的作用就会相互抵消，工资就等于劳动力的价值”</p>\n<p>货币也可以作为商品，钱投资给别人回报少数投资</p>\n<p>价格在价值周围波动</p>\n<p>资本本身被买卖（资本被当作商品其中也会有利益的产生：股市（利息（价格）：这个与价值归于、规律不同不围绕一条价值线））</p>\n<p>它只有价格没有价值（货币供应量（脱离金本位））</p>\n<p>资本主义不行社会主义就来，金融危机来了就走集体合作化</p>\n<p>使用价值收到交换价值的影响（利润太少）</p>\n<p>保存及的成果不能用资本的方式保存（资本会自己摧毁它所创造的成果）</p>\n<p>———————————————————-分割线————————————————————–</p>\n<p>人与人的斗争，物质生活关系是非理性的</p>\n<p>私有财产的冲突</p>\n<p>私有财产：抽象的人格</p>\n<p>死后的遗嘱，人格独立于人本身</p>\n<p>私有财产权力来自与人格、</p>\n<p>通过中间的意识形态</p>\n<p>封建主义生产关系的核心范式是地租</p>\n<p>资本主义生产关系的核心范式是剩余价值</p>\n<p>生活决定意识</p>\n<p>实践是认识的源泉和基础</p>\n<p>实践是主观建设与客观的活动</p>\n<p> 本质就是过去的存在</p>\n<p>本质就是消失的存在</p>\n<p>异化劳动：劳动越多受到的支配越多，否定自己的劳动</p>\n<p>关于自然的科学和人的科学将统一</p>\n<p>因为人是非理性的所以人与人之间一定会是有冲突</p>\n<p>爱情也是符合辩证法发展到极致必将走向反面</p>\n<p>（爱情转换为亲情（恩爱））</p>\n<p>发展不是否定前期，是同时包含前者 </p>\n<p>作者：白烨艾特 <a href=\"https://www.bilibili.com/read/cv13721309?from=note\">https://www.bilibili.com/read/cv13721309?from=note</a> 出处：bilibili</p>\n"},{"title":"悬浮时代—金钱主宰的社会：工作和人际关系都变为一种手段—项飙","_content":"\n\n我们知道留学在中国是有比较长的历史，这跟中国的现代化是紧密联系在一起的，在清末新政改革。那个时候的留学生是年龄是很低的幼童，留美幼童，包括张天佑这样的人，那个是特殊的原因。改革开放之后，绝大部分的留学生其实是成人，他不仅是本科生，而且主要是研究生，特别是以博士生为主。**在 2000 年之后，是越来越低龄化，然后同时低龄的规模越来越高。**要去理解这个现象，可能要看一下它的历史。\n\n我觉得中国改革开放之后的留学历程可以分为**三个阶段**。\n\n**第一个阶段是从 1978 年到 1992 年**，然后邓小平南巡讲话，这个之间的这个留学主要是国家公派，流出的人员主要是年纪比较大的、去读研究生的。留学的目的主要是**去学习西方比较先进的技术**，而且这个留学背后还有很强的价值关怀。至少是两个价值关怀在这里，具体的讲：第一个说要**留学，是为了回来，为国服务**，要回来为国服务是帮助中国进步，而不止仅仅是帮助自己的成长。第二个价值关怀，就是在这样的留学项目里面，至少对个体来讲，他是怀有一种这样的理解，觉得西方不仅在科技上比我们进步，而且在社会制度的设计上面，在文化生活上面也要比我们进步，所以他要**学习那里的先进文化**，也希望今后中国哪一天会变成那些留国的目的地一样。所以是带着这样一个价值情怀去的。\n\n**然后第二个阶段从 1992 年 90 年代之后**，到最近这个阶段，这个时点比较难以把握。但是第二个阶段首先的一个变化就是留学，你如果认为留学它是一个项目，它是一个工程的话，那就是**留学从一个国家项目变成了一个个体的行动**，所以它是个个体化（的过程）。那这个时候留学主要的目的并不是说是为国服务，而主要是首先是**为个体的职业生涯考虑**。在这个时候低龄化就出现了，首先是出去读本科，然后是又去读中学小学，当然更有胜者，就现在我们知道有这个所谓产妇，Birth Tourist，就是预产旅游者，就把孩子就生在那里这样等等的一个情况。\n\n所以跟第一个阶段比，除了**个体化**、**低龄化**之后，我觉得很重要的一个变化是说，这个时候的它的**价值取向**很不一样。特别是在近几年，留学生并不觉得留学目的地，那些国家的技术一定比中国高，特别是在生活方式和社会制度上比中国好。就基本上没有这样的一个价值取向，说要去西方学习那里的精华，然后把它带回自己的祖国了，没有这样。但是**他为什么还要去留学呢？**这个主要就是一些非常实际的个人功利上的考虑，他觉得这个留学有一门英语，还是在工作上、在职场上会有更好的发展。所以总的来讲我们可以认为第二个阶段的一个核心特征是功利化。\n\n**但是现在有第三个**。我碰到的一些家长，我问他为什么那么小就（让孩子）出去？因为我觉得基础教育在国内应该是更好，而且跟家庭在一起，对孩子全面的成长，很天然地讲，应该更加放心。我问那（出去）是为了孩子有一个更好的这个未来吗？在职业上有一个更好的未来，想有更好的收入吗？不是。我们现在今天很多家长，他把孩子在很年轻的时候送出去，确实**不是功利的考虑**。\n\n他们是说国内的教育制度太重视竞争，太重视分数，老师有太高的权威。等于老师完全是以老师的身份，没有激发孩子兴趣，培养孩子多方面的智商情商。所以他们就觉得这个对孩子作为一个人的成长是不利的。所以今天他们把孩子这么低龄送出去，其实是对第二个阶段的功利化的反动，一种**重新去功利化**，要重新回到孩子作为一个人的这样最根本的考虑上。\n\n他们也知道孩子这么早送出去分别是很难的，这里有很多情感上的代价，但是他们觉得作为人他今后的快乐，对人生的基本理解，他的一份善心，对人和人关系的感知，这些都太重要了，所以他要送出去。\n\n所以这里就提出一个非常有意思的问题。\n\n你看它最早的是一种很强的价值取向，真的去学习，变到第二个阶段说不一定去学习，只不过是去镀金，然后有一个更好的工作，一个目的功利性的考虑，到第三个阶段，既不是说去学习现成的一个先进制度，也不说去功利的为个人，而是说要保证人本质上的潜力。\n\n这个变化很明显，那跟这个变化同时发生的，为什么越来越多的人把孩子送出去？很直观的一个原因就是**中国的经济在不断的增长**，就越来越多的家庭有了这样的经济条件、经济能力把孩子送出去，所以这里就有一个**悖论**在。中国经济在不断的增长，老百姓至少是在城市中产的，他的物质生活水平，他能够支配的现金量显然在不断的增长，而且大家的信息咨讯，然后跟对世界的了解也在不断增长。但在中国上升的同时，人们又纷纷把孩子送出去，这给我们一个很大很尖锐的问题，回到了一个很经典的问题：**就是这个发展究竟意味着什么？这个经济的增长和人的发展之间究竟是什么关系？**\n\n要提醒大家的是，目前这个状况显然是**不应该也不可能**持续的，就是一方面中国经济不断增长，另一方面我们觉得在这个条件下，人的生产和成长又是一个很不令人满意的结果。你就老靠留学来在这里赚了钱，然后又把人的生活移植到外面去，这个情况是不可能持续生长。所以确实要开始考虑，**我们能够怎么样找到一个发展的道路**，使得这个经济不一定增长，但经济至少是在比较平稳的状态下，**能够找出一个比较合理的教育生活方式**，**使人的成长得到一个合理的发挥**。\n\n这个确实触动了所谓**现代性**的一个很核心的问题。\n\n我们要知道人类作为一个物种，在地球上存在，在绝大部分的时间里面，人的活动的目的是直接指向人本身的生产与再生产。我们在这个原始森林里面去摘果子、生火，打猎都是直接满足于自己的生命需要。然后这些生命的需要满足之后，你干什么呢？大量的时间在原始社会，其实是早期艺术发展的时期，唱歌，岩壁上画画，然后各种各样的神话，它不能解释自然世界的时候，他就用发挥自己的想象力去神话。所以现在是有很多数据去证明在所谓的原始社会，用今天的语言去说是生产效率极其低下的时候，其实每个成人一天工作的时间大概是三个小时左右，剩下的时间都是娱乐。**在所谓生产效率极其低下的时候，其实三个小时一天的工作能够满足他生命的需求的，剩下的就是去享受艺术。**\n\n在农耕社会也是这样。农耕社会的主要的一个目的，不是说去增长，不是说去积累，特别是不去积累剩余产品。对于普通主流意识形态，他是要**维持现状**，是最大的一个目标。在农耕社会是稳定，而不是说暴富，让他觉得最重要。**所以仪式很重要，家庭的稳定很重要。**这些当然在后来确实演变为跟政治极权的形式结合在一起，确实变成一个非常桎梏人的一套制度，比方说这个父权体系这样等等，这个是有问题的。\n\n根据卡尔・波兰尼的理论，它是到了 19 世纪突然有一个很大的思想上的革命。这个革命就叫做 **\"去嵌入的革命\"**。去嵌入，什么意思？就是原来人们的经济活动，经济生产，它本身并不构成一种独立的活动。你的物质生产是深深嵌入到你的社会关系里面去的，你怎么生产怎么交换？当然这里会有利润的计算在里头，这些利润的计算，你的交易都是受你的朋友关系、社区关系、宗教关系所制约的。 **当你跟另外一个人的贸易关系中断的时候，你作为朋友关系在继续。\\**但是 19 世纪之后，新的经济学家突然发明了一种理论，他（卡尔 · 波兰尼）认为这种市场的行为 \\*\\*生产和交易是独立的\\*\\*，是可以独立，它有自在的一套规律在那里，有法则在那里，所以就所谓叫 \"去嵌入\"，意思就从原来就或者拖欠 \\*\\*从原来那个社会关系家庭宗教社区的关系脱离出来\\*\\*，他不仅脱离出来，而且反过来它要\\**成为统治你那些朋友关系和社区关系的力量**。\n\n你现在跟一个人做朋友是为了有交换的利益关系。当这个交换的利益关系结束的时候，这个朋友关系就已经没了，你再也不愿意见到这个人，所以这个主次关系完全倒过来。在这样的想象下，经济增长是为了增长，然后**人对生命的理解**，**对社会目的的理解**也就完全就变化了。\n\n比方说在中国现在确实是还是必须要使经济增长压倒一切。为什么？**如果要经济不增长的话，马上出现大规模失业，马上出现大规模的社会不稳定，这个说法似是而非。**在目前的结构下，确实你如果不创造出低层的一些工作，不把这个底层的民众拖住，靠这些工作拖住，确实它会出现大规模的社会不稳定。但是你要从另外一个角度看，如果要看我们全社会创造出来的财富总体，如果你进行再分配的话，是完全够大家吃饭睡觉，一个温饱的社会。如果再分配的话，大家可以每个人都花很多时间搞艺术创作，变成很好的朋友，每个人可能工作五天就够。\n\n但现在所有人不管你是低收入的农民工，你工作 8 到 12 个小时为了温饱，还是你是腰缠万贵的富翁，你也要工作 8 到 12 个小时，因为你生怕被别人超过，资产会缩水。 **其实你完全不需要这些，你的身体，你的心智是完全不需要这财富的。\\**这就是\\**增长主义**，甚至不叫发展主义。因为发展还意味着从一种模式可能进化到另外一种模式，有创新的含义在里面。**增长就是把这个数变大**，唯一靠这个数变大，觉得这才能够维持下来，一旦哪一天停滞，好像一切都会崩溃。这实际上是一个很大的迷思了。\n\n\n\n所以在这样的情况下，要看历史的话，我们就看到物质生产现在已经成为主导性的力量。而人的生产本来是人之为人的一个出发点，现在倒成了一个很次要的东西。**马克思把这个叫做 \"异化\"。**什么是异化？就是说你生产出钞票，什么是钞票？钞票无非是人发明的，那人为什么要发明钞票？是为了人服务。**但今天有没有钞票成为一个让我们这么焦虑的事实：一个人创造出来为人服务的工具，现在成为了我们的主宰。\\**这个是说 \"异化\" 的意思，所谓 \"拜物教\" 也是这个意思。所以 \\*\\*物质生产本来是为人的生产服务的\\*\\*，但现在就倒过来，完全\\**成了一个主宰我们日常生活的一个力量**。\n\n那么在这样的情况下，**物质生产的一些逻辑也就贯彻到教育、医疗这些领域里面来**。\n\n教育是很明显，你本来就是说要让孩子健康快乐，然后去发掘他内在的各种潜力。那每个孩子的潜力不一样，你就发觉不一样的潜力。但是这样做就会需要很大的耐心，效率就不高。效率不高之后，如果要跟各个学校进行评比，就发现有些学校就评估不下来。然后还有一种很强烈的假设是，如果不把学校放在一起评比的话，老师就会变得很偷懒。**假设就是老师去教育其实并不是说在生产人，因为老师在教育的时候，是在做一个工作是为了赚钱**，所以你必须要有一个外在这样的鞭策，通过评比评审，奖励那些做得好的、在指标上很高的（老师），然后惩罚那些在指标上做的不好的老师，才有这样的激励。\n\n那其实已经开始**把老师想象成一种工具**，然后**老师也把孩子想象成是生产对象**，而不是培养对象。他（老师）也把孩子想象成工具化，他想象的孩子是要在考试的时候一定要是一个高效的考试者。\n\n然后这样就是一切都标准化，进行评比，把激励的机制引进来，这个就是一种生产性逻辑，一个物质生产性逻辑。这个就是异化的一个精细化，不仅说是物质生产的逻辑，到**统治了我们人的生产活动**，而且是说它**直接形塑了我们如何组织人的生产活动**。在这个情况下，所以出现了一个不是脱节，所以这看起来在逻辑上是很一贯的，正是因为物质生产的这个逻辑变得那么强大，那么一统，然后在这个情况下，你要去讲，我们应该信任老师，就让老师放松，相信老师，他会觉得教育本身是很有趣的。那你可以给老师比较高的工资，然后再有一种比较平等的（制度），**我的意思说不要在老师内部创造出一些等级，不要在学校内部创造一些等级，让老师在教育本身里面获得他那个职业的满足感，获得他的尊严**。当然在物质保障上要的比较接近。现在完全有能力给老师做比较好的物质保障，然后放手让老师去创造、去实验各种教育方式，当然你可以把他们组织在一起进行交流等等。\n\n现在这样一说起来大家可能会同意，但是去做的时候，我觉得大部分是不敢去这么做的，因为大家觉得**这个物质生产的这个逻辑其实已经使人变得一种非常犬儒的感觉**，就是对其他人基本的不上心，很不信任。你觉得没有这个外在的鞭子挂在那里，没有一个外在的奖金，就是事先跟你承诺好，你月底能拿多少奖金，这个人就不会认真工作的。所以其实**逼迫每个人 \"自我异化\"**，异化就说自己跟工作，不是自己真心爱的工作，那就把工作变为一个手段，然后把互相人和人都变成彼此的一个手段。\n\n这个我觉得是一个**物质生产和人的生产之间关系的断裂**，它是一个长时段的一个历史演进过程。那么中国作为一个后发展国家，现在这个断裂可能尤其明显，而且现在就是不顺，断裂了，而且都统一在了这个物质生产的这个逻辑下面。","source":"_posts/金钱主宰的社会：工作和人际关系都变为一种手段.md","raw":"---\ntitle: 悬浮时代—金钱主宰的社会：工作和人际关系都变为一种手段—项飙\n---\n\n\n我们知道留学在中国是有比较长的历史，这跟中国的现代化是紧密联系在一起的，在清末新政改革。那个时候的留学生是年龄是很低的幼童，留美幼童，包括张天佑这样的人，那个是特殊的原因。改革开放之后，绝大部分的留学生其实是成人，他不仅是本科生，而且主要是研究生，特别是以博士生为主。**在 2000 年之后，是越来越低龄化，然后同时低龄的规模越来越高。**要去理解这个现象，可能要看一下它的历史。\n\n我觉得中国改革开放之后的留学历程可以分为**三个阶段**。\n\n**第一个阶段是从 1978 年到 1992 年**，然后邓小平南巡讲话，这个之间的这个留学主要是国家公派，流出的人员主要是年纪比较大的、去读研究生的。留学的目的主要是**去学习西方比较先进的技术**，而且这个留学背后还有很强的价值关怀。至少是两个价值关怀在这里，具体的讲：第一个说要**留学，是为了回来，为国服务**，要回来为国服务是帮助中国进步，而不止仅仅是帮助自己的成长。第二个价值关怀，就是在这样的留学项目里面，至少对个体来讲，他是怀有一种这样的理解，觉得西方不仅在科技上比我们进步，而且在社会制度的设计上面，在文化生活上面也要比我们进步，所以他要**学习那里的先进文化**，也希望今后中国哪一天会变成那些留国的目的地一样。所以是带着这样一个价值情怀去的。\n\n**然后第二个阶段从 1992 年 90 年代之后**，到最近这个阶段，这个时点比较难以把握。但是第二个阶段首先的一个变化就是留学，你如果认为留学它是一个项目，它是一个工程的话，那就是**留学从一个国家项目变成了一个个体的行动**，所以它是个个体化（的过程）。那这个时候留学主要的目的并不是说是为国服务，而主要是首先是**为个体的职业生涯考虑**。在这个时候低龄化就出现了，首先是出去读本科，然后是又去读中学小学，当然更有胜者，就现在我们知道有这个所谓产妇，Birth Tourist，就是预产旅游者，就把孩子就生在那里这样等等的一个情况。\n\n所以跟第一个阶段比，除了**个体化**、**低龄化**之后，我觉得很重要的一个变化是说，这个时候的它的**价值取向**很不一样。特别是在近几年，留学生并不觉得留学目的地，那些国家的技术一定比中国高，特别是在生活方式和社会制度上比中国好。就基本上没有这样的一个价值取向，说要去西方学习那里的精华，然后把它带回自己的祖国了，没有这样。但是**他为什么还要去留学呢？**这个主要就是一些非常实际的个人功利上的考虑，他觉得这个留学有一门英语，还是在工作上、在职场上会有更好的发展。所以总的来讲我们可以认为第二个阶段的一个核心特征是功利化。\n\n**但是现在有第三个**。我碰到的一些家长，我问他为什么那么小就（让孩子）出去？因为我觉得基础教育在国内应该是更好，而且跟家庭在一起，对孩子全面的成长，很天然地讲，应该更加放心。我问那（出去）是为了孩子有一个更好的这个未来吗？在职业上有一个更好的未来，想有更好的收入吗？不是。我们现在今天很多家长，他把孩子在很年轻的时候送出去，确实**不是功利的考虑**。\n\n他们是说国内的教育制度太重视竞争，太重视分数，老师有太高的权威。等于老师完全是以老师的身份，没有激发孩子兴趣，培养孩子多方面的智商情商。所以他们就觉得这个对孩子作为一个人的成长是不利的。所以今天他们把孩子这么低龄送出去，其实是对第二个阶段的功利化的反动，一种**重新去功利化**，要重新回到孩子作为一个人的这样最根本的考虑上。\n\n他们也知道孩子这么早送出去分别是很难的，这里有很多情感上的代价，但是他们觉得作为人他今后的快乐，对人生的基本理解，他的一份善心，对人和人关系的感知，这些都太重要了，所以他要送出去。\n\n所以这里就提出一个非常有意思的问题。\n\n你看它最早的是一种很强的价值取向，真的去学习，变到第二个阶段说不一定去学习，只不过是去镀金，然后有一个更好的工作，一个目的功利性的考虑，到第三个阶段，既不是说去学习现成的一个先进制度，也不说去功利的为个人，而是说要保证人本质上的潜力。\n\n这个变化很明显，那跟这个变化同时发生的，为什么越来越多的人把孩子送出去？很直观的一个原因就是**中国的经济在不断的增长**，就越来越多的家庭有了这样的经济条件、经济能力把孩子送出去，所以这里就有一个**悖论**在。中国经济在不断的增长，老百姓至少是在城市中产的，他的物质生活水平，他能够支配的现金量显然在不断的增长，而且大家的信息咨讯，然后跟对世界的了解也在不断增长。但在中国上升的同时，人们又纷纷把孩子送出去，这给我们一个很大很尖锐的问题，回到了一个很经典的问题：**就是这个发展究竟意味着什么？这个经济的增长和人的发展之间究竟是什么关系？**\n\n要提醒大家的是，目前这个状况显然是**不应该也不可能**持续的，就是一方面中国经济不断增长，另一方面我们觉得在这个条件下，人的生产和成长又是一个很不令人满意的结果。你就老靠留学来在这里赚了钱，然后又把人的生活移植到外面去，这个情况是不可能持续生长。所以确实要开始考虑，**我们能够怎么样找到一个发展的道路**，使得这个经济不一定增长，但经济至少是在比较平稳的状态下，**能够找出一个比较合理的教育生活方式**，**使人的成长得到一个合理的发挥**。\n\n这个确实触动了所谓**现代性**的一个很核心的问题。\n\n我们要知道人类作为一个物种，在地球上存在，在绝大部分的时间里面，人的活动的目的是直接指向人本身的生产与再生产。我们在这个原始森林里面去摘果子、生火，打猎都是直接满足于自己的生命需要。然后这些生命的需要满足之后，你干什么呢？大量的时间在原始社会，其实是早期艺术发展的时期，唱歌，岩壁上画画，然后各种各样的神话，它不能解释自然世界的时候，他就用发挥自己的想象力去神话。所以现在是有很多数据去证明在所谓的原始社会，用今天的语言去说是生产效率极其低下的时候，其实每个成人一天工作的时间大概是三个小时左右，剩下的时间都是娱乐。**在所谓生产效率极其低下的时候，其实三个小时一天的工作能够满足他生命的需求的，剩下的就是去享受艺术。**\n\n在农耕社会也是这样。农耕社会的主要的一个目的，不是说去增长，不是说去积累，特别是不去积累剩余产品。对于普通主流意识形态，他是要**维持现状**，是最大的一个目标。在农耕社会是稳定，而不是说暴富，让他觉得最重要。**所以仪式很重要，家庭的稳定很重要。**这些当然在后来确实演变为跟政治极权的形式结合在一起，确实变成一个非常桎梏人的一套制度，比方说这个父权体系这样等等，这个是有问题的。\n\n根据卡尔・波兰尼的理论，它是到了 19 世纪突然有一个很大的思想上的革命。这个革命就叫做 **\"去嵌入的革命\"**。去嵌入，什么意思？就是原来人们的经济活动，经济生产，它本身并不构成一种独立的活动。你的物质生产是深深嵌入到你的社会关系里面去的，你怎么生产怎么交换？当然这里会有利润的计算在里头，这些利润的计算，你的交易都是受你的朋友关系、社区关系、宗教关系所制约的。 **当你跟另外一个人的贸易关系中断的时候，你作为朋友关系在继续。\\**但是 19 世纪之后，新的经济学家突然发明了一种理论，他（卡尔 · 波兰尼）认为这种市场的行为 \\*\\*生产和交易是独立的\\*\\*，是可以独立，它有自在的一套规律在那里，有法则在那里，所以就所谓叫 \"去嵌入\"，意思就从原来就或者拖欠 \\*\\*从原来那个社会关系家庭宗教社区的关系脱离出来\\*\\*，他不仅脱离出来，而且反过来它要\\**成为统治你那些朋友关系和社区关系的力量**。\n\n你现在跟一个人做朋友是为了有交换的利益关系。当这个交换的利益关系结束的时候，这个朋友关系就已经没了，你再也不愿意见到这个人，所以这个主次关系完全倒过来。在这样的想象下，经济增长是为了增长，然后**人对生命的理解**，**对社会目的的理解**也就完全就变化了。\n\n比方说在中国现在确实是还是必须要使经济增长压倒一切。为什么？**如果要经济不增长的话，马上出现大规模失业，马上出现大规模的社会不稳定，这个说法似是而非。**在目前的结构下，确实你如果不创造出低层的一些工作，不把这个底层的民众拖住，靠这些工作拖住，确实它会出现大规模的社会不稳定。但是你要从另外一个角度看，如果要看我们全社会创造出来的财富总体，如果你进行再分配的话，是完全够大家吃饭睡觉，一个温饱的社会。如果再分配的话，大家可以每个人都花很多时间搞艺术创作，变成很好的朋友，每个人可能工作五天就够。\n\n但现在所有人不管你是低收入的农民工，你工作 8 到 12 个小时为了温饱，还是你是腰缠万贵的富翁，你也要工作 8 到 12 个小时，因为你生怕被别人超过，资产会缩水。 **其实你完全不需要这些，你的身体，你的心智是完全不需要这财富的。\\**这就是\\**增长主义**，甚至不叫发展主义。因为发展还意味着从一种模式可能进化到另外一种模式，有创新的含义在里面。**增长就是把这个数变大**，唯一靠这个数变大，觉得这才能够维持下来，一旦哪一天停滞，好像一切都会崩溃。这实际上是一个很大的迷思了。\n\n\n\n所以在这样的情况下，要看历史的话，我们就看到物质生产现在已经成为主导性的力量。而人的生产本来是人之为人的一个出发点，现在倒成了一个很次要的东西。**马克思把这个叫做 \"异化\"。**什么是异化？就是说你生产出钞票，什么是钞票？钞票无非是人发明的，那人为什么要发明钞票？是为了人服务。**但今天有没有钞票成为一个让我们这么焦虑的事实：一个人创造出来为人服务的工具，现在成为了我们的主宰。\\**这个是说 \"异化\" 的意思，所谓 \"拜物教\" 也是这个意思。所以 \\*\\*物质生产本来是为人的生产服务的\\*\\*，但现在就倒过来，完全\\**成了一个主宰我们日常生活的一个力量**。\n\n那么在这样的情况下，**物质生产的一些逻辑也就贯彻到教育、医疗这些领域里面来**。\n\n教育是很明显，你本来就是说要让孩子健康快乐，然后去发掘他内在的各种潜力。那每个孩子的潜力不一样，你就发觉不一样的潜力。但是这样做就会需要很大的耐心，效率就不高。效率不高之后，如果要跟各个学校进行评比，就发现有些学校就评估不下来。然后还有一种很强烈的假设是，如果不把学校放在一起评比的话，老师就会变得很偷懒。**假设就是老师去教育其实并不是说在生产人，因为老师在教育的时候，是在做一个工作是为了赚钱**，所以你必须要有一个外在这样的鞭策，通过评比评审，奖励那些做得好的、在指标上很高的（老师），然后惩罚那些在指标上做的不好的老师，才有这样的激励。\n\n那其实已经开始**把老师想象成一种工具**，然后**老师也把孩子想象成是生产对象**，而不是培养对象。他（老师）也把孩子想象成工具化，他想象的孩子是要在考试的时候一定要是一个高效的考试者。\n\n然后这样就是一切都标准化，进行评比，把激励的机制引进来，这个就是一种生产性逻辑，一个物质生产性逻辑。这个就是异化的一个精细化，不仅说是物质生产的逻辑，到**统治了我们人的生产活动**，而且是说它**直接形塑了我们如何组织人的生产活动**。在这个情况下，所以出现了一个不是脱节，所以这看起来在逻辑上是很一贯的，正是因为物质生产的这个逻辑变得那么强大，那么一统，然后在这个情况下，你要去讲，我们应该信任老师，就让老师放松，相信老师，他会觉得教育本身是很有趣的。那你可以给老师比较高的工资，然后再有一种比较平等的（制度），**我的意思说不要在老师内部创造出一些等级，不要在学校内部创造一些等级，让老师在教育本身里面获得他那个职业的满足感，获得他的尊严**。当然在物质保障上要的比较接近。现在完全有能力给老师做比较好的物质保障，然后放手让老师去创造、去实验各种教育方式，当然你可以把他们组织在一起进行交流等等。\n\n现在这样一说起来大家可能会同意，但是去做的时候，我觉得大部分是不敢去这么做的，因为大家觉得**这个物质生产的这个逻辑其实已经使人变得一种非常犬儒的感觉**，就是对其他人基本的不上心，很不信任。你觉得没有这个外在的鞭子挂在那里，没有一个外在的奖金，就是事先跟你承诺好，你月底能拿多少奖金，这个人就不会认真工作的。所以其实**逼迫每个人 \"自我异化\"**，异化就说自己跟工作，不是自己真心爱的工作，那就把工作变为一个手段，然后把互相人和人都变成彼此的一个手段。\n\n这个我觉得是一个**物质生产和人的生产之间关系的断裂**，它是一个长时段的一个历史演进过程。那么中国作为一个后发展国家，现在这个断裂可能尤其明显，而且现在就是不顺，断裂了，而且都统一在了这个物质生产的这个逻辑下面。","slug":"金钱主宰的社会：工作和人际关系都变为一种手段","published":1,"date":"2021-12-11T14:01:41.538Z","updated":"2022-04-12T10:00:52.702Z","_id":"cl1vyonvr0006k60mbntxakxl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们知道留学在中国是有比较长的历史，这跟中国的现代化是紧密联系在一起的，在清末新政改革。那个时候的留学生是年龄是很低的幼童，留美幼童，包括张天佑这样的人，那个是特殊的原因。改革开放之后，绝大部分的留学生其实是成人，他不仅是本科生，而且主要是研究生，特别是以博士生为主。<strong>在 2000 年之后，是越来越低龄化，然后同时低龄的规模越来越高。</strong>要去理解这个现象，可能要看一下它的历史。</p>\n<p>我觉得中国改革开放之后的留学历程可以分为<strong>三个阶段</strong>。</p>\n<p><strong>第一个阶段是从 1978 年到 1992 年</strong>，然后邓小平南巡讲话，这个之间的这个留学主要是国家公派，流出的人员主要是年纪比较大的、去读研究生的。留学的目的主要是<strong>去学习西方比较先进的技术</strong>，而且这个留学背后还有很强的价值关怀。至少是两个价值关怀在这里，具体的讲：第一个说要<strong>留学，是为了回来，为国服务</strong>，要回来为国服务是帮助中国进步，而不止仅仅是帮助自己的成长。第二个价值关怀，就是在这样的留学项目里面，至少对个体来讲，他是怀有一种这样的理解，觉得西方不仅在科技上比我们进步，而且在社会制度的设计上面，在文化生活上面也要比我们进步，所以他要<strong>学习那里的先进文化</strong>，也希望今后中国哪一天会变成那些留国的目的地一样。所以是带着这样一个价值情怀去的。</p>\n<p><strong>然后第二个阶段从 1992 年 90 年代之后</strong>，到最近这个阶段，这个时点比较难以把握。但是第二个阶段首先的一个变化就是留学，你如果认为留学它是一个项目，它是一个工程的话，那就是<strong>留学从一个国家项目变成了一个个体的行动</strong>，所以它是个个体化（的过程）。那这个时候留学主要的目的并不是说是为国服务，而主要是首先是<strong>为个体的职业生涯考虑</strong>。在这个时候低龄化就出现了，首先是出去读本科，然后是又去读中学小学，当然更有胜者，就现在我们知道有这个所谓产妇，Birth Tourist，就是预产旅游者，就把孩子就生在那里这样等等的一个情况。</p>\n<p>所以跟第一个阶段比，除了<strong>个体化</strong>、<strong>低龄化</strong>之后，我觉得很重要的一个变化是说，这个时候的它的<strong>价值取向</strong>很不一样。特别是在近几年，留学生并不觉得留学目的地，那些国家的技术一定比中国高，特别是在生活方式和社会制度上比中国好。就基本上没有这样的一个价值取向，说要去西方学习那里的精华，然后把它带回自己的祖国了，没有这样。但是<strong>他为什么还要去留学呢？</strong>这个主要就是一些非常实际的个人功利上的考虑，他觉得这个留学有一门英语，还是在工作上、在职场上会有更好的发展。所以总的来讲我们可以认为第二个阶段的一个核心特征是功利化。</p>\n<p><strong>但是现在有第三个</strong>。我碰到的一些家长，我问他为什么那么小就（让孩子）出去？因为我觉得基础教育在国内应该是更好，而且跟家庭在一起，对孩子全面的成长，很天然地讲，应该更加放心。我问那（出去）是为了孩子有一个更好的这个未来吗？在职业上有一个更好的未来，想有更好的收入吗？不是。我们现在今天很多家长，他把孩子在很年轻的时候送出去，确实<strong>不是功利的考虑</strong>。</p>\n<p>他们是说国内的教育制度太重视竞争，太重视分数，老师有太高的权威。等于老师完全是以老师的身份，没有激发孩子兴趣，培养孩子多方面的智商情商。所以他们就觉得这个对孩子作为一个人的成长是不利的。所以今天他们把孩子这么低龄送出去，其实是对第二个阶段的功利化的反动，一种<strong>重新去功利化</strong>，要重新回到孩子作为一个人的这样最根本的考虑上。</p>\n<p>他们也知道孩子这么早送出去分别是很难的，这里有很多情感上的代价，但是他们觉得作为人他今后的快乐，对人生的基本理解，他的一份善心，对人和人关系的感知，这些都太重要了，所以他要送出去。</p>\n<p>所以这里就提出一个非常有意思的问题。</p>\n<p>你看它最早的是一种很强的价值取向，真的去学习，变到第二个阶段说不一定去学习，只不过是去镀金，然后有一个更好的工作，一个目的功利性的考虑，到第三个阶段，既不是说去学习现成的一个先进制度，也不说去功利的为个人，而是说要保证人本质上的潜力。</p>\n<p>这个变化很明显，那跟这个变化同时发生的，为什么越来越多的人把孩子送出去？很直观的一个原因就是<strong>中国的经济在不断的增长</strong>，就越来越多的家庭有了这样的经济条件、经济能力把孩子送出去，所以这里就有一个<strong>悖论</strong>在。中国经济在不断的增长，老百姓至少是在城市中产的，他的物质生活水平，他能够支配的现金量显然在不断的增长，而且大家的信息咨讯，然后跟对世界的了解也在不断增长。但在中国上升的同时，人们又纷纷把孩子送出去，这给我们一个很大很尖锐的问题，回到了一个很经典的问题：<strong>就是这个发展究竟意味着什么？这个经济的增长和人的发展之间究竟是什么关系？</strong></p>\n<p>要提醒大家的是，目前这个状况显然是<strong>不应该也不可能</strong>持续的，就是一方面中国经济不断增长，另一方面我们觉得在这个条件下，人的生产和成长又是一个很不令人满意的结果。你就老靠留学来在这里赚了钱，然后又把人的生活移植到外面去，这个情况是不可能持续生长。所以确实要开始考虑，<strong>我们能够怎么样找到一个发展的道路</strong>，使得这个经济不一定增长，但经济至少是在比较平稳的状态下，<strong>能够找出一个比较合理的教育生活方式</strong>，<strong>使人的成长得到一个合理的发挥</strong>。</p>\n<p>这个确实触动了所谓<strong>现代性</strong>的一个很核心的问题。</p>\n<p>我们要知道人类作为一个物种，在地球上存在，在绝大部分的时间里面，人的活动的目的是直接指向人本身的生产与再生产。我们在这个原始森林里面去摘果子、生火，打猎都是直接满足于自己的生命需要。然后这些生命的需要满足之后，你干什么呢？大量的时间在原始社会，其实是早期艺术发展的时期，唱歌，岩壁上画画，然后各种各样的神话，它不能解释自然世界的时候，他就用发挥自己的想象力去神话。所以现在是有很多数据去证明在所谓的原始社会，用今天的语言去说是生产效率极其低下的时候，其实每个成人一天工作的时间大概是三个小时左右，剩下的时间都是娱乐。<strong>在所谓生产效率极其低下的时候，其实三个小时一天的工作能够满足他生命的需求的，剩下的就是去享受艺术。</strong></p>\n<p>在农耕社会也是这样。农耕社会的主要的一个目的，不是说去增长，不是说去积累，特别是不去积累剩余产品。对于普通主流意识形态，他是要<strong>维持现状</strong>，是最大的一个目标。在农耕社会是稳定，而不是说暴富，让他觉得最重要。<strong>所以仪式很重要，家庭的稳定很重要。</strong>这些当然在后来确实演变为跟政治极权的形式结合在一起，确实变成一个非常桎梏人的一套制度，比方说这个父权体系这样等等，这个是有问题的。</p>\n<p>根据卡尔・波兰尼的理论，它是到了 19 世纪突然有一个很大的思想上的革命。这个革命就叫做 **”去嵌入的革命”**。去嵌入，什么意思？就是原来人们的经济活动，经济生产，它本身并不构成一种独立的活动。你的物质生产是深深嵌入到你的社会关系里面去的，你怎么生产怎么交换？当然这里会有利润的计算在里头，这些利润的计算，你的交易都是受你的朋友关系、社区关系、宗教关系所制约的。 **当你跟另外一个人的贸易关系中断的时候，你作为朋友关系在继续。**但是 19 世纪之后，新的经济学家突然发明了一种理论，他（卡尔 · 波兰尼）认为这种市场的行为 **生产和交易是独立的**，是可以独立，它有自在的一套规律在那里，有法则在那里，所以就所谓叫 “去嵌入”，意思就从原来就或者拖欠 **从原来那个社会关系家庭宗教社区的关系脱离出来**，他不仅脱离出来，而且反过来它要**成为统治你那些朋友关系和社区关系的力量**。</p>\n<p>你现在跟一个人做朋友是为了有交换的利益关系。当这个交换的利益关系结束的时候，这个朋友关系就已经没了，你再也不愿意见到这个人，所以这个主次关系完全倒过来。在这样的想象下，经济增长是为了增长，然后<strong>人对生命的理解</strong>，<strong>对社会目的的理解</strong>也就完全就变化了。</p>\n<p>比方说在中国现在确实是还是必须要使经济增长压倒一切。为什么？<strong>如果要经济不增长的话，马上出现大规模失业，马上出现大规模的社会不稳定，这个说法似是而非。</strong>在目前的结构下，确实你如果不创造出低层的一些工作，不把这个底层的民众拖住，靠这些工作拖住，确实它会出现大规模的社会不稳定。但是你要从另外一个角度看，如果要看我们全社会创造出来的财富总体，如果你进行再分配的话，是完全够大家吃饭睡觉，一个温饱的社会。如果再分配的话，大家可以每个人都花很多时间搞艺术创作，变成很好的朋友，每个人可能工作五天就够。</p>\n<p>但现在所有人不管你是低收入的农民工，你工作 8 到 12 个小时为了温饱，还是你是腰缠万贵的富翁，你也要工作 8 到 12 个小时，因为你生怕被别人超过，资产会缩水。 <strong>其实你完全不需要这些，你的身体，你的心智是完全不需要这财富的。**这就是**增长主义**，甚至不叫发展主义。因为发展还意味着从一种模式可能进化到另外一种模式，有创新的含义在里面。</strong>增长就是把这个数变大**，唯一靠这个数变大，觉得这才能够维持下来，一旦哪一天停滞，好像一切都会崩溃。这实际上是一个很大的迷思了。</p>\n<p>所以在这样的情况下，要看历史的话，我们就看到物质生产现在已经成为主导性的力量。而人的生产本来是人之为人的一个出发点，现在倒成了一个很次要的东西。<strong>马克思把这个叫做 “异化”。</strong>什么是异化？就是说你生产出钞票，什么是钞票？钞票无非是人发明的，那人为什么要发明钞票？是为了人服务。**但今天有没有钞票成为一个让我们这么焦虑的事实：一个人创造出来为人服务的工具，现在成为了我们的主宰。**这个是说 “异化” 的意思，所谓 “拜物教” 也是这个意思。所以 **物质生产本来是为人的生产服务的**，但现在就倒过来，完全**成了一个主宰我们日常生活的一个力量**。</p>\n<p>那么在这样的情况下，<strong>物质生产的一些逻辑也就贯彻到教育、医疗这些领域里面来</strong>。</p>\n<p>教育是很明显，你本来就是说要让孩子健康快乐，然后去发掘他内在的各种潜力。那每个孩子的潜力不一样，你就发觉不一样的潜力。但是这样做就会需要很大的耐心，效率就不高。效率不高之后，如果要跟各个学校进行评比，就发现有些学校就评估不下来。然后还有一种很强烈的假设是，如果不把学校放在一起评比的话，老师就会变得很偷懒。<strong>假设就是老师去教育其实并不是说在生产人，因为老师在教育的时候，是在做一个工作是为了赚钱</strong>，所以你必须要有一个外在这样的鞭策，通过评比评审，奖励那些做得好的、在指标上很高的（老师），然后惩罚那些在指标上做的不好的老师，才有这样的激励。</p>\n<p>那其实已经开始<strong>把老师想象成一种工具</strong>，然后<strong>老师也把孩子想象成是生产对象</strong>，而不是培养对象。他（老师）也把孩子想象成工具化，他想象的孩子是要在考试的时候一定要是一个高效的考试者。</p>\n<p>然后这样就是一切都标准化，进行评比，把激励的机制引进来，这个就是一种生产性逻辑，一个物质生产性逻辑。这个就是异化的一个精细化，不仅说是物质生产的逻辑，到<strong>统治了我们人的生产活动</strong>，而且是说它<strong>直接形塑了我们如何组织人的生产活动</strong>。在这个情况下，所以出现了一个不是脱节，所以这看起来在逻辑上是很一贯的，正是因为物质生产的这个逻辑变得那么强大，那么一统，然后在这个情况下，你要去讲，我们应该信任老师，就让老师放松，相信老师，他会觉得教育本身是很有趣的。那你可以给老师比较高的工资，然后再有一种比较平等的（制度），<strong>我的意思说不要在老师内部创造出一些等级，不要在学校内部创造一些等级，让老师在教育本身里面获得他那个职业的满足感，获得他的尊严</strong>。当然在物质保障上要的比较接近。现在完全有能力给老师做比较好的物质保障，然后放手让老师去创造、去实验各种教育方式，当然你可以把他们组织在一起进行交流等等。</p>\n<p>现在这样一说起来大家可能会同意，但是去做的时候，我觉得大部分是不敢去这么做的，因为大家觉得<strong>这个物质生产的这个逻辑其实已经使人变得一种非常犬儒的感觉</strong>，就是对其他人基本的不上心，很不信任。你觉得没有这个外在的鞭子挂在那里，没有一个外在的奖金，就是事先跟你承诺好，你月底能拿多少奖金，这个人就不会认真工作的。所以其实**逼迫每个人 “自我异化”**，异化就说自己跟工作，不是自己真心爱的工作，那就把工作变为一个手段，然后把互相人和人都变成彼此的一个手段。</p>\n<p>这个我觉得是一个<strong>物质生产和人的生产之间关系的断裂</strong>，它是一个长时段的一个历史演进过程。那么中国作为一个后发展国家，现在这个断裂可能尤其明显，而且现在就是不顺，断裂了，而且都统一在了这个物质生产的这个逻辑下面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们知道留学在中国是有比较长的历史，这跟中国的现代化是紧密联系在一起的，在清末新政改革。那个时候的留学生是年龄是很低的幼童，留美幼童，包括张天佑这样的人，那个是特殊的原因。改革开放之后，绝大部分的留学生其实是成人，他不仅是本科生，而且主要是研究生，特别是以博士生为主。<strong>在 2000 年之后，是越来越低龄化，然后同时低龄的规模越来越高。</strong>要去理解这个现象，可能要看一下它的历史。</p>\n<p>我觉得中国改革开放之后的留学历程可以分为<strong>三个阶段</strong>。</p>\n<p><strong>第一个阶段是从 1978 年到 1992 年</strong>，然后邓小平南巡讲话，这个之间的这个留学主要是国家公派，流出的人员主要是年纪比较大的、去读研究生的。留学的目的主要是<strong>去学习西方比较先进的技术</strong>，而且这个留学背后还有很强的价值关怀。至少是两个价值关怀在这里，具体的讲：第一个说要<strong>留学，是为了回来，为国服务</strong>，要回来为国服务是帮助中国进步，而不止仅仅是帮助自己的成长。第二个价值关怀，就是在这样的留学项目里面，至少对个体来讲，他是怀有一种这样的理解，觉得西方不仅在科技上比我们进步，而且在社会制度的设计上面，在文化生活上面也要比我们进步，所以他要<strong>学习那里的先进文化</strong>，也希望今后中国哪一天会变成那些留国的目的地一样。所以是带着这样一个价值情怀去的。</p>\n<p><strong>然后第二个阶段从 1992 年 90 年代之后</strong>，到最近这个阶段，这个时点比较难以把握。但是第二个阶段首先的一个变化就是留学，你如果认为留学它是一个项目，它是一个工程的话，那就是<strong>留学从一个国家项目变成了一个个体的行动</strong>，所以它是个个体化（的过程）。那这个时候留学主要的目的并不是说是为国服务，而主要是首先是<strong>为个体的职业生涯考虑</strong>。在这个时候低龄化就出现了，首先是出去读本科，然后是又去读中学小学，当然更有胜者，就现在我们知道有这个所谓产妇，Birth Tourist，就是预产旅游者，就把孩子就生在那里这样等等的一个情况。</p>\n<p>所以跟第一个阶段比，除了<strong>个体化</strong>、<strong>低龄化</strong>之后，我觉得很重要的一个变化是说，这个时候的它的<strong>价值取向</strong>很不一样。特别是在近几年，留学生并不觉得留学目的地，那些国家的技术一定比中国高，特别是在生活方式和社会制度上比中国好。就基本上没有这样的一个价值取向，说要去西方学习那里的精华，然后把它带回自己的祖国了，没有这样。但是<strong>他为什么还要去留学呢？</strong>这个主要就是一些非常实际的个人功利上的考虑，他觉得这个留学有一门英语，还是在工作上、在职场上会有更好的发展。所以总的来讲我们可以认为第二个阶段的一个核心特征是功利化。</p>\n<p><strong>但是现在有第三个</strong>。我碰到的一些家长，我问他为什么那么小就（让孩子）出去？因为我觉得基础教育在国内应该是更好，而且跟家庭在一起，对孩子全面的成长，很天然地讲，应该更加放心。我问那（出去）是为了孩子有一个更好的这个未来吗？在职业上有一个更好的未来，想有更好的收入吗？不是。我们现在今天很多家长，他把孩子在很年轻的时候送出去，确实<strong>不是功利的考虑</strong>。</p>\n<p>他们是说国内的教育制度太重视竞争，太重视分数，老师有太高的权威。等于老师完全是以老师的身份，没有激发孩子兴趣，培养孩子多方面的智商情商。所以他们就觉得这个对孩子作为一个人的成长是不利的。所以今天他们把孩子这么低龄送出去，其实是对第二个阶段的功利化的反动，一种<strong>重新去功利化</strong>，要重新回到孩子作为一个人的这样最根本的考虑上。</p>\n<p>他们也知道孩子这么早送出去分别是很难的，这里有很多情感上的代价，但是他们觉得作为人他今后的快乐，对人生的基本理解，他的一份善心，对人和人关系的感知，这些都太重要了，所以他要送出去。</p>\n<p>所以这里就提出一个非常有意思的问题。</p>\n<p>你看它最早的是一种很强的价值取向，真的去学习，变到第二个阶段说不一定去学习，只不过是去镀金，然后有一个更好的工作，一个目的功利性的考虑，到第三个阶段，既不是说去学习现成的一个先进制度，也不说去功利的为个人，而是说要保证人本质上的潜力。</p>\n<p>这个变化很明显，那跟这个变化同时发生的，为什么越来越多的人把孩子送出去？很直观的一个原因就是<strong>中国的经济在不断的增长</strong>，就越来越多的家庭有了这样的经济条件、经济能力把孩子送出去，所以这里就有一个<strong>悖论</strong>在。中国经济在不断的增长，老百姓至少是在城市中产的，他的物质生活水平，他能够支配的现金量显然在不断的增长，而且大家的信息咨讯，然后跟对世界的了解也在不断增长。但在中国上升的同时，人们又纷纷把孩子送出去，这给我们一个很大很尖锐的问题，回到了一个很经典的问题：<strong>就是这个发展究竟意味着什么？这个经济的增长和人的发展之间究竟是什么关系？</strong></p>\n<p>要提醒大家的是，目前这个状况显然是<strong>不应该也不可能</strong>持续的，就是一方面中国经济不断增长，另一方面我们觉得在这个条件下，人的生产和成长又是一个很不令人满意的结果。你就老靠留学来在这里赚了钱，然后又把人的生活移植到外面去，这个情况是不可能持续生长。所以确实要开始考虑，<strong>我们能够怎么样找到一个发展的道路</strong>，使得这个经济不一定增长，但经济至少是在比较平稳的状态下，<strong>能够找出一个比较合理的教育生活方式</strong>，<strong>使人的成长得到一个合理的发挥</strong>。</p>\n<p>这个确实触动了所谓<strong>现代性</strong>的一个很核心的问题。</p>\n<p>我们要知道人类作为一个物种，在地球上存在，在绝大部分的时间里面，人的活动的目的是直接指向人本身的生产与再生产。我们在这个原始森林里面去摘果子、生火，打猎都是直接满足于自己的生命需要。然后这些生命的需要满足之后，你干什么呢？大量的时间在原始社会，其实是早期艺术发展的时期，唱歌，岩壁上画画，然后各种各样的神话，它不能解释自然世界的时候，他就用发挥自己的想象力去神话。所以现在是有很多数据去证明在所谓的原始社会，用今天的语言去说是生产效率极其低下的时候，其实每个成人一天工作的时间大概是三个小时左右，剩下的时间都是娱乐。<strong>在所谓生产效率极其低下的时候，其实三个小时一天的工作能够满足他生命的需求的，剩下的就是去享受艺术。</strong></p>\n<p>在农耕社会也是这样。农耕社会的主要的一个目的，不是说去增长，不是说去积累，特别是不去积累剩余产品。对于普通主流意识形态，他是要<strong>维持现状</strong>，是最大的一个目标。在农耕社会是稳定，而不是说暴富，让他觉得最重要。<strong>所以仪式很重要，家庭的稳定很重要。</strong>这些当然在后来确实演变为跟政治极权的形式结合在一起，确实变成一个非常桎梏人的一套制度，比方说这个父权体系这样等等，这个是有问题的。</p>\n<p>根据卡尔・波兰尼的理论，它是到了 19 世纪突然有一个很大的思想上的革命。这个革命就叫做 **”去嵌入的革命”**。去嵌入，什么意思？就是原来人们的经济活动，经济生产，它本身并不构成一种独立的活动。你的物质生产是深深嵌入到你的社会关系里面去的，你怎么生产怎么交换？当然这里会有利润的计算在里头，这些利润的计算，你的交易都是受你的朋友关系、社区关系、宗教关系所制约的。 **当你跟另外一个人的贸易关系中断的时候，你作为朋友关系在继续。**但是 19 世纪之后，新的经济学家突然发明了一种理论，他（卡尔 · 波兰尼）认为这种市场的行为 **生产和交易是独立的**，是可以独立，它有自在的一套规律在那里，有法则在那里，所以就所谓叫 “去嵌入”，意思就从原来就或者拖欠 **从原来那个社会关系家庭宗教社区的关系脱离出来**，他不仅脱离出来，而且反过来它要**成为统治你那些朋友关系和社区关系的力量**。</p>\n<p>你现在跟一个人做朋友是为了有交换的利益关系。当这个交换的利益关系结束的时候，这个朋友关系就已经没了，你再也不愿意见到这个人，所以这个主次关系完全倒过来。在这样的想象下，经济增长是为了增长，然后<strong>人对生命的理解</strong>，<strong>对社会目的的理解</strong>也就完全就变化了。</p>\n<p>比方说在中国现在确实是还是必须要使经济增长压倒一切。为什么？<strong>如果要经济不增长的话，马上出现大规模失业，马上出现大规模的社会不稳定，这个说法似是而非。</strong>在目前的结构下，确实你如果不创造出低层的一些工作，不把这个底层的民众拖住，靠这些工作拖住，确实它会出现大规模的社会不稳定。但是你要从另外一个角度看，如果要看我们全社会创造出来的财富总体，如果你进行再分配的话，是完全够大家吃饭睡觉，一个温饱的社会。如果再分配的话，大家可以每个人都花很多时间搞艺术创作，变成很好的朋友，每个人可能工作五天就够。</p>\n<p>但现在所有人不管你是低收入的农民工，你工作 8 到 12 个小时为了温饱，还是你是腰缠万贵的富翁，你也要工作 8 到 12 个小时，因为你生怕被别人超过，资产会缩水。 <strong>其实你完全不需要这些，你的身体，你的心智是完全不需要这财富的。**这就是**增长主义**，甚至不叫发展主义。因为发展还意味着从一种模式可能进化到另外一种模式，有创新的含义在里面。</strong>增长就是把这个数变大**，唯一靠这个数变大，觉得这才能够维持下来，一旦哪一天停滞，好像一切都会崩溃。这实际上是一个很大的迷思了。</p>\n<p>所以在这样的情况下，要看历史的话，我们就看到物质生产现在已经成为主导性的力量。而人的生产本来是人之为人的一个出发点，现在倒成了一个很次要的东西。<strong>马克思把这个叫做 “异化”。</strong>什么是异化？就是说你生产出钞票，什么是钞票？钞票无非是人发明的，那人为什么要发明钞票？是为了人服务。**但今天有没有钞票成为一个让我们这么焦虑的事实：一个人创造出来为人服务的工具，现在成为了我们的主宰。**这个是说 “异化” 的意思，所谓 “拜物教” 也是这个意思。所以 **物质生产本来是为人的生产服务的**，但现在就倒过来，完全**成了一个主宰我们日常生活的一个力量**。</p>\n<p>那么在这样的情况下，<strong>物质生产的一些逻辑也就贯彻到教育、医疗这些领域里面来</strong>。</p>\n<p>教育是很明显，你本来就是说要让孩子健康快乐，然后去发掘他内在的各种潜力。那每个孩子的潜力不一样，你就发觉不一样的潜力。但是这样做就会需要很大的耐心，效率就不高。效率不高之后，如果要跟各个学校进行评比，就发现有些学校就评估不下来。然后还有一种很强烈的假设是，如果不把学校放在一起评比的话，老师就会变得很偷懒。<strong>假设就是老师去教育其实并不是说在生产人，因为老师在教育的时候，是在做一个工作是为了赚钱</strong>，所以你必须要有一个外在这样的鞭策，通过评比评审，奖励那些做得好的、在指标上很高的（老师），然后惩罚那些在指标上做的不好的老师，才有这样的激励。</p>\n<p>那其实已经开始<strong>把老师想象成一种工具</strong>，然后<strong>老师也把孩子想象成是生产对象</strong>，而不是培养对象。他（老师）也把孩子想象成工具化，他想象的孩子是要在考试的时候一定要是一个高效的考试者。</p>\n<p>然后这样就是一切都标准化，进行评比，把激励的机制引进来，这个就是一种生产性逻辑，一个物质生产性逻辑。这个就是异化的一个精细化，不仅说是物质生产的逻辑，到<strong>统治了我们人的生产活动</strong>，而且是说它<strong>直接形塑了我们如何组织人的生产活动</strong>。在这个情况下，所以出现了一个不是脱节，所以这看起来在逻辑上是很一贯的，正是因为物质生产的这个逻辑变得那么强大，那么一统，然后在这个情况下，你要去讲，我们应该信任老师，就让老师放松，相信老师，他会觉得教育本身是很有趣的。那你可以给老师比较高的工资，然后再有一种比较平等的（制度），<strong>我的意思说不要在老师内部创造出一些等级，不要在学校内部创造一些等级，让老师在教育本身里面获得他那个职业的满足感，获得他的尊严</strong>。当然在物质保障上要的比较接近。现在完全有能力给老师做比较好的物质保障，然后放手让老师去创造、去实验各种教育方式，当然你可以把他们组织在一起进行交流等等。</p>\n<p>现在这样一说起来大家可能会同意，但是去做的时候，我觉得大部分是不敢去这么做的，因为大家觉得<strong>这个物质生产的这个逻辑其实已经使人变得一种非常犬儒的感觉</strong>，就是对其他人基本的不上心，很不信任。你觉得没有这个外在的鞭子挂在那里，没有一个外在的奖金，就是事先跟你承诺好，你月底能拿多少奖金，这个人就不会认真工作的。所以其实**逼迫每个人 “自我异化”**，异化就说自己跟工作，不是自己真心爱的工作，那就把工作变为一个手段，然后把互相人和人都变成彼此的一个手段。</p>\n<p>这个我觉得是一个<strong>物质生产和人的生产之间关系的断裂</strong>，它是一个长时段的一个历史演进过程。那么中国作为一个后发展国家，现在这个断裂可能尤其明显，而且现在就是不顺，断裂了，而且都统一在了这个物质生产的这个逻辑下面。</p>\n"},{"title":"戴锦华老师关于墨茶事件的思考","_content":"\n\n一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。\n\n他为什么不卖惨？\n\n在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。\n\n\n\n主讲人丨戴锦华\n\n整理丨吴俊燊\n\n摄影丨顾于\n\n排版丨叶雨昕\n\n\n从《迦百农》到《贩肤走卒》，两个完全不同的艺术路径，在处理同一个今日世界惨烈进行之中的现实，他们为什么采取了这样的不同？他们的不同之间有没有优劣之分，有没有有效与无效之分？他们与我们之间究竟又建立了怎样一种联系？我们确实经由这样的电影而看到了吗？还是我们经由这样的电影，我们经由这样的电影能否召见其中的我们自己？如果我们照见了那是怎样的自己？这是我想跟大家分享的一组问题。\n\n拉康漫画\n我忍不住放出拉康来，有一种说法叫做20世纪到21世纪之交的最重要的变化，就是拉康彻底地取代了弗洛伊德。我把故意的选了一张拉康的漫画，还放了一大堆眼睛，我要说什么？我要再一次引证拉康的名言叫“眼睛是欲望器官”，当我们看的时候，我们欲望着，当我们看的时候我们在投射着，在我们的目光当中是有利比多的，那么，我们把我们的利比多投向哪里呢？\n\n\n\n\n自拍召唤着、想象着一个注视的目光\n\n\n引申到第二个问题，这一组照片我也是偷懒，也是我自己有足够的素材，全是我自己拍的。我在旅游路上拍的，每一个拍摄的场景都是一个著名的历史空间。我在这个历史空间当中看到的是自拍的人们，种种自拍的场景，我用它发了一组朋友圈，题名叫带着手机去旅行。\n\n换句话说，带着手机其实不用去旅行了，我们可以采取《天使爱美丽》当中的那个便捷的方法，我们只需要这个有那些著名的图片把我们自己做个抠像放上去就好了。\n\n（主讲人PPT截图，图中照片均为主讲人拍摄）\n我也做过一个描述，我说非常有意思，我们大概进入任何一个风景胜地，进入任何一个著名的历史空间，甚至不需要这么夸张，只要看到一处有优美感的风景，我们看到一树繁花，我们看到一处绿草坪，我们就会看到这样一种人，背对美景，面朝虚空，45度角灿烂微笑，他们在拍摄自己。\n\n\n回到拉康，自拍的行为抑制着意味着什么？意味着利比多内投，我们的欲望是投给我们自己的，我们所欲望着的是我们自己。当我们去看的时候，我们只想看到自己。我们真的只想看到自己吗？事实上我们渴望成为被看的对象，自拍召唤着、想象着一个注视的目光。\n\n\n直播就把这个昭然若揭了。当我进行直播的时候，我是在召唤着观看，召唤着欲望的目光，想象自己成为欲望的客体，而且最好是崇高客体、大客体。而这样的一种文化，事实上已经开始浸透了电影文化，开始形成了某一种新的电影的视觉结构、叙事结构和欲望结构的依据或者动力。\n\n\n这部电影，看大家的反应是都没看过，据说日本电影新浪潮第二浪，据说是第二次日本电影新浪潮的代表作者滨口龙介，获得了欧洲国际电影节的最佳导演的影片，叫《夜以继日》。我推荐看，挺好看的一部电影。\n\n《夜以继日》电影海报（图源：豆瓣）\n在这部电影当中，故事情境很老套。黑泽清先生所带领的所养育的这个青年电影团队，被称之为日本电影第二次新浪潮的青年团队，他们很擅长一种特定的形态，他们把日常生活的情节剧拍得像恐怖片，他们赋予了日常生活的情感戏以惊悚感。在这个意义上说，是希区柯克之后的又一次伟大创造，他再一次发掘了我们内心的黑暗，我们内心的魔鬼及其我们日常生活的扭曲。\n\n\n这部电影抛开他们这种惊悚感不谈，它就是一个古老的情节剧，一个古老的情境，一个姑娘和两个男人，他用了同一个男演员演两个男人，这已经很有意味了。但是，在剧中这个两个男人的个性、生命方式、生活形态的选择，南辕北辙，一个人绝对冒险，一个人绝对循规蹈矩。而整部电影很像《贩肤走卒》，但是美学上完全不同。那么就是无处不在的镜像，无处不在的镜框，无处不在的电影对自己媒介的自指，每一个画面都回到电影自身，告诉你你看电影呢。电影是有画框的，电影是银幕、screen，电影其实是一种幻象，电影其实是个镜子，不断地提醒你这个东西。\n\n《夜以继日》电影剧照（图源：豆瓣）\n每一次女主人公和两个男主人公相遇，都是当女主人公面对一幅照片，照片的玻璃上映射出了她自己和她背后的人的时候，她才看到了男人和自己。\n\n\n当我看完这部电影的时候，我意识到在这部电影并没有一个女主人公和两个男主人公，这个电影只有一个女主人公和她的欲望、她的梦想，她生命的两种彼此撕扯的价值方式的形态的实践。\n\n\n所以，这部电影是一个关于自己自恋和自己梦想的故事。不期然地，遇到了一部中国的中小成本带有艺术审美追求的电影，非常惊讶的发现，我们不落伍，我们也奋起赶上了这波潮流。《七月与安生》。关于这部电影有各种各样的解释，你可以说是两个女孩子和一个男孩子的故事，你可以说是两个女孩子超越性友谊的故事，你可以说是两个女孩子的友谊最终被男人、因为争男人而粉碎的故事，你可以因此引申出女子无真相，女子无友谊，这个友谊桃园三结义之类的，只有男人才能享有，女人的友谊就是在男人出现之前存在。\n\n《七月与安生》电影海报（图源：豆瓣）\n如果你是一个女性主义者，你看完这个电影以后，你就说，这个电影是个男权老套，叫做坏女孩走四方，好女孩上天堂，对吧？两个女主人公他们一个循规蹈矩，一个放纵不羁。\n\n\n但是我看完这部电影以后，发现导演还颇具匠心，这部电影其实没有两个女主人公和一个男主人公，只有一个女主人公和她的镜像。在这部电影当中只有安生，没有七月，因为在故事的每一个阶段，七月都象征着安生所缺匮乏的价值、内容、生活方式，她每一次都代表着安生曾经去尝试，但是非常惨烈、非常艰辛、非常悲惨的方式，而到七月就充满了理想的梦想的形态。\n\n《七月与安生》电影剧照（图源：豆瓣）\n安生的漂流是流浪，是陪酒，甚至是卖身，而七月的漂流是参加国际NGO，到处的为他人服务，非常优雅地在素食店里头，在所有的高雅的中产阶级的趣味所在的空间当中。\n\n\n我不一一去对照，那么大家说这是你的解读吧，真不是我的解读，就是在电影当中，当安生独自在场的时候，永远是安生和她的镜像。而七月从来没有出现过七月和她的景象，而当七月出现的时候，安生的镜像也消失了，因为七月就是她的镜像。\n\n《七月与安生》电影剧照（图源：豆瓣）\n\n\n我们开始丧失看的能力\n\n更严重的是我们丧失了看的愿望\n\n\n那么，这样的一种电影、文化、社会、新媒体对社会文化、社会心理的改变，而这种改变反身进入到电影文化之中，形成新的电影叙事的可能，电影的动力。令我感到忧心，首先因为，我坚持保卫电影，固然因为我爱电影，固然因为电影伴随了我整个生命，但更重要的是，电影是20世纪创造的伟大的公众艺术，电影的公共性在创造着城市的公共性，在试图建立新的现代社会的公共性，在试图经由这种公共媒体，使我们看见，使我们去看，并且使我们看见。\n\n拉康\n拉康又来了，为什么再次引出拉康？是因为大家可能知道拉康的那个非常著名的表述，就是拉康创造了一个字叫gaze，凝视。而拉康的凝视，如果真的是学电影的朋友多说一句，这个凝视经由劳拉·穆尔维，女性主义电影理论学者的那篇长篇论文，而名传遐迩、传遍全世界。不仅影响了电影研究、人文学科，而且影响到了性别研究的方方面面，但是不好意思，劳拉·穆尔维用错了。\n\n\n劳拉·穆尔维真的以为，凝视就是我们日常所说的凝视，我凝视着你，而拉康赋予了凝视一个完全不同的解释，因此拉康就如此幸运的取代弗洛伊德，成了20世纪的心理学家。因为在拉康看来，所谓的凝视就是一个召唤被看的目光，一个回返的目光。拉康给他的凝视一个非常清晰的定义，他说我是被看的，我是一幅图画，当我在看的时候，我把自己变为了一幅图画，在召唤着，在体认着被看。\n\n\n我也曾在很年轻的时候写过这句话，我说弗洛伊德是三幕剧，第一幕是母子同体；第二幕是闯进了一个叫爸爸的，然后要把妈抢走；第三幕是四个角色出现了，一个不是妈妈的女人进入，男孩子把自己变成了一个父亲，于是有爸爸妈妈，有儿子和儿媳，完满了，成长了。而在拉康这里，永恒的是一个独角戏，舞台上只有一个人物和一面镜子。\n\n\n把拉康的心理学，拉康的符号学，拉康的语言学模式放在一边，我们说拉康的成名，拉康的这个流行，在某种意义上，它阐释了，它也构造了我们时代的精神症候——我们开始丧失了看的能力，其实可能更严重的是我们丧失了看的愿望。\n\n\n因为所谓的看，在最古老的西方哲学的意义上，也是我们对自己主体意识的获知，是我们经由发现客体，发现他者，找到、体认、建立起我们与他人之间的连接，才再度获得了对自我、对自己作为主体，社会的主体，历史的主体，生命的主体，它的意义，它的可能性的思考和认知。当我们只看到自己的时候，我们又在什么意义上去确认我们的自我是关于我们自己的本质，关于我们自己的可能，关于我们自己与在这个社会上的位置的指认呢？\n\n\n\n从“饥饿的苏丹”开始\n\n\n对照刚才普利策奖的越战的照片，我今天很认真的选择了两个例子，第一个例子是非常著名的一场公案。90年代初期，苏丹爆发大规模的内战，极端惨烈，而当这场内战进行过程之中的时候，国际社会袖手旁观，置若枉然。而这场灾难，一如从前的，引发了加剧了非洲普遍的饥饿，战火弥散在苏丹，同时大饥荒在苏丹爆发。\n\n《饥饿的苏丹》，摄影师凯文·卡特\n1993年年初，一个南非的自由记者卡特旅行到了苏丹，他目击了这样一个场面，一个女童，大家大概可以辨认出一个特征，就是她的头几乎跟身子等大，这是极度饥饿的一种体状，头大如斗，它既是那个身体完全发育不出来，又是那个头开始进入到浮肿，所以那个头非常大，这典型的极度饥饿状态。那个极度饥饿的女孩就蜷缩在那里，在一个濒死的状态，她的濒死状态是由后面的拍摄到的影像所证明的，一个秃鹫已经在那等着了。秃鹫这种食尸的食腐的动物，有能力感受到濒死的气息。但是还好，所有的食腐的动物，当你一息尚存的时候他不进攻你，所以那个秃鹫等在近旁。\n\n\n这个摄影师看到了这一幕，他拍摄了这一幕，这幅照片在纽约时报上发表了。当这幅照片在纽约时报发表的时候，虽然不像当年的小女孩，不像当年美国记者所拍到的美军美莱村大屠杀的图片，没有那么大的轰动和震惊，但是它仍然震动了富裕的，可能也包含像我们这样的社会。在今天，我们生存在这样的一种现实的人们，我们怎么去感受这种饥饿？其实在整个欧洲，在所有的正常的没有战争和灾难的情况下，欧洲几乎每10分钟就有一个孩子死于饥饿和营养不良。\n\n\n这幅画面在纽约时报上刊登以后，还是引起了震惊。某种程度上，这幅照片第一次引发了国际社会的谴责，苏丹在战争之中的时候，苏丹在饥荒之中的时候，整个的国际社会包含联合国、联合国难民署、联合国各个机构居然袖手旁观，这是多么的不义。开始有了种种批评和敦促之声，所以第二年，1994年这张照片被授予了普利策图片奖。\n\n\n但是，在这个照片被授奖之前，一场争论，继而是一场汹涌澎湃的全球性的网暴发生了。首先，摄影师不明智地做了一个创作谈。摄影师说，我看到这个孩子的时候，就是这个样子。他说，我悄悄地走进，我找到一个角度，不惊动那个秃鹫，我架好摄影机。他说我等了20分钟，我想抓到秃鹫展翅的时刻，但我没等到。这个创作谈发表以后，网络上正义的网友们沸腾了，说一个孩子快饿死了，你不去救他，拍你的作品，你还等了20分钟，你是畜生，一个新闻记录者的伦理何在？一个基本的人道主义的道德何在？\n\n\n那么，给这个影片授奖的评委做了解释，说讨论给这个影片获奖的时候，我们做了考量，这里面涉及到永远的纪录片伦理，新闻工作者伦理。一个灾难发生的时候，你第一时刻是拿出照相机去拍他，还是第一时刻冲过去救人？永恒的道德困境和永恒的职业伦理的讨论。\n\n\n他说，这部照片出现的时候，我们马上谈到了这个问题，他说我们细看了，其实这个孩子的手上有联合国救助的手环，她已经得到救助了，但是显然救助的力度是不够的。而得到救助和这幅照片展现的苏丹的饥饿程度不冲突。评委说，我们因此还是决定给这幅照片授奖。\n\n\n\n但是，大多数公共媒体都拒绝和屏蔽了这个评委的解释。摄影师的朋友说，他拍这个照片，他是在那等了20分钟，他拍完这个照片以后，他就冲过去把秃鹫赶走，把女孩抱起来，把女孩送回到救助单位以后，他说他就坐在那一直哭，他不断地对朋友说，我想回去抱一抱我的女儿。这个消息也没有得到传播。1994年普利策奖发表，使得这场网暴达到了极致。\n\n\n\n大家说，你们这些人就是食尸兽，你们就是吸血鬼，你们用别人的苦难换取了你们的名誉。正义的声浪一浪高过一浪，普利策摄影奖颁布两个月之后，摄影师在他的汽车里，引车“废气”自杀，他留下了一封遗书说，对不起，真的对不起大家，生活的痛苦远远超过了生活的快乐。\n\n\n\n大家可以想象，摄影师的自杀造成了舆论反转。于是，人们开始说，你们才是食尸兽，你们杀死了这个正义的摄影师。于是，奇特的消息开始出现，大家说他不是死于对他的谴责。他拍完这个照片之后，就去了一个冲突地区。本来卡特要成为主摄影师，但是中途他晕车，所以他的朋友代替他去当了摄影师，而他朋友就死在现场了，说他很负疚。\n\n\n\n另一个人出示证据说，他的经济状况很差，入不敷出，经济压力太大，所以他自杀了。好多好多的故事，使得卡特之死是否和对职业伦理的追问和讨论，以及如此巨大的全球范围之内的网报相关完全的被搁置。\n\n\n\n这是screens，数码时代，另外一个有趣的面向。我现在不讲正义的标准，我不再讨论，因为每一个网络事件，最终都以重重谜团而告终结，最终没有人还可能找到一个位置，去给出一个“真相”。于是人们宣布，我们进入了后真相时代，于是人们宣布有图没真相，于是人们宣布一切都不过是商品而已。\n\n\n\n你的真正的悲惨永远只能是 “卖惨”\n\n\n我在旁边放的例子，确实引发了我的关注。和刚才的例子不同，但相关。大家可能听说的， B站的一个up主叫墨茶，被发现死于贫病交加，准确的说死于营养不良。我且不说，当我这一次想找有关的材料时候的变化，比如我看到后来所有关于这件事的讨论和报道都用这样的标题，叫“b站网红主播活活饿死”。\n\n\n主讲人手机截图\n他死的时候，他有200个粉丝。什么“网红”？由这个命名引发的讨论就完全偏离了这个事件，因为大家就说了，一个网红主播怎么可能死于饥饿呢？\n\n\n\n一个孩子，一个年轻的孩子，患有严重疾病，几乎身无分文，居无定所，上无片瓦，下无立锥之地。他一直在直播，一直直播到他生命的最后时刻。不论怎么去解释，他死于极度营养不良，而造成这种营养不良的，最直接也是最重要的原因是饥饿，是食物的不足。\n\n\n那么，引发的结果，当这孩子死去，用他的死亡完成了一个表述和书写的时候，事情开始发生变化了。变化就是短短的两天之内，他的粉丝涨到了30万，然后持续增长，好像他的死亡才唤起了我们一点震撼，还唤起了一点同情，唤起了一点同理心的投注。\n\n\n今天，大概在座的每一个朋友，我们都有一点余力伸出我们的手，让一个人免于饥饿，我觉得这件事我们很容易做到，我们有能力做到，我们不需要做出巨大的牺牲，表现巨大的慷慨，我们就可以完成这件事。但是，这个孩子就这样死去了，追索的消息让我感到奇特，首先是当他死亡之后，他的粉丝急增，人们的热情和讨论开始急增，进而是质疑的声音马上出现。\n\n\n今天会有人饿死吗？这是真的吗？他真死了吗？怎么可能这样死了呢？因此网络大起底开始，网络大揭秘开始。\n\n\n人们揭露出他不义的父亲，人们揭露出他生病的祖父母，人们揭露出种种他生活中的不正义的力量。于是大家奋力去谴责，谴责他的父亲，谴责这个医疗制度。而一个对我来说非常重要的议题，完全的被偏移和消失了。就是关于在我们今天这样一个如此富裕的年代，在这样的一个食品几乎处在过剩状态的年代，在这样一个我们不断的讨论健康生存、减肥、吃素、慢生活的时代，一个孩子的基本的物质现实是如此的悲惨。\n\n\n而一种赞美让我感到更可怕，一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。我看到这句话的时候，真的有一点冲动，就是想打谁一顿的冲动，但是我继而产生了一个联想，纯属联想了。\n\n《小家伙》电影海报（图源：豆瓣）\n我记得非常偶然的一次点映场，我去看了一部俄罗斯电影《小家伙》。这部电影我一看就很清楚，这部电影的视觉语言非常强烈，但并不原创。因为他很明显的是有比利时的那对兄弟导演，达内兄弟在《罗塞塔》这部电影当中，它完善了一种全新的记录性的、高技术性的，其实是极高的技术含量的，一种紧逼盯人的、纪实风格的拍摄方法。\n\n\n达内兄弟和《罗塞塔》（图源：豆瓣）\n在电影当中，讲一个前俄罗斯加盟共和国的女孩，在俄罗斯打黑工，她被警察胁迫发生性关系，她怀了孕。她的灾难是有孩子她还怎么可能继续留在这打黑工，所以她要丢掉这个孩子，所以她从产房里逃走。而她就是一个刚刚生了孩子的孕妇，她怎么解决已经开始产生奶水的乳房，她怎么去处理剖腹产的那个仍然在流血的伤口？她用极端野蛮的办法处理自己的身体，非常纪实，非常现实，但是并不是现实主义，因为达内兄弟的电影语言使得它与现实主义发生的距离。\n\n\n我看完这部电影回到家里，很习惯性地到豆瓣上去看一看相关资料。当时只有一条影评，这条影评就说，“受够了这些卖惨的电影”。\n\n\n我在看到对墨茶的赞美的时候，这个时刻回到我的记忆当中。我觉得，这个时刻似乎给我提供了一个答案，他为什么不卖惨？你可以理解成，这个孩子在最后要死于饥饿的时候，仍然试图维系最低的尊严。你也可以从另外的角度说，这个孩子知道卖惨是没用的，因为在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。\n\n\n在这个故事当中，那个极端赤裸的，就真正所谓的“裸命”，阿甘本所谓的赤裸生命，他已经低到牲畜一般的、牲畜不容的生命，在经由达内兄弟式的纪实展现的时候，却会被体认为卖惨。那么我们普通的悲惨生活，还有什么言说的可能呢？\n\n\n第二个参数是，据说有一种流行偶像的萌点是“美强惨”，我就很关心怎么个惨法，一看，这叫惨呐？他不过经历了我们每一个人生当中都必然要经历的无可逃脱的一般磨难，生命的离散，生老病死，这些可以构成指认中的惨。而那些完全在我们的生命体验、生活内容之外的悲惨、苦难，相反变为不可认知的、危言耸听的、夸大其词的、难以容忍的。\n\n\n因为它击破了我们的镜像，它击破了我们的幻觉。我经常举那个例子，在知乎上，我看到那个问题的时候，我瞠目结舌，那句话说，“北京有穷人吗？北京如果有穷人的话，为什么我没见过呀？”\n\n\n我看到这句话的时候，我就愣在那儿。它不是在说，我们生活在一个完全中产的世界之中，以致我们看不到穷人，而是，它说明我们已经获得了这样巨大的心理机制，我们的目光自动地掠过了穷人，或者我们不能指认穷人。我说什么叫穷人？相对你来说，冬天睡在那个寒冷的工棚里的，夏天在草坪上醒来的那些农民工，他们是不是穷人呢？他们如果不是穷人的话，他们为什么要过这种你不能容忍的生活呢？\n\n\n或者，我看到最令人发指的一条说法说，代孕这个技术太好了，因为它彻底的解放了人性，我们终于摆脱了兽性。当他说这句话的时候，这个“我们”当然是指有能力、有愿望购买代孕服务的男人和女人。那么，换句话说，“代孕体”根本不进入他的视野。相对于那些人来说，她们是被更野兽化了，还是她们完全被器皿化了？\n\n\n我曾经说，我们看到《使女的故事》的时候，我们震惊，我们战栗，我们说专制集权可以把女人变成行走的子宫。我说，好像没有人想到代孕服务无需任何专制集权，我们已经以为，只要我拥有金钱进入到购买的契约关系当中，就可以把另外的女人变成行走的子宫。\n\n\n所以，屏幕似乎无限的丰富，屏幕似乎向大千世界展开，屏幕让我们看到种种形形色色的世界，形形色色的画面，屏幕似乎也让我们看到了底层和异类的人们。但是，我们真的经由他们，而获得了抵达他人和认知他人的能力吗？\n\n\n很少在PPT上写字，我拒绝在PPT上写字，但是我最后还是写了字。想跟大家分享我的一点文字游戏，但真的不仅仅是游戏。\n\n\n当我们面对screens，我面对汉字当中的屏幕的时候，如果你在中间画一杠，你会发现屏幕是一个现代汉语的典型形态，把两个汉字组成一个字，而每个汉字原本是可以独立表意和另外组合的。屏可以是屏显，可以是屏蔽，可以是屏风，幕可以是银幕，可以是幕布，可以是帘幕。每一个像你显影的屏幕，它同时可以成为一个遮挡，一个遮蔽物。它在让你看到的时候，让你不见。它在替你选择，它在把无限的世界用画框做了切割。\n\n\n那么同样，当我们讨论电影银幕的时候，我们经常使用隐喻的方法，我们有时候把它比作镜子，它是幻想，它是自照，它是幻觉；我们有时候把它比作画幅，画框，使得一幅屏幕内部的元素，成了具有了语言的特质，它可以组织，它可以表达。但是，我们经常忘记了一个屏幕应该成为一扇打开的窗，让我们从这里到那里，让我们从此地望向彼地，让我们从自我望向他人。\n\n\n\n爱是一个连接起我们与他人的\n\n最好的可能\n\n\n最后，想跟大家分享，我认为对我具有打开的窗的性质的电影。近年来我所喜爱的电影，包含了肯洛奇，英国的老战士，伟大的电影艺术家，肯洛奇的《我在哪儿错过了你》，包含近年来我的最爱，近十年我的number one，李沧东的《燃烧》，包含我自己不那么欣赏，但是大获成功大满贯的《寄生虫》。\n\n\n\n固然因为，这四部电影对我都构成了打开的窗，但是重要的是，我突然发现这四部电影有着共同的主题，他们面向共同的人群，这个共同的人群就是非稳定雇佣劳动者。说的简单一点就是打零工的，说的体面一点，就是今天全球资本主义生产的全新的组织形态，叫弹性雇佣，叫劳务外包。\n\n\n它使得机构、雇佣、劳资关系、社会福利制度都被改变，说极端一点，都被取消。而这样的人群是需要打开一扇窗被看到的，需要从我们关于自己的、投向自己的目光，充满了自恋，充满了满足，充满了自我爱恋的目光之外，去看到的。但从另外一个意义上说，它未必和我们不紧密相关。\n\n\n因为，新技术革命带来的一个最大的变化就是它在创造着结构性的弃民，这是我自己创造的说法，因为它不是创造了过剩劳动力，它是创造了绝对的无用的人。因为，新技术革命在最朴素的意义上是一轮前所未有规模的自动化进程，不是我的说法，是谷歌的高级顾问的说法。他说，每一场新技术革命发生之后，最大的社会难题就是如何消化过剩劳动人口。\n\n\n前头说的都是人话，往后面就不是人话了。他说，这一次新技术革命创造的过剩人口劳动力有多少呢？他自问自答，98%。他自己举例说，你看看占领华尔街那帮人，就是他们。他说，你看看他们上街去抗议示威，个个都吃的白白胖胖的，穿的整整齐齐的，他们这些人根本就是多余的。\n\n\n他再往下说，那么面对这么大的问题我们怎么办？说老实话，在我第一次阅读的时候怀着紧张，我看看这个家伙他怎么回答这个问题。他回答了，我快气疯了。他说，争当2%。换句话说，那98%不值得去讨论，不值得去回答。社会如何消化他们，也不是我们要考虑的问题。那么我要问的是，谁是“我们”？在座的朋友，如果那么有把握当2%，咱们就不讨论了，我至少在年龄上已经再没有可能成为2%了。\n\n\n所以，我只好自己站到98%那边去。用这样的自觉、用这样的意识去看向屏幕，去看向电影，去看向世界，不是悲天悯人，不是充满同情的，不是富于左翼政治立场的，而是关注自己的、关注同等命运的人，去望向那些已然成为器皿，已然被抛出了经济版图，已然被大数据无法统计，也拒绝统计的人群。\n\n\n因为，我未必不在明天和他们遭受同样的命运。\n\n\n那么，我们谁也不能回避人类向死而生的基本事实，谁也不能回避人类的生命极端短促，尽管辉煌璀璨。我们谁也不能回避，在今天这样一个充满风险的世界当中，我们是越来越社会化的生存。宅越封闭，个体生存越完备，个人主义的实施的可能性越强，我们每一个人的社会化程度就越高，因为我们的独立依赖的是整个系统的正常运转。我真的满怀感激之心，在新冠病毒期间体会到我们的背后的整个机器是多么正常的运转，才使得我们衣食无忧，才使得我们能够宅得住。\n\n\n但是，同时也是新冠病毒，让我们看到整个现代文明全球化的连接是多么脆弱，一边是越来越剧烈的流动，越来越紧密的连接，一边是越来越深刻的断裂和隔绝民族国家的疆界，社群的疆界，种群的疆界，这个民族宗教的疆界，各种右翼民粹，各种民族主义乘机而起，各种身份政治，以最为极端的方式，在相互的攻击和相互的拒绝，这是我们今天自身的现实。\n\n\n那么，我们能在我们的屏幕上看到吗？或者当我们看到的时候，我们能够去体认吗？或者准确推送、精准推送、大数据统计，为你而量身定做的、私人定制的一个推送系统，在什么意义上断绝了你与异质性的生命和异质性身体相遇的可能？\n\n\n我们的选择始终在，我们的主观能动性始终在，我们的主体可能始终在，它取决于我们是否乐意于分享这样的一种意识，我们是否接受这样一些麻烦。就是我手动去浏览一下新闻，我不是被动的接受它的推送，我多按几个键拒绝一些推送，拒绝一些对我的准确的定位，并不难。图书馆的阅读、电影院的观影、偶然的和朋友们的相聚，所有的这一切公共的空间，城市的空间，生命的空间，始终仍然在我们的掌握之中。\n\n\n最后，还是想用去年对我来说很痛的一件事的结局——电影手册编辑部集体辞职的最后一期卷尾语，来结束我跟大家的分享。感谢大家一直抑制了你们的民主权利，没有站起来投票。我用最后的这个话跟大家分享，来结束今天的讨论。\n\n\n电影手册编辑部在他们最后一卷的卷尾语当中有这样两段话，这两段话深深的打动了我，也是我高度的认同，关于电影，也关于屏幕，关于我们时代的文化，关于我们的视觉——“电影应该是一种及物的艺术，只有当我们拍摄他者而忘却自我的时候，电影才有意义。”\n\n\n下面一句话有一点矫情，大概五年前我会不好意思，但是现在我要大声地把它读出来：“电影之力需由爱来解开，是连续的爱的扣环让我们喜欢一部电影：充斥其中的情感，对于每个细节和整体辩证的用心，为了作品而不遗余力完成的爱意 。热爱我们所做，同谁做，以及为何而做的——爱的艺术。”\n\n\n因为对于我来说，爱不是一种矫情，爱不是一种浪漫，爱不是一种虚构，爱是一个连接起我们与他人的最好的可能。 作者：国仁全球大学堂 https://www.bilibili.com/read/cv11118169?from=search&spm_id_from=333.337.0.0 出处：bilibili","source":"_posts/戴锦华老师关于墨茶事件的思考.md","raw":"---\ntitle: 戴锦华老师关于墨茶事件的思考\n---\n\n\n一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。\n\n他为什么不卖惨？\n\n在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。\n\n\n\n主讲人丨戴锦华\n\n整理丨吴俊燊\n\n摄影丨顾于\n\n排版丨叶雨昕\n\n\n从《迦百农》到《贩肤走卒》，两个完全不同的艺术路径，在处理同一个今日世界惨烈进行之中的现实，他们为什么采取了这样的不同？他们的不同之间有没有优劣之分，有没有有效与无效之分？他们与我们之间究竟又建立了怎样一种联系？我们确实经由这样的电影而看到了吗？还是我们经由这样的电影，我们经由这样的电影能否召见其中的我们自己？如果我们照见了那是怎样的自己？这是我想跟大家分享的一组问题。\n\n拉康漫画\n我忍不住放出拉康来，有一种说法叫做20世纪到21世纪之交的最重要的变化，就是拉康彻底地取代了弗洛伊德。我把故意的选了一张拉康的漫画，还放了一大堆眼睛，我要说什么？我要再一次引证拉康的名言叫“眼睛是欲望器官”，当我们看的时候，我们欲望着，当我们看的时候我们在投射着，在我们的目光当中是有利比多的，那么，我们把我们的利比多投向哪里呢？\n\n\n\n\n自拍召唤着、想象着一个注视的目光\n\n\n引申到第二个问题，这一组照片我也是偷懒，也是我自己有足够的素材，全是我自己拍的。我在旅游路上拍的，每一个拍摄的场景都是一个著名的历史空间。我在这个历史空间当中看到的是自拍的人们，种种自拍的场景，我用它发了一组朋友圈，题名叫带着手机去旅行。\n\n换句话说，带着手机其实不用去旅行了，我们可以采取《天使爱美丽》当中的那个便捷的方法，我们只需要这个有那些著名的图片把我们自己做个抠像放上去就好了。\n\n（主讲人PPT截图，图中照片均为主讲人拍摄）\n我也做过一个描述，我说非常有意思，我们大概进入任何一个风景胜地，进入任何一个著名的历史空间，甚至不需要这么夸张，只要看到一处有优美感的风景，我们看到一树繁花，我们看到一处绿草坪，我们就会看到这样一种人，背对美景，面朝虚空，45度角灿烂微笑，他们在拍摄自己。\n\n\n回到拉康，自拍的行为抑制着意味着什么？意味着利比多内投，我们的欲望是投给我们自己的，我们所欲望着的是我们自己。当我们去看的时候，我们只想看到自己。我们真的只想看到自己吗？事实上我们渴望成为被看的对象，自拍召唤着、想象着一个注视的目光。\n\n\n直播就把这个昭然若揭了。当我进行直播的时候，我是在召唤着观看，召唤着欲望的目光，想象自己成为欲望的客体，而且最好是崇高客体、大客体。而这样的一种文化，事实上已经开始浸透了电影文化，开始形成了某一种新的电影的视觉结构、叙事结构和欲望结构的依据或者动力。\n\n\n这部电影，看大家的反应是都没看过，据说日本电影新浪潮第二浪，据说是第二次日本电影新浪潮的代表作者滨口龙介，获得了欧洲国际电影节的最佳导演的影片，叫《夜以继日》。我推荐看，挺好看的一部电影。\n\n《夜以继日》电影海报（图源：豆瓣）\n在这部电影当中，故事情境很老套。黑泽清先生所带领的所养育的这个青年电影团队，被称之为日本电影第二次新浪潮的青年团队，他们很擅长一种特定的形态，他们把日常生活的情节剧拍得像恐怖片，他们赋予了日常生活的情感戏以惊悚感。在这个意义上说，是希区柯克之后的又一次伟大创造，他再一次发掘了我们内心的黑暗，我们内心的魔鬼及其我们日常生活的扭曲。\n\n\n这部电影抛开他们这种惊悚感不谈，它就是一个古老的情节剧，一个古老的情境，一个姑娘和两个男人，他用了同一个男演员演两个男人，这已经很有意味了。但是，在剧中这个两个男人的个性、生命方式、生活形态的选择，南辕北辙，一个人绝对冒险，一个人绝对循规蹈矩。而整部电影很像《贩肤走卒》，但是美学上完全不同。那么就是无处不在的镜像，无处不在的镜框，无处不在的电影对自己媒介的自指，每一个画面都回到电影自身，告诉你你看电影呢。电影是有画框的，电影是银幕、screen，电影其实是一种幻象，电影其实是个镜子，不断地提醒你这个东西。\n\n《夜以继日》电影剧照（图源：豆瓣）\n每一次女主人公和两个男主人公相遇，都是当女主人公面对一幅照片，照片的玻璃上映射出了她自己和她背后的人的时候，她才看到了男人和自己。\n\n\n当我看完这部电影的时候，我意识到在这部电影并没有一个女主人公和两个男主人公，这个电影只有一个女主人公和她的欲望、她的梦想，她生命的两种彼此撕扯的价值方式的形态的实践。\n\n\n所以，这部电影是一个关于自己自恋和自己梦想的故事。不期然地，遇到了一部中国的中小成本带有艺术审美追求的电影，非常惊讶的发现，我们不落伍，我们也奋起赶上了这波潮流。《七月与安生》。关于这部电影有各种各样的解释，你可以说是两个女孩子和一个男孩子的故事，你可以说是两个女孩子超越性友谊的故事，你可以说是两个女孩子的友谊最终被男人、因为争男人而粉碎的故事，你可以因此引申出女子无真相，女子无友谊，这个友谊桃园三结义之类的，只有男人才能享有，女人的友谊就是在男人出现之前存在。\n\n《七月与安生》电影海报（图源：豆瓣）\n如果你是一个女性主义者，你看完这个电影以后，你就说，这个电影是个男权老套，叫做坏女孩走四方，好女孩上天堂，对吧？两个女主人公他们一个循规蹈矩，一个放纵不羁。\n\n\n但是我看完这部电影以后，发现导演还颇具匠心，这部电影其实没有两个女主人公和一个男主人公，只有一个女主人公和她的镜像。在这部电影当中只有安生，没有七月，因为在故事的每一个阶段，七月都象征着安生所缺匮乏的价值、内容、生活方式，她每一次都代表着安生曾经去尝试，但是非常惨烈、非常艰辛、非常悲惨的方式，而到七月就充满了理想的梦想的形态。\n\n《七月与安生》电影剧照（图源：豆瓣）\n安生的漂流是流浪，是陪酒，甚至是卖身，而七月的漂流是参加国际NGO，到处的为他人服务，非常优雅地在素食店里头，在所有的高雅的中产阶级的趣味所在的空间当中。\n\n\n我不一一去对照，那么大家说这是你的解读吧，真不是我的解读，就是在电影当中，当安生独自在场的时候，永远是安生和她的镜像。而七月从来没有出现过七月和她的景象，而当七月出现的时候，安生的镜像也消失了，因为七月就是她的镜像。\n\n《七月与安生》电影剧照（图源：豆瓣）\n\n\n我们开始丧失看的能力\n\n更严重的是我们丧失了看的愿望\n\n\n那么，这样的一种电影、文化、社会、新媒体对社会文化、社会心理的改变，而这种改变反身进入到电影文化之中，形成新的电影叙事的可能，电影的动力。令我感到忧心，首先因为，我坚持保卫电影，固然因为我爱电影，固然因为电影伴随了我整个生命，但更重要的是，电影是20世纪创造的伟大的公众艺术，电影的公共性在创造着城市的公共性，在试图建立新的现代社会的公共性，在试图经由这种公共媒体，使我们看见，使我们去看，并且使我们看见。\n\n拉康\n拉康又来了，为什么再次引出拉康？是因为大家可能知道拉康的那个非常著名的表述，就是拉康创造了一个字叫gaze，凝视。而拉康的凝视，如果真的是学电影的朋友多说一句，这个凝视经由劳拉·穆尔维，女性主义电影理论学者的那篇长篇论文，而名传遐迩、传遍全世界。不仅影响了电影研究、人文学科，而且影响到了性别研究的方方面面，但是不好意思，劳拉·穆尔维用错了。\n\n\n劳拉·穆尔维真的以为，凝视就是我们日常所说的凝视，我凝视着你，而拉康赋予了凝视一个完全不同的解释，因此拉康就如此幸运的取代弗洛伊德，成了20世纪的心理学家。因为在拉康看来，所谓的凝视就是一个召唤被看的目光，一个回返的目光。拉康给他的凝视一个非常清晰的定义，他说我是被看的，我是一幅图画，当我在看的时候，我把自己变为了一幅图画，在召唤着，在体认着被看。\n\n\n我也曾在很年轻的时候写过这句话，我说弗洛伊德是三幕剧，第一幕是母子同体；第二幕是闯进了一个叫爸爸的，然后要把妈抢走；第三幕是四个角色出现了，一个不是妈妈的女人进入，男孩子把自己变成了一个父亲，于是有爸爸妈妈，有儿子和儿媳，完满了，成长了。而在拉康这里，永恒的是一个独角戏，舞台上只有一个人物和一面镜子。\n\n\n把拉康的心理学，拉康的符号学，拉康的语言学模式放在一边，我们说拉康的成名，拉康的这个流行，在某种意义上，它阐释了，它也构造了我们时代的精神症候——我们开始丧失了看的能力，其实可能更严重的是我们丧失了看的愿望。\n\n\n因为所谓的看，在最古老的西方哲学的意义上，也是我们对自己主体意识的获知，是我们经由发现客体，发现他者，找到、体认、建立起我们与他人之间的连接，才再度获得了对自我、对自己作为主体，社会的主体，历史的主体，生命的主体，它的意义，它的可能性的思考和认知。当我们只看到自己的时候，我们又在什么意义上去确认我们的自我是关于我们自己的本质，关于我们自己的可能，关于我们自己与在这个社会上的位置的指认呢？\n\n\n\n从“饥饿的苏丹”开始\n\n\n对照刚才普利策奖的越战的照片，我今天很认真的选择了两个例子，第一个例子是非常著名的一场公案。90年代初期，苏丹爆发大规模的内战，极端惨烈，而当这场内战进行过程之中的时候，国际社会袖手旁观，置若枉然。而这场灾难，一如从前的，引发了加剧了非洲普遍的饥饿，战火弥散在苏丹，同时大饥荒在苏丹爆发。\n\n《饥饿的苏丹》，摄影师凯文·卡特\n1993年年初，一个南非的自由记者卡特旅行到了苏丹，他目击了这样一个场面，一个女童，大家大概可以辨认出一个特征，就是她的头几乎跟身子等大，这是极度饥饿的一种体状，头大如斗，它既是那个身体完全发育不出来，又是那个头开始进入到浮肿，所以那个头非常大，这典型的极度饥饿状态。那个极度饥饿的女孩就蜷缩在那里，在一个濒死的状态，她的濒死状态是由后面的拍摄到的影像所证明的，一个秃鹫已经在那等着了。秃鹫这种食尸的食腐的动物，有能力感受到濒死的气息。但是还好，所有的食腐的动物，当你一息尚存的时候他不进攻你，所以那个秃鹫等在近旁。\n\n\n这个摄影师看到了这一幕，他拍摄了这一幕，这幅照片在纽约时报上发表了。当这幅照片在纽约时报发表的时候，虽然不像当年的小女孩，不像当年美国记者所拍到的美军美莱村大屠杀的图片，没有那么大的轰动和震惊，但是它仍然震动了富裕的，可能也包含像我们这样的社会。在今天，我们生存在这样的一种现实的人们，我们怎么去感受这种饥饿？其实在整个欧洲，在所有的正常的没有战争和灾难的情况下，欧洲几乎每10分钟就有一个孩子死于饥饿和营养不良。\n\n\n这幅画面在纽约时报上刊登以后，还是引起了震惊。某种程度上，这幅照片第一次引发了国际社会的谴责，苏丹在战争之中的时候，苏丹在饥荒之中的时候，整个的国际社会包含联合国、联合国难民署、联合国各个机构居然袖手旁观，这是多么的不义。开始有了种种批评和敦促之声，所以第二年，1994年这张照片被授予了普利策图片奖。\n\n\n但是，在这个照片被授奖之前，一场争论，继而是一场汹涌澎湃的全球性的网暴发生了。首先，摄影师不明智地做了一个创作谈。摄影师说，我看到这个孩子的时候，就是这个样子。他说，我悄悄地走进，我找到一个角度，不惊动那个秃鹫，我架好摄影机。他说我等了20分钟，我想抓到秃鹫展翅的时刻，但我没等到。这个创作谈发表以后，网络上正义的网友们沸腾了，说一个孩子快饿死了，你不去救他，拍你的作品，你还等了20分钟，你是畜生，一个新闻记录者的伦理何在？一个基本的人道主义的道德何在？\n\n\n那么，给这个影片授奖的评委做了解释，说讨论给这个影片获奖的时候，我们做了考量，这里面涉及到永远的纪录片伦理，新闻工作者伦理。一个灾难发生的时候，你第一时刻是拿出照相机去拍他，还是第一时刻冲过去救人？永恒的道德困境和永恒的职业伦理的讨论。\n\n\n他说，这部照片出现的时候，我们马上谈到了这个问题，他说我们细看了，其实这个孩子的手上有联合国救助的手环，她已经得到救助了，但是显然救助的力度是不够的。而得到救助和这幅照片展现的苏丹的饥饿程度不冲突。评委说，我们因此还是决定给这幅照片授奖。\n\n\n\n但是，大多数公共媒体都拒绝和屏蔽了这个评委的解释。摄影师的朋友说，他拍这个照片，他是在那等了20分钟，他拍完这个照片以后，他就冲过去把秃鹫赶走，把女孩抱起来，把女孩送回到救助单位以后，他说他就坐在那一直哭，他不断地对朋友说，我想回去抱一抱我的女儿。这个消息也没有得到传播。1994年普利策奖发表，使得这场网暴达到了极致。\n\n\n\n大家说，你们这些人就是食尸兽，你们就是吸血鬼，你们用别人的苦难换取了你们的名誉。正义的声浪一浪高过一浪，普利策摄影奖颁布两个月之后，摄影师在他的汽车里，引车“废气”自杀，他留下了一封遗书说，对不起，真的对不起大家，生活的痛苦远远超过了生活的快乐。\n\n\n\n大家可以想象，摄影师的自杀造成了舆论反转。于是，人们开始说，你们才是食尸兽，你们杀死了这个正义的摄影师。于是，奇特的消息开始出现，大家说他不是死于对他的谴责。他拍完这个照片之后，就去了一个冲突地区。本来卡特要成为主摄影师，但是中途他晕车，所以他的朋友代替他去当了摄影师，而他朋友就死在现场了，说他很负疚。\n\n\n\n另一个人出示证据说，他的经济状况很差，入不敷出，经济压力太大，所以他自杀了。好多好多的故事，使得卡特之死是否和对职业伦理的追问和讨论，以及如此巨大的全球范围之内的网报相关完全的被搁置。\n\n\n\n这是screens，数码时代，另外一个有趣的面向。我现在不讲正义的标准，我不再讨论，因为每一个网络事件，最终都以重重谜团而告终结，最终没有人还可能找到一个位置，去给出一个“真相”。于是人们宣布，我们进入了后真相时代，于是人们宣布有图没真相，于是人们宣布一切都不过是商品而已。\n\n\n\n你的真正的悲惨永远只能是 “卖惨”\n\n\n我在旁边放的例子，确实引发了我的关注。和刚才的例子不同，但相关。大家可能听说的， B站的一个up主叫墨茶，被发现死于贫病交加，准确的说死于营养不良。我且不说，当我这一次想找有关的材料时候的变化，比如我看到后来所有关于这件事的讨论和报道都用这样的标题，叫“b站网红主播活活饿死”。\n\n\n主讲人手机截图\n他死的时候，他有200个粉丝。什么“网红”？由这个命名引发的讨论就完全偏离了这个事件，因为大家就说了，一个网红主播怎么可能死于饥饿呢？\n\n\n\n一个孩子，一个年轻的孩子，患有严重疾病，几乎身无分文，居无定所，上无片瓦，下无立锥之地。他一直在直播，一直直播到他生命的最后时刻。不论怎么去解释，他死于极度营养不良，而造成这种营养不良的，最直接也是最重要的原因是饥饿，是食物的不足。\n\n\n那么，引发的结果，当这孩子死去，用他的死亡完成了一个表述和书写的时候，事情开始发生变化了。变化就是短短的两天之内，他的粉丝涨到了30万，然后持续增长，好像他的死亡才唤起了我们一点震撼，还唤起了一点同情，唤起了一点同理心的投注。\n\n\n今天，大概在座的每一个朋友，我们都有一点余力伸出我们的手，让一个人免于饥饿，我觉得这件事我们很容易做到，我们有能力做到，我们不需要做出巨大的牺牲，表现巨大的慷慨，我们就可以完成这件事。但是，这个孩子就这样死去了，追索的消息让我感到奇特，首先是当他死亡之后，他的粉丝急增，人们的热情和讨论开始急增，进而是质疑的声音马上出现。\n\n\n今天会有人饿死吗？这是真的吗？他真死了吗？怎么可能这样死了呢？因此网络大起底开始，网络大揭秘开始。\n\n\n人们揭露出他不义的父亲，人们揭露出他生病的祖父母，人们揭露出种种他生活中的不正义的力量。于是大家奋力去谴责，谴责他的父亲，谴责这个医疗制度。而一个对我来说非常重要的议题，完全的被偏移和消失了。就是关于在我们今天这样一个如此富裕的年代，在这样的一个食品几乎处在过剩状态的年代，在这样一个我们不断的讨论健康生存、减肥、吃素、慢生活的时代，一个孩子的基本的物质现实是如此的悲惨。\n\n\n而一种赞美让我感到更可怕，一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。我看到这句话的时候，真的有一点冲动，就是想打谁一顿的冲动，但是我继而产生了一个联想，纯属联想了。\n\n《小家伙》电影海报（图源：豆瓣）\n我记得非常偶然的一次点映场，我去看了一部俄罗斯电影《小家伙》。这部电影我一看就很清楚，这部电影的视觉语言非常强烈，但并不原创。因为他很明显的是有比利时的那对兄弟导演，达内兄弟在《罗塞塔》这部电影当中，它完善了一种全新的记录性的、高技术性的，其实是极高的技术含量的，一种紧逼盯人的、纪实风格的拍摄方法。\n\n\n达内兄弟和《罗塞塔》（图源：豆瓣）\n在电影当中，讲一个前俄罗斯加盟共和国的女孩，在俄罗斯打黑工，她被警察胁迫发生性关系，她怀了孕。她的灾难是有孩子她还怎么可能继续留在这打黑工，所以她要丢掉这个孩子，所以她从产房里逃走。而她就是一个刚刚生了孩子的孕妇，她怎么解决已经开始产生奶水的乳房，她怎么去处理剖腹产的那个仍然在流血的伤口？她用极端野蛮的办法处理自己的身体，非常纪实，非常现实，但是并不是现实主义，因为达内兄弟的电影语言使得它与现实主义发生的距离。\n\n\n我看完这部电影回到家里，很习惯性地到豆瓣上去看一看相关资料。当时只有一条影评，这条影评就说，“受够了这些卖惨的电影”。\n\n\n我在看到对墨茶的赞美的时候，这个时刻回到我的记忆当中。我觉得，这个时刻似乎给我提供了一个答案，他为什么不卖惨？你可以理解成，这个孩子在最后要死于饥饿的时候，仍然试图维系最低的尊严。你也可以从另外的角度说，这个孩子知道卖惨是没用的，因为在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。\n\n\n在这个故事当中，那个极端赤裸的，就真正所谓的“裸命”，阿甘本所谓的赤裸生命，他已经低到牲畜一般的、牲畜不容的生命，在经由达内兄弟式的纪实展现的时候，却会被体认为卖惨。那么我们普通的悲惨生活，还有什么言说的可能呢？\n\n\n第二个参数是，据说有一种流行偶像的萌点是“美强惨”，我就很关心怎么个惨法，一看，这叫惨呐？他不过经历了我们每一个人生当中都必然要经历的无可逃脱的一般磨难，生命的离散，生老病死，这些可以构成指认中的惨。而那些完全在我们的生命体验、生活内容之外的悲惨、苦难，相反变为不可认知的、危言耸听的、夸大其词的、难以容忍的。\n\n\n因为它击破了我们的镜像，它击破了我们的幻觉。我经常举那个例子，在知乎上，我看到那个问题的时候，我瞠目结舌，那句话说，“北京有穷人吗？北京如果有穷人的话，为什么我没见过呀？”\n\n\n我看到这句话的时候，我就愣在那儿。它不是在说，我们生活在一个完全中产的世界之中，以致我们看不到穷人，而是，它说明我们已经获得了这样巨大的心理机制，我们的目光自动地掠过了穷人，或者我们不能指认穷人。我说什么叫穷人？相对你来说，冬天睡在那个寒冷的工棚里的，夏天在草坪上醒来的那些农民工，他们是不是穷人呢？他们如果不是穷人的话，他们为什么要过这种你不能容忍的生活呢？\n\n\n或者，我看到最令人发指的一条说法说，代孕这个技术太好了，因为它彻底的解放了人性，我们终于摆脱了兽性。当他说这句话的时候，这个“我们”当然是指有能力、有愿望购买代孕服务的男人和女人。那么，换句话说，“代孕体”根本不进入他的视野。相对于那些人来说，她们是被更野兽化了，还是她们完全被器皿化了？\n\n\n我曾经说，我们看到《使女的故事》的时候，我们震惊，我们战栗，我们说专制集权可以把女人变成行走的子宫。我说，好像没有人想到代孕服务无需任何专制集权，我们已经以为，只要我拥有金钱进入到购买的契约关系当中，就可以把另外的女人变成行走的子宫。\n\n\n所以，屏幕似乎无限的丰富，屏幕似乎向大千世界展开，屏幕让我们看到种种形形色色的世界，形形色色的画面，屏幕似乎也让我们看到了底层和异类的人们。但是，我们真的经由他们，而获得了抵达他人和认知他人的能力吗？\n\n\n很少在PPT上写字，我拒绝在PPT上写字，但是我最后还是写了字。想跟大家分享我的一点文字游戏，但真的不仅仅是游戏。\n\n\n当我们面对screens，我面对汉字当中的屏幕的时候，如果你在中间画一杠，你会发现屏幕是一个现代汉语的典型形态，把两个汉字组成一个字，而每个汉字原本是可以独立表意和另外组合的。屏可以是屏显，可以是屏蔽，可以是屏风，幕可以是银幕，可以是幕布，可以是帘幕。每一个像你显影的屏幕，它同时可以成为一个遮挡，一个遮蔽物。它在让你看到的时候，让你不见。它在替你选择，它在把无限的世界用画框做了切割。\n\n\n那么同样，当我们讨论电影银幕的时候，我们经常使用隐喻的方法，我们有时候把它比作镜子，它是幻想，它是自照，它是幻觉；我们有时候把它比作画幅，画框，使得一幅屏幕内部的元素，成了具有了语言的特质，它可以组织，它可以表达。但是，我们经常忘记了一个屏幕应该成为一扇打开的窗，让我们从这里到那里，让我们从此地望向彼地，让我们从自我望向他人。\n\n\n\n爱是一个连接起我们与他人的\n\n最好的可能\n\n\n最后，想跟大家分享，我认为对我具有打开的窗的性质的电影。近年来我所喜爱的电影，包含了肯洛奇，英国的老战士，伟大的电影艺术家，肯洛奇的《我在哪儿错过了你》，包含近年来我的最爱，近十年我的number one，李沧东的《燃烧》，包含我自己不那么欣赏，但是大获成功大满贯的《寄生虫》。\n\n\n\n固然因为，这四部电影对我都构成了打开的窗，但是重要的是，我突然发现这四部电影有着共同的主题，他们面向共同的人群，这个共同的人群就是非稳定雇佣劳动者。说的简单一点就是打零工的，说的体面一点，就是今天全球资本主义生产的全新的组织形态，叫弹性雇佣，叫劳务外包。\n\n\n它使得机构、雇佣、劳资关系、社会福利制度都被改变，说极端一点，都被取消。而这样的人群是需要打开一扇窗被看到的，需要从我们关于自己的、投向自己的目光，充满了自恋，充满了满足，充满了自我爱恋的目光之外，去看到的。但从另外一个意义上说，它未必和我们不紧密相关。\n\n\n因为，新技术革命带来的一个最大的变化就是它在创造着结构性的弃民，这是我自己创造的说法，因为它不是创造了过剩劳动力，它是创造了绝对的无用的人。因为，新技术革命在最朴素的意义上是一轮前所未有规模的自动化进程，不是我的说法，是谷歌的高级顾问的说法。他说，每一场新技术革命发生之后，最大的社会难题就是如何消化过剩劳动人口。\n\n\n前头说的都是人话，往后面就不是人话了。他说，这一次新技术革命创造的过剩人口劳动力有多少呢？他自问自答，98%。他自己举例说，你看看占领华尔街那帮人，就是他们。他说，你看看他们上街去抗议示威，个个都吃的白白胖胖的，穿的整整齐齐的，他们这些人根本就是多余的。\n\n\n他再往下说，那么面对这么大的问题我们怎么办？说老实话，在我第一次阅读的时候怀着紧张，我看看这个家伙他怎么回答这个问题。他回答了，我快气疯了。他说，争当2%。换句话说，那98%不值得去讨论，不值得去回答。社会如何消化他们，也不是我们要考虑的问题。那么我要问的是，谁是“我们”？在座的朋友，如果那么有把握当2%，咱们就不讨论了，我至少在年龄上已经再没有可能成为2%了。\n\n\n所以，我只好自己站到98%那边去。用这样的自觉、用这样的意识去看向屏幕，去看向电影，去看向世界，不是悲天悯人，不是充满同情的，不是富于左翼政治立场的，而是关注自己的、关注同等命运的人，去望向那些已然成为器皿，已然被抛出了经济版图，已然被大数据无法统计，也拒绝统计的人群。\n\n\n因为，我未必不在明天和他们遭受同样的命运。\n\n\n那么，我们谁也不能回避人类向死而生的基本事实，谁也不能回避人类的生命极端短促，尽管辉煌璀璨。我们谁也不能回避，在今天这样一个充满风险的世界当中，我们是越来越社会化的生存。宅越封闭，个体生存越完备，个人主义的实施的可能性越强，我们每一个人的社会化程度就越高，因为我们的独立依赖的是整个系统的正常运转。我真的满怀感激之心，在新冠病毒期间体会到我们的背后的整个机器是多么正常的运转，才使得我们衣食无忧，才使得我们能够宅得住。\n\n\n但是，同时也是新冠病毒，让我们看到整个现代文明全球化的连接是多么脆弱，一边是越来越剧烈的流动，越来越紧密的连接，一边是越来越深刻的断裂和隔绝民族国家的疆界，社群的疆界，种群的疆界，这个民族宗教的疆界，各种右翼民粹，各种民族主义乘机而起，各种身份政治，以最为极端的方式，在相互的攻击和相互的拒绝，这是我们今天自身的现实。\n\n\n那么，我们能在我们的屏幕上看到吗？或者当我们看到的时候，我们能够去体认吗？或者准确推送、精准推送、大数据统计，为你而量身定做的、私人定制的一个推送系统，在什么意义上断绝了你与异质性的生命和异质性身体相遇的可能？\n\n\n我们的选择始终在，我们的主观能动性始终在，我们的主体可能始终在，它取决于我们是否乐意于分享这样的一种意识，我们是否接受这样一些麻烦。就是我手动去浏览一下新闻，我不是被动的接受它的推送，我多按几个键拒绝一些推送，拒绝一些对我的准确的定位，并不难。图书馆的阅读、电影院的观影、偶然的和朋友们的相聚，所有的这一切公共的空间，城市的空间，生命的空间，始终仍然在我们的掌握之中。\n\n\n最后，还是想用去年对我来说很痛的一件事的结局——电影手册编辑部集体辞职的最后一期卷尾语，来结束我跟大家的分享。感谢大家一直抑制了你们的民主权利，没有站起来投票。我用最后的这个话跟大家分享，来结束今天的讨论。\n\n\n电影手册编辑部在他们最后一卷的卷尾语当中有这样两段话，这两段话深深的打动了我，也是我高度的认同，关于电影，也关于屏幕，关于我们时代的文化，关于我们的视觉——“电影应该是一种及物的艺术，只有当我们拍摄他者而忘却自我的时候，电影才有意义。”\n\n\n下面一句话有一点矫情，大概五年前我会不好意思，但是现在我要大声地把它读出来：“电影之力需由爱来解开，是连续的爱的扣环让我们喜欢一部电影：充斥其中的情感，对于每个细节和整体辩证的用心，为了作品而不遗余力完成的爱意 。热爱我们所做，同谁做，以及为何而做的——爱的艺术。”\n\n\n因为对于我来说，爱不是一种矫情，爱不是一种浪漫，爱不是一种虚构，爱是一个连接起我们与他人的最好的可能。 作者：国仁全球大学堂 https://www.bilibili.com/read/cv11118169?from=search&spm_id_from=333.337.0.0 出处：bilibili","slug":"戴锦华老师关于墨茶事件的思考","published":1,"date":"2022-04-11T13:26:48.805Z","updated":"2022-04-12T09:55:17.545Z","_id":"cl1vyonvt0007k60m6qpjblll","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。</p>\n<p>他为什么不卖惨？</p>\n<p>在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。</p>\n<p>主讲人丨戴锦华</p>\n<p>整理丨吴俊燊</p>\n<p>摄影丨顾于</p>\n<p>排版丨叶雨昕</p>\n<p>从《迦百农》到《贩肤走卒》，两个完全不同的艺术路径，在处理同一个今日世界惨烈进行之中的现实，他们为什么采取了这样的不同？他们的不同之间有没有优劣之分，有没有有效与无效之分？他们与我们之间究竟又建立了怎样一种联系？我们确实经由这样的电影而看到了吗？还是我们经由这样的电影，我们经由这样的电影能否召见其中的我们自己？如果我们照见了那是怎样的自己？这是我想跟大家分享的一组问题。</p>\n<p>拉康漫画<br>我忍不住放出拉康来，有一种说法叫做20世纪到21世纪之交的最重要的变化，就是拉康彻底地取代了弗洛伊德。我把故意的选了一张拉康的漫画，还放了一大堆眼睛，我要说什么？我要再一次引证拉康的名言叫“眼睛是欲望器官”，当我们看的时候，我们欲望着，当我们看的时候我们在投射着，在我们的目光当中是有利比多的，那么，我们把我们的利比多投向哪里呢？</p>\n<p>自拍召唤着、想象着一个注视的目光</p>\n<p>引申到第二个问题，这一组照片我也是偷懒，也是我自己有足够的素材，全是我自己拍的。我在旅游路上拍的，每一个拍摄的场景都是一个著名的历史空间。我在这个历史空间当中看到的是自拍的人们，种种自拍的场景，我用它发了一组朋友圈，题名叫带着手机去旅行。</p>\n<p>换句话说，带着手机其实不用去旅行了，我们可以采取《天使爱美丽》当中的那个便捷的方法，我们只需要这个有那些著名的图片把我们自己做个抠像放上去就好了。</p>\n<p>（主讲人PPT截图，图中照片均为主讲人拍摄）<br>我也做过一个描述，我说非常有意思，我们大概进入任何一个风景胜地，进入任何一个著名的历史空间，甚至不需要这么夸张，只要看到一处有优美感的风景，我们看到一树繁花，我们看到一处绿草坪，我们就会看到这样一种人，背对美景，面朝虚空，45度角灿烂微笑，他们在拍摄自己。</p>\n<p>回到拉康，自拍的行为抑制着意味着什么？意味着利比多内投，我们的欲望是投给我们自己的，我们所欲望着的是我们自己。当我们去看的时候，我们只想看到自己。我们真的只想看到自己吗？事实上我们渴望成为被看的对象，自拍召唤着、想象着一个注视的目光。</p>\n<p>直播就把这个昭然若揭了。当我进行直播的时候，我是在召唤着观看，召唤着欲望的目光，想象自己成为欲望的客体，而且最好是崇高客体、大客体。而这样的一种文化，事实上已经开始浸透了电影文化，开始形成了某一种新的电影的视觉结构、叙事结构和欲望结构的依据或者动力。</p>\n<p>这部电影，看大家的反应是都没看过，据说日本电影新浪潮第二浪，据说是第二次日本电影新浪潮的代表作者滨口龙介，获得了欧洲国际电影节的最佳导演的影片，叫《夜以继日》。我推荐看，挺好看的一部电影。</p>\n<p>《夜以继日》电影海报（图源：豆瓣）<br>在这部电影当中，故事情境很老套。黑泽清先生所带领的所养育的这个青年电影团队，被称之为日本电影第二次新浪潮的青年团队，他们很擅长一种特定的形态，他们把日常生活的情节剧拍得像恐怖片，他们赋予了日常生活的情感戏以惊悚感。在这个意义上说，是希区柯克之后的又一次伟大创造，他再一次发掘了我们内心的黑暗，我们内心的魔鬼及其我们日常生活的扭曲。</p>\n<p>这部电影抛开他们这种惊悚感不谈，它就是一个古老的情节剧，一个古老的情境，一个姑娘和两个男人，他用了同一个男演员演两个男人，这已经很有意味了。但是，在剧中这个两个男人的个性、生命方式、生活形态的选择，南辕北辙，一个人绝对冒险，一个人绝对循规蹈矩。而整部电影很像《贩肤走卒》，但是美学上完全不同。那么就是无处不在的镜像，无处不在的镜框，无处不在的电影对自己媒介的自指，每一个画面都回到电影自身，告诉你你看电影呢。电影是有画框的，电影是银幕、screen，电影其实是一种幻象，电影其实是个镜子，不断地提醒你这个东西。</p>\n<p>《夜以继日》电影剧照（图源：豆瓣）<br>每一次女主人公和两个男主人公相遇，都是当女主人公面对一幅照片，照片的玻璃上映射出了她自己和她背后的人的时候，她才看到了男人和自己。</p>\n<p>当我看完这部电影的时候，我意识到在这部电影并没有一个女主人公和两个男主人公，这个电影只有一个女主人公和她的欲望、她的梦想，她生命的两种彼此撕扯的价值方式的形态的实践。</p>\n<p>所以，这部电影是一个关于自己自恋和自己梦想的故事。不期然地，遇到了一部中国的中小成本带有艺术审美追求的电影，非常惊讶的发现，我们不落伍，我们也奋起赶上了这波潮流。《七月与安生》。关于这部电影有各种各样的解释，你可以说是两个女孩子和一个男孩子的故事，你可以说是两个女孩子超越性友谊的故事，你可以说是两个女孩子的友谊最终被男人、因为争男人而粉碎的故事，你可以因此引申出女子无真相，女子无友谊，这个友谊桃园三结义之类的，只有男人才能享有，女人的友谊就是在男人出现之前存在。</p>\n<p>《七月与安生》电影海报（图源：豆瓣）<br>如果你是一个女性主义者，你看完这个电影以后，你就说，这个电影是个男权老套，叫做坏女孩走四方，好女孩上天堂，对吧？两个女主人公他们一个循规蹈矩，一个放纵不羁。</p>\n<p>但是我看完这部电影以后，发现导演还颇具匠心，这部电影其实没有两个女主人公和一个男主人公，只有一个女主人公和她的镜像。在这部电影当中只有安生，没有七月，因为在故事的每一个阶段，七月都象征着安生所缺匮乏的价值、内容、生活方式，她每一次都代表着安生曾经去尝试，但是非常惨烈、非常艰辛、非常悲惨的方式，而到七月就充满了理想的梦想的形态。</p>\n<p>《七月与安生》电影剧照（图源：豆瓣）<br>安生的漂流是流浪，是陪酒，甚至是卖身，而七月的漂流是参加国际NGO，到处的为他人服务，非常优雅地在素食店里头，在所有的高雅的中产阶级的趣味所在的空间当中。</p>\n<p>我不一一去对照，那么大家说这是你的解读吧，真不是我的解读，就是在电影当中，当安生独自在场的时候，永远是安生和她的镜像。而七月从来没有出现过七月和她的景象，而当七月出现的时候，安生的镜像也消失了，因为七月就是她的镜像。</p>\n<p>《七月与安生》电影剧照（图源：豆瓣）</p>\n<p>我们开始丧失看的能力</p>\n<p>更严重的是我们丧失了看的愿望</p>\n<p>那么，这样的一种电影、文化、社会、新媒体对社会文化、社会心理的改变，而这种改变反身进入到电影文化之中，形成新的电影叙事的可能，电影的动力。令我感到忧心，首先因为，我坚持保卫电影，固然因为我爱电影，固然因为电影伴随了我整个生命，但更重要的是，电影是20世纪创造的伟大的公众艺术，电影的公共性在创造着城市的公共性，在试图建立新的现代社会的公共性，在试图经由这种公共媒体，使我们看见，使我们去看，并且使我们看见。</p>\n<p>拉康<br>拉康又来了，为什么再次引出拉康？是因为大家可能知道拉康的那个非常著名的表述，就是拉康创造了一个字叫gaze，凝视。而拉康的凝视，如果真的是学电影的朋友多说一句，这个凝视经由劳拉·穆尔维，女性主义电影理论学者的那篇长篇论文，而名传遐迩、传遍全世界。不仅影响了电影研究、人文学科，而且影响到了性别研究的方方面面，但是不好意思，劳拉·穆尔维用错了。</p>\n<p>劳拉·穆尔维真的以为，凝视就是我们日常所说的凝视，我凝视着你，而拉康赋予了凝视一个完全不同的解释，因此拉康就如此幸运的取代弗洛伊德，成了20世纪的心理学家。因为在拉康看来，所谓的凝视就是一个召唤被看的目光，一个回返的目光。拉康给他的凝视一个非常清晰的定义，他说我是被看的，我是一幅图画，当我在看的时候，我把自己变为了一幅图画，在召唤着，在体认着被看。</p>\n<p>我也曾在很年轻的时候写过这句话，我说弗洛伊德是三幕剧，第一幕是母子同体；第二幕是闯进了一个叫爸爸的，然后要把妈抢走；第三幕是四个角色出现了，一个不是妈妈的女人进入，男孩子把自己变成了一个父亲，于是有爸爸妈妈，有儿子和儿媳，完满了，成长了。而在拉康这里，永恒的是一个独角戏，舞台上只有一个人物和一面镜子。</p>\n<p>把拉康的心理学，拉康的符号学，拉康的语言学模式放在一边，我们说拉康的成名，拉康的这个流行，在某种意义上，它阐释了，它也构造了我们时代的精神症候——我们开始丧失了看的能力，其实可能更严重的是我们丧失了看的愿望。</p>\n<p>因为所谓的看，在最古老的西方哲学的意义上，也是我们对自己主体意识的获知，是我们经由发现客体，发现他者，找到、体认、建立起我们与他人之间的连接，才再度获得了对自我、对自己作为主体，社会的主体，历史的主体，生命的主体，它的意义，它的可能性的思考和认知。当我们只看到自己的时候，我们又在什么意义上去确认我们的自我是关于我们自己的本质，关于我们自己的可能，关于我们自己与在这个社会上的位置的指认呢？</p>\n<p>从“饥饿的苏丹”开始</p>\n<p>对照刚才普利策奖的越战的照片，我今天很认真的选择了两个例子，第一个例子是非常著名的一场公案。90年代初期，苏丹爆发大规模的内战，极端惨烈，而当这场内战进行过程之中的时候，国际社会袖手旁观，置若枉然。而这场灾难，一如从前的，引发了加剧了非洲普遍的饥饿，战火弥散在苏丹，同时大饥荒在苏丹爆发。</p>\n<p>《饥饿的苏丹》，摄影师凯文·卡特<br>1993年年初，一个南非的自由记者卡特旅行到了苏丹，他目击了这样一个场面，一个女童，大家大概可以辨认出一个特征，就是她的头几乎跟身子等大，这是极度饥饿的一种体状，头大如斗，它既是那个身体完全发育不出来，又是那个头开始进入到浮肿，所以那个头非常大，这典型的极度饥饿状态。那个极度饥饿的女孩就蜷缩在那里，在一个濒死的状态，她的濒死状态是由后面的拍摄到的影像所证明的，一个秃鹫已经在那等着了。秃鹫这种食尸的食腐的动物，有能力感受到濒死的气息。但是还好，所有的食腐的动物，当你一息尚存的时候他不进攻你，所以那个秃鹫等在近旁。</p>\n<p>这个摄影师看到了这一幕，他拍摄了这一幕，这幅照片在纽约时报上发表了。当这幅照片在纽约时报发表的时候，虽然不像当年的小女孩，不像当年美国记者所拍到的美军美莱村大屠杀的图片，没有那么大的轰动和震惊，但是它仍然震动了富裕的，可能也包含像我们这样的社会。在今天，我们生存在这样的一种现实的人们，我们怎么去感受这种饥饿？其实在整个欧洲，在所有的正常的没有战争和灾难的情况下，欧洲几乎每10分钟就有一个孩子死于饥饿和营养不良。</p>\n<p>这幅画面在纽约时报上刊登以后，还是引起了震惊。某种程度上，这幅照片第一次引发了国际社会的谴责，苏丹在战争之中的时候，苏丹在饥荒之中的时候，整个的国际社会包含联合国、联合国难民署、联合国各个机构居然袖手旁观，这是多么的不义。开始有了种种批评和敦促之声，所以第二年，1994年这张照片被授予了普利策图片奖。</p>\n<p>但是，在这个照片被授奖之前，一场争论，继而是一场汹涌澎湃的全球性的网暴发生了。首先，摄影师不明智地做了一个创作谈。摄影师说，我看到这个孩子的时候，就是这个样子。他说，我悄悄地走进，我找到一个角度，不惊动那个秃鹫，我架好摄影机。他说我等了20分钟，我想抓到秃鹫展翅的时刻，但我没等到。这个创作谈发表以后，网络上正义的网友们沸腾了，说一个孩子快饿死了，你不去救他，拍你的作品，你还等了20分钟，你是畜生，一个新闻记录者的伦理何在？一个基本的人道主义的道德何在？</p>\n<p>那么，给这个影片授奖的评委做了解释，说讨论给这个影片获奖的时候，我们做了考量，这里面涉及到永远的纪录片伦理，新闻工作者伦理。一个灾难发生的时候，你第一时刻是拿出照相机去拍他，还是第一时刻冲过去救人？永恒的道德困境和永恒的职业伦理的讨论。</p>\n<p>他说，这部照片出现的时候，我们马上谈到了这个问题，他说我们细看了，其实这个孩子的手上有联合国救助的手环，她已经得到救助了，但是显然救助的力度是不够的。而得到救助和这幅照片展现的苏丹的饥饿程度不冲突。评委说，我们因此还是决定给这幅照片授奖。</p>\n<p>但是，大多数公共媒体都拒绝和屏蔽了这个评委的解释。摄影师的朋友说，他拍这个照片，他是在那等了20分钟，他拍完这个照片以后，他就冲过去把秃鹫赶走，把女孩抱起来，把女孩送回到救助单位以后，他说他就坐在那一直哭，他不断地对朋友说，我想回去抱一抱我的女儿。这个消息也没有得到传播。1994年普利策奖发表，使得这场网暴达到了极致。</p>\n<p>大家说，你们这些人就是食尸兽，你们就是吸血鬼，你们用别人的苦难换取了你们的名誉。正义的声浪一浪高过一浪，普利策摄影奖颁布两个月之后，摄影师在他的汽车里，引车“废气”自杀，他留下了一封遗书说，对不起，真的对不起大家，生活的痛苦远远超过了生活的快乐。</p>\n<p>大家可以想象，摄影师的自杀造成了舆论反转。于是，人们开始说，你们才是食尸兽，你们杀死了这个正义的摄影师。于是，奇特的消息开始出现，大家说他不是死于对他的谴责。他拍完这个照片之后，就去了一个冲突地区。本来卡特要成为主摄影师，但是中途他晕车，所以他的朋友代替他去当了摄影师，而他朋友就死在现场了，说他很负疚。</p>\n<p>另一个人出示证据说，他的经济状况很差，入不敷出，经济压力太大，所以他自杀了。好多好多的故事，使得卡特之死是否和对职业伦理的追问和讨论，以及如此巨大的全球范围之内的网报相关完全的被搁置。</p>\n<p>这是screens，数码时代，另外一个有趣的面向。我现在不讲正义的标准，我不再讨论，因为每一个网络事件，最终都以重重谜团而告终结，最终没有人还可能找到一个位置，去给出一个“真相”。于是人们宣布，我们进入了后真相时代，于是人们宣布有图没真相，于是人们宣布一切都不过是商品而已。</p>\n<p>你的真正的悲惨永远只能是 “卖惨”</p>\n<p>我在旁边放的例子，确实引发了我的关注。和刚才的例子不同，但相关。大家可能听说的， B站的一个up主叫墨茶，被发现死于贫病交加，准确的说死于营养不良。我且不说，当我这一次想找有关的材料时候的变化，比如我看到后来所有关于这件事的讨论和报道都用这样的标题，叫“b站网红主播活活饿死”。</p>\n<p>主讲人手机截图<br>他死的时候，他有200个粉丝。什么“网红”？由这个命名引发的讨论就完全偏离了这个事件，因为大家就说了，一个网红主播怎么可能死于饥饿呢？</p>\n<p>一个孩子，一个年轻的孩子，患有严重疾病，几乎身无分文，居无定所，上无片瓦，下无立锥之地。他一直在直播，一直直播到他生命的最后时刻。不论怎么去解释，他死于极度营养不良，而造成这种营养不良的，最直接也是最重要的原因是饥饿，是食物的不足。</p>\n<p>那么，引发的结果，当这孩子死去，用他的死亡完成了一个表述和书写的时候，事情开始发生变化了。变化就是短短的两天之内，他的粉丝涨到了30万，然后持续增长，好像他的死亡才唤起了我们一点震撼，还唤起了一点同情，唤起了一点同理心的投注。</p>\n<p>今天，大概在座的每一个朋友，我们都有一点余力伸出我们的手，让一个人免于饥饿，我觉得这件事我们很容易做到，我们有能力做到，我们不需要做出巨大的牺牲，表现巨大的慷慨，我们就可以完成这件事。但是，这个孩子就这样死去了，追索的消息让我感到奇特，首先是当他死亡之后，他的粉丝急增，人们的热情和讨论开始急增，进而是质疑的声音马上出现。</p>\n<p>今天会有人饿死吗？这是真的吗？他真死了吗？怎么可能这样死了呢？因此网络大起底开始，网络大揭秘开始。</p>\n<p>人们揭露出他不义的父亲，人们揭露出他生病的祖父母，人们揭露出种种他生活中的不正义的力量。于是大家奋力去谴责，谴责他的父亲，谴责这个医疗制度。而一个对我来说非常重要的议题，完全的被偏移和消失了。就是关于在我们今天这样一个如此富裕的年代，在这样的一个食品几乎处在过剩状态的年代，在这样一个我们不断的讨论健康生存、减肥、吃素、慢生活的时代，一个孩子的基本的物质现实是如此的悲惨。</p>\n<p>而一种赞美让我感到更可怕，一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。我看到这句话的时候，真的有一点冲动，就是想打谁一顿的冲动，但是我继而产生了一个联想，纯属联想了。</p>\n<p>《小家伙》电影海报（图源：豆瓣）<br>我记得非常偶然的一次点映场，我去看了一部俄罗斯电影《小家伙》。这部电影我一看就很清楚，这部电影的视觉语言非常强烈，但并不原创。因为他很明显的是有比利时的那对兄弟导演，达内兄弟在《罗塞塔》这部电影当中，它完善了一种全新的记录性的、高技术性的，其实是极高的技术含量的，一种紧逼盯人的、纪实风格的拍摄方法。</p>\n<p>达内兄弟和《罗塞塔》（图源：豆瓣）<br>在电影当中，讲一个前俄罗斯加盟共和国的女孩，在俄罗斯打黑工，她被警察胁迫发生性关系，她怀了孕。她的灾难是有孩子她还怎么可能继续留在这打黑工，所以她要丢掉这个孩子，所以她从产房里逃走。而她就是一个刚刚生了孩子的孕妇，她怎么解决已经开始产生奶水的乳房，她怎么去处理剖腹产的那个仍然在流血的伤口？她用极端野蛮的办法处理自己的身体，非常纪实，非常现实，但是并不是现实主义，因为达内兄弟的电影语言使得它与现实主义发生的距离。</p>\n<p>我看完这部电影回到家里，很习惯性地到豆瓣上去看一看相关资料。当时只有一条影评，这条影评就说，“受够了这些卖惨的电影”。</p>\n<p>我在看到对墨茶的赞美的时候，这个时刻回到我的记忆当中。我觉得，这个时刻似乎给我提供了一个答案，他为什么不卖惨？你可以理解成，这个孩子在最后要死于饥饿的时候，仍然试图维系最低的尊严。你也可以从另外的角度说，这个孩子知道卖惨是没用的，因为在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。</p>\n<p>在这个故事当中，那个极端赤裸的，就真正所谓的“裸命”，阿甘本所谓的赤裸生命，他已经低到牲畜一般的、牲畜不容的生命，在经由达内兄弟式的纪实展现的时候，却会被体认为卖惨。那么我们普通的悲惨生活，还有什么言说的可能呢？</p>\n<p>第二个参数是，据说有一种流行偶像的萌点是“美强惨”，我就很关心怎么个惨法，一看，这叫惨呐？他不过经历了我们每一个人生当中都必然要经历的无可逃脱的一般磨难，生命的离散，生老病死，这些可以构成指认中的惨。而那些完全在我们的生命体验、生活内容之外的悲惨、苦难，相反变为不可认知的、危言耸听的、夸大其词的、难以容忍的。</p>\n<p>因为它击破了我们的镜像，它击破了我们的幻觉。我经常举那个例子，在知乎上，我看到那个问题的时候，我瞠目结舌，那句话说，“北京有穷人吗？北京如果有穷人的话，为什么我没见过呀？”</p>\n<p>我看到这句话的时候，我就愣在那儿。它不是在说，我们生活在一个完全中产的世界之中，以致我们看不到穷人，而是，它说明我们已经获得了这样巨大的心理机制，我们的目光自动地掠过了穷人，或者我们不能指认穷人。我说什么叫穷人？相对你来说，冬天睡在那个寒冷的工棚里的，夏天在草坪上醒来的那些农民工，他们是不是穷人呢？他们如果不是穷人的话，他们为什么要过这种你不能容忍的生活呢？</p>\n<p>或者，我看到最令人发指的一条说法说，代孕这个技术太好了，因为它彻底的解放了人性，我们终于摆脱了兽性。当他说这句话的时候，这个“我们”当然是指有能力、有愿望购买代孕服务的男人和女人。那么，换句话说，“代孕体”根本不进入他的视野。相对于那些人来说，她们是被更野兽化了，还是她们完全被器皿化了？</p>\n<p>我曾经说，我们看到《使女的故事》的时候，我们震惊，我们战栗，我们说专制集权可以把女人变成行走的子宫。我说，好像没有人想到代孕服务无需任何专制集权，我们已经以为，只要我拥有金钱进入到购买的契约关系当中，就可以把另外的女人变成行走的子宫。</p>\n<p>所以，屏幕似乎无限的丰富，屏幕似乎向大千世界展开，屏幕让我们看到种种形形色色的世界，形形色色的画面，屏幕似乎也让我们看到了底层和异类的人们。但是，我们真的经由他们，而获得了抵达他人和认知他人的能力吗？</p>\n<p>很少在PPT上写字，我拒绝在PPT上写字，但是我最后还是写了字。想跟大家分享我的一点文字游戏，但真的不仅仅是游戏。</p>\n<p>当我们面对screens，我面对汉字当中的屏幕的时候，如果你在中间画一杠，你会发现屏幕是一个现代汉语的典型形态，把两个汉字组成一个字，而每个汉字原本是可以独立表意和另外组合的。屏可以是屏显，可以是屏蔽，可以是屏风，幕可以是银幕，可以是幕布，可以是帘幕。每一个像你显影的屏幕，它同时可以成为一个遮挡，一个遮蔽物。它在让你看到的时候，让你不见。它在替你选择，它在把无限的世界用画框做了切割。</p>\n<p>那么同样，当我们讨论电影银幕的时候，我们经常使用隐喻的方法，我们有时候把它比作镜子，它是幻想，它是自照，它是幻觉；我们有时候把它比作画幅，画框，使得一幅屏幕内部的元素，成了具有了语言的特质，它可以组织，它可以表达。但是，我们经常忘记了一个屏幕应该成为一扇打开的窗，让我们从这里到那里，让我们从此地望向彼地，让我们从自我望向他人。</p>\n<p>爱是一个连接起我们与他人的</p>\n<p>最好的可能</p>\n<p>最后，想跟大家分享，我认为对我具有打开的窗的性质的电影。近年来我所喜爱的电影，包含了肯洛奇，英国的老战士，伟大的电影艺术家，肯洛奇的《我在哪儿错过了你》，包含近年来我的最爱，近十年我的number one，李沧东的《燃烧》，包含我自己不那么欣赏，但是大获成功大满贯的《寄生虫》。</p>\n<p>固然因为，这四部电影对我都构成了打开的窗，但是重要的是，我突然发现这四部电影有着共同的主题，他们面向共同的人群，这个共同的人群就是非稳定雇佣劳动者。说的简单一点就是打零工的，说的体面一点，就是今天全球资本主义生产的全新的组织形态，叫弹性雇佣，叫劳务外包。</p>\n<p>它使得机构、雇佣、劳资关系、社会福利制度都被改变，说极端一点，都被取消。而这样的人群是需要打开一扇窗被看到的，需要从我们关于自己的、投向自己的目光，充满了自恋，充满了满足，充满了自我爱恋的目光之外，去看到的。但从另外一个意义上说，它未必和我们不紧密相关。</p>\n<p>因为，新技术革命带来的一个最大的变化就是它在创造着结构性的弃民，这是我自己创造的说法，因为它不是创造了过剩劳动力，它是创造了绝对的无用的人。因为，新技术革命在最朴素的意义上是一轮前所未有规模的自动化进程，不是我的说法，是谷歌的高级顾问的说法。他说，每一场新技术革命发生之后，最大的社会难题就是如何消化过剩劳动人口。</p>\n<p>前头说的都是人话，往后面就不是人话了。他说，这一次新技术革命创造的过剩人口劳动力有多少呢？他自问自答，98%。他自己举例说，你看看占领华尔街那帮人，就是他们。他说，你看看他们上街去抗议示威，个个都吃的白白胖胖的，穿的整整齐齐的，他们这些人根本就是多余的。</p>\n<p>他再往下说，那么面对这么大的问题我们怎么办？说老实话，在我第一次阅读的时候怀着紧张，我看看这个家伙他怎么回答这个问题。他回答了，我快气疯了。他说，争当2%。换句话说，那98%不值得去讨论，不值得去回答。社会如何消化他们，也不是我们要考虑的问题。那么我要问的是，谁是“我们”？在座的朋友，如果那么有把握当2%，咱们就不讨论了，我至少在年龄上已经再没有可能成为2%了。</p>\n<p>所以，我只好自己站到98%那边去。用这样的自觉、用这样的意识去看向屏幕，去看向电影，去看向世界，不是悲天悯人，不是充满同情的，不是富于左翼政治立场的，而是关注自己的、关注同等命运的人，去望向那些已然成为器皿，已然被抛出了经济版图，已然被大数据无法统计，也拒绝统计的人群。</p>\n<p>因为，我未必不在明天和他们遭受同样的命运。</p>\n<p>那么，我们谁也不能回避人类向死而生的基本事实，谁也不能回避人类的生命极端短促，尽管辉煌璀璨。我们谁也不能回避，在今天这样一个充满风险的世界当中，我们是越来越社会化的生存。宅越封闭，个体生存越完备，个人主义的实施的可能性越强，我们每一个人的社会化程度就越高，因为我们的独立依赖的是整个系统的正常运转。我真的满怀感激之心，在新冠病毒期间体会到我们的背后的整个机器是多么正常的运转，才使得我们衣食无忧，才使得我们能够宅得住。</p>\n<p>但是，同时也是新冠病毒，让我们看到整个现代文明全球化的连接是多么脆弱，一边是越来越剧烈的流动，越来越紧密的连接，一边是越来越深刻的断裂和隔绝民族国家的疆界，社群的疆界，种群的疆界，这个民族宗教的疆界，各种右翼民粹，各种民族主义乘机而起，各种身份政治，以最为极端的方式，在相互的攻击和相互的拒绝，这是我们今天自身的现实。</p>\n<p>那么，我们能在我们的屏幕上看到吗？或者当我们看到的时候，我们能够去体认吗？或者准确推送、精准推送、大数据统计，为你而量身定做的、私人定制的一个推送系统，在什么意义上断绝了你与异质性的生命和异质性身体相遇的可能？</p>\n<p>我们的选择始终在，我们的主观能动性始终在，我们的主体可能始终在，它取决于我们是否乐意于分享这样的一种意识，我们是否接受这样一些麻烦。就是我手动去浏览一下新闻，我不是被动的接受它的推送，我多按几个键拒绝一些推送，拒绝一些对我的准确的定位，并不难。图书馆的阅读、电影院的观影、偶然的和朋友们的相聚，所有的这一切公共的空间，城市的空间，生命的空间，始终仍然在我们的掌握之中。</p>\n<p>最后，还是想用去年对我来说很痛的一件事的结局——电影手册编辑部集体辞职的最后一期卷尾语，来结束我跟大家的分享。感谢大家一直抑制了你们的民主权利，没有站起来投票。我用最后的这个话跟大家分享，来结束今天的讨论。</p>\n<p>电影手册编辑部在他们最后一卷的卷尾语当中有这样两段话，这两段话深深的打动了我，也是我高度的认同，关于电影，也关于屏幕，关于我们时代的文化，关于我们的视觉——“电影应该是一种及物的艺术，只有当我们拍摄他者而忘却自我的时候，电影才有意义。”</p>\n<p>下面一句话有一点矫情，大概五年前我会不好意思，但是现在我要大声地把它读出来：“电影之力需由爱来解开，是连续的爱的扣环让我们喜欢一部电影：充斥其中的情感，对于每个细节和整体辩证的用心，为了作品而不遗余力完成的爱意 。热爱我们所做，同谁做，以及为何而做的——爱的艺术。”</p>\n<p>因为对于我来说，爱不是一种矫情，爱不是一种浪漫，爱不是一种虚构，爱是一个连接起我们与他人的最好的可能。 作者：国仁全球大学堂 <a href=\"https://www.bilibili.com/read/cv11118169?from=search&amp;spm_id_from=333.337.0.0\">https://www.bilibili.com/read/cv11118169?from=search&amp;spm_id_from=333.337.0.0</a> 出处：bilibili</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。</p>\n<p>他为什么不卖惨？</p>\n<p>在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。</p>\n<p>主讲人丨戴锦华</p>\n<p>整理丨吴俊燊</p>\n<p>摄影丨顾于</p>\n<p>排版丨叶雨昕</p>\n<p>从《迦百农》到《贩肤走卒》，两个完全不同的艺术路径，在处理同一个今日世界惨烈进行之中的现实，他们为什么采取了这样的不同？他们的不同之间有没有优劣之分，有没有有效与无效之分？他们与我们之间究竟又建立了怎样一种联系？我们确实经由这样的电影而看到了吗？还是我们经由这样的电影，我们经由这样的电影能否召见其中的我们自己？如果我们照见了那是怎样的自己？这是我想跟大家分享的一组问题。</p>\n<p>拉康漫画<br>我忍不住放出拉康来，有一种说法叫做20世纪到21世纪之交的最重要的变化，就是拉康彻底地取代了弗洛伊德。我把故意的选了一张拉康的漫画，还放了一大堆眼睛，我要说什么？我要再一次引证拉康的名言叫“眼睛是欲望器官”，当我们看的时候，我们欲望着，当我们看的时候我们在投射着，在我们的目光当中是有利比多的，那么，我们把我们的利比多投向哪里呢？</p>\n<p>自拍召唤着、想象着一个注视的目光</p>\n<p>引申到第二个问题，这一组照片我也是偷懒，也是我自己有足够的素材，全是我自己拍的。我在旅游路上拍的，每一个拍摄的场景都是一个著名的历史空间。我在这个历史空间当中看到的是自拍的人们，种种自拍的场景，我用它发了一组朋友圈，题名叫带着手机去旅行。</p>\n<p>换句话说，带着手机其实不用去旅行了，我们可以采取《天使爱美丽》当中的那个便捷的方法，我们只需要这个有那些著名的图片把我们自己做个抠像放上去就好了。</p>\n<p>（主讲人PPT截图，图中照片均为主讲人拍摄）<br>我也做过一个描述，我说非常有意思，我们大概进入任何一个风景胜地，进入任何一个著名的历史空间，甚至不需要这么夸张，只要看到一处有优美感的风景，我们看到一树繁花，我们看到一处绿草坪，我们就会看到这样一种人，背对美景，面朝虚空，45度角灿烂微笑，他们在拍摄自己。</p>\n<p>回到拉康，自拍的行为抑制着意味着什么？意味着利比多内投，我们的欲望是投给我们自己的，我们所欲望着的是我们自己。当我们去看的时候，我们只想看到自己。我们真的只想看到自己吗？事实上我们渴望成为被看的对象，自拍召唤着、想象着一个注视的目光。</p>\n<p>直播就把这个昭然若揭了。当我进行直播的时候，我是在召唤着观看，召唤着欲望的目光，想象自己成为欲望的客体，而且最好是崇高客体、大客体。而这样的一种文化，事实上已经开始浸透了电影文化，开始形成了某一种新的电影的视觉结构、叙事结构和欲望结构的依据或者动力。</p>\n<p>这部电影，看大家的反应是都没看过，据说日本电影新浪潮第二浪，据说是第二次日本电影新浪潮的代表作者滨口龙介，获得了欧洲国际电影节的最佳导演的影片，叫《夜以继日》。我推荐看，挺好看的一部电影。</p>\n<p>《夜以继日》电影海报（图源：豆瓣）<br>在这部电影当中，故事情境很老套。黑泽清先生所带领的所养育的这个青年电影团队，被称之为日本电影第二次新浪潮的青年团队，他们很擅长一种特定的形态，他们把日常生活的情节剧拍得像恐怖片，他们赋予了日常生活的情感戏以惊悚感。在这个意义上说，是希区柯克之后的又一次伟大创造，他再一次发掘了我们内心的黑暗，我们内心的魔鬼及其我们日常生活的扭曲。</p>\n<p>这部电影抛开他们这种惊悚感不谈，它就是一个古老的情节剧，一个古老的情境，一个姑娘和两个男人，他用了同一个男演员演两个男人，这已经很有意味了。但是，在剧中这个两个男人的个性、生命方式、生活形态的选择，南辕北辙，一个人绝对冒险，一个人绝对循规蹈矩。而整部电影很像《贩肤走卒》，但是美学上完全不同。那么就是无处不在的镜像，无处不在的镜框，无处不在的电影对自己媒介的自指，每一个画面都回到电影自身，告诉你你看电影呢。电影是有画框的，电影是银幕、screen，电影其实是一种幻象，电影其实是个镜子，不断地提醒你这个东西。</p>\n<p>《夜以继日》电影剧照（图源：豆瓣）<br>每一次女主人公和两个男主人公相遇，都是当女主人公面对一幅照片，照片的玻璃上映射出了她自己和她背后的人的时候，她才看到了男人和自己。</p>\n<p>当我看完这部电影的时候，我意识到在这部电影并没有一个女主人公和两个男主人公，这个电影只有一个女主人公和她的欲望、她的梦想，她生命的两种彼此撕扯的价值方式的形态的实践。</p>\n<p>所以，这部电影是一个关于自己自恋和自己梦想的故事。不期然地，遇到了一部中国的中小成本带有艺术审美追求的电影，非常惊讶的发现，我们不落伍，我们也奋起赶上了这波潮流。《七月与安生》。关于这部电影有各种各样的解释，你可以说是两个女孩子和一个男孩子的故事，你可以说是两个女孩子超越性友谊的故事，你可以说是两个女孩子的友谊最终被男人、因为争男人而粉碎的故事，你可以因此引申出女子无真相，女子无友谊，这个友谊桃园三结义之类的，只有男人才能享有，女人的友谊就是在男人出现之前存在。</p>\n<p>《七月与安生》电影海报（图源：豆瓣）<br>如果你是一个女性主义者，你看完这个电影以后，你就说，这个电影是个男权老套，叫做坏女孩走四方，好女孩上天堂，对吧？两个女主人公他们一个循规蹈矩，一个放纵不羁。</p>\n<p>但是我看完这部电影以后，发现导演还颇具匠心，这部电影其实没有两个女主人公和一个男主人公，只有一个女主人公和她的镜像。在这部电影当中只有安生，没有七月，因为在故事的每一个阶段，七月都象征着安生所缺匮乏的价值、内容、生活方式，她每一次都代表着安生曾经去尝试，但是非常惨烈、非常艰辛、非常悲惨的方式，而到七月就充满了理想的梦想的形态。</p>\n<p>《七月与安生》电影剧照（图源：豆瓣）<br>安生的漂流是流浪，是陪酒，甚至是卖身，而七月的漂流是参加国际NGO，到处的为他人服务，非常优雅地在素食店里头，在所有的高雅的中产阶级的趣味所在的空间当中。</p>\n<p>我不一一去对照，那么大家说这是你的解读吧，真不是我的解读，就是在电影当中，当安生独自在场的时候，永远是安生和她的镜像。而七月从来没有出现过七月和她的景象，而当七月出现的时候，安生的镜像也消失了，因为七月就是她的镜像。</p>\n<p>《七月与安生》电影剧照（图源：豆瓣）</p>\n<p>我们开始丧失看的能力</p>\n<p>更严重的是我们丧失了看的愿望</p>\n<p>那么，这样的一种电影、文化、社会、新媒体对社会文化、社会心理的改变，而这种改变反身进入到电影文化之中，形成新的电影叙事的可能，电影的动力。令我感到忧心，首先因为，我坚持保卫电影，固然因为我爱电影，固然因为电影伴随了我整个生命，但更重要的是，电影是20世纪创造的伟大的公众艺术，电影的公共性在创造着城市的公共性，在试图建立新的现代社会的公共性，在试图经由这种公共媒体，使我们看见，使我们去看，并且使我们看见。</p>\n<p>拉康<br>拉康又来了，为什么再次引出拉康？是因为大家可能知道拉康的那个非常著名的表述，就是拉康创造了一个字叫gaze，凝视。而拉康的凝视，如果真的是学电影的朋友多说一句，这个凝视经由劳拉·穆尔维，女性主义电影理论学者的那篇长篇论文，而名传遐迩、传遍全世界。不仅影响了电影研究、人文学科，而且影响到了性别研究的方方面面，但是不好意思，劳拉·穆尔维用错了。</p>\n<p>劳拉·穆尔维真的以为，凝视就是我们日常所说的凝视，我凝视着你，而拉康赋予了凝视一个完全不同的解释，因此拉康就如此幸运的取代弗洛伊德，成了20世纪的心理学家。因为在拉康看来，所谓的凝视就是一个召唤被看的目光，一个回返的目光。拉康给他的凝视一个非常清晰的定义，他说我是被看的，我是一幅图画，当我在看的时候，我把自己变为了一幅图画，在召唤着，在体认着被看。</p>\n<p>我也曾在很年轻的时候写过这句话，我说弗洛伊德是三幕剧，第一幕是母子同体；第二幕是闯进了一个叫爸爸的，然后要把妈抢走；第三幕是四个角色出现了，一个不是妈妈的女人进入，男孩子把自己变成了一个父亲，于是有爸爸妈妈，有儿子和儿媳，完满了，成长了。而在拉康这里，永恒的是一个独角戏，舞台上只有一个人物和一面镜子。</p>\n<p>把拉康的心理学，拉康的符号学，拉康的语言学模式放在一边，我们说拉康的成名，拉康的这个流行，在某种意义上，它阐释了，它也构造了我们时代的精神症候——我们开始丧失了看的能力，其实可能更严重的是我们丧失了看的愿望。</p>\n<p>因为所谓的看，在最古老的西方哲学的意义上，也是我们对自己主体意识的获知，是我们经由发现客体，发现他者，找到、体认、建立起我们与他人之间的连接，才再度获得了对自我、对自己作为主体，社会的主体，历史的主体，生命的主体，它的意义，它的可能性的思考和认知。当我们只看到自己的时候，我们又在什么意义上去确认我们的自我是关于我们自己的本质，关于我们自己的可能，关于我们自己与在这个社会上的位置的指认呢？</p>\n<p>从“饥饿的苏丹”开始</p>\n<p>对照刚才普利策奖的越战的照片，我今天很认真的选择了两个例子，第一个例子是非常著名的一场公案。90年代初期，苏丹爆发大规模的内战，极端惨烈，而当这场内战进行过程之中的时候，国际社会袖手旁观，置若枉然。而这场灾难，一如从前的，引发了加剧了非洲普遍的饥饿，战火弥散在苏丹，同时大饥荒在苏丹爆发。</p>\n<p>《饥饿的苏丹》，摄影师凯文·卡特<br>1993年年初，一个南非的自由记者卡特旅行到了苏丹，他目击了这样一个场面，一个女童，大家大概可以辨认出一个特征，就是她的头几乎跟身子等大，这是极度饥饿的一种体状，头大如斗，它既是那个身体完全发育不出来，又是那个头开始进入到浮肿，所以那个头非常大，这典型的极度饥饿状态。那个极度饥饿的女孩就蜷缩在那里，在一个濒死的状态，她的濒死状态是由后面的拍摄到的影像所证明的，一个秃鹫已经在那等着了。秃鹫这种食尸的食腐的动物，有能力感受到濒死的气息。但是还好，所有的食腐的动物，当你一息尚存的时候他不进攻你，所以那个秃鹫等在近旁。</p>\n<p>这个摄影师看到了这一幕，他拍摄了这一幕，这幅照片在纽约时报上发表了。当这幅照片在纽约时报发表的时候，虽然不像当年的小女孩，不像当年美国记者所拍到的美军美莱村大屠杀的图片，没有那么大的轰动和震惊，但是它仍然震动了富裕的，可能也包含像我们这样的社会。在今天，我们生存在这样的一种现实的人们，我们怎么去感受这种饥饿？其实在整个欧洲，在所有的正常的没有战争和灾难的情况下，欧洲几乎每10分钟就有一个孩子死于饥饿和营养不良。</p>\n<p>这幅画面在纽约时报上刊登以后，还是引起了震惊。某种程度上，这幅照片第一次引发了国际社会的谴责，苏丹在战争之中的时候，苏丹在饥荒之中的时候，整个的国际社会包含联合国、联合国难民署、联合国各个机构居然袖手旁观，这是多么的不义。开始有了种种批评和敦促之声，所以第二年，1994年这张照片被授予了普利策图片奖。</p>\n<p>但是，在这个照片被授奖之前，一场争论，继而是一场汹涌澎湃的全球性的网暴发生了。首先，摄影师不明智地做了一个创作谈。摄影师说，我看到这个孩子的时候，就是这个样子。他说，我悄悄地走进，我找到一个角度，不惊动那个秃鹫，我架好摄影机。他说我等了20分钟，我想抓到秃鹫展翅的时刻，但我没等到。这个创作谈发表以后，网络上正义的网友们沸腾了，说一个孩子快饿死了，你不去救他，拍你的作品，你还等了20分钟，你是畜生，一个新闻记录者的伦理何在？一个基本的人道主义的道德何在？</p>\n<p>那么，给这个影片授奖的评委做了解释，说讨论给这个影片获奖的时候，我们做了考量，这里面涉及到永远的纪录片伦理，新闻工作者伦理。一个灾难发生的时候，你第一时刻是拿出照相机去拍他，还是第一时刻冲过去救人？永恒的道德困境和永恒的职业伦理的讨论。</p>\n<p>他说，这部照片出现的时候，我们马上谈到了这个问题，他说我们细看了，其实这个孩子的手上有联合国救助的手环，她已经得到救助了，但是显然救助的力度是不够的。而得到救助和这幅照片展现的苏丹的饥饿程度不冲突。评委说，我们因此还是决定给这幅照片授奖。</p>\n<p>但是，大多数公共媒体都拒绝和屏蔽了这个评委的解释。摄影师的朋友说，他拍这个照片，他是在那等了20分钟，他拍完这个照片以后，他就冲过去把秃鹫赶走，把女孩抱起来，把女孩送回到救助单位以后，他说他就坐在那一直哭，他不断地对朋友说，我想回去抱一抱我的女儿。这个消息也没有得到传播。1994年普利策奖发表，使得这场网暴达到了极致。</p>\n<p>大家说，你们这些人就是食尸兽，你们就是吸血鬼，你们用别人的苦难换取了你们的名誉。正义的声浪一浪高过一浪，普利策摄影奖颁布两个月之后，摄影师在他的汽车里，引车“废气”自杀，他留下了一封遗书说，对不起，真的对不起大家，生活的痛苦远远超过了生活的快乐。</p>\n<p>大家可以想象，摄影师的自杀造成了舆论反转。于是，人们开始说，你们才是食尸兽，你们杀死了这个正义的摄影师。于是，奇特的消息开始出现，大家说他不是死于对他的谴责。他拍完这个照片之后，就去了一个冲突地区。本来卡特要成为主摄影师，但是中途他晕车，所以他的朋友代替他去当了摄影师，而他朋友就死在现场了，说他很负疚。</p>\n<p>另一个人出示证据说，他的经济状况很差，入不敷出，经济压力太大，所以他自杀了。好多好多的故事，使得卡特之死是否和对职业伦理的追问和讨论，以及如此巨大的全球范围之内的网报相关完全的被搁置。</p>\n<p>这是screens，数码时代，另外一个有趣的面向。我现在不讲正义的标准，我不再讨论，因为每一个网络事件，最终都以重重谜团而告终结，最终没有人还可能找到一个位置，去给出一个“真相”。于是人们宣布，我们进入了后真相时代，于是人们宣布有图没真相，于是人们宣布一切都不过是商品而已。</p>\n<p>你的真正的悲惨永远只能是 “卖惨”</p>\n<p>我在旁边放的例子，确实引发了我的关注。和刚才的例子不同，但相关。大家可能听说的， B站的一个up主叫墨茶，被发现死于贫病交加，准确的说死于营养不良。我且不说，当我这一次想找有关的材料时候的变化，比如我看到后来所有关于这件事的讨论和报道都用这样的标题，叫“b站网红主播活活饿死”。</p>\n<p>主讲人手机截图<br>他死的时候，他有200个粉丝。什么“网红”？由这个命名引发的讨论就完全偏离了这个事件，因为大家就说了，一个网红主播怎么可能死于饥饿呢？</p>\n<p>一个孩子，一个年轻的孩子，患有严重疾病，几乎身无分文，居无定所，上无片瓦，下无立锥之地。他一直在直播，一直直播到他生命的最后时刻。不论怎么去解释，他死于极度营养不良，而造成这种营养不良的，最直接也是最重要的原因是饥饿，是食物的不足。</p>\n<p>那么，引发的结果，当这孩子死去，用他的死亡完成了一个表述和书写的时候，事情开始发生变化了。变化就是短短的两天之内，他的粉丝涨到了30万，然后持续增长，好像他的死亡才唤起了我们一点震撼，还唤起了一点同情，唤起了一点同理心的投注。</p>\n<p>今天，大概在座的每一个朋友，我们都有一点余力伸出我们的手，让一个人免于饥饿，我觉得这件事我们很容易做到，我们有能力做到，我们不需要做出巨大的牺牲，表现巨大的慷慨，我们就可以完成这件事。但是，这个孩子就这样死去了，追索的消息让我感到奇特，首先是当他死亡之后，他的粉丝急增，人们的热情和讨论开始急增，进而是质疑的声音马上出现。</p>\n<p>今天会有人饿死吗？这是真的吗？他真死了吗？怎么可能这样死了呢？因此网络大起底开始，网络大揭秘开始。</p>\n<p>人们揭露出他不义的父亲，人们揭露出他生病的祖父母，人们揭露出种种他生活中的不正义的力量。于是大家奋力去谴责，谴责他的父亲，谴责这个医疗制度。而一个对我来说非常重要的议题，完全的被偏移和消失了。就是关于在我们今天这样一个如此富裕的年代，在这样的一个食品几乎处在过剩状态的年代，在这样一个我们不断的讨论健康生存、减肥、吃素、慢生活的时代，一个孩子的基本的物质现实是如此的悲惨。</p>\n<p>而一种赞美让我感到更可怕，一种赞美说，“他真了不起，他到最后时刻也没有利用他直播的身份向社会卖惨”。我看到这句话的时候，真的有一点冲动，就是想打谁一顿的冲动，但是我继而产生了一个联想，纯属联想了。</p>\n<p>《小家伙》电影海报（图源：豆瓣）<br>我记得非常偶然的一次点映场，我去看了一部俄罗斯电影《小家伙》。这部电影我一看就很清楚，这部电影的视觉语言非常强烈，但并不原创。因为他很明显的是有比利时的那对兄弟导演，达内兄弟在《罗塞塔》这部电影当中，它完善了一种全新的记录性的、高技术性的，其实是极高的技术含量的，一种紧逼盯人的、纪实风格的拍摄方法。</p>\n<p>达内兄弟和《罗塞塔》（图源：豆瓣）<br>在电影当中，讲一个前俄罗斯加盟共和国的女孩，在俄罗斯打黑工，她被警察胁迫发生性关系，她怀了孕。她的灾难是有孩子她还怎么可能继续留在这打黑工，所以她要丢掉这个孩子，所以她从产房里逃走。而她就是一个刚刚生了孩子的孕妇，她怎么解决已经开始产生奶水的乳房，她怎么去处理剖腹产的那个仍然在流血的伤口？她用极端野蛮的办法处理自己的身体，非常纪实，非常现实，但是并不是现实主义，因为达内兄弟的电影语言使得它与现实主义发生的距离。</p>\n<p>我看完这部电影回到家里，很习惯性地到豆瓣上去看一看相关资料。当时只有一条影评，这条影评就说，“受够了这些卖惨的电影”。</p>\n<p>我在看到对墨茶的赞美的时候，这个时刻回到我的记忆当中。我觉得，这个时刻似乎给我提供了一个答案，他为什么不卖惨？你可以理解成，这个孩子在最后要死于饥饿的时候，仍然试图维系最低的尊严。你也可以从另外的角度说，这个孩子知道卖惨是没用的，因为在这个表象的、表演的网络时代，你的真正的悲惨永远只能是卖惨而已。</p>\n<p>在这个故事当中，那个极端赤裸的，就真正所谓的“裸命”，阿甘本所谓的赤裸生命，他已经低到牲畜一般的、牲畜不容的生命，在经由达内兄弟式的纪实展现的时候，却会被体认为卖惨。那么我们普通的悲惨生活，还有什么言说的可能呢？</p>\n<p>第二个参数是，据说有一种流行偶像的萌点是“美强惨”，我就很关心怎么个惨法，一看，这叫惨呐？他不过经历了我们每一个人生当中都必然要经历的无可逃脱的一般磨难，生命的离散，生老病死，这些可以构成指认中的惨。而那些完全在我们的生命体验、生活内容之外的悲惨、苦难，相反变为不可认知的、危言耸听的、夸大其词的、难以容忍的。</p>\n<p>因为它击破了我们的镜像，它击破了我们的幻觉。我经常举那个例子，在知乎上，我看到那个问题的时候，我瞠目结舌，那句话说，“北京有穷人吗？北京如果有穷人的话，为什么我没见过呀？”</p>\n<p>我看到这句话的时候，我就愣在那儿。它不是在说，我们生活在一个完全中产的世界之中，以致我们看不到穷人，而是，它说明我们已经获得了这样巨大的心理机制，我们的目光自动地掠过了穷人，或者我们不能指认穷人。我说什么叫穷人？相对你来说，冬天睡在那个寒冷的工棚里的，夏天在草坪上醒来的那些农民工，他们是不是穷人呢？他们如果不是穷人的话，他们为什么要过这种你不能容忍的生活呢？</p>\n<p>或者，我看到最令人发指的一条说法说，代孕这个技术太好了，因为它彻底的解放了人性，我们终于摆脱了兽性。当他说这句话的时候，这个“我们”当然是指有能力、有愿望购买代孕服务的男人和女人。那么，换句话说，“代孕体”根本不进入他的视野。相对于那些人来说，她们是被更野兽化了，还是她们完全被器皿化了？</p>\n<p>我曾经说，我们看到《使女的故事》的时候，我们震惊，我们战栗，我们说专制集权可以把女人变成行走的子宫。我说，好像没有人想到代孕服务无需任何专制集权，我们已经以为，只要我拥有金钱进入到购买的契约关系当中，就可以把另外的女人变成行走的子宫。</p>\n<p>所以，屏幕似乎无限的丰富，屏幕似乎向大千世界展开，屏幕让我们看到种种形形色色的世界，形形色色的画面，屏幕似乎也让我们看到了底层和异类的人们。但是，我们真的经由他们，而获得了抵达他人和认知他人的能力吗？</p>\n<p>很少在PPT上写字，我拒绝在PPT上写字，但是我最后还是写了字。想跟大家分享我的一点文字游戏，但真的不仅仅是游戏。</p>\n<p>当我们面对screens，我面对汉字当中的屏幕的时候，如果你在中间画一杠，你会发现屏幕是一个现代汉语的典型形态，把两个汉字组成一个字，而每个汉字原本是可以独立表意和另外组合的。屏可以是屏显，可以是屏蔽，可以是屏风，幕可以是银幕，可以是幕布，可以是帘幕。每一个像你显影的屏幕，它同时可以成为一个遮挡，一个遮蔽物。它在让你看到的时候，让你不见。它在替你选择，它在把无限的世界用画框做了切割。</p>\n<p>那么同样，当我们讨论电影银幕的时候，我们经常使用隐喻的方法，我们有时候把它比作镜子，它是幻想，它是自照，它是幻觉；我们有时候把它比作画幅，画框，使得一幅屏幕内部的元素，成了具有了语言的特质，它可以组织，它可以表达。但是，我们经常忘记了一个屏幕应该成为一扇打开的窗，让我们从这里到那里，让我们从此地望向彼地，让我们从自我望向他人。</p>\n<p>爱是一个连接起我们与他人的</p>\n<p>最好的可能</p>\n<p>最后，想跟大家分享，我认为对我具有打开的窗的性质的电影。近年来我所喜爱的电影，包含了肯洛奇，英国的老战士，伟大的电影艺术家，肯洛奇的《我在哪儿错过了你》，包含近年来我的最爱，近十年我的number one，李沧东的《燃烧》，包含我自己不那么欣赏，但是大获成功大满贯的《寄生虫》。</p>\n<p>固然因为，这四部电影对我都构成了打开的窗，但是重要的是，我突然发现这四部电影有着共同的主题，他们面向共同的人群，这个共同的人群就是非稳定雇佣劳动者。说的简单一点就是打零工的，说的体面一点，就是今天全球资本主义生产的全新的组织形态，叫弹性雇佣，叫劳务外包。</p>\n<p>它使得机构、雇佣、劳资关系、社会福利制度都被改变，说极端一点，都被取消。而这样的人群是需要打开一扇窗被看到的，需要从我们关于自己的、投向自己的目光，充满了自恋，充满了满足，充满了自我爱恋的目光之外，去看到的。但从另外一个意义上说，它未必和我们不紧密相关。</p>\n<p>因为，新技术革命带来的一个最大的变化就是它在创造着结构性的弃民，这是我自己创造的说法，因为它不是创造了过剩劳动力，它是创造了绝对的无用的人。因为，新技术革命在最朴素的意义上是一轮前所未有规模的自动化进程，不是我的说法，是谷歌的高级顾问的说法。他说，每一场新技术革命发生之后，最大的社会难题就是如何消化过剩劳动人口。</p>\n<p>前头说的都是人话，往后面就不是人话了。他说，这一次新技术革命创造的过剩人口劳动力有多少呢？他自问自答，98%。他自己举例说，你看看占领华尔街那帮人，就是他们。他说，你看看他们上街去抗议示威，个个都吃的白白胖胖的，穿的整整齐齐的，他们这些人根本就是多余的。</p>\n<p>他再往下说，那么面对这么大的问题我们怎么办？说老实话，在我第一次阅读的时候怀着紧张，我看看这个家伙他怎么回答这个问题。他回答了，我快气疯了。他说，争当2%。换句话说，那98%不值得去讨论，不值得去回答。社会如何消化他们，也不是我们要考虑的问题。那么我要问的是，谁是“我们”？在座的朋友，如果那么有把握当2%，咱们就不讨论了，我至少在年龄上已经再没有可能成为2%了。</p>\n<p>所以，我只好自己站到98%那边去。用这样的自觉、用这样的意识去看向屏幕，去看向电影，去看向世界，不是悲天悯人，不是充满同情的，不是富于左翼政治立场的，而是关注自己的、关注同等命运的人，去望向那些已然成为器皿，已然被抛出了经济版图，已然被大数据无法统计，也拒绝统计的人群。</p>\n<p>因为，我未必不在明天和他们遭受同样的命运。</p>\n<p>那么，我们谁也不能回避人类向死而生的基本事实，谁也不能回避人类的生命极端短促，尽管辉煌璀璨。我们谁也不能回避，在今天这样一个充满风险的世界当中，我们是越来越社会化的生存。宅越封闭，个体生存越完备，个人主义的实施的可能性越强，我们每一个人的社会化程度就越高，因为我们的独立依赖的是整个系统的正常运转。我真的满怀感激之心，在新冠病毒期间体会到我们的背后的整个机器是多么正常的运转，才使得我们衣食无忧，才使得我们能够宅得住。</p>\n<p>但是，同时也是新冠病毒，让我们看到整个现代文明全球化的连接是多么脆弱，一边是越来越剧烈的流动，越来越紧密的连接，一边是越来越深刻的断裂和隔绝民族国家的疆界，社群的疆界，种群的疆界，这个民族宗教的疆界，各种右翼民粹，各种民族主义乘机而起，各种身份政治，以最为极端的方式，在相互的攻击和相互的拒绝，这是我们今天自身的现实。</p>\n<p>那么，我们能在我们的屏幕上看到吗？或者当我们看到的时候，我们能够去体认吗？或者准确推送、精准推送、大数据统计，为你而量身定做的、私人定制的一个推送系统，在什么意义上断绝了你与异质性的生命和异质性身体相遇的可能？</p>\n<p>我们的选择始终在，我们的主观能动性始终在，我们的主体可能始终在，它取决于我们是否乐意于分享这样的一种意识，我们是否接受这样一些麻烦。就是我手动去浏览一下新闻，我不是被动的接受它的推送，我多按几个键拒绝一些推送，拒绝一些对我的准确的定位，并不难。图书馆的阅读、电影院的观影、偶然的和朋友们的相聚，所有的这一切公共的空间，城市的空间，生命的空间，始终仍然在我们的掌握之中。</p>\n<p>最后，还是想用去年对我来说很痛的一件事的结局——电影手册编辑部集体辞职的最后一期卷尾语，来结束我跟大家的分享。感谢大家一直抑制了你们的民主权利，没有站起来投票。我用最后的这个话跟大家分享，来结束今天的讨论。</p>\n<p>电影手册编辑部在他们最后一卷的卷尾语当中有这样两段话，这两段话深深的打动了我，也是我高度的认同，关于电影，也关于屏幕，关于我们时代的文化，关于我们的视觉——“电影应该是一种及物的艺术，只有当我们拍摄他者而忘却自我的时候，电影才有意义。”</p>\n<p>下面一句话有一点矫情，大概五年前我会不好意思，但是现在我要大声地把它读出来：“电影之力需由爱来解开，是连续的爱的扣环让我们喜欢一部电影：充斥其中的情感，对于每个细节和整体辩证的用心，为了作品而不遗余力完成的爱意 。热爱我们所做，同谁做，以及为何而做的——爱的艺术。”</p>\n<p>因为对于我来说，爱不是一种矫情，爱不是一种浪漫，爱不是一种虚构，爱是一个连接起我们与他人的最好的可能。 作者：国仁全球大学堂 <a href=\"https://www.bilibili.com/read/cv11118169?from=search&amp;spm_id_from=333.337.0.0\">https://www.bilibili.com/read/cv11118169?from=search&amp;spm_id_from=333.337.0.0</a> 出处：bilibili</p>\n"},{"title":"什么是斯多葛主义？","_content":"\n\n本文翻译不一定精确，如有错误欢迎批注勘误，原始文章来源：\n\n[What Is Stoicism? A Definition & 9 Stoic Exercises To Get You Started](https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/)\n\n对于我们这些生活在现实世界中的人来说，有一个哲学流派是专门为我们创造的，斯多葛学派（Stoicism）。这是一种旨在使我们更有韧性、更快乐、更有德行和更有智慧的哲学。\n\n斯多葛主义一直是历史上一些伟大领导人的共同信仰 —— 国王、总统、艺术家、作家和企业家都曾奉行过这种精神。马库斯 · 奥勒留、腓特烈大帝、蒙田、乔治 · 华盛顿、托马斯 · 杰斐逊、亚当 · 斯密、约翰 · 斯图尔特 · 米尔、西奥多 · 罗斯福、詹姆斯 · 马蒂斯将军，仅举几例，都受到斯多葛哲学的影响。\n\n那么什么是斯多葛主义？谁是斯多葛派？你怎样才能成为一个斯多葛主义者？\n\n------\n\n# I. 什么是斯多葛主义？| What Is Stoicism?\n\n------\n\n> Of all people only those are at leisure who make time for philosophy, only they truly live. Not satisfied to merely keep good watch over their own days, they annex every age to their own. All the harvest of the past is added to their store.\n\n在所有的人中，只有那些有闲情逸致的人，才会有时间去研究哲学，只有他们才会真正活着。他们并不满足于仅仅看管好自己的日子，而是把每个时代都并入自己的时代。所有过去的收获都被添加到他们的仓库中。 —— 塞涅卡 （Seneca）\n\n罗马最伟大的皇帝之一的私人日记（奥勒留），罗马最好的剧作家和最聪明的权力经纪人之一的私人信件（塞涅卡），一个前奴隶和流亡者变成有影响力的教师的讲座（爱比克泰德）。尽管困难重重，大约两千年后，这些令人难以置信的文件仍然存在。它们包含了世界历史上一些最伟大的智慧，它们共同构成了所谓的斯多葛主义的基石 —— 一种古老的哲学，曾经是西方最流行的哲学之一，富人和穷人、强者和挣扎者都在追求美好生活。\n\n除了对最狂热的智慧追求者，斯多葛主义要么不为人知，要么被误解了。对普通人来说，这种充满活力、以行动为导向、改变范式的生活方式已经成为 \"无感情 \"的简称。鉴于仅仅提到哲学就会让大多数人感到紧张或厌烦，\"斯多葛哲学 \"在表面上听起来像是任何人最不想了解的东西，更不用说在日常生活中迫切需要的了。\n\n很难找到一个比 \"斯多葛 \"在英语语言中受到更大不公正待遇的词。在其应有的位置上，斯多葛主义是一种追求自我超越、坚忍不拔和智慧的工具：**一个人用来过上伟大生活的东西，而不是一些深奥的学术探索领域**。当然，许多历史上的伟大人物不仅了解斯多葛主义的真实面目，而且还寻求它。乔治-华盛顿、沃尔特-惠特曼、腓特烈大帝、欧仁-德拉克洛瓦、亚当-斯密、伊曼纽尔-康德、托马斯-杰斐逊、马修-阿诺德、安布罗斯-比尔斯、西奥多-罗斯福、威廉-亚历山大-珀西、拉尔夫-瓦尔多-爱默生。每个人都阅读，研究，引用，或钦佩斯多葛派。\n\n在斯多葛主义中，这些人和其他无数伟大的男人和女人发现了什么其他人没有发现的东西？非常多。首先，它为生活中所有的挑战提供了急需的力量、智慧和毅力。\n\n# II. 斯多葛主义是如何开始的？ | How Did Stoicism Begin?\n\n------\n\n公元前304年左右，一位名叫芝诺（Zeno）的商人在一次贸易航行中遭遇海难。\n\n他几乎失去了一切。在前往雅典的途中，愤世嫉俗的哲学家克拉特斯和麦加利亚的哲学家斯蒂波向他介绍了哲学，这改变了他的生活。\n\n正如芝诺后来开玩笑说的那样: “我遭遇海难时，航行得很顺利。”他后来搬到了后来被称为 Stoa Poikile 的地方，字面意思是“漆色的门廊”，始建于公元前5世纪，2500年后的今天，它的废墟依然清晰可见，油漆过的门廊是芝诺和他的弟子们聚会讨论的地方。虽然他的追随者最初被称为 Zenonians，它是 Zeno（芝诺） 的谦卑的终极功劳，他所创立的哲学学校最终并没有使用他的名字，这是对芝诺谦逊的最大肯定。\n\n# III. 谁是斯多葛派哲学家？ | Who Were The Stoic Philosophers?\n\n------\n\n在我们开始研究之前，我们需要问自己。谁是遵循这些哲学的人？我是否为仰视这个人而感到自豪？我是否想更像他们？\n\n罗马皇帝马库斯-奥勒留，剧作家和政治顾问塞涅卡，以及从奴隶变成杰出教师的爱比克泰德—— 这是你需要首先了解的三个斯多葛学派的践行者。一旦你了解了，我们相信你会想追随他们的脚步。\n\n[斯多葛学派的哲学家们](https://www.notion.so/c8b59418fd3a47fe9af304c518c1be08)\n\n# IV. 斯多葛派的四大美德是什么？ | What Are The 4 Virtues of Stoicism?\n\n------\n\nCourage. 勇气\n\nTemperance. 节制\n\nJustice. 正义\n\nWisdom. 智慧\n\n它们是斯多葛哲学中最基本的价值观。马库斯-奥勒留写道：「**如果在你生命中的某个时刻，你遇到了比正义、真理、自我控制、勇气更好的东西，那一定是一件非常了不起的事情**。」\n\n那是近20个世纪以前的事。从那时起，我们发现了很多东西 —— 汽车、互联网、治疗以前是绝症的疾病，但我们是否发现了更好的东西？\n\n## 勇气 | **Courage**\n\n如果你读过科马克-麦卡锡黑暗而美丽的小说《所有漂亮的马》，你会记得埃米利奥-佩雷斯问约翰-格雷迪的关键问题，这个问题直指生命的核心，以及我们都必须做什么才能活得有价值。\n\n> “The world wants to know if you have cojones. If you are brave?”\n\n斯多葛派的措辞可能有点不同。塞涅卡会说，他实际上是在可怜那些从未经历过不幸的人。**他说：\"你在没有对手的情况下度过了一生，\"\"没有人能够知道你的能力，甚至你也不知道\"。**\n\n世界想知道应该把你放入到什么类别中，这就是为什么它偶尔会给你带来磨难的原因。不要把这些看作是不便甚至是悲剧，而要看作是机会，看作是需要回答的问题。我有胆量吗？我勇敢吗？我是要面对这个问题还是要逃避它？我是要站起来还是要被压在地上？\n\n让你的行动记录下你的反应，让他们提醒你为什么勇气是最重要的。\n\n## 节制 | Temperance\n\n当然，生活并没有简单到说勇气就是全部的算数。虽然每个人都会承认勇气是必不可少的，但我们也都很清楚，有些人的勇敢变成了鲁莽，当他们开始危及自己和他人时，就变成了一种过错。\n\n亚里士多德在他著名的比喻“中庸之道”（Golden Mean.）中，实际上把勇气作为主要的例子。他说，在光谱的一端，有懦弱--那是勇气的不足。在另一端，则是鲁莽--过多的勇气。我们所需要的，我们当时所要求的，是一个黄金分割点，以一种恰当的方式。\n\n这就是节制或适度的意义所在：**不要做过分的事。以正确的方式做正确的事情。**亚里士多德还说: “因为我们反复做的事情就是我们自己，所以优秀不是一种行为，而是一种习惯。”\n\n换句话说：美德和卓越是一种生活方式。这是基础。它就像一个操作系统，这个系统运行的代码是习惯。\n\n正如爱比克泰德后来所说，\"能力在其相应的行动中得到确认和增长，走路靠走，跑步靠跑......因此，如果你想做什么，就养成习惯。\" 因此，如果我们想获得幸福，如果我们想获得成功，如果我们想成为伟大的人，我们必须发展能力，我们必须培养日常的习惯，使之随之产生。\n\n这是个好消息。因为它意味着令人印象深刻的结果或巨大的变化是可能的，不需要艰苦的努力或神奇的公式。小小的调整，良好的系统，正确的程序 —— 这就是所需要的。\n\n## 正义 | Justice\n\n勇敢一点。找到正确的平衡点。这些都是斯多葛学派的核心美德，但就其严肃性而言，它们与斯多葛学派最崇拜的东西——做正确的事——相比就显得苍白无力了。\n\n没有什么斯多葛的美德比正义更重要，因为它影响着所有其他的美德。马库斯-奥勒留自己说，正义是 \"所有其他美德的源泉\"。历史上的斯多葛派一直在推动和倡导正义，通常是冒着巨大的个人风险和巨大的勇气，为了做伟大的事情，为了捍卫他们所爱的人和思想。\n\n- 卡托为了重建罗马共和国而献出了自己的生命。\n- 斯拉西亚和阿格里皮努斯为了抵抗尼禄的暴政献出了他们的生命。\n- 乔治-华盛顿和托马斯-杰斐逊组建了一个新的国家--这个国家将寻求为民主和正义而战，尽管并不完美--主要是受到卡托和其他斯多葛派哲学的启发。\n\n无数其他活动家和政治家都求助于斯多葛主义，使他们在为重要的理想而奋斗的过程中遇到困难，引导他们在一个错综复杂的世界中走向正确。斯多葛主义者必须深深相信，个人可以有所作为。成功的行动主义和政治操纵需要理解和策略，以及现实主义......和希望。它需要智慧、接受，也需要拒绝接受现状。\n\n詹姆斯•鲍德温(James Baldwin)在《土著儿子笔记》(Notes of a Native Son)中最精彩地描述了这种紧张气氛:\n\n> 人们似乎不得不永远记住两个似乎相反的观点。第一个想法是接受，接受，完全没有仇恨，接受生活本来的样子，接受人的本来面目: 根据这个想法，不言而喻，不公平是司空见惯的。但这并不意味着一个人可以自满，因为第二个观念是平等的力量: 一个人在自己的生活中决不能接受这些不公平现象，而是必须全力以赴地与它们作斗争。\n\n斯多葛主义者能清楚地看到世界... ... 但也能清楚地看到世界可以是什么样子。他们很勇敢，也很有战略眼光，足以帮助实现这一目标。\n\n## 智慧 | Wisdom\n\n勇气。节制。公正。这些都是生活中的重要美德。但什么情况下需要勇气？什么是正确的数量？什么是正确的事情？这就是最后一种基本美德的作用。智慧。知道。学习。驾驭世界所需的经验。\n\n智慧一直是斯多葛派所珍视的。芝诺说，我们被赋予两只耳朵和一张嘴是有原因的：倾听多于交谈。既然我们有两只眼睛，我们也有义务阅读和观察，而不是说话。\n\n今天，正如古代世界一样，关键是要能够区分你所掌握的大量信息，以及你过上美好生活所需的实际智慧。关键是我们要学习，我们要始终保持我们的头脑开放。**你不能学习你认为你已经知道的东西**，爱比克泰德说 —— 这是真的。\n\n这就是为什么我们不仅要做谦虚的学生，而且要寻找伟大的老师。这就是为什么我们应该一直在阅读。这就是为什么我们不能停止训练。这就是为什么我们必须勤奋地从噪音中过滤出信号。\n\n我们的目标不仅仅是获取信息，而是获取正确的信息。这是在《沉思录》中发现的教训，从实际的爱比克泰德到詹姆斯 · 斯托克代尔进入爱比克泰德的世界。这是关键的事实，从背景噪音中脱颖而出，你需要吸收。\n\n世界可以获得数千年的惊人洞察力。你可能有能力在指尖学习任何你想学的东西。所以今天，尊重斯多葛学派的美德智慧，放慢脚步，深思熟虑，找到你需要的智慧。\n\n两只眼睛，两只耳朵，一张嘴。做一个学生。相应地，明智地行动。\n\n# V. 有哪些关于斯多葛主义的最佳书籍？ | What Are The Best Books On Stoicism?\n\n------\n\n## 《沉思录》 by 马库斯 · 奥勒留\n\n也许是有史以来唯一的此类文件。它是世界上最有权势的人的私人想法，就如何履行其职位的责任和义务向自己提出建议。马库斯几乎每天晚上都会停下来练习一系列的精神练习 —— 这些练习旨在使他在面对任何事情时变得谦逊、耐心、富有同情心、慷慨和坚强。你不可能在读完这本书后，没有得到一个短语或一句话，在你下次遇到困难时对你有所帮助。阅读它，它是实用哲学的体现。\n\n## 《斯多葛主义者的信（Letters from A stoic）》 by 塞涅卡\n\n马库斯主要是为自己写作，而塞涅卡则是为他人提供建议和帮助，没有任何问题。事实上，这就是他的工作，他是尼禄的导师，负责减少一个可怕的人的可怕冲动。他关于悲伤、财富、权力、宗教和生活的建议总是在你需要时出现。塞涅卡的书信是最好的开始，但《论生命的短暂》中的文章也很好。\n\n## 《语录（Discourses）》 by 爱比克泰德\n\n爱比克泰德的教诲能够流传到我们这里是很了不起的。这要归功于一位名叫阿里安的学生，他在公元二世纪初抄录了他在爱比克泰德的课堂上学到的课程。阿里安在《语录》出版前的一封信中写道：\"无论我以前听他说什么，我都尽可能一字不差地写下来，作为以后使用他的思想和坦率表达的记录\"。阿里安将利用这些经验，作为政治顾问、军事指挥官和多产的作家，在整个罗马获得声誉。有趣的是，在题为 \"债务和教训 \"的《沉思录》第一册中，马库斯感谢他的一位哲学老师鲁斯提库斯，\"他向我介绍了爱比克泰德的讲座--并借给我他自己的副本\"。\n\n# VI. 如何成为一个斯多葛主义者\n\n------\n\n## 1. 控制的二分法 | The Dichotomy Of Control\n\n> “The chief task in life is simply this: to identify and separate matters so that I can say clearly to myself which are externals not under my control, and which have to do with the choices I actually control. Where then do I look for good and evil? Not to uncontrollable externals, but within myself to the choices that are my own . . .” Epictetus\n\n\"生活中的主要任务仅仅是：识别和分离事务，以便我能够清楚地对自己说，哪些是不由我控制的外部因素，哪些与我实际控制的选择有关。那么我在哪里寻找善与恶呢？不是看不可控制的外在因素，而是看我自己的选择......\" 爱比克泰德\n\n斯多葛哲学中最重要的一个实践是区分我们能改变的和不能改变的。我们能影响的和我们不能影响的。一个航班因为天气而延误--对航空公司代表大喊大叫也不能结束一场风暴。再多的愿望也不能使你变高或变矮，或出生在不同的国家。无论你如何努力，你都不能让别人喜欢你。最重要的是，把时间花在向这些不可移动的物体投掷上，就是没有把时间花在我们可以改变的事情上。\n\n每天都要回到这个问题上--在每一个艰难的情况下。不断记下并反思它。如果你能专注于明确你一天中哪些部分在你的控制范围内，哪些部分不在你的控制范围内，你不仅会更快乐，而且会比其他没有意识到自己在打一场不可能赢的仗的人有明显优势。\n\n## 2. 日记 | Journal\n\n> “Few care now about the marches and countermarches of the Roman commanders. What the centuries have clung to is a notebook of thoughts by a man whose real life was largely unknown who put down in the midnight dimness not the events of the day or the plans of the morrow, but something of far more permanent interest, the ideals and aspirations that a rare spirit lived by.” — Brand Blanshard\n\n\"现在很少有人关心罗马指挥官的行军和反击行动。几个世纪以来，人们所关注的是一个人的思想笔记，他的真实生活基本上不为人所知，他在午夜的昏暗中记下的不是当天的事件或明天的计划，而是一些更持久的兴趣，一个罕见的精神所生活的理想和愿望。\"\n\n- 布兰德-布兰沙德\n\n奴隶爱比克泰德、皇帝马库斯-奥勒留、塞涅卡是权力经纪人和剧作家。这三个完全不同的人过着完全不同的生活。但他们似乎都有一个共同的习惯：写日记。\n\n爱比克泰德会告诫他的学生，哲学是他们应该 \"一天天写下来 \"的东西，这种写作是他们 \"应该锻炼自己 \"的方式。塞涅卡最喜欢在晚上写日记。当夜幕降临，他的妻子已经入睡时，他向一位朋友解释说：\"我审视我的整个一天，回想我所做的和所说的，对自己没有任何隐瞒，没有任何忽略。然后他就去睡觉，发现 \"这种自我检查之后的睡眠 \"特别甜美。而马库斯，他是最多产的日记作者，我们很幸运，他的文章能保存下来，恰当地命名为Τὰ εἰς ἑαυτόν，Ta eis heauton，或 \"给自己\"。\n\n在斯多葛主义中，写日记的艺术不仅仅是一些简单的日记。这种日常实践就是哲学。为未来的一天做准备。对已经过去的一天进行反思。提醒自己我们从老师那里学到的智慧，从我们的阅读中，从我们自己的经验中。仅仅听一遍这些课程是不够的，相反，一个人要一遍又一遍地练习它们，在脑海中翻阅它们，最重要的是，把它们写下来，并在写的过程中感受它们在手指间流淌。\n\n斯多葛主义被设计成一种实践和常规。它不是一种你读过一次就能在灵魂层面上神奇地理解的哲学。不，它是一种终身的追求，需要勤奋、重复和专注。这是把一件事放在上面让你回顾--在手边--并充分消化。不是顺便。不仅仅是一次。而是一年中的每一天，最好是一年又一年。如果爱比克泰德是对的，这是你应该随时保持的东西--这就是为什么每天都有最精彩的作品集，对我们如此有吸引力。\n\n## 3. 练习不幸 | Practice Misfortune\n\n> “It is in times of security that the spirit should be preparing itself for difficult times; while fortune is bestowing favors on it is then is the time for it to be strengthened against her rebuffs.” — Seneca\n\n\"在安全的时候，精神应该为困难的时候做准备；当幸运之神给予它恩惠的时候，就是它加强抵抗她的反击的时候。\" - 塞涅卡\n\n作为尼禄的顾问，塞涅卡享受着巨大的财富，他建议我们每个月应该留出一定数量的日子来实践贫穷。吃点东西，穿上你最糟糕的衣服，远离舒适的家和床。他说，让自己面对贫困，你会问自己: “这是我曾经害怕的吗?”\n\n重要的是要记住，**这是一个练习，而不是一个修辞手法。**他的意思不是 \"思考 \"不幸，他的意思是活在不幸中。安逸是最糟糕的一种奴役，因为你总是害怕某件事情或某人会夺走它。但是，如果你不仅能预见而且能实践不幸，那么机会就会失去扰乱你生活的能力。\n\n像焦虑和恐惧这样的情绪，其根源在于不确定性，而很少来自于经验。任何一个在自己身上下了大赌注的人都知道这两个情绪能消耗多少能源。解决办法就是对这种无知做点什么。让自己熟悉那些你害怕的事情，尤其是最坏的情况。\n\n**练习你所害怕的东西，无论是在你心中的模拟还是在现实生活中。不幸（downside）几乎总是可逆的或短暂的。**\n\n## 4. 摒弃好坏的观念 | Train Perceptions\n\n> “Choose not to be harmed and you won’t feel harmed. Don’t feel harmed and you haven’t been.” — Marcus Aurelius\n\n\"选择不受伤害，你就不会感到受伤害。不觉得受到伤害，你就没有受到过伤害\"。- 马库斯-奥勒留\n\n斯多葛派有一个叫做 \"颠覆障碍 \"的练习。因为如果你能适当地把问题颠倒过来，每一个 \"坏 \"都会成为新的好的来源。\n\n假设你正试图帮助某人，而他们的反应是傲慢或不愿意合作。练习说，他们没有使你的生活更加困难，而是实际上在引导你培养新的美德；例如，耐心或理解。或者，与你关系密切的人的死亡；是展示坚忍的机会。\n\n马库斯 · 奥勒留是这样描述的:\n\n> “The impediment to action advances action. What stands in the way becomes the way.” “行动的障碍推动行动，阻碍就会成为行动的方式。”\n\n关于企业家的常见说法是，他们利用，甚至创造机会。对斯多葛主义者来说，所有的事情都是机会。一个令人沮丧的案件，你的帮助没有得到重视，一个亲人的死亡，这些都不是正常意义上的 \"机会\"。事实上，它们恰恰相反。它们是障碍。斯多葛主义者所做的是把每一个障碍变成一个机会。\n\n对实践中的斯多葛主义者来说，没有好坏之分。有的只是感知。你可以控制知觉。你可以选择推断出你的第一印象（\"X发生了。\"->\"X发生了，现在我的生活结束了。\"）。如果你把你的第一反应与冷静联系起来，你会发现一切都只是一个机会。\n\n## 5. 万物无常 | Remember—It’s All Ephemeral\n\n> “Alexander the Great and his mule driver both died and the same thing happened to both.” — Marcus Aurelius “亚历山大大帝和他的骡夫都死了，同样的事情也发生在他们身上。”ーー Marcus Aurelius\n\n马库斯 · 奥勒留给自己写了一封简单而有效的提醒信，帮助他重新找回视角，保持平衡:\n\n> “Run down the list of those who felt intense anger at something: the most famous, the most unfortunate, the most hated, the most whatever: Where is all that now? Smoke, dust, legend…or not even a legend. Think of all the examples. And how trivial the things we want so passionately are.” “列出那些对某事感到强烈愤怒的人的名单: 最有名的、最不幸的、最讨厌的、最无所谓的: 现在这些东西都在哪里？烟雾，尘埃，传说... 甚至不是一个传说。想想所有的例子。我们如此热切地想要的东西是多么微不足道。”\n\n值得注意的是，这里的“激情”并不是我们熟悉的现代用法，比如热情或关心某事。正如唐 · 罗伯逊在他的书中解释的那样，当斯多葛学派讨论克服激情，他们称之为可悲，他们指的是非理性、不健康和过度的欲望和情绪。愤怒就是一个很好的例子。重要的是要记住---- 这是关键的一点---- 他们寻求用幸福来代替幸福，比如快乐（joy）而不是过度的快乐（excessive pleasure）。\n\n**回到这个练习的重点，很简单: 记住你是多么的渺小。就此而言，请记住大多数事物是多么的渺小。**\n\n记住，成就可能是短暂的，你对它们的拥有只是一瞬间。\n\n如果一切都是短暂的，那还有什么意义呢？现在很重要。做一个好人，现在做正确的事，这才是最重要的，也是斯多葛派最重要的。\n\n以亚历山大大帝为例，他征服了已知的世界，并以他的名字命名了许多城市。这是常识。斯多葛学派还指出，有一次亚历山大喝醉了，和他最亲爱的朋友克雷塔斯打了一架，结果不小心把他打死了。后来，他非常沮丧，三天不能吃不能喝。希腊各地的诡辩家纷纷被叫来，想知道他们能为他的悲伤做些什么，但都无济于事。\n\n这是成功人生的标志吗？从个人的角度来看，如果你的名字在地图上被标注出来，如果你迷失了方向，伤害了你周围的人，那么这就无关紧要了。\n\n从亚历山大的错误中吸取教训。谦虚、诚实、有觉察力。这是你生命中每一天都可以拥有的。你永远不必担心有人会从你身上夺走它，或者更糟糕的是，它会控制你。\n\n## 6. 从上面看风景 | Take The View From Above\n\n> “How beautifully Plato put it. Whenever you want to talk about people, it’s best to take a bird’s- eye view and see everything all at once— of gatherings, armies, farms, weddings and divorces, births and deaths, noisy courtrooms or silent spaces, every foreign people, holidays, memorials, markets— all blended together and arranged in a pairing of opposites.” — Marcus Aurelius “柏拉图说得真好。无论何时，当你想谈论人时，最好是鸟瞰一切，一下子看到一切——聚会、军队、农场、婚礼和离婚、出生和死亡、嘈杂的法庭或安静的空间、每一个外国人、假日、纪念碑、市场——所有这些都融合在一起，并排列成对。”ー马库斯 · 奥勒留\n\n马库斯经常做一个练习，被称为“从上面看问题”或“柏拉图的观点”它让我们后退一步，缩小视野，从比我们自己更高的角度来看待生活。这项工作——想象所有千百万人、所有“军队、农场、婚姻和离婚、出生和死亡”——促使我们以正确的眼光看待问题，就像以前的工作一样，提醒我们自己是多么渺小。正如斯多葛学派的学者皮埃尔 · 哈多所说，“从上面的观点改变了我们对事物的价值判断: 奢侈、权力、战争... 以及对日常生活的担忧变得荒谬可笑。”\n\n看到我们在事物的宏伟计划中是多么渺小只是这项工作的一部分。第二点，也是更微妙的一点，是挖掘斯多葛学派所谓的同情心，或者说与整个人类的相互依赖。正如宇航员埃德加 · 米切尔(Edgar Mitchell)所说，“在外太空，你会产生一种瞬间的全球意识，一种以人为本的思想，一种对世界状况的强烈不满，以及一种想要做点什么的冲动。”米切尔是第一批真正体验到‘从上面看世界’的人之一。\n\n以柏拉图的观点来看：从自己的担忧中退后一步，提醒自己对他人的责任。\n\n## 7. 死亡警告: 想象你的死亡 | Memento Mori: Meditate On Your Mortality\n\n> “Let us prepare our minds as if we’d come to the very end of life. Let us postpone nothing. Let us balance life’s books each day. … The one who puts the finishing touches on their life each day is never short of time.” Seneca “让我们做好心理准备，就好像我们即将走到生命的尽头。我们什么也不要推迟。让我们平衡生活中的每一天。每天为自己的生活做最后润色的人永远不会缺少时间。”Seneca\n\n上面引用的塞尼卡的话部分出自《死亡记忆》(Memento mori)——这是一种对死亡进行反思的古老做法，可以追溯到苏格拉底(Socrates)。他说哲学的正确实践是 \"除了死亡和被死亡之外，没有其他东西\"。马库斯-奥勒留在他的《沉思录》中写道：\"你现在就可以离开生活。让这一点决定你做什么、说什么、想什么\"。那是对个人的提醒，让我们现在继续过着美德的生活，而不是等待。\n\n如果你没有抓住重点，冥想自己的死亡只会令人沮丧。斯多葛学派认为这种想法令人振奋和谦卑。塞尼卡有一本传记名为《每天都在死去》 ，这并不奇怪。毕竟，是塞尼卡敦促我们告诉自己: “明天你可能醒不过来了”，上床睡觉的时候，“你可能再也睡不着了”，醒来的时候提醒我们注定要死去。或者，正如另一位斯多葛学者爱比克泰德(Epictetus)所敦促他的学生们的那样: “每天把死亡和放逐放在你的眼前，还有一切看起来很可怕的东西--通过这样做，你永远不会有一个确定性的想法，也不会有过度的欲望。”利用这些提醒，每天冥想它们，让它们成为你充实生活的基石，不要浪费一秒钟。\n\n## 8. 消极想象 | Premeditatio Malorum\n\n> “What is quite unlooked for is more crushing in its effect, and unexpectedness adds to the weight of a disaster. This is a reason for ensuring that nothing ever takes us by surprise. We should project our thoughts ahead of us at every turn and have in mind every possible eventuality instead of only the usual course of events… Rehearse them in your mind: exile, torture, war, shipwreck. All the terms of our human lot should be before our eyes.” — Seneca “完全出人意料的是，它的影响更具破坏性，而且意外性增加了灾难的重量。这就是为什么要确保没有任何事情会让我们感到意外。我们应该在每一个转折点都把我们的想法放在眼前，并且考虑到每一种可能发生的事情，而不仅仅是通常的事件过程... ... 在你的脑海中重新演练一遍: 流放、折磨、战争、沉船。我们人类命运的所有条件都应摆在我们面前。”ー Seneca\n\n“ premeditatio malorum”(“罪恶的预谋”)是一种斯多葛主义的做法，用来想象可能出错或被夺走的事情。它帮助我们为生活中不可避免的挫折做好准备。我们并不总是得到本该属于我们的东西，即使是我们应得的。并不是所有的事情都像我们想象的那样简单明了。从心理学上讲，我们必须为这种情况发生做好准备。这是斯多葛学派建立恢复力和力量的工具箱中最有力的练习之一。\n\n例如，塞尼卡将首先重新审视或排练他的旅行计划。然后，在他的脑子里(或者像我们上面所说的在日记里) ，他会仔细检查那些可能出错或阻止它发生的事情ーー暴风雨可能会出现，船长可能会生病，船可能会遭到海盗的袭击。\n\n他在给一位朋友的信中写道: “智者不会出人意料。”。”... ... 也不是所有事情都如他所愿，但是正如他所料，最重要的是，他认为有什么东西可以阻止他的计划”\n\n通过这次演习，塞尼卡总是做好了应对混乱的准备，并且总是在他的计划中应对这种混乱。他适合胜利或失败。\n\n## 9. 热爱命运 | Amor Fati\n\n> “To love only what happens, what was destined. No greater harmony.” — Marcus Aurelius “只爱发生的事情，注定的事情。没有比这更和谐的了。”——马库斯 · 奥勒留\n\n伟大的德国哲学家弗里德里希-尼采将他关于人类伟大的公式描述为amor fati--对命运的爱。\"一个人不希望有什么不同，不是向前，不是向后，不是在所有的永恒中。不仅仅是承受必要的东西，更不是隐瞒它....，而是热爱它。\"\n\n斯多葛学派不仅熟悉这种态度，而且接受这种态度。2000年前，皇帝马库斯 · 奥勒留在他的个人日记《沉思录》中写道: “燃烧的火焰使投入其中的一切都变得火焰和光明。”另一位斯多葛学派的人物，爱比克泰德(Epictetus) ，作为一名残废的奴隶，在遭遇逆境之后也面临同样的困境: “不要追求事情按照你希望的方式发生，而是希望事情按照它发生的方式发生: 那么你就会快乐。”\n\n这就是为什么 amor fati 是一种斯多葛学派的练习和心态，你要把所有发生的事情都做到最好: 把每一个时刻——不管多么具有挑战性——当作需要拥抱而不是回避的事情来对待。不仅要接受它，而且要热爱它，为它做得更好。因此，就像火中的氧气一样，障碍和逆境成为你潜能的燃料。\n\n# VII. 斯多葛学派的局限性\n\n------\n\n对于个体来说，是一种积极面对问题的态度。但是对于整个社会的宏观运作机制，则会有一种无力感，因为整体来说斯多葛学派是防御性的，把内心装进城堡，用理性和必然性的把握来减少外部世界对内心的影响。\n\n因为斯多葛学派更强调一种「命中注定」，则勇敢是不足的。因为勇敢的前提是不知道投入是否有回报就投入力量，这和斯多葛学派追求的命中注定与追求内心的宁静是天然冲突的。\n\n之所以在近代复兴，也是因为社会快速发展，阶级固化严重，我们对于社会运转的影响力越来越小，像一个无足轻重的棋子，所以需要「接受这个必然」。典型是具有较高知识储备与社会经验，理解社会运作机制，但又无力干涉其运作的人。\n\nvia 《哲学家的 10 种生活提案》 by 徐英瑾\n\n# VIII. 格言们 | What Are The Best Stoic Quotes?\n\n------\n\n> “We are often more frightened than hurt; and we suffer more from imagination than from reality.” — Seneca“ 我们经常更害怕而不是受伤; 我们更多地受到想象的折磨而不是现实。”ー Seneca\n\n> “It’s silly to try to escape other people’s faults. They are inescapable. Just try to escape your own.” —Marcus Aurelius“ 试图逃避别人的错误是愚蠢的。这些错误是不可避免的。只是试图逃避自己的错误。”ー马库斯 · 奥勒留\n\n> “Our life is what our thoughts make it.” — Marcus Aurelius“ 我们的生活是我们的思想造就的。”——马库斯 · 奥勒留\n\n> “Don’t explain your philosophy. Embody it.” Epictetus“ 不要解释你的哲学，把它具体化。”Epictetus\n\n> “If anyone tells you that a certain person speaks ill— of you, do not make excuses about what is said of you but answer, ‘He was ignorant of my other faults, else he would not have mentioned these alone.'” — Epictetus” 如果有人告诉你某人说你的坏话，不要为别人对你说的话找借口，而要回答说: ‘他不知道我其他的缺点，否则他不会单独提到这些缺点。’”ーー爱比克泰德\n\n> “If it is not right, do not do it, if it is not true, do not say it.” — Marcus Aurelius如果不对，就不要做; 如果不对，就不要说ー马库斯 · 奥勒留\n\n> “You become what you give your attention to…If you yourself don’t choose what thoughts and images you expose yourself to, someone else will.” — Epictetus“ 你变成了你关注的对象... ... 如果你自己不选择暴露给自己的想法和形象，别人就会选择。”ー爱比克泰德\n\n> “Be tolerant with others and strict with yourself.” — Marcus Aurelius“对他人宽容，对自己严格。”——马库斯 · 奥勒留\n\n> “You always own the option of having no opinion. There is never any need to get worked up or to trouble your soul about things you can’t control. These things are not asking to be judged by you. Leave them alone.” — Marcus Aurelius“你总是可以选择不发表意见。从来没有必要因为你无法控制的事情而激动或者麻烦你的灵魂。这些事情并不是要你去评判。别管他们。”ー马库斯 · 奥勒留\n\n> “All you need are these: certainty of judgment in the present moment; action for the common good in the present moment; and an attitude of gratitude in the present moment for anything that comes your way.” — Marcus Aurelius“你所需要的就是这些: 确信当下的判断，为当下的共同利益而行动，以及对当下发生的一切抱有感激的态度。”ー马库斯 · 奥勒留\n\n> “No person has the power to have everything they want, but it is in their power not to want what they don’t have, and to cheerfully put to good use what they do have.” — Seneca“ 没有人有能力拥有他们想要的一切，但他们有能力不去想要他们没有的东西，并乐于好好利用他们拥有的东西。”ー 塞涅卡\n\n> “If anyone can refute me—show me I’m making a mistake or looking at things from the wrong perspective—I’ll gladly change. It’s the truth I’m after, and the truth never harmed anyone.” — Marcus Aurelius“ 如果有人能反驳我ーー证明我犯了错误或者从错误的角度看问题ーー我会很乐意改变。这是我追求的真相，真相从未伤害过任何人。”ー马库斯 · 奥勒留\n\n> “Today I escaped anxiety. Or no, I discarded it, because it was within me, in my own perceptions not outside.” — Marcus Aurelius“ 今天我摆脱了焦虑。或者不，我放弃了它，因为它在我内心，在我自己的感知里，而不是在外面。”ー马库斯 · 奥勒留\n\n> “You have power over your mind – not outside events. Realise this, and you will find strength.” — Marcus Aurelius“ 你可以控制自己的思想——而不是外部事件。认识到这一点，你就会找到力量。”ー马库斯 · 奥勒留\n\n> “It isn’t events themselves that disturb people, but only their judgements about them.” — Epictetus“ 困扰人们的不是事件本身，而是他们对事件的看法。”——爱比克泰德\n\n> “To be like the rock that the waves keep crashing over. It stands unmoved and the raging of the sea falls still around it.” — Marcus Aurelius“ 就像海浪不断拍打的岩石。它无动于衷，汹涌澎湃的海浪依然围绕着它。”ー马库斯 · 奥勒留\n\n> “First say to yourself what you would be; and then do what you have to do.” — Epictetus“ 首先对自己说你要成为什么样的人，然后做你必须做的事。”——爱比克泰德\n\n> “Waste no more time arguing what a good man should be. Be One.” — Marcus Aurelius“ 不要再浪费时间争论一个好人应该是什么样的了。做一个真正的好人。”——马库斯 · 奥勒留\n\n> “The primary indication of a well-ordered mind is a man’s ability to remain in one place and linger in his own company.” — Seneca“ 思维井然有序的主要标志是一个人能够呆在一个地方，与自己的同伴相处。”ー 塞涅卡\n\n> “Receive without pride, let go without attachment.” — Marcus Aurelius“ 不带骄傲地接受，不带眷恋地放手。”——马库斯 · 奥勒留\n\n[What Is Stoicism? A Definition & 9 Stoic Exercises To Get You Started](https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/)","source":"_posts/什么是斯多葛主义？ What Is Stoicism.md","raw":"---\ntitle: 什么是斯多葛主义？\n---\n\n\n本文翻译不一定精确，如有错误欢迎批注勘误，原始文章来源：\n\n[What Is Stoicism? A Definition & 9 Stoic Exercises To Get You Started](https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/)\n\n对于我们这些生活在现实世界中的人来说，有一个哲学流派是专门为我们创造的，斯多葛学派（Stoicism）。这是一种旨在使我们更有韧性、更快乐、更有德行和更有智慧的哲学。\n\n斯多葛主义一直是历史上一些伟大领导人的共同信仰 —— 国王、总统、艺术家、作家和企业家都曾奉行过这种精神。马库斯 · 奥勒留、腓特烈大帝、蒙田、乔治 · 华盛顿、托马斯 · 杰斐逊、亚当 · 斯密、约翰 · 斯图尔特 · 米尔、西奥多 · 罗斯福、詹姆斯 · 马蒂斯将军，仅举几例，都受到斯多葛哲学的影响。\n\n那么什么是斯多葛主义？谁是斯多葛派？你怎样才能成为一个斯多葛主义者？\n\n------\n\n# I. 什么是斯多葛主义？| What Is Stoicism?\n\n------\n\n> Of all people only those are at leisure who make time for philosophy, only they truly live. Not satisfied to merely keep good watch over their own days, they annex every age to their own. All the harvest of the past is added to their store.\n\n在所有的人中，只有那些有闲情逸致的人，才会有时间去研究哲学，只有他们才会真正活着。他们并不满足于仅仅看管好自己的日子，而是把每个时代都并入自己的时代。所有过去的收获都被添加到他们的仓库中。 —— 塞涅卡 （Seneca）\n\n罗马最伟大的皇帝之一的私人日记（奥勒留），罗马最好的剧作家和最聪明的权力经纪人之一的私人信件（塞涅卡），一个前奴隶和流亡者变成有影响力的教师的讲座（爱比克泰德）。尽管困难重重，大约两千年后，这些令人难以置信的文件仍然存在。它们包含了世界历史上一些最伟大的智慧，它们共同构成了所谓的斯多葛主义的基石 —— 一种古老的哲学，曾经是西方最流行的哲学之一，富人和穷人、强者和挣扎者都在追求美好生活。\n\n除了对最狂热的智慧追求者，斯多葛主义要么不为人知，要么被误解了。对普通人来说，这种充满活力、以行动为导向、改变范式的生活方式已经成为 \"无感情 \"的简称。鉴于仅仅提到哲学就会让大多数人感到紧张或厌烦，\"斯多葛哲学 \"在表面上听起来像是任何人最不想了解的东西，更不用说在日常生活中迫切需要的了。\n\n很难找到一个比 \"斯多葛 \"在英语语言中受到更大不公正待遇的词。在其应有的位置上，斯多葛主义是一种追求自我超越、坚忍不拔和智慧的工具：**一个人用来过上伟大生活的东西，而不是一些深奥的学术探索领域**。当然，许多历史上的伟大人物不仅了解斯多葛主义的真实面目，而且还寻求它。乔治-华盛顿、沃尔特-惠特曼、腓特烈大帝、欧仁-德拉克洛瓦、亚当-斯密、伊曼纽尔-康德、托马斯-杰斐逊、马修-阿诺德、安布罗斯-比尔斯、西奥多-罗斯福、威廉-亚历山大-珀西、拉尔夫-瓦尔多-爱默生。每个人都阅读，研究，引用，或钦佩斯多葛派。\n\n在斯多葛主义中，这些人和其他无数伟大的男人和女人发现了什么其他人没有发现的东西？非常多。首先，它为生活中所有的挑战提供了急需的力量、智慧和毅力。\n\n# II. 斯多葛主义是如何开始的？ | How Did Stoicism Begin?\n\n------\n\n公元前304年左右，一位名叫芝诺（Zeno）的商人在一次贸易航行中遭遇海难。\n\n他几乎失去了一切。在前往雅典的途中，愤世嫉俗的哲学家克拉特斯和麦加利亚的哲学家斯蒂波向他介绍了哲学，这改变了他的生活。\n\n正如芝诺后来开玩笑说的那样: “我遭遇海难时，航行得很顺利。”他后来搬到了后来被称为 Stoa Poikile 的地方，字面意思是“漆色的门廊”，始建于公元前5世纪，2500年后的今天，它的废墟依然清晰可见，油漆过的门廊是芝诺和他的弟子们聚会讨论的地方。虽然他的追随者最初被称为 Zenonians，它是 Zeno（芝诺） 的谦卑的终极功劳，他所创立的哲学学校最终并没有使用他的名字，这是对芝诺谦逊的最大肯定。\n\n# III. 谁是斯多葛派哲学家？ | Who Were The Stoic Philosophers?\n\n------\n\n在我们开始研究之前，我们需要问自己。谁是遵循这些哲学的人？我是否为仰视这个人而感到自豪？我是否想更像他们？\n\n罗马皇帝马库斯-奥勒留，剧作家和政治顾问塞涅卡，以及从奴隶变成杰出教师的爱比克泰德—— 这是你需要首先了解的三个斯多葛学派的践行者。一旦你了解了，我们相信你会想追随他们的脚步。\n\n[斯多葛学派的哲学家们](https://www.notion.so/c8b59418fd3a47fe9af304c518c1be08)\n\n# IV. 斯多葛派的四大美德是什么？ | What Are The 4 Virtues of Stoicism?\n\n------\n\nCourage. 勇气\n\nTemperance. 节制\n\nJustice. 正义\n\nWisdom. 智慧\n\n它们是斯多葛哲学中最基本的价值观。马库斯-奥勒留写道：「**如果在你生命中的某个时刻，你遇到了比正义、真理、自我控制、勇气更好的东西，那一定是一件非常了不起的事情**。」\n\n那是近20个世纪以前的事。从那时起，我们发现了很多东西 —— 汽车、互联网、治疗以前是绝症的疾病，但我们是否发现了更好的东西？\n\n## 勇气 | **Courage**\n\n如果你读过科马克-麦卡锡黑暗而美丽的小说《所有漂亮的马》，你会记得埃米利奥-佩雷斯问约翰-格雷迪的关键问题，这个问题直指生命的核心，以及我们都必须做什么才能活得有价值。\n\n> “The world wants to know if you have cojones. If you are brave?”\n\n斯多葛派的措辞可能有点不同。塞涅卡会说，他实际上是在可怜那些从未经历过不幸的人。**他说：\"你在没有对手的情况下度过了一生，\"\"没有人能够知道你的能力，甚至你也不知道\"。**\n\n世界想知道应该把你放入到什么类别中，这就是为什么它偶尔会给你带来磨难的原因。不要把这些看作是不便甚至是悲剧，而要看作是机会，看作是需要回答的问题。我有胆量吗？我勇敢吗？我是要面对这个问题还是要逃避它？我是要站起来还是要被压在地上？\n\n让你的行动记录下你的反应，让他们提醒你为什么勇气是最重要的。\n\n## 节制 | Temperance\n\n当然，生活并没有简单到说勇气就是全部的算数。虽然每个人都会承认勇气是必不可少的，但我们也都很清楚，有些人的勇敢变成了鲁莽，当他们开始危及自己和他人时，就变成了一种过错。\n\n亚里士多德在他著名的比喻“中庸之道”（Golden Mean.）中，实际上把勇气作为主要的例子。他说，在光谱的一端，有懦弱--那是勇气的不足。在另一端，则是鲁莽--过多的勇气。我们所需要的，我们当时所要求的，是一个黄金分割点，以一种恰当的方式。\n\n这就是节制或适度的意义所在：**不要做过分的事。以正确的方式做正确的事情。**亚里士多德还说: “因为我们反复做的事情就是我们自己，所以优秀不是一种行为，而是一种习惯。”\n\n换句话说：美德和卓越是一种生活方式。这是基础。它就像一个操作系统，这个系统运行的代码是习惯。\n\n正如爱比克泰德后来所说，\"能力在其相应的行动中得到确认和增长，走路靠走，跑步靠跑......因此，如果你想做什么，就养成习惯。\" 因此，如果我们想获得幸福，如果我们想获得成功，如果我们想成为伟大的人，我们必须发展能力，我们必须培养日常的习惯，使之随之产生。\n\n这是个好消息。因为它意味着令人印象深刻的结果或巨大的变化是可能的，不需要艰苦的努力或神奇的公式。小小的调整，良好的系统，正确的程序 —— 这就是所需要的。\n\n## 正义 | Justice\n\n勇敢一点。找到正确的平衡点。这些都是斯多葛学派的核心美德，但就其严肃性而言，它们与斯多葛学派最崇拜的东西——做正确的事——相比就显得苍白无力了。\n\n没有什么斯多葛的美德比正义更重要，因为它影响着所有其他的美德。马库斯-奥勒留自己说，正义是 \"所有其他美德的源泉\"。历史上的斯多葛派一直在推动和倡导正义，通常是冒着巨大的个人风险和巨大的勇气，为了做伟大的事情，为了捍卫他们所爱的人和思想。\n\n- 卡托为了重建罗马共和国而献出了自己的生命。\n- 斯拉西亚和阿格里皮努斯为了抵抗尼禄的暴政献出了他们的生命。\n- 乔治-华盛顿和托马斯-杰斐逊组建了一个新的国家--这个国家将寻求为民主和正义而战，尽管并不完美--主要是受到卡托和其他斯多葛派哲学的启发。\n\n无数其他活动家和政治家都求助于斯多葛主义，使他们在为重要的理想而奋斗的过程中遇到困难，引导他们在一个错综复杂的世界中走向正确。斯多葛主义者必须深深相信，个人可以有所作为。成功的行动主义和政治操纵需要理解和策略，以及现实主义......和希望。它需要智慧、接受，也需要拒绝接受现状。\n\n詹姆斯•鲍德温(James Baldwin)在《土著儿子笔记》(Notes of a Native Son)中最精彩地描述了这种紧张气氛:\n\n> 人们似乎不得不永远记住两个似乎相反的观点。第一个想法是接受，接受，完全没有仇恨，接受生活本来的样子，接受人的本来面目: 根据这个想法，不言而喻，不公平是司空见惯的。但这并不意味着一个人可以自满，因为第二个观念是平等的力量: 一个人在自己的生活中决不能接受这些不公平现象，而是必须全力以赴地与它们作斗争。\n\n斯多葛主义者能清楚地看到世界... ... 但也能清楚地看到世界可以是什么样子。他们很勇敢，也很有战略眼光，足以帮助实现这一目标。\n\n## 智慧 | Wisdom\n\n勇气。节制。公正。这些都是生活中的重要美德。但什么情况下需要勇气？什么是正确的数量？什么是正确的事情？这就是最后一种基本美德的作用。智慧。知道。学习。驾驭世界所需的经验。\n\n智慧一直是斯多葛派所珍视的。芝诺说，我们被赋予两只耳朵和一张嘴是有原因的：倾听多于交谈。既然我们有两只眼睛，我们也有义务阅读和观察，而不是说话。\n\n今天，正如古代世界一样，关键是要能够区分你所掌握的大量信息，以及你过上美好生活所需的实际智慧。关键是我们要学习，我们要始终保持我们的头脑开放。**你不能学习你认为你已经知道的东西**，爱比克泰德说 —— 这是真的。\n\n这就是为什么我们不仅要做谦虚的学生，而且要寻找伟大的老师。这就是为什么我们应该一直在阅读。这就是为什么我们不能停止训练。这就是为什么我们必须勤奋地从噪音中过滤出信号。\n\n我们的目标不仅仅是获取信息，而是获取正确的信息。这是在《沉思录》中发现的教训，从实际的爱比克泰德到詹姆斯 · 斯托克代尔进入爱比克泰德的世界。这是关键的事实，从背景噪音中脱颖而出，你需要吸收。\n\n世界可以获得数千年的惊人洞察力。你可能有能力在指尖学习任何你想学的东西。所以今天，尊重斯多葛学派的美德智慧，放慢脚步，深思熟虑，找到你需要的智慧。\n\n两只眼睛，两只耳朵，一张嘴。做一个学生。相应地，明智地行动。\n\n# V. 有哪些关于斯多葛主义的最佳书籍？ | What Are The Best Books On Stoicism?\n\n------\n\n## 《沉思录》 by 马库斯 · 奥勒留\n\n也许是有史以来唯一的此类文件。它是世界上最有权势的人的私人想法，就如何履行其职位的责任和义务向自己提出建议。马库斯几乎每天晚上都会停下来练习一系列的精神练习 —— 这些练习旨在使他在面对任何事情时变得谦逊、耐心、富有同情心、慷慨和坚强。你不可能在读完这本书后，没有得到一个短语或一句话，在你下次遇到困难时对你有所帮助。阅读它，它是实用哲学的体现。\n\n## 《斯多葛主义者的信（Letters from A stoic）》 by 塞涅卡\n\n马库斯主要是为自己写作，而塞涅卡则是为他人提供建议和帮助，没有任何问题。事实上，这就是他的工作，他是尼禄的导师，负责减少一个可怕的人的可怕冲动。他关于悲伤、财富、权力、宗教和生活的建议总是在你需要时出现。塞涅卡的书信是最好的开始，但《论生命的短暂》中的文章也很好。\n\n## 《语录（Discourses）》 by 爱比克泰德\n\n爱比克泰德的教诲能够流传到我们这里是很了不起的。这要归功于一位名叫阿里安的学生，他在公元二世纪初抄录了他在爱比克泰德的课堂上学到的课程。阿里安在《语录》出版前的一封信中写道：\"无论我以前听他说什么，我都尽可能一字不差地写下来，作为以后使用他的思想和坦率表达的记录\"。阿里安将利用这些经验，作为政治顾问、军事指挥官和多产的作家，在整个罗马获得声誉。有趣的是，在题为 \"债务和教训 \"的《沉思录》第一册中，马库斯感谢他的一位哲学老师鲁斯提库斯，\"他向我介绍了爱比克泰德的讲座--并借给我他自己的副本\"。\n\n# VI. 如何成为一个斯多葛主义者\n\n------\n\n## 1. 控制的二分法 | The Dichotomy Of Control\n\n> “The chief task in life is simply this: to identify and separate matters so that I can say clearly to myself which are externals not under my control, and which have to do with the choices I actually control. Where then do I look for good and evil? Not to uncontrollable externals, but within myself to the choices that are my own . . .” Epictetus\n\n\"生活中的主要任务仅仅是：识别和分离事务，以便我能够清楚地对自己说，哪些是不由我控制的外部因素，哪些与我实际控制的选择有关。那么我在哪里寻找善与恶呢？不是看不可控制的外在因素，而是看我自己的选择......\" 爱比克泰德\n\n斯多葛哲学中最重要的一个实践是区分我们能改变的和不能改变的。我们能影响的和我们不能影响的。一个航班因为天气而延误--对航空公司代表大喊大叫也不能结束一场风暴。再多的愿望也不能使你变高或变矮，或出生在不同的国家。无论你如何努力，你都不能让别人喜欢你。最重要的是，把时间花在向这些不可移动的物体投掷上，就是没有把时间花在我们可以改变的事情上。\n\n每天都要回到这个问题上--在每一个艰难的情况下。不断记下并反思它。如果你能专注于明确你一天中哪些部分在你的控制范围内，哪些部分不在你的控制范围内，你不仅会更快乐，而且会比其他没有意识到自己在打一场不可能赢的仗的人有明显优势。\n\n## 2. 日记 | Journal\n\n> “Few care now about the marches and countermarches of the Roman commanders. What the centuries have clung to is a notebook of thoughts by a man whose real life was largely unknown who put down in the midnight dimness not the events of the day or the plans of the morrow, but something of far more permanent interest, the ideals and aspirations that a rare spirit lived by.” — Brand Blanshard\n\n\"现在很少有人关心罗马指挥官的行军和反击行动。几个世纪以来，人们所关注的是一个人的思想笔记，他的真实生活基本上不为人所知，他在午夜的昏暗中记下的不是当天的事件或明天的计划，而是一些更持久的兴趣，一个罕见的精神所生活的理想和愿望。\"\n\n- 布兰德-布兰沙德\n\n奴隶爱比克泰德、皇帝马库斯-奥勒留、塞涅卡是权力经纪人和剧作家。这三个完全不同的人过着完全不同的生活。但他们似乎都有一个共同的习惯：写日记。\n\n爱比克泰德会告诫他的学生，哲学是他们应该 \"一天天写下来 \"的东西，这种写作是他们 \"应该锻炼自己 \"的方式。塞涅卡最喜欢在晚上写日记。当夜幕降临，他的妻子已经入睡时，他向一位朋友解释说：\"我审视我的整个一天，回想我所做的和所说的，对自己没有任何隐瞒，没有任何忽略。然后他就去睡觉，发现 \"这种自我检查之后的睡眠 \"特别甜美。而马库斯，他是最多产的日记作者，我们很幸运，他的文章能保存下来，恰当地命名为Τὰ εἰς ἑαυτόν，Ta eis heauton，或 \"给自己\"。\n\n在斯多葛主义中，写日记的艺术不仅仅是一些简单的日记。这种日常实践就是哲学。为未来的一天做准备。对已经过去的一天进行反思。提醒自己我们从老师那里学到的智慧，从我们的阅读中，从我们自己的经验中。仅仅听一遍这些课程是不够的，相反，一个人要一遍又一遍地练习它们，在脑海中翻阅它们，最重要的是，把它们写下来，并在写的过程中感受它们在手指间流淌。\n\n斯多葛主义被设计成一种实践和常规。它不是一种你读过一次就能在灵魂层面上神奇地理解的哲学。不，它是一种终身的追求，需要勤奋、重复和专注。这是把一件事放在上面让你回顾--在手边--并充分消化。不是顺便。不仅仅是一次。而是一年中的每一天，最好是一年又一年。如果爱比克泰德是对的，这是你应该随时保持的东西--这就是为什么每天都有最精彩的作品集，对我们如此有吸引力。\n\n## 3. 练习不幸 | Practice Misfortune\n\n> “It is in times of security that the spirit should be preparing itself for difficult times; while fortune is bestowing favors on it is then is the time for it to be strengthened against her rebuffs.” — Seneca\n\n\"在安全的时候，精神应该为困难的时候做准备；当幸运之神给予它恩惠的时候，就是它加强抵抗她的反击的时候。\" - 塞涅卡\n\n作为尼禄的顾问，塞涅卡享受着巨大的财富，他建议我们每个月应该留出一定数量的日子来实践贫穷。吃点东西，穿上你最糟糕的衣服，远离舒适的家和床。他说，让自己面对贫困，你会问自己: “这是我曾经害怕的吗?”\n\n重要的是要记住，**这是一个练习，而不是一个修辞手法。**他的意思不是 \"思考 \"不幸，他的意思是活在不幸中。安逸是最糟糕的一种奴役，因为你总是害怕某件事情或某人会夺走它。但是，如果你不仅能预见而且能实践不幸，那么机会就会失去扰乱你生活的能力。\n\n像焦虑和恐惧这样的情绪，其根源在于不确定性，而很少来自于经验。任何一个在自己身上下了大赌注的人都知道这两个情绪能消耗多少能源。解决办法就是对这种无知做点什么。让自己熟悉那些你害怕的事情，尤其是最坏的情况。\n\n**练习你所害怕的东西，无论是在你心中的模拟还是在现实生活中。不幸（downside）几乎总是可逆的或短暂的。**\n\n## 4. 摒弃好坏的观念 | Train Perceptions\n\n> “Choose not to be harmed and you won’t feel harmed. Don’t feel harmed and you haven’t been.” — Marcus Aurelius\n\n\"选择不受伤害，你就不会感到受伤害。不觉得受到伤害，你就没有受到过伤害\"。- 马库斯-奥勒留\n\n斯多葛派有一个叫做 \"颠覆障碍 \"的练习。因为如果你能适当地把问题颠倒过来，每一个 \"坏 \"都会成为新的好的来源。\n\n假设你正试图帮助某人，而他们的反应是傲慢或不愿意合作。练习说，他们没有使你的生活更加困难，而是实际上在引导你培养新的美德；例如，耐心或理解。或者，与你关系密切的人的死亡；是展示坚忍的机会。\n\n马库斯 · 奥勒留是这样描述的:\n\n> “The impediment to action advances action. What stands in the way becomes the way.” “行动的障碍推动行动，阻碍就会成为行动的方式。”\n\n关于企业家的常见说法是，他们利用，甚至创造机会。对斯多葛主义者来说，所有的事情都是机会。一个令人沮丧的案件，你的帮助没有得到重视，一个亲人的死亡，这些都不是正常意义上的 \"机会\"。事实上，它们恰恰相反。它们是障碍。斯多葛主义者所做的是把每一个障碍变成一个机会。\n\n对实践中的斯多葛主义者来说，没有好坏之分。有的只是感知。你可以控制知觉。你可以选择推断出你的第一印象（\"X发生了。\"->\"X发生了，现在我的生活结束了。\"）。如果你把你的第一反应与冷静联系起来，你会发现一切都只是一个机会。\n\n## 5. 万物无常 | Remember—It’s All Ephemeral\n\n> “Alexander the Great and his mule driver both died and the same thing happened to both.” — Marcus Aurelius “亚历山大大帝和他的骡夫都死了，同样的事情也发生在他们身上。”ーー Marcus Aurelius\n\n马库斯 · 奥勒留给自己写了一封简单而有效的提醒信，帮助他重新找回视角，保持平衡:\n\n> “Run down the list of those who felt intense anger at something: the most famous, the most unfortunate, the most hated, the most whatever: Where is all that now? Smoke, dust, legend…or not even a legend. Think of all the examples. And how trivial the things we want so passionately are.” “列出那些对某事感到强烈愤怒的人的名单: 最有名的、最不幸的、最讨厌的、最无所谓的: 现在这些东西都在哪里？烟雾，尘埃，传说... 甚至不是一个传说。想想所有的例子。我们如此热切地想要的东西是多么微不足道。”\n\n值得注意的是，这里的“激情”并不是我们熟悉的现代用法，比如热情或关心某事。正如唐 · 罗伯逊在他的书中解释的那样，当斯多葛学派讨论克服激情，他们称之为可悲，他们指的是非理性、不健康和过度的欲望和情绪。愤怒就是一个很好的例子。重要的是要记住---- 这是关键的一点---- 他们寻求用幸福来代替幸福，比如快乐（joy）而不是过度的快乐（excessive pleasure）。\n\n**回到这个练习的重点，很简单: 记住你是多么的渺小。就此而言，请记住大多数事物是多么的渺小。**\n\n记住，成就可能是短暂的，你对它们的拥有只是一瞬间。\n\n如果一切都是短暂的，那还有什么意义呢？现在很重要。做一个好人，现在做正确的事，这才是最重要的，也是斯多葛派最重要的。\n\n以亚历山大大帝为例，他征服了已知的世界，并以他的名字命名了许多城市。这是常识。斯多葛学派还指出，有一次亚历山大喝醉了，和他最亲爱的朋友克雷塔斯打了一架，结果不小心把他打死了。后来，他非常沮丧，三天不能吃不能喝。希腊各地的诡辩家纷纷被叫来，想知道他们能为他的悲伤做些什么，但都无济于事。\n\n这是成功人生的标志吗？从个人的角度来看，如果你的名字在地图上被标注出来，如果你迷失了方向，伤害了你周围的人，那么这就无关紧要了。\n\n从亚历山大的错误中吸取教训。谦虚、诚实、有觉察力。这是你生命中每一天都可以拥有的。你永远不必担心有人会从你身上夺走它，或者更糟糕的是，它会控制你。\n\n## 6. 从上面看风景 | Take The View From Above\n\n> “How beautifully Plato put it. Whenever you want to talk about people, it’s best to take a bird’s- eye view and see everything all at once— of gatherings, armies, farms, weddings and divorces, births and deaths, noisy courtrooms or silent spaces, every foreign people, holidays, memorials, markets— all blended together and arranged in a pairing of opposites.” — Marcus Aurelius “柏拉图说得真好。无论何时，当你想谈论人时，最好是鸟瞰一切，一下子看到一切——聚会、军队、农场、婚礼和离婚、出生和死亡、嘈杂的法庭或安静的空间、每一个外国人、假日、纪念碑、市场——所有这些都融合在一起，并排列成对。”ー马库斯 · 奥勒留\n\n马库斯经常做一个练习，被称为“从上面看问题”或“柏拉图的观点”它让我们后退一步，缩小视野，从比我们自己更高的角度来看待生活。这项工作——想象所有千百万人、所有“军队、农场、婚姻和离婚、出生和死亡”——促使我们以正确的眼光看待问题，就像以前的工作一样，提醒我们自己是多么渺小。正如斯多葛学派的学者皮埃尔 · 哈多所说，“从上面的观点改变了我们对事物的价值判断: 奢侈、权力、战争... 以及对日常生活的担忧变得荒谬可笑。”\n\n看到我们在事物的宏伟计划中是多么渺小只是这项工作的一部分。第二点，也是更微妙的一点，是挖掘斯多葛学派所谓的同情心，或者说与整个人类的相互依赖。正如宇航员埃德加 · 米切尔(Edgar Mitchell)所说，“在外太空，你会产生一种瞬间的全球意识，一种以人为本的思想，一种对世界状况的强烈不满，以及一种想要做点什么的冲动。”米切尔是第一批真正体验到‘从上面看世界’的人之一。\n\n以柏拉图的观点来看：从自己的担忧中退后一步，提醒自己对他人的责任。\n\n## 7. 死亡警告: 想象你的死亡 | Memento Mori: Meditate On Your Mortality\n\n> “Let us prepare our minds as if we’d come to the very end of life. Let us postpone nothing. Let us balance life’s books each day. … The one who puts the finishing touches on their life each day is never short of time.” Seneca “让我们做好心理准备，就好像我们即将走到生命的尽头。我们什么也不要推迟。让我们平衡生活中的每一天。每天为自己的生活做最后润色的人永远不会缺少时间。”Seneca\n\n上面引用的塞尼卡的话部分出自《死亡记忆》(Memento mori)——这是一种对死亡进行反思的古老做法，可以追溯到苏格拉底(Socrates)。他说哲学的正确实践是 \"除了死亡和被死亡之外，没有其他东西\"。马库斯-奥勒留在他的《沉思录》中写道：\"你现在就可以离开生活。让这一点决定你做什么、说什么、想什么\"。那是对个人的提醒，让我们现在继续过着美德的生活，而不是等待。\n\n如果你没有抓住重点，冥想自己的死亡只会令人沮丧。斯多葛学派认为这种想法令人振奋和谦卑。塞尼卡有一本传记名为《每天都在死去》 ，这并不奇怪。毕竟，是塞尼卡敦促我们告诉自己: “明天你可能醒不过来了”，上床睡觉的时候，“你可能再也睡不着了”，醒来的时候提醒我们注定要死去。或者，正如另一位斯多葛学者爱比克泰德(Epictetus)所敦促他的学生们的那样: “每天把死亡和放逐放在你的眼前，还有一切看起来很可怕的东西--通过这样做，你永远不会有一个确定性的想法，也不会有过度的欲望。”利用这些提醒，每天冥想它们，让它们成为你充实生活的基石，不要浪费一秒钟。\n\n## 8. 消极想象 | Premeditatio Malorum\n\n> “What is quite unlooked for is more crushing in its effect, and unexpectedness adds to the weight of a disaster. This is a reason for ensuring that nothing ever takes us by surprise. We should project our thoughts ahead of us at every turn and have in mind every possible eventuality instead of only the usual course of events… Rehearse them in your mind: exile, torture, war, shipwreck. All the terms of our human lot should be before our eyes.” — Seneca “完全出人意料的是，它的影响更具破坏性，而且意外性增加了灾难的重量。这就是为什么要确保没有任何事情会让我们感到意外。我们应该在每一个转折点都把我们的想法放在眼前，并且考虑到每一种可能发生的事情，而不仅仅是通常的事件过程... ... 在你的脑海中重新演练一遍: 流放、折磨、战争、沉船。我们人类命运的所有条件都应摆在我们面前。”ー Seneca\n\n“ premeditatio malorum”(“罪恶的预谋”)是一种斯多葛主义的做法，用来想象可能出错或被夺走的事情。它帮助我们为生活中不可避免的挫折做好准备。我们并不总是得到本该属于我们的东西，即使是我们应得的。并不是所有的事情都像我们想象的那样简单明了。从心理学上讲，我们必须为这种情况发生做好准备。这是斯多葛学派建立恢复力和力量的工具箱中最有力的练习之一。\n\n例如，塞尼卡将首先重新审视或排练他的旅行计划。然后，在他的脑子里(或者像我们上面所说的在日记里) ，他会仔细检查那些可能出错或阻止它发生的事情ーー暴风雨可能会出现，船长可能会生病，船可能会遭到海盗的袭击。\n\n他在给一位朋友的信中写道: “智者不会出人意料。”。”... ... 也不是所有事情都如他所愿，但是正如他所料，最重要的是，他认为有什么东西可以阻止他的计划”\n\n通过这次演习，塞尼卡总是做好了应对混乱的准备，并且总是在他的计划中应对这种混乱。他适合胜利或失败。\n\n## 9. 热爱命运 | Amor Fati\n\n> “To love only what happens, what was destined. No greater harmony.” — Marcus Aurelius “只爱发生的事情，注定的事情。没有比这更和谐的了。”——马库斯 · 奥勒留\n\n伟大的德国哲学家弗里德里希-尼采将他关于人类伟大的公式描述为amor fati--对命运的爱。\"一个人不希望有什么不同，不是向前，不是向后，不是在所有的永恒中。不仅仅是承受必要的东西，更不是隐瞒它....，而是热爱它。\"\n\n斯多葛学派不仅熟悉这种态度，而且接受这种态度。2000年前，皇帝马库斯 · 奥勒留在他的个人日记《沉思录》中写道: “燃烧的火焰使投入其中的一切都变得火焰和光明。”另一位斯多葛学派的人物，爱比克泰德(Epictetus) ，作为一名残废的奴隶，在遭遇逆境之后也面临同样的困境: “不要追求事情按照你希望的方式发生，而是希望事情按照它发生的方式发生: 那么你就会快乐。”\n\n这就是为什么 amor fati 是一种斯多葛学派的练习和心态，你要把所有发生的事情都做到最好: 把每一个时刻——不管多么具有挑战性——当作需要拥抱而不是回避的事情来对待。不仅要接受它，而且要热爱它，为它做得更好。因此，就像火中的氧气一样，障碍和逆境成为你潜能的燃料。\n\n# VII. 斯多葛学派的局限性\n\n------\n\n对于个体来说，是一种积极面对问题的态度。但是对于整个社会的宏观运作机制，则会有一种无力感，因为整体来说斯多葛学派是防御性的，把内心装进城堡，用理性和必然性的把握来减少外部世界对内心的影响。\n\n因为斯多葛学派更强调一种「命中注定」，则勇敢是不足的。因为勇敢的前提是不知道投入是否有回报就投入力量，这和斯多葛学派追求的命中注定与追求内心的宁静是天然冲突的。\n\n之所以在近代复兴，也是因为社会快速发展，阶级固化严重，我们对于社会运转的影响力越来越小，像一个无足轻重的棋子，所以需要「接受这个必然」。典型是具有较高知识储备与社会经验，理解社会运作机制，但又无力干涉其运作的人。\n\nvia 《哲学家的 10 种生活提案》 by 徐英瑾\n\n# VIII. 格言们 | What Are The Best Stoic Quotes?\n\n------\n\n> “We are often more frightened than hurt; and we suffer more from imagination than from reality.” — Seneca“ 我们经常更害怕而不是受伤; 我们更多地受到想象的折磨而不是现实。”ー Seneca\n\n> “It’s silly to try to escape other people’s faults. They are inescapable. Just try to escape your own.” —Marcus Aurelius“ 试图逃避别人的错误是愚蠢的。这些错误是不可避免的。只是试图逃避自己的错误。”ー马库斯 · 奥勒留\n\n> “Our life is what our thoughts make it.” — Marcus Aurelius“ 我们的生活是我们的思想造就的。”——马库斯 · 奥勒留\n\n> “Don’t explain your philosophy. Embody it.” Epictetus“ 不要解释你的哲学，把它具体化。”Epictetus\n\n> “If anyone tells you that a certain person speaks ill— of you, do not make excuses about what is said of you but answer, ‘He was ignorant of my other faults, else he would not have mentioned these alone.'” — Epictetus” 如果有人告诉你某人说你的坏话，不要为别人对你说的话找借口，而要回答说: ‘他不知道我其他的缺点，否则他不会单独提到这些缺点。’”ーー爱比克泰德\n\n> “If it is not right, do not do it, if it is not true, do not say it.” — Marcus Aurelius如果不对，就不要做; 如果不对，就不要说ー马库斯 · 奥勒留\n\n> “You become what you give your attention to…If you yourself don’t choose what thoughts and images you expose yourself to, someone else will.” — Epictetus“ 你变成了你关注的对象... ... 如果你自己不选择暴露给自己的想法和形象，别人就会选择。”ー爱比克泰德\n\n> “Be tolerant with others and strict with yourself.” — Marcus Aurelius“对他人宽容，对自己严格。”——马库斯 · 奥勒留\n\n> “You always own the option of having no opinion. There is never any need to get worked up or to trouble your soul about things you can’t control. These things are not asking to be judged by you. Leave them alone.” — Marcus Aurelius“你总是可以选择不发表意见。从来没有必要因为你无法控制的事情而激动或者麻烦你的灵魂。这些事情并不是要你去评判。别管他们。”ー马库斯 · 奥勒留\n\n> “All you need are these: certainty of judgment in the present moment; action for the common good in the present moment; and an attitude of gratitude in the present moment for anything that comes your way.” — Marcus Aurelius“你所需要的就是这些: 确信当下的判断，为当下的共同利益而行动，以及对当下发生的一切抱有感激的态度。”ー马库斯 · 奥勒留\n\n> “No person has the power to have everything they want, but it is in their power not to want what they don’t have, and to cheerfully put to good use what they do have.” — Seneca“ 没有人有能力拥有他们想要的一切，但他们有能力不去想要他们没有的东西，并乐于好好利用他们拥有的东西。”ー 塞涅卡\n\n> “If anyone can refute me—show me I’m making a mistake or looking at things from the wrong perspective—I’ll gladly change. It’s the truth I’m after, and the truth never harmed anyone.” — Marcus Aurelius“ 如果有人能反驳我ーー证明我犯了错误或者从错误的角度看问题ーー我会很乐意改变。这是我追求的真相，真相从未伤害过任何人。”ー马库斯 · 奥勒留\n\n> “Today I escaped anxiety. Or no, I discarded it, because it was within me, in my own perceptions not outside.” — Marcus Aurelius“ 今天我摆脱了焦虑。或者不，我放弃了它，因为它在我内心，在我自己的感知里，而不是在外面。”ー马库斯 · 奥勒留\n\n> “You have power over your mind – not outside events. Realise this, and you will find strength.” — Marcus Aurelius“ 你可以控制自己的思想——而不是外部事件。认识到这一点，你就会找到力量。”ー马库斯 · 奥勒留\n\n> “It isn’t events themselves that disturb people, but only their judgements about them.” — Epictetus“ 困扰人们的不是事件本身，而是他们对事件的看法。”——爱比克泰德\n\n> “To be like the rock that the waves keep crashing over. It stands unmoved and the raging of the sea falls still around it.” — Marcus Aurelius“ 就像海浪不断拍打的岩石。它无动于衷，汹涌澎湃的海浪依然围绕着它。”ー马库斯 · 奥勒留\n\n> “First say to yourself what you would be; and then do what you have to do.” — Epictetus“ 首先对自己说你要成为什么样的人，然后做你必须做的事。”——爱比克泰德\n\n> “Waste no more time arguing what a good man should be. Be One.” — Marcus Aurelius“ 不要再浪费时间争论一个好人应该是什么样的了。做一个真正的好人。”——马库斯 · 奥勒留\n\n> “The primary indication of a well-ordered mind is a man’s ability to remain in one place and linger in his own company.” — Seneca“ 思维井然有序的主要标志是一个人能够呆在一个地方，与自己的同伴相处。”ー 塞涅卡\n\n> “Receive without pride, let go without attachment.” — Marcus Aurelius“ 不带骄傲地接受，不带眷恋地放手。”——马库斯 · 奥勒留\n\n[What Is Stoicism? A Definition & 9 Stoic Exercises To Get You Started](https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/)","slug":"什么是斯多葛主义？ What Is Stoicism","published":1,"date":"2021-09-19T13:36:58.836Z","updated":"2022-04-12T09:52:31.967Z","_id":"cl1vyonvv0008k60mclty2kfy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文翻译不一定精确，如有错误欢迎批注勘误，原始文章来源：</p>\n<p><a href=\"https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/\">What Is Stoicism? A Definition &amp; 9 Stoic Exercises To Get You Started</a></p>\n<p>对于我们这些生活在现实世界中的人来说，有一个哲学流派是专门为我们创造的，斯多葛学派（Stoicism）。这是一种旨在使我们更有韧性、更快乐、更有德行和更有智慧的哲学。</p>\n<p>斯多葛主义一直是历史上一些伟大领导人的共同信仰 —— 国王、总统、艺术家、作家和企业家都曾奉行过这种精神。马库斯 · 奥勒留、腓特烈大帝、蒙田、乔治 · 华盛顿、托马斯 · 杰斐逊、亚当 · 斯密、约翰 · 斯图尔特 · 米尔、西奥多 · 罗斯福、詹姆斯 · 马蒂斯将军，仅举几例，都受到斯多葛哲学的影响。</p>\n<p>那么什么是斯多葛主义？谁是斯多葛派？你怎样才能成为一个斯多葛主义者？</p>\n<hr>\n<h1 id=\"I-什么是斯多葛主义？-What-Is-Stoicism\"><a href=\"#I-什么是斯多葛主义？-What-Is-Stoicism\" class=\"headerlink\" title=\"I. 什么是斯多葛主义？| What Is Stoicism?\"></a>I. 什么是斯多葛主义？| What Is Stoicism?</h1><hr>\n<blockquote>\n<p>Of all people only those are at leisure who make time for philosophy, only they truly live. Not satisfied to merely keep good watch over their own days, they annex every age to their own. All the harvest of the past is added to their store.</p>\n</blockquote>\n<p>在所有的人中，只有那些有闲情逸致的人，才会有时间去研究哲学，只有他们才会真正活着。他们并不满足于仅仅看管好自己的日子，而是把每个时代都并入自己的时代。所有过去的收获都被添加到他们的仓库中。 —— 塞涅卡 （Seneca）</p>\n<p>罗马最伟大的皇帝之一的私人日记（奥勒留），罗马最好的剧作家和最聪明的权力经纪人之一的私人信件（塞涅卡），一个前奴隶和流亡者变成有影响力的教师的讲座（爱比克泰德）。尽管困难重重，大约两千年后，这些令人难以置信的文件仍然存在。它们包含了世界历史上一些最伟大的智慧，它们共同构成了所谓的斯多葛主义的基石 —— 一种古老的哲学，曾经是西方最流行的哲学之一，富人和穷人、强者和挣扎者都在追求美好生活。</p>\n<p>除了对最狂热的智慧追求者，斯多葛主义要么不为人知，要么被误解了。对普通人来说，这种充满活力、以行动为导向、改变范式的生活方式已经成为 “无感情 “的简称。鉴于仅仅提到哲学就会让大多数人感到紧张或厌烦，”斯多葛哲学 “在表面上听起来像是任何人最不想了解的东西，更不用说在日常生活中迫切需要的了。</p>\n<p>很难找到一个比 “斯多葛 “在英语语言中受到更大不公正待遇的词。在其应有的位置上，斯多葛主义是一种追求自我超越、坚忍不拔和智慧的工具：<strong>一个人用来过上伟大生活的东西，而不是一些深奥的学术探索领域</strong>。当然，许多历史上的伟大人物不仅了解斯多葛主义的真实面目，而且还寻求它。乔治-华盛顿、沃尔特-惠特曼、腓特烈大帝、欧仁-德拉克洛瓦、亚当-斯密、伊曼纽尔-康德、托马斯-杰斐逊、马修-阿诺德、安布罗斯-比尔斯、西奥多-罗斯福、威廉-亚历山大-珀西、拉尔夫-瓦尔多-爱默生。每个人都阅读，研究，引用，或钦佩斯多葛派。</p>\n<p>在斯多葛主义中，这些人和其他无数伟大的男人和女人发现了什么其他人没有发现的东西？非常多。首先，它为生活中所有的挑战提供了急需的力量、智慧和毅力。</p>\n<h1 id=\"II-斯多葛主义是如何开始的？-How-Did-Stoicism-Begin\"><a href=\"#II-斯多葛主义是如何开始的？-How-Did-Stoicism-Begin\" class=\"headerlink\" title=\"II. 斯多葛主义是如何开始的？ | How Did Stoicism Begin?\"></a>II. 斯多葛主义是如何开始的？ | How Did Stoicism Begin?</h1><hr>\n<p>公元前304年左右，一位名叫芝诺（Zeno）的商人在一次贸易航行中遭遇海难。</p>\n<p>他几乎失去了一切。在前往雅典的途中，愤世嫉俗的哲学家克拉特斯和麦加利亚的哲学家斯蒂波向他介绍了哲学，这改变了他的生活。</p>\n<p>正如芝诺后来开玩笑说的那样: “我遭遇海难时，航行得很顺利。”他后来搬到了后来被称为 Stoa Poikile 的地方，字面意思是“漆色的门廊”，始建于公元前5世纪，2500年后的今天，它的废墟依然清晰可见，油漆过的门廊是芝诺和他的弟子们聚会讨论的地方。虽然他的追随者最初被称为 Zenonians，它是 Zeno（芝诺） 的谦卑的终极功劳，他所创立的哲学学校最终并没有使用他的名字，这是对芝诺谦逊的最大肯定。</p>\n<h1 id=\"III-谁是斯多葛派哲学家？-Who-Were-The-Stoic-Philosophers\"><a href=\"#III-谁是斯多葛派哲学家？-Who-Were-The-Stoic-Philosophers\" class=\"headerlink\" title=\"III. 谁是斯多葛派哲学家？ | Who Were The Stoic Philosophers?\"></a>III. 谁是斯多葛派哲学家？ | Who Were The Stoic Philosophers?</h1><hr>\n<p>在我们开始研究之前，我们需要问自己。谁是遵循这些哲学的人？我是否为仰视这个人而感到自豪？我是否想更像他们？</p>\n<p>罗马皇帝马库斯-奥勒留，剧作家和政治顾问塞涅卡，以及从奴隶变成杰出教师的爱比克泰德—— 这是你需要首先了解的三个斯多葛学派的践行者。一旦你了解了，我们相信你会想追随他们的脚步。</p>\n<p><a href=\"https://www.notion.so/c8b59418fd3a47fe9af304c518c1be08\">斯多葛学派的哲学家们</a></p>\n<h1 id=\"IV-斯多葛派的四大美德是什么？-What-Are-The-4-Virtues-of-Stoicism\"><a href=\"#IV-斯多葛派的四大美德是什么？-What-Are-The-4-Virtues-of-Stoicism\" class=\"headerlink\" title=\"IV. 斯多葛派的四大美德是什么？ | What Are The 4 Virtues of Stoicism?\"></a>IV. 斯多葛派的四大美德是什么？ | What Are The 4 Virtues of Stoicism?</h1><hr>\n<p>Courage. 勇气</p>\n<p>Temperance. 节制</p>\n<p>Justice. 正义</p>\n<p>Wisdom. 智慧</p>\n<p>它们是斯多葛哲学中最基本的价值观。马库斯-奥勒留写道：「<strong>如果在你生命中的某个时刻，你遇到了比正义、真理、自我控制、勇气更好的东西，那一定是一件非常了不起的事情</strong>。」</p>\n<p>那是近20个世纪以前的事。从那时起，我们发现了很多东西 —— 汽车、互联网、治疗以前是绝症的疾病，但我们是否发现了更好的东西？</p>\n<h2 id=\"勇气-Courage\"><a href=\"#勇气-Courage\" class=\"headerlink\" title=\"勇气 | Courage\"></a>勇气 | <strong>Courage</strong></h2><p>如果你读过科马克-麦卡锡黑暗而美丽的小说《所有漂亮的马》，你会记得埃米利奥-佩雷斯问约翰-格雷迪的关键问题，这个问题直指生命的核心，以及我们都必须做什么才能活得有价值。</p>\n<blockquote>\n<p>“The world wants to know if you have cojones. If you are brave?”</p>\n</blockquote>\n<p>斯多葛派的措辞可能有点不同。塞涅卡会说，他实际上是在可怜那些从未经历过不幸的人。<strong>他说：”你在没有对手的情况下度过了一生，””没有人能够知道你的能力，甚至你也不知道”。</strong></p>\n<p>世界想知道应该把你放入到什么类别中，这就是为什么它偶尔会给你带来磨难的原因。不要把这些看作是不便甚至是悲剧，而要看作是机会，看作是需要回答的问题。我有胆量吗？我勇敢吗？我是要面对这个问题还是要逃避它？我是要站起来还是要被压在地上？</p>\n<p>让你的行动记录下你的反应，让他们提醒你为什么勇气是最重要的。</p>\n<h2 id=\"节制-Temperance\"><a href=\"#节制-Temperance\" class=\"headerlink\" title=\"节制 | Temperance\"></a>节制 | Temperance</h2><p>当然，生活并没有简单到说勇气就是全部的算数。虽然每个人都会承认勇气是必不可少的，但我们也都很清楚，有些人的勇敢变成了鲁莽，当他们开始危及自己和他人时，就变成了一种过错。</p>\n<p>亚里士多德在他著名的比喻“中庸之道”（Golden Mean.）中，实际上把勇气作为主要的例子。他说，在光谱的一端，有懦弱–那是勇气的不足。在另一端，则是鲁莽–过多的勇气。我们所需要的，我们当时所要求的，是一个黄金分割点，以一种恰当的方式。</p>\n<p>这就是节制或适度的意义所在：<strong>不要做过分的事。以正确的方式做正确的事情。</strong>亚里士多德还说: “因为我们反复做的事情就是我们自己，所以优秀不是一种行为，而是一种习惯。”</p>\n<p>换句话说：美德和卓越是一种生活方式。这是基础。它就像一个操作系统，这个系统运行的代码是习惯。</p>\n<p>正如爱比克泰德后来所说，”能力在其相应的行动中得到确认和增长，走路靠走，跑步靠跑……因此，如果你想做什么，就养成习惯。” 因此，如果我们想获得幸福，如果我们想获得成功，如果我们想成为伟大的人，我们必须发展能力，我们必须培养日常的习惯，使之随之产生。</p>\n<p>这是个好消息。因为它意味着令人印象深刻的结果或巨大的变化是可能的，不需要艰苦的努力或神奇的公式。小小的调整，良好的系统，正确的程序 —— 这就是所需要的。</p>\n<h2 id=\"正义-Justice\"><a href=\"#正义-Justice\" class=\"headerlink\" title=\"正义 | Justice\"></a>正义 | Justice</h2><p>勇敢一点。找到正确的平衡点。这些都是斯多葛学派的核心美德，但就其严肃性而言，它们与斯多葛学派最崇拜的东西——做正确的事——相比就显得苍白无力了。</p>\n<p>没有什么斯多葛的美德比正义更重要，因为它影响着所有其他的美德。马库斯-奥勒留自己说，正义是 “所有其他美德的源泉”。历史上的斯多葛派一直在推动和倡导正义，通常是冒着巨大的个人风险和巨大的勇气，为了做伟大的事情，为了捍卫他们所爱的人和思想。</p>\n<ul>\n<li>卡托为了重建罗马共和国而献出了自己的生命。</li>\n<li>斯拉西亚和阿格里皮努斯为了抵抗尼禄的暴政献出了他们的生命。</li>\n<li>乔治-华盛顿和托马斯-杰斐逊组建了一个新的国家–这个国家将寻求为民主和正义而战，尽管并不完美–主要是受到卡托和其他斯多葛派哲学的启发。</li>\n</ul>\n<p>无数其他活动家和政治家都求助于斯多葛主义，使他们在为重要的理想而奋斗的过程中遇到困难，引导他们在一个错综复杂的世界中走向正确。斯多葛主义者必须深深相信，个人可以有所作为。成功的行动主义和政治操纵需要理解和策略，以及现实主义……和希望。它需要智慧、接受，也需要拒绝接受现状。</p>\n<p>詹姆斯•鲍德温(James Baldwin)在《土著儿子笔记》(Notes of a Native Son)中最精彩地描述了这种紧张气氛:</p>\n<blockquote>\n<p>人们似乎不得不永远记住两个似乎相反的观点。第一个想法是接受，接受，完全没有仇恨，接受生活本来的样子，接受人的本来面目: 根据这个想法，不言而喻，不公平是司空见惯的。但这并不意味着一个人可以自满，因为第二个观念是平等的力量: 一个人在自己的生活中决不能接受这些不公平现象，而是必须全力以赴地与它们作斗争。</p>\n</blockquote>\n<p>斯多葛主义者能清楚地看到世界… … 但也能清楚地看到世界可以是什么样子。他们很勇敢，也很有战略眼光，足以帮助实现这一目标。</p>\n<h2 id=\"智慧-Wisdom\"><a href=\"#智慧-Wisdom\" class=\"headerlink\" title=\"智慧 | Wisdom\"></a>智慧 | Wisdom</h2><p>勇气。节制。公正。这些都是生活中的重要美德。但什么情况下需要勇气？什么是正确的数量？什么是正确的事情？这就是最后一种基本美德的作用。智慧。知道。学习。驾驭世界所需的经验。</p>\n<p>智慧一直是斯多葛派所珍视的。芝诺说，我们被赋予两只耳朵和一张嘴是有原因的：倾听多于交谈。既然我们有两只眼睛，我们也有义务阅读和观察，而不是说话。</p>\n<p>今天，正如古代世界一样，关键是要能够区分你所掌握的大量信息，以及你过上美好生活所需的实际智慧。关键是我们要学习，我们要始终保持我们的头脑开放。<strong>你不能学习你认为你已经知道的东西</strong>，爱比克泰德说 —— 这是真的。</p>\n<p>这就是为什么我们不仅要做谦虚的学生，而且要寻找伟大的老师。这就是为什么我们应该一直在阅读。这就是为什么我们不能停止训练。这就是为什么我们必须勤奋地从噪音中过滤出信号。</p>\n<p>我们的目标不仅仅是获取信息，而是获取正确的信息。这是在《沉思录》中发现的教训，从实际的爱比克泰德到詹姆斯 · 斯托克代尔进入爱比克泰德的世界。这是关键的事实，从背景噪音中脱颖而出，你需要吸收。</p>\n<p>世界可以获得数千年的惊人洞察力。你可能有能力在指尖学习任何你想学的东西。所以今天，尊重斯多葛学派的美德智慧，放慢脚步，深思熟虑，找到你需要的智慧。</p>\n<p>两只眼睛，两只耳朵，一张嘴。做一个学生。相应地，明智地行动。</p>\n<h1 id=\"V-有哪些关于斯多葛主义的最佳书籍？-What-Are-The-Best-Books-On-Stoicism\"><a href=\"#V-有哪些关于斯多葛主义的最佳书籍？-What-Are-The-Best-Books-On-Stoicism\" class=\"headerlink\" title=\"V. 有哪些关于斯多葛主义的最佳书籍？ | What Are The Best Books On Stoicism?\"></a>V. 有哪些关于斯多葛主义的最佳书籍？ | What Are The Best Books On Stoicism?</h1><hr>\n<h2 id=\"《沉思录》-by-马库斯-·-奥勒留\"><a href=\"#《沉思录》-by-马库斯-·-奥勒留\" class=\"headerlink\" title=\"《沉思录》 by 马库斯 · 奥勒留\"></a>《沉思录》 by 马库斯 · 奥勒留</h2><p>也许是有史以来唯一的此类文件。它是世界上最有权势的人的私人想法，就如何履行其职位的责任和义务向自己提出建议。马库斯几乎每天晚上都会停下来练习一系列的精神练习 —— 这些练习旨在使他在面对任何事情时变得谦逊、耐心、富有同情心、慷慨和坚强。你不可能在读完这本书后，没有得到一个短语或一句话，在你下次遇到困难时对你有所帮助。阅读它，它是实用哲学的体现。</p>\n<h2 id=\"《斯多葛主义者的信（Letters-from-A-stoic）》-by-塞涅卡\"><a href=\"#《斯多葛主义者的信（Letters-from-A-stoic）》-by-塞涅卡\" class=\"headerlink\" title=\"《斯多葛主义者的信（Letters from A stoic）》 by 塞涅卡\"></a>《斯多葛主义者的信（Letters from A stoic）》 by 塞涅卡</h2><p>马库斯主要是为自己写作，而塞涅卡则是为他人提供建议和帮助，没有任何问题。事实上，这就是他的工作，他是尼禄的导师，负责减少一个可怕的人的可怕冲动。他关于悲伤、财富、权力、宗教和生活的建议总是在你需要时出现。塞涅卡的书信是最好的开始，但《论生命的短暂》中的文章也很好。</p>\n<h2 id=\"《语录（Discourses）》-by-爱比克泰德\"><a href=\"#《语录（Discourses）》-by-爱比克泰德\" class=\"headerlink\" title=\"《语录（Discourses）》 by 爱比克泰德\"></a>《语录（Discourses）》 by 爱比克泰德</h2><p>爱比克泰德的教诲能够流传到我们这里是很了不起的。这要归功于一位名叫阿里安的学生，他在公元二世纪初抄录了他在爱比克泰德的课堂上学到的课程。阿里安在《语录》出版前的一封信中写道：”无论我以前听他说什么，我都尽可能一字不差地写下来，作为以后使用他的思想和坦率表达的记录”。阿里安将利用这些经验，作为政治顾问、军事指挥官和多产的作家，在整个罗马获得声誉。有趣的是，在题为 “债务和教训 “的《沉思录》第一册中，马库斯感谢他的一位哲学老师鲁斯提库斯，”他向我介绍了爱比克泰德的讲座–并借给我他自己的副本”。</p>\n<h1 id=\"VI-如何成为一个斯多葛主义者\"><a href=\"#VI-如何成为一个斯多葛主义者\" class=\"headerlink\" title=\"VI. 如何成为一个斯多葛主义者\"></a>VI. 如何成为一个斯多葛主义者</h1><hr>\n<h2 id=\"1-控制的二分法-The-Dichotomy-Of-Control\"><a href=\"#1-控制的二分法-The-Dichotomy-Of-Control\" class=\"headerlink\" title=\"1. 控制的二分法 | The Dichotomy Of Control\"></a>1. 控制的二分法 | The Dichotomy Of Control</h2><blockquote>\n<p>“The chief task in life is simply this: to identify and separate matters so that I can say clearly to myself which are externals not under my control, and which have to do with the choices I actually control. Where then do I look for good and evil? Not to uncontrollable externals, but within myself to the choices that are my own . . .” Epictetus</p>\n</blockquote>\n<p>“生活中的主要任务仅仅是：识别和分离事务，以便我能够清楚地对自己说，哪些是不由我控制的外部因素，哪些与我实际控制的选择有关。那么我在哪里寻找善与恶呢？不是看不可控制的外在因素，而是看我自己的选择……” 爱比克泰德</p>\n<p>斯多葛哲学中最重要的一个实践是区分我们能改变的和不能改变的。我们能影响的和我们不能影响的。一个航班因为天气而延误–对航空公司代表大喊大叫也不能结束一场风暴。再多的愿望也不能使你变高或变矮，或出生在不同的国家。无论你如何努力，你都不能让别人喜欢你。最重要的是，把时间花在向这些不可移动的物体投掷上，就是没有把时间花在我们可以改变的事情上。</p>\n<p>每天都要回到这个问题上–在每一个艰难的情况下。不断记下并反思它。如果你能专注于明确你一天中哪些部分在你的控制范围内，哪些部分不在你的控制范围内，你不仅会更快乐，而且会比其他没有意识到自己在打一场不可能赢的仗的人有明显优势。</p>\n<h2 id=\"2-日记-Journal\"><a href=\"#2-日记-Journal\" class=\"headerlink\" title=\"2. 日记 | Journal\"></a>2. 日记 | Journal</h2><blockquote>\n<p>“Few care now about the marches and countermarches of the Roman commanders. What the centuries have clung to is a notebook of thoughts by a man whose real life was largely unknown who put down in the midnight dimness not the events of the day or the plans of the morrow, but something of far more permanent interest, the ideals and aspirations that a rare spirit lived by.” — Brand Blanshard</p>\n</blockquote>\n<p>“现在很少有人关心罗马指挥官的行军和反击行动。几个世纪以来，人们所关注的是一个人的思想笔记，他的真实生活基本上不为人所知，他在午夜的昏暗中记下的不是当天的事件或明天的计划，而是一些更持久的兴趣，一个罕见的精神所生活的理想和愿望。”</p>\n<ul>\n<li>布兰德-布兰沙德</li>\n</ul>\n<p>奴隶爱比克泰德、皇帝马库斯-奥勒留、塞涅卡是权力经纪人和剧作家。这三个完全不同的人过着完全不同的生活。但他们似乎都有一个共同的习惯：写日记。</p>\n<p>爱比克泰德会告诫他的学生，哲学是他们应该 “一天天写下来 “的东西，这种写作是他们 “应该锻炼自己 “的方式。塞涅卡最喜欢在晚上写日记。当夜幕降临，他的妻子已经入睡时，他向一位朋友解释说：”我审视我的整个一天，回想我所做的和所说的，对自己没有任何隐瞒，没有任何忽略。然后他就去睡觉，发现 “这种自我检查之后的睡眠 “特别甜美。而马库斯，他是最多产的日记作者，我们很幸运，他的文章能保存下来，恰当地命名为Τὰ εἰς ἑαυτόν，Ta eis heauton，或 “给自己”。</p>\n<p>在斯多葛主义中，写日记的艺术不仅仅是一些简单的日记。这种日常实践就是哲学。为未来的一天做准备。对已经过去的一天进行反思。提醒自己我们从老师那里学到的智慧，从我们的阅读中，从我们自己的经验中。仅仅听一遍这些课程是不够的，相反，一个人要一遍又一遍地练习它们，在脑海中翻阅它们，最重要的是，把它们写下来，并在写的过程中感受它们在手指间流淌。</p>\n<p>斯多葛主义被设计成一种实践和常规。它不是一种你读过一次就能在灵魂层面上神奇地理解的哲学。不，它是一种终身的追求，需要勤奋、重复和专注。这是把一件事放在上面让你回顾–在手边–并充分消化。不是顺便。不仅仅是一次。而是一年中的每一天，最好是一年又一年。如果爱比克泰德是对的，这是你应该随时保持的东西–这就是为什么每天都有最精彩的作品集，对我们如此有吸引力。</p>\n<h2 id=\"3-练习不幸-Practice-Misfortune\"><a href=\"#3-练习不幸-Practice-Misfortune\" class=\"headerlink\" title=\"3. 练习不幸 | Practice Misfortune\"></a>3. 练习不幸 | Practice Misfortune</h2><blockquote>\n<p>“It is in times of security that the spirit should be preparing itself for difficult times; while fortune is bestowing favors on it is then is the time for it to be strengthened against her rebuffs.” — Seneca</p>\n</blockquote>\n<p>“在安全的时候，精神应该为困难的时候做准备；当幸运之神给予它恩惠的时候，就是它加强抵抗她的反击的时候。” - 塞涅卡</p>\n<p>作为尼禄的顾问，塞涅卡享受着巨大的财富，他建议我们每个月应该留出一定数量的日子来实践贫穷。吃点东西，穿上你最糟糕的衣服，远离舒适的家和床。他说，让自己面对贫困，你会问自己: “这是我曾经害怕的吗?”</p>\n<p>重要的是要记住，<strong>这是一个练习，而不是一个修辞手法。</strong>他的意思不是 “思考 “不幸，他的意思是活在不幸中。安逸是最糟糕的一种奴役，因为你总是害怕某件事情或某人会夺走它。但是，如果你不仅能预见而且能实践不幸，那么机会就会失去扰乱你生活的能力。</p>\n<p>像焦虑和恐惧这样的情绪，其根源在于不确定性，而很少来自于经验。任何一个在自己身上下了大赌注的人都知道这两个情绪能消耗多少能源。解决办法就是对这种无知做点什么。让自己熟悉那些你害怕的事情，尤其是最坏的情况。</p>\n<p><strong>练习你所害怕的东西，无论是在你心中的模拟还是在现实生活中。不幸（downside）几乎总是可逆的或短暂的。</strong></p>\n<h2 id=\"4-摒弃好坏的观念-Train-Perceptions\"><a href=\"#4-摒弃好坏的观念-Train-Perceptions\" class=\"headerlink\" title=\"4. 摒弃好坏的观念 | Train Perceptions\"></a>4. 摒弃好坏的观念 | Train Perceptions</h2><blockquote>\n<p>“Choose not to be harmed and you won’t feel harmed. Don’t feel harmed and you haven’t been.” — Marcus Aurelius</p>\n</blockquote>\n<p>“选择不受伤害，你就不会感到受伤害。不觉得受到伤害，你就没有受到过伤害”。- 马库斯-奥勒留</p>\n<p>斯多葛派有一个叫做 “颠覆障碍 “的练习。因为如果你能适当地把问题颠倒过来，每一个 “坏 “都会成为新的好的来源。</p>\n<p>假设你正试图帮助某人，而他们的反应是傲慢或不愿意合作。练习说，他们没有使你的生活更加困难，而是实际上在引导你培养新的美德；例如，耐心或理解。或者，与你关系密切的人的死亡；是展示坚忍的机会。</p>\n<p>马库斯 · 奥勒留是这样描述的:</p>\n<blockquote>\n<p>“The impediment to action advances action. What stands in the way becomes the way.” “行动的障碍推动行动，阻碍就会成为行动的方式。”</p>\n</blockquote>\n<p>关于企业家的常见说法是，他们利用，甚至创造机会。对斯多葛主义者来说，所有的事情都是机会。一个令人沮丧的案件，你的帮助没有得到重视，一个亲人的死亡，这些都不是正常意义上的 “机会”。事实上，它们恰恰相反。它们是障碍。斯多葛主义者所做的是把每一个障碍变成一个机会。</p>\n<p>对实践中的斯多葛主义者来说，没有好坏之分。有的只是感知。你可以控制知觉。你可以选择推断出你的第一印象（”X发生了。”-&gt;”X发生了，现在我的生活结束了。”）。如果你把你的第一反应与冷静联系起来，你会发现一切都只是一个机会。</p>\n<h2 id=\"5-万物无常-Remember—It’s-All-Ephemeral\"><a href=\"#5-万物无常-Remember—It’s-All-Ephemeral\" class=\"headerlink\" title=\"5. 万物无常 | Remember—It’s All Ephemeral\"></a>5. 万物无常 | Remember—It’s All Ephemeral</h2><blockquote>\n<p>“Alexander the Great and his mule driver both died and the same thing happened to both.” — Marcus Aurelius “亚历山大大帝和他的骡夫都死了，同样的事情也发生在他们身上。”ーー Marcus Aurelius</p>\n</blockquote>\n<p>马库斯 · 奥勒留给自己写了一封简单而有效的提醒信，帮助他重新找回视角，保持平衡:</p>\n<blockquote>\n<p>“Run down the list of those who felt intense anger at something: the most famous, the most unfortunate, the most hated, the most whatever: Where is all that now? Smoke, dust, legend…or not even a legend. Think of all the examples. And how trivial the things we want so passionately are.” “列出那些对某事感到强烈愤怒的人的名单: 最有名的、最不幸的、最讨厌的、最无所谓的: 现在这些东西都在哪里？烟雾，尘埃，传说… 甚至不是一个传说。想想所有的例子。我们如此热切地想要的东西是多么微不足道。”</p>\n</blockquote>\n<p>值得注意的是，这里的“激情”并不是我们熟悉的现代用法，比如热情或关心某事。正如唐 · 罗伯逊在他的书中解释的那样，当斯多葛学派讨论克服激情，他们称之为可悲，他们指的是非理性、不健康和过度的欲望和情绪。愤怒就是一个很好的例子。重要的是要记住—- 这是关键的一点—- 他们寻求用幸福来代替幸福，比如快乐（joy）而不是过度的快乐（excessive pleasure）。</p>\n<p><strong>回到这个练习的重点，很简单: 记住你是多么的渺小。就此而言，请记住大多数事物是多么的渺小。</strong></p>\n<p>记住，成就可能是短暂的，你对它们的拥有只是一瞬间。</p>\n<p>如果一切都是短暂的，那还有什么意义呢？现在很重要。做一个好人，现在做正确的事，这才是最重要的，也是斯多葛派最重要的。</p>\n<p>以亚历山大大帝为例，他征服了已知的世界，并以他的名字命名了许多城市。这是常识。斯多葛学派还指出，有一次亚历山大喝醉了，和他最亲爱的朋友克雷塔斯打了一架，结果不小心把他打死了。后来，他非常沮丧，三天不能吃不能喝。希腊各地的诡辩家纷纷被叫来，想知道他们能为他的悲伤做些什么，但都无济于事。</p>\n<p>这是成功人生的标志吗？从个人的角度来看，如果你的名字在地图上被标注出来，如果你迷失了方向，伤害了你周围的人，那么这就无关紧要了。</p>\n<p>从亚历山大的错误中吸取教训。谦虚、诚实、有觉察力。这是你生命中每一天都可以拥有的。你永远不必担心有人会从你身上夺走它，或者更糟糕的是，它会控制你。</p>\n<h2 id=\"6-从上面看风景-Take-The-View-From-Above\"><a href=\"#6-从上面看风景-Take-The-View-From-Above\" class=\"headerlink\" title=\"6. 从上面看风景 | Take The View From Above\"></a>6. 从上面看风景 | Take The View From Above</h2><blockquote>\n<p>“How beautifully Plato put it. Whenever you want to talk about people, it’s best to take a bird’s- eye view and see everything all at once— of gatherings, armies, farms, weddings and divorces, births and deaths, noisy courtrooms or silent spaces, every foreign people, holidays, memorials, markets— all blended together and arranged in a pairing of opposites.” — Marcus Aurelius “柏拉图说得真好。无论何时，当你想谈论人时，最好是鸟瞰一切，一下子看到一切——聚会、军队、农场、婚礼和离婚、出生和死亡、嘈杂的法庭或安静的空间、每一个外国人、假日、纪念碑、市场——所有这些都融合在一起，并排列成对。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<p>马库斯经常做一个练习，被称为“从上面看问题”或“柏拉图的观点”它让我们后退一步，缩小视野，从比我们自己更高的角度来看待生活。这项工作——想象所有千百万人、所有“军队、农场、婚姻和离婚、出生和死亡”——促使我们以正确的眼光看待问题，就像以前的工作一样，提醒我们自己是多么渺小。正如斯多葛学派的学者皮埃尔 · 哈多所说，“从上面的观点改变了我们对事物的价值判断: 奢侈、权力、战争… 以及对日常生活的担忧变得荒谬可笑。”</p>\n<p>看到我们在事物的宏伟计划中是多么渺小只是这项工作的一部分。第二点，也是更微妙的一点，是挖掘斯多葛学派所谓的同情心，或者说与整个人类的相互依赖。正如宇航员埃德加 · 米切尔(Edgar Mitchell)所说，“在外太空，你会产生一种瞬间的全球意识，一种以人为本的思想，一种对世界状况的强烈不满，以及一种想要做点什么的冲动。”米切尔是第一批真正体验到‘从上面看世界’的人之一。</p>\n<p>以柏拉图的观点来看：从自己的担忧中退后一步，提醒自己对他人的责任。</p>\n<h2 id=\"7-死亡警告-想象你的死亡-Memento-Mori-Meditate-On-Your-Mortality\"><a href=\"#7-死亡警告-想象你的死亡-Memento-Mori-Meditate-On-Your-Mortality\" class=\"headerlink\" title=\"7. 死亡警告: 想象你的死亡 | Memento Mori: Meditate On Your Mortality\"></a>7. 死亡警告: 想象你的死亡 | Memento Mori: Meditate On Your Mortality</h2><blockquote>\n<p>“Let us prepare our minds as if we’d come to the very end of life. Let us postpone nothing. Let us balance life’s books each day. … The one who puts the finishing touches on their life each day is never short of time.” Seneca “让我们做好心理准备，就好像我们即将走到生命的尽头。我们什么也不要推迟。让我们平衡生活中的每一天。每天为自己的生活做最后润色的人永远不会缺少时间。”Seneca</p>\n</blockquote>\n<p>上面引用的塞尼卡的话部分出自《死亡记忆》(Memento mori)——这是一种对死亡进行反思的古老做法，可以追溯到苏格拉底(Socrates)。他说哲学的正确实践是 “除了死亡和被死亡之外，没有其他东西”。马库斯-奥勒留在他的《沉思录》中写道：”你现在就可以离开生活。让这一点决定你做什么、说什么、想什么”。那是对个人的提醒，让我们现在继续过着美德的生活，而不是等待。</p>\n<p>如果你没有抓住重点，冥想自己的死亡只会令人沮丧。斯多葛学派认为这种想法令人振奋和谦卑。塞尼卡有一本传记名为《每天都在死去》 ，这并不奇怪。毕竟，是塞尼卡敦促我们告诉自己: “明天你可能醒不过来了”，上床睡觉的时候，“你可能再也睡不着了”，醒来的时候提醒我们注定要死去。或者，正如另一位斯多葛学者爱比克泰德(Epictetus)所敦促他的学生们的那样: “每天把死亡和放逐放在你的眼前，还有一切看起来很可怕的东西–通过这样做，你永远不会有一个确定性的想法，也不会有过度的欲望。”利用这些提醒，每天冥想它们，让它们成为你充实生活的基石，不要浪费一秒钟。</p>\n<h2 id=\"8-消极想象-Premeditatio-Malorum\"><a href=\"#8-消极想象-Premeditatio-Malorum\" class=\"headerlink\" title=\"8. 消极想象 | Premeditatio Malorum\"></a>8. 消极想象 | Premeditatio Malorum</h2><blockquote>\n<p>“What is quite unlooked for is more crushing in its effect, and unexpectedness adds to the weight of a disaster. This is a reason for ensuring that nothing ever takes us by surprise. We should project our thoughts ahead of us at every turn and have in mind every possible eventuality instead of only the usual course of events… Rehearse them in your mind: exile, torture, war, shipwreck. All the terms of our human lot should be before our eyes.” — Seneca “完全出人意料的是，它的影响更具破坏性，而且意外性增加了灾难的重量。这就是为什么要确保没有任何事情会让我们感到意外。我们应该在每一个转折点都把我们的想法放在眼前，并且考虑到每一种可能发生的事情，而不仅仅是通常的事件过程… … 在你的脑海中重新演练一遍: 流放、折磨、战争、沉船。我们人类命运的所有条件都应摆在我们面前。”ー Seneca</p>\n</blockquote>\n<p>“ premeditatio malorum”(“罪恶的预谋”)是一种斯多葛主义的做法，用来想象可能出错或被夺走的事情。它帮助我们为生活中不可避免的挫折做好准备。我们并不总是得到本该属于我们的东西，即使是我们应得的。并不是所有的事情都像我们想象的那样简单明了。从心理学上讲，我们必须为这种情况发生做好准备。这是斯多葛学派建立恢复力和力量的工具箱中最有力的练习之一。</p>\n<p>例如，塞尼卡将首先重新审视或排练他的旅行计划。然后，在他的脑子里(或者像我们上面所说的在日记里) ，他会仔细检查那些可能出错或阻止它发生的事情ーー暴风雨可能会出现，船长可能会生病，船可能会遭到海盗的袭击。</p>\n<p>他在给一位朋友的信中写道: “智者不会出人意料。”。”… … 也不是所有事情都如他所愿，但是正如他所料，最重要的是，他认为有什么东西可以阻止他的计划”</p>\n<p>通过这次演习，塞尼卡总是做好了应对混乱的准备，并且总是在他的计划中应对这种混乱。他适合胜利或失败。</p>\n<h2 id=\"9-热爱命运-Amor-Fati\"><a href=\"#9-热爱命运-Amor-Fati\" class=\"headerlink\" title=\"9. 热爱命运 | Amor Fati\"></a>9. 热爱命运 | Amor Fati</h2><blockquote>\n<p>“To love only what happens, what was destined. No greater harmony.” — Marcus Aurelius “只爱发生的事情，注定的事情。没有比这更和谐的了。”——马库斯 · 奥勒留</p>\n</blockquote>\n<p>伟大的德国哲学家弗里德里希-尼采将他关于人类伟大的公式描述为amor fati–对命运的爱。”一个人不希望有什么不同，不是向前，不是向后，不是在所有的永恒中。不仅仅是承受必要的东西，更不是隐瞒它….，而是热爱它。”</p>\n<p>斯多葛学派不仅熟悉这种态度，而且接受这种态度。2000年前，皇帝马库斯 · 奥勒留在他的个人日记《沉思录》中写道: “燃烧的火焰使投入其中的一切都变得火焰和光明。”另一位斯多葛学派的人物，爱比克泰德(Epictetus) ，作为一名残废的奴隶，在遭遇逆境之后也面临同样的困境: “不要追求事情按照你希望的方式发生，而是希望事情按照它发生的方式发生: 那么你就会快乐。”</p>\n<p>这就是为什么 amor fati 是一种斯多葛学派的练习和心态，你要把所有发生的事情都做到最好: 把每一个时刻——不管多么具有挑战性——当作需要拥抱而不是回避的事情来对待。不仅要接受它，而且要热爱它，为它做得更好。因此，就像火中的氧气一样，障碍和逆境成为你潜能的燃料。</p>\n<h1 id=\"VII-斯多葛学派的局限性\"><a href=\"#VII-斯多葛学派的局限性\" class=\"headerlink\" title=\"VII. 斯多葛学派的局限性\"></a>VII. 斯多葛学派的局限性</h1><hr>\n<p>对于个体来说，是一种积极面对问题的态度。但是对于整个社会的宏观运作机制，则会有一种无力感，因为整体来说斯多葛学派是防御性的，把内心装进城堡，用理性和必然性的把握来减少外部世界对内心的影响。</p>\n<p>因为斯多葛学派更强调一种「命中注定」，则勇敢是不足的。因为勇敢的前提是不知道投入是否有回报就投入力量，这和斯多葛学派追求的命中注定与追求内心的宁静是天然冲突的。</p>\n<p>之所以在近代复兴，也是因为社会快速发展，阶级固化严重，我们对于社会运转的影响力越来越小，像一个无足轻重的棋子，所以需要「接受这个必然」。典型是具有较高知识储备与社会经验，理解社会运作机制，但又无力干涉其运作的人。</p>\n<p>via 《哲学家的 10 种生活提案》 by 徐英瑾</p>\n<h1 id=\"VIII-格言们-What-Are-The-Best-Stoic-Quotes\"><a href=\"#VIII-格言们-What-Are-The-Best-Stoic-Quotes\" class=\"headerlink\" title=\"VIII. 格言们 | What Are The Best Stoic Quotes?\"></a>VIII. 格言们 | What Are The Best Stoic Quotes?</h1><hr>\n<blockquote>\n<p>“We are often more frightened than hurt; and we suffer more from imagination than from reality.” — Seneca“ 我们经常更害怕而不是受伤; 我们更多地受到想象的折磨而不是现实。”ー Seneca</p>\n</blockquote>\n<blockquote>\n<p>“It’s silly to try to escape other people’s faults. They are inescapable. Just try to escape your own.” —Marcus Aurelius“ 试图逃避别人的错误是愚蠢的。这些错误是不可避免的。只是试图逃避自己的错误。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“Our life is what our thoughts make it.” — Marcus Aurelius“ 我们的生活是我们的思想造就的。”——马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“Don’t explain your philosophy. Embody it.” Epictetus“ 不要解释你的哲学，把它具体化。”Epictetus</p>\n</blockquote>\n<blockquote>\n<p>“If anyone tells you that a certain person speaks ill— of you, do not make excuses about what is said of you but answer, ‘He was ignorant of my other faults, else he would not have mentioned these alone.’” — Epictetus” 如果有人告诉你某人说你的坏话，不要为别人对你说的话找借口，而要回答说: ‘他不知道我其他的缺点，否则他不会单独提到这些缺点。’”ーー爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“If it is not right, do not do it, if it is not true, do not say it.” — Marcus Aurelius如果不对，就不要做; 如果不对，就不要说ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“You become what you give your attention to…If you yourself don’t choose what thoughts and images you expose yourself to, someone else will.” — Epictetus“ 你变成了你关注的对象… … 如果你自己不选择暴露给自己的想法和形象，别人就会选择。”ー爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“Be tolerant with others and strict with yourself.” — Marcus Aurelius“对他人宽容，对自己严格。”——马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“You always own the option of having no opinion. There is never any need to get worked up or to trouble your soul about things you can’t control. These things are not asking to be judged by you. Leave them alone.” — Marcus Aurelius“你总是可以选择不发表意见。从来没有必要因为你无法控制的事情而激动或者麻烦你的灵魂。这些事情并不是要你去评判。别管他们。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“All you need are these: certainty of judgment in the present moment; action for the common good in the present moment; and an attitude of gratitude in the present moment for anything that comes your way.” — Marcus Aurelius“你所需要的就是这些: 确信当下的判断，为当下的共同利益而行动，以及对当下发生的一切抱有感激的态度。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“No person has the power to have everything they want, but it is in their power not to want what they don’t have, and to cheerfully put to good use what they do have.” — Seneca“ 没有人有能力拥有他们想要的一切，但他们有能力不去想要他们没有的东西，并乐于好好利用他们拥有的东西。”ー 塞涅卡</p>\n</blockquote>\n<blockquote>\n<p>“If anyone can refute me—show me I’m making a mistake or looking at things from the wrong perspective—I’ll gladly change. It’s the truth I’m after, and the truth never harmed anyone.” — Marcus Aurelius“ 如果有人能反驳我ーー证明我犯了错误或者从错误的角度看问题ーー我会很乐意改变。这是我追求的真相，真相从未伤害过任何人。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“Today I escaped anxiety. Or no, I discarded it, because it was within me, in my own perceptions not outside.” — Marcus Aurelius“ 今天我摆脱了焦虑。或者不，我放弃了它，因为它在我内心，在我自己的感知里，而不是在外面。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“You have power over your mind – not outside events. Realise this, and you will find strength.” — Marcus Aurelius“ 你可以控制自己的思想——而不是外部事件。认识到这一点，你就会找到力量。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“It isn’t events themselves that disturb people, but only their judgements about them.” — Epictetus“ 困扰人们的不是事件本身，而是他们对事件的看法。”——爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“To be like the rock that the waves keep crashing over. It stands unmoved and the raging of the sea falls still around it.” — Marcus Aurelius“ 就像海浪不断拍打的岩石。它无动于衷，汹涌澎湃的海浪依然围绕着它。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“First say to yourself what you would be; and then do what you have to do.” — Epictetus“ 首先对自己说你要成为什么样的人，然后做你必须做的事。”——爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“Waste no more time arguing what a good man should be. Be One.” — Marcus Aurelius“ 不要再浪费时间争论一个好人应该是什么样的了。做一个真正的好人。”——马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“The primary indication of a well-ordered mind is a man’s ability to remain in one place and linger in his own company.” — Seneca“ 思维井然有序的主要标志是一个人能够呆在一个地方，与自己的同伴相处。”ー 塞涅卡</p>\n</blockquote>\n<blockquote>\n<p>“Receive without pride, let go without attachment.” — Marcus Aurelius“ 不带骄傲地接受，不带眷恋地放手。”——马库斯 · 奥勒留</p>\n</blockquote>\n<p><a href=\"https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/\">What Is Stoicism? A Definition &amp; 9 Stoic Exercises To Get You Started</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文翻译不一定精确，如有错误欢迎批注勘误，原始文章来源：</p>\n<p><a href=\"https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/\">What Is Stoicism? A Definition &amp; 9 Stoic Exercises To Get You Started</a></p>\n<p>对于我们这些生活在现实世界中的人来说，有一个哲学流派是专门为我们创造的，斯多葛学派（Stoicism）。这是一种旨在使我们更有韧性、更快乐、更有德行和更有智慧的哲学。</p>\n<p>斯多葛主义一直是历史上一些伟大领导人的共同信仰 —— 国王、总统、艺术家、作家和企业家都曾奉行过这种精神。马库斯 · 奥勒留、腓特烈大帝、蒙田、乔治 · 华盛顿、托马斯 · 杰斐逊、亚当 · 斯密、约翰 · 斯图尔特 · 米尔、西奥多 · 罗斯福、詹姆斯 · 马蒂斯将军，仅举几例，都受到斯多葛哲学的影响。</p>\n<p>那么什么是斯多葛主义？谁是斯多葛派？你怎样才能成为一个斯多葛主义者？</p>\n<hr>\n<h1 id=\"I-什么是斯多葛主义？-What-Is-Stoicism\"><a href=\"#I-什么是斯多葛主义？-What-Is-Stoicism\" class=\"headerlink\" title=\"I. 什么是斯多葛主义？| What Is Stoicism?\"></a>I. 什么是斯多葛主义？| What Is Stoicism?</h1><hr>\n<blockquote>\n<p>Of all people only those are at leisure who make time for philosophy, only they truly live. Not satisfied to merely keep good watch over their own days, they annex every age to their own. All the harvest of the past is added to their store.</p>\n</blockquote>\n<p>在所有的人中，只有那些有闲情逸致的人，才会有时间去研究哲学，只有他们才会真正活着。他们并不满足于仅仅看管好自己的日子，而是把每个时代都并入自己的时代。所有过去的收获都被添加到他们的仓库中。 —— 塞涅卡 （Seneca）</p>\n<p>罗马最伟大的皇帝之一的私人日记（奥勒留），罗马最好的剧作家和最聪明的权力经纪人之一的私人信件（塞涅卡），一个前奴隶和流亡者变成有影响力的教师的讲座（爱比克泰德）。尽管困难重重，大约两千年后，这些令人难以置信的文件仍然存在。它们包含了世界历史上一些最伟大的智慧，它们共同构成了所谓的斯多葛主义的基石 —— 一种古老的哲学，曾经是西方最流行的哲学之一，富人和穷人、强者和挣扎者都在追求美好生活。</p>\n<p>除了对最狂热的智慧追求者，斯多葛主义要么不为人知，要么被误解了。对普通人来说，这种充满活力、以行动为导向、改变范式的生活方式已经成为 “无感情 “的简称。鉴于仅仅提到哲学就会让大多数人感到紧张或厌烦，”斯多葛哲学 “在表面上听起来像是任何人最不想了解的东西，更不用说在日常生活中迫切需要的了。</p>\n<p>很难找到一个比 “斯多葛 “在英语语言中受到更大不公正待遇的词。在其应有的位置上，斯多葛主义是一种追求自我超越、坚忍不拔和智慧的工具：<strong>一个人用来过上伟大生活的东西，而不是一些深奥的学术探索领域</strong>。当然，许多历史上的伟大人物不仅了解斯多葛主义的真实面目，而且还寻求它。乔治-华盛顿、沃尔特-惠特曼、腓特烈大帝、欧仁-德拉克洛瓦、亚当-斯密、伊曼纽尔-康德、托马斯-杰斐逊、马修-阿诺德、安布罗斯-比尔斯、西奥多-罗斯福、威廉-亚历山大-珀西、拉尔夫-瓦尔多-爱默生。每个人都阅读，研究，引用，或钦佩斯多葛派。</p>\n<p>在斯多葛主义中，这些人和其他无数伟大的男人和女人发现了什么其他人没有发现的东西？非常多。首先，它为生活中所有的挑战提供了急需的力量、智慧和毅力。</p>\n<h1 id=\"II-斯多葛主义是如何开始的？-How-Did-Stoicism-Begin\"><a href=\"#II-斯多葛主义是如何开始的？-How-Did-Stoicism-Begin\" class=\"headerlink\" title=\"II. 斯多葛主义是如何开始的？ | How Did Stoicism Begin?\"></a>II. 斯多葛主义是如何开始的？ | How Did Stoicism Begin?</h1><hr>\n<p>公元前304年左右，一位名叫芝诺（Zeno）的商人在一次贸易航行中遭遇海难。</p>\n<p>他几乎失去了一切。在前往雅典的途中，愤世嫉俗的哲学家克拉特斯和麦加利亚的哲学家斯蒂波向他介绍了哲学，这改变了他的生活。</p>\n<p>正如芝诺后来开玩笑说的那样: “我遭遇海难时，航行得很顺利。”他后来搬到了后来被称为 Stoa Poikile 的地方，字面意思是“漆色的门廊”，始建于公元前5世纪，2500年后的今天，它的废墟依然清晰可见，油漆过的门廊是芝诺和他的弟子们聚会讨论的地方。虽然他的追随者最初被称为 Zenonians，它是 Zeno（芝诺） 的谦卑的终极功劳，他所创立的哲学学校最终并没有使用他的名字，这是对芝诺谦逊的最大肯定。</p>\n<h1 id=\"III-谁是斯多葛派哲学家？-Who-Were-The-Stoic-Philosophers\"><a href=\"#III-谁是斯多葛派哲学家？-Who-Were-The-Stoic-Philosophers\" class=\"headerlink\" title=\"III. 谁是斯多葛派哲学家？ | Who Were The Stoic Philosophers?\"></a>III. 谁是斯多葛派哲学家？ | Who Were The Stoic Philosophers?</h1><hr>\n<p>在我们开始研究之前，我们需要问自己。谁是遵循这些哲学的人？我是否为仰视这个人而感到自豪？我是否想更像他们？</p>\n<p>罗马皇帝马库斯-奥勒留，剧作家和政治顾问塞涅卡，以及从奴隶变成杰出教师的爱比克泰德—— 这是你需要首先了解的三个斯多葛学派的践行者。一旦你了解了，我们相信你会想追随他们的脚步。</p>\n<p><a href=\"https://www.notion.so/c8b59418fd3a47fe9af304c518c1be08\">斯多葛学派的哲学家们</a></p>\n<h1 id=\"IV-斯多葛派的四大美德是什么？-What-Are-The-4-Virtues-of-Stoicism\"><a href=\"#IV-斯多葛派的四大美德是什么？-What-Are-The-4-Virtues-of-Stoicism\" class=\"headerlink\" title=\"IV. 斯多葛派的四大美德是什么？ | What Are The 4 Virtues of Stoicism?\"></a>IV. 斯多葛派的四大美德是什么？ | What Are The 4 Virtues of Stoicism?</h1><hr>\n<p>Courage. 勇气</p>\n<p>Temperance. 节制</p>\n<p>Justice. 正义</p>\n<p>Wisdom. 智慧</p>\n<p>它们是斯多葛哲学中最基本的价值观。马库斯-奥勒留写道：「<strong>如果在你生命中的某个时刻，你遇到了比正义、真理、自我控制、勇气更好的东西，那一定是一件非常了不起的事情</strong>。」</p>\n<p>那是近20个世纪以前的事。从那时起，我们发现了很多东西 —— 汽车、互联网、治疗以前是绝症的疾病，但我们是否发现了更好的东西？</p>\n<h2 id=\"勇气-Courage\"><a href=\"#勇气-Courage\" class=\"headerlink\" title=\"勇气 | Courage\"></a>勇气 | <strong>Courage</strong></h2><p>如果你读过科马克-麦卡锡黑暗而美丽的小说《所有漂亮的马》，你会记得埃米利奥-佩雷斯问约翰-格雷迪的关键问题，这个问题直指生命的核心，以及我们都必须做什么才能活得有价值。</p>\n<blockquote>\n<p>“The world wants to know if you have cojones. If you are brave?”</p>\n</blockquote>\n<p>斯多葛派的措辞可能有点不同。塞涅卡会说，他实际上是在可怜那些从未经历过不幸的人。<strong>他说：”你在没有对手的情况下度过了一生，””没有人能够知道你的能力，甚至你也不知道”。</strong></p>\n<p>世界想知道应该把你放入到什么类别中，这就是为什么它偶尔会给你带来磨难的原因。不要把这些看作是不便甚至是悲剧，而要看作是机会，看作是需要回答的问题。我有胆量吗？我勇敢吗？我是要面对这个问题还是要逃避它？我是要站起来还是要被压在地上？</p>\n<p>让你的行动记录下你的反应，让他们提醒你为什么勇气是最重要的。</p>\n<h2 id=\"节制-Temperance\"><a href=\"#节制-Temperance\" class=\"headerlink\" title=\"节制 | Temperance\"></a>节制 | Temperance</h2><p>当然，生活并没有简单到说勇气就是全部的算数。虽然每个人都会承认勇气是必不可少的，但我们也都很清楚，有些人的勇敢变成了鲁莽，当他们开始危及自己和他人时，就变成了一种过错。</p>\n<p>亚里士多德在他著名的比喻“中庸之道”（Golden Mean.）中，实际上把勇气作为主要的例子。他说，在光谱的一端，有懦弱–那是勇气的不足。在另一端，则是鲁莽–过多的勇气。我们所需要的，我们当时所要求的，是一个黄金分割点，以一种恰当的方式。</p>\n<p>这就是节制或适度的意义所在：<strong>不要做过分的事。以正确的方式做正确的事情。</strong>亚里士多德还说: “因为我们反复做的事情就是我们自己，所以优秀不是一种行为，而是一种习惯。”</p>\n<p>换句话说：美德和卓越是一种生活方式。这是基础。它就像一个操作系统，这个系统运行的代码是习惯。</p>\n<p>正如爱比克泰德后来所说，”能力在其相应的行动中得到确认和增长，走路靠走，跑步靠跑……因此，如果你想做什么，就养成习惯。” 因此，如果我们想获得幸福，如果我们想获得成功，如果我们想成为伟大的人，我们必须发展能力，我们必须培养日常的习惯，使之随之产生。</p>\n<p>这是个好消息。因为它意味着令人印象深刻的结果或巨大的变化是可能的，不需要艰苦的努力或神奇的公式。小小的调整，良好的系统，正确的程序 —— 这就是所需要的。</p>\n<h2 id=\"正义-Justice\"><a href=\"#正义-Justice\" class=\"headerlink\" title=\"正义 | Justice\"></a>正义 | Justice</h2><p>勇敢一点。找到正确的平衡点。这些都是斯多葛学派的核心美德，但就其严肃性而言，它们与斯多葛学派最崇拜的东西——做正确的事——相比就显得苍白无力了。</p>\n<p>没有什么斯多葛的美德比正义更重要，因为它影响着所有其他的美德。马库斯-奥勒留自己说，正义是 “所有其他美德的源泉”。历史上的斯多葛派一直在推动和倡导正义，通常是冒着巨大的个人风险和巨大的勇气，为了做伟大的事情，为了捍卫他们所爱的人和思想。</p>\n<ul>\n<li>卡托为了重建罗马共和国而献出了自己的生命。</li>\n<li>斯拉西亚和阿格里皮努斯为了抵抗尼禄的暴政献出了他们的生命。</li>\n<li>乔治-华盛顿和托马斯-杰斐逊组建了一个新的国家–这个国家将寻求为民主和正义而战，尽管并不完美–主要是受到卡托和其他斯多葛派哲学的启发。</li>\n</ul>\n<p>无数其他活动家和政治家都求助于斯多葛主义，使他们在为重要的理想而奋斗的过程中遇到困难，引导他们在一个错综复杂的世界中走向正确。斯多葛主义者必须深深相信，个人可以有所作为。成功的行动主义和政治操纵需要理解和策略，以及现实主义……和希望。它需要智慧、接受，也需要拒绝接受现状。</p>\n<p>詹姆斯•鲍德温(James Baldwin)在《土著儿子笔记》(Notes of a Native Son)中最精彩地描述了这种紧张气氛:</p>\n<blockquote>\n<p>人们似乎不得不永远记住两个似乎相反的观点。第一个想法是接受，接受，完全没有仇恨，接受生活本来的样子，接受人的本来面目: 根据这个想法，不言而喻，不公平是司空见惯的。但这并不意味着一个人可以自满，因为第二个观念是平等的力量: 一个人在自己的生活中决不能接受这些不公平现象，而是必须全力以赴地与它们作斗争。</p>\n</blockquote>\n<p>斯多葛主义者能清楚地看到世界… … 但也能清楚地看到世界可以是什么样子。他们很勇敢，也很有战略眼光，足以帮助实现这一目标。</p>\n<h2 id=\"智慧-Wisdom\"><a href=\"#智慧-Wisdom\" class=\"headerlink\" title=\"智慧 | Wisdom\"></a>智慧 | Wisdom</h2><p>勇气。节制。公正。这些都是生活中的重要美德。但什么情况下需要勇气？什么是正确的数量？什么是正确的事情？这就是最后一种基本美德的作用。智慧。知道。学习。驾驭世界所需的经验。</p>\n<p>智慧一直是斯多葛派所珍视的。芝诺说，我们被赋予两只耳朵和一张嘴是有原因的：倾听多于交谈。既然我们有两只眼睛，我们也有义务阅读和观察，而不是说话。</p>\n<p>今天，正如古代世界一样，关键是要能够区分你所掌握的大量信息，以及你过上美好生活所需的实际智慧。关键是我们要学习，我们要始终保持我们的头脑开放。<strong>你不能学习你认为你已经知道的东西</strong>，爱比克泰德说 —— 这是真的。</p>\n<p>这就是为什么我们不仅要做谦虚的学生，而且要寻找伟大的老师。这就是为什么我们应该一直在阅读。这就是为什么我们不能停止训练。这就是为什么我们必须勤奋地从噪音中过滤出信号。</p>\n<p>我们的目标不仅仅是获取信息，而是获取正确的信息。这是在《沉思录》中发现的教训，从实际的爱比克泰德到詹姆斯 · 斯托克代尔进入爱比克泰德的世界。这是关键的事实，从背景噪音中脱颖而出，你需要吸收。</p>\n<p>世界可以获得数千年的惊人洞察力。你可能有能力在指尖学习任何你想学的东西。所以今天，尊重斯多葛学派的美德智慧，放慢脚步，深思熟虑，找到你需要的智慧。</p>\n<p>两只眼睛，两只耳朵，一张嘴。做一个学生。相应地，明智地行动。</p>\n<h1 id=\"V-有哪些关于斯多葛主义的最佳书籍？-What-Are-The-Best-Books-On-Stoicism\"><a href=\"#V-有哪些关于斯多葛主义的最佳书籍？-What-Are-The-Best-Books-On-Stoicism\" class=\"headerlink\" title=\"V. 有哪些关于斯多葛主义的最佳书籍？ | What Are The Best Books On Stoicism?\"></a>V. 有哪些关于斯多葛主义的最佳书籍？ | What Are The Best Books On Stoicism?</h1><hr>\n<h2 id=\"《沉思录》-by-马库斯-·-奥勒留\"><a href=\"#《沉思录》-by-马库斯-·-奥勒留\" class=\"headerlink\" title=\"《沉思录》 by 马库斯 · 奥勒留\"></a>《沉思录》 by 马库斯 · 奥勒留</h2><p>也许是有史以来唯一的此类文件。它是世界上最有权势的人的私人想法，就如何履行其职位的责任和义务向自己提出建议。马库斯几乎每天晚上都会停下来练习一系列的精神练习 —— 这些练习旨在使他在面对任何事情时变得谦逊、耐心、富有同情心、慷慨和坚强。你不可能在读完这本书后，没有得到一个短语或一句话，在你下次遇到困难时对你有所帮助。阅读它，它是实用哲学的体现。</p>\n<h2 id=\"《斯多葛主义者的信（Letters-from-A-stoic）》-by-塞涅卡\"><a href=\"#《斯多葛主义者的信（Letters-from-A-stoic）》-by-塞涅卡\" class=\"headerlink\" title=\"《斯多葛主义者的信（Letters from A stoic）》 by 塞涅卡\"></a>《斯多葛主义者的信（Letters from A stoic）》 by 塞涅卡</h2><p>马库斯主要是为自己写作，而塞涅卡则是为他人提供建议和帮助，没有任何问题。事实上，这就是他的工作，他是尼禄的导师，负责减少一个可怕的人的可怕冲动。他关于悲伤、财富、权力、宗教和生活的建议总是在你需要时出现。塞涅卡的书信是最好的开始，但《论生命的短暂》中的文章也很好。</p>\n<h2 id=\"《语录（Discourses）》-by-爱比克泰德\"><a href=\"#《语录（Discourses）》-by-爱比克泰德\" class=\"headerlink\" title=\"《语录（Discourses）》 by 爱比克泰德\"></a>《语录（Discourses）》 by 爱比克泰德</h2><p>爱比克泰德的教诲能够流传到我们这里是很了不起的。这要归功于一位名叫阿里安的学生，他在公元二世纪初抄录了他在爱比克泰德的课堂上学到的课程。阿里安在《语录》出版前的一封信中写道：”无论我以前听他说什么，我都尽可能一字不差地写下来，作为以后使用他的思想和坦率表达的记录”。阿里安将利用这些经验，作为政治顾问、军事指挥官和多产的作家，在整个罗马获得声誉。有趣的是，在题为 “债务和教训 “的《沉思录》第一册中，马库斯感谢他的一位哲学老师鲁斯提库斯，”他向我介绍了爱比克泰德的讲座–并借给我他自己的副本”。</p>\n<h1 id=\"VI-如何成为一个斯多葛主义者\"><a href=\"#VI-如何成为一个斯多葛主义者\" class=\"headerlink\" title=\"VI. 如何成为一个斯多葛主义者\"></a>VI. 如何成为一个斯多葛主义者</h1><hr>\n<h2 id=\"1-控制的二分法-The-Dichotomy-Of-Control\"><a href=\"#1-控制的二分法-The-Dichotomy-Of-Control\" class=\"headerlink\" title=\"1. 控制的二分法 | The Dichotomy Of Control\"></a>1. 控制的二分法 | The Dichotomy Of Control</h2><blockquote>\n<p>“The chief task in life is simply this: to identify and separate matters so that I can say clearly to myself which are externals not under my control, and which have to do with the choices I actually control. Where then do I look for good and evil? Not to uncontrollable externals, but within myself to the choices that are my own . . .” Epictetus</p>\n</blockquote>\n<p>“生活中的主要任务仅仅是：识别和分离事务，以便我能够清楚地对自己说，哪些是不由我控制的外部因素，哪些与我实际控制的选择有关。那么我在哪里寻找善与恶呢？不是看不可控制的外在因素，而是看我自己的选择……” 爱比克泰德</p>\n<p>斯多葛哲学中最重要的一个实践是区分我们能改变的和不能改变的。我们能影响的和我们不能影响的。一个航班因为天气而延误–对航空公司代表大喊大叫也不能结束一场风暴。再多的愿望也不能使你变高或变矮，或出生在不同的国家。无论你如何努力，你都不能让别人喜欢你。最重要的是，把时间花在向这些不可移动的物体投掷上，就是没有把时间花在我们可以改变的事情上。</p>\n<p>每天都要回到这个问题上–在每一个艰难的情况下。不断记下并反思它。如果你能专注于明确你一天中哪些部分在你的控制范围内，哪些部分不在你的控制范围内，你不仅会更快乐，而且会比其他没有意识到自己在打一场不可能赢的仗的人有明显优势。</p>\n<h2 id=\"2-日记-Journal\"><a href=\"#2-日记-Journal\" class=\"headerlink\" title=\"2. 日记 | Journal\"></a>2. 日记 | Journal</h2><blockquote>\n<p>“Few care now about the marches and countermarches of the Roman commanders. What the centuries have clung to is a notebook of thoughts by a man whose real life was largely unknown who put down in the midnight dimness not the events of the day or the plans of the morrow, but something of far more permanent interest, the ideals and aspirations that a rare spirit lived by.” — Brand Blanshard</p>\n</blockquote>\n<p>“现在很少有人关心罗马指挥官的行军和反击行动。几个世纪以来，人们所关注的是一个人的思想笔记，他的真实生活基本上不为人所知，他在午夜的昏暗中记下的不是当天的事件或明天的计划，而是一些更持久的兴趣，一个罕见的精神所生活的理想和愿望。”</p>\n<ul>\n<li>布兰德-布兰沙德</li>\n</ul>\n<p>奴隶爱比克泰德、皇帝马库斯-奥勒留、塞涅卡是权力经纪人和剧作家。这三个完全不同的人过着完全不同的生活。但他们似乎都有一个共同的习惯：写日记。</p>\n<p>爱比克泰德会告诫他的学生，哲学是他们应该 “一天天写下来 “的东西，这种写作是他们 “应该锻炼自己 “的方式。塞涅卡最喜欢在晚上写日记。当夜幕降临，他的妻子已经入睡时，他向一位朋友解释说：”我审视我的整个一天，回想我所做的和所说的，对自己没有任何隐瞒，没有任何忽略。然后他就去睡觉，发现 “这种自我检查之后的睡眠 “特别甜美。而马库斯，他是最多产的日记作者，我们很幸运，他的文章能保存下来，恰当地命名为Τὰ εἰς ἑαυτόν，Ta eis heauton，或 “给自己”。</p>\n<p>在斯多葛主义中，写日记的艺术不仅仅是一些简单的日记。这种日常实践就是哲学。为未来的一天做准备。对已经过去的一天进行反思。提醒自己我们从老师那里学到的智慧，从我们的阅读中，从我们自己的经验中。仅仅听一遍这些课程是不够的，相反，一个人要一遍又一遍地练习它们，在脑海中翻阅它们，最重要的是，把它们写下来，并在写的过程中感受它们在手指间流淌。</p>\n<p>斯多葛主义被设计成一种实践和常规。它不是一种你读过一次就能在灵魂层面上神奇地理解的哲学。不，它是一种终身的追求，需要勤奋、重复和专注。这是把一件事放在上面让你回顾–在手边–并充分消化。不是顺便。不仅仅是一次。而是一年中的每一天，最好是一年又一年。如果爱比克泰德是对的，这是你应该随时保持的东西–这就是为什么每天都有最精彩的作品集，对我们如此有吸引力。</p>\n<h2 id=\"3-练习不幸-Practice-Misfortune\"><a href=\"#3-练习不幸-Practice-Misfortune\" class=\"headerlink\" title=\"3. 练习不幸 | Practice Misfortune\"></a>3. 练习不幸 | Practice Misfortune</h2><blockquote>\n<p>“It is in times of security that the spirit should be preparing itself for difficult times; while fortune is bestowing favors on it is then is the time for it to be strengthened against her rebuffs.” — Seneca</p>\n</blockquote>\n<p>“在安全的时候，精神应该为困难的时候做准备；当幸运之神给予它恩惠的时候，就是它加强抵抗她的反击的时候。” - 塞涅卡</p>\n<p>作为尼禄的顾问，塞涅卡享受着巨大的财富，他建议我们每个月应该留出一定数量的日子来实践贫穷。吃点东西，穿上你最糟糕的衣服，远离舒适的家和床。他说，让自己面对贫困，你会问自己: “这是我曾经害怕的吗?”</p>\n<p>重要的是要记住，<strong>这是一个练习，而不是一个修辞手法。</strong>他的意思不是 “思考 “不幸，他的意思是活在不幸中。安逸是最糟糕的一种奴役，因为你总是害怕某件事情或某人会夺走它。但是，如果你不仅能预见而且能实践不幸，那么机会就会失去扰乱你生活的能力。</p>\n<p>像焦虑和恐惧这样的情绪，其根源在于不确定性，而很少来自于经验。任何一个在自己身上下了大赌注的人都知道这两个情绪能消耗多少能源。解决办法就是对这种无知做点什么。让自己熟悉那些你害怕的事情，尤其是最坏的情况。</p>\n<p><strong>练习你所害怕的东西，无论是在你心中的模拟还是在现实生活中。不幸（downside）几乎总是可逆的或短暂的。</strong></p>\n<h2 id=\"4-摒弃好坏的观念-Train-Perceptions\"><a href=\"#4-摒弃好坏的观念-Train-Perceptions\" class=\"headerlink\" title=\"4. 摒弃好坏的观念 | Train Perceptions\"></a>4. 摒弃好坏的观念 | Train Perceptions</h2><blockquote>\n<p>“Choose not to be harmed and you won’t feel harmed. Don’t feel harmed and you haven’t been.” — Marcus Aurelius</p>\n</blockquote>\n<p>“选择不受伤害，你就不会感到受伤害。不觉得受到伤害，你就没有受到过伤害”。- 马库斯-奥勒留</p>\n<p>斯多葛派有一个叫做 “颠覆障碍 “的练习。因为如果你能适当地把问题颠倒过来，每一个 “坏 “都会成为新的好的来源。</p>\n<p>假设你正试图帮助某人，而他们的反应是傲慢或不愿意合作。练习说，他们没有使你的生活更加困难，而是实际上在引导你培养新的美德；例如，耐心或理解。或者，与你关系密切的人的死亡；是展示坚忍的机会。</p>\n<p>马库斯 · 奥勒留是这样描述的:</p>\n<blockquote>\n<p>“The impediment to action advances action. What stands in the way becomes the way.” “行动的障碍推动行动，阻碍就会成为行动的方式。”</p>\n</blockquote>\n<p>关于企业家的常见说法是，他们利用，甚至创造机会。对斯多葛主义者来说，所有的事情都是机会。一个令人沮丧的案件，你的帮助没有得到重视，一个亲人的死亡，这些都不是正常意义上的 “机会”。事实上，它们恰恰相反。它们是障碍。斯多葛主义者所做的是把每一个障碍变成一个机会。</p>\n<p>对实践中的斯多葛主义者来说，没有好坏之分。有的只是感知。你可以控制知觉。你可以选择推断出你的第一印象（”X发生了。”-&gt;”X发生了，现在我的生活结束了。”）。如果你把你的第一反应与冷静联系起来，你会发现一切都只是一个机会。</p>\n<h2 id=\"5-万物无常-Remember—It’s-All-Ephemeral\"><a href=\"#5-万物无常-Remember—It’s-All-Ephemeral\" class=\"headerlink\" title=\"5. 万物无常 | Remember—It’s All Ephemeral\"></a>5. 万物无常 | Remember—It’s All Ephemeral</h2><blockquote>\n<p>“Alexander the Great and his mule driver both died and the same thing happened to both.” — Marcus Aurelius “亚历山大大帝和他的骡夫都死了，同样的事情也发生在他们身上。”ーー Marcus Aurelius</p>\n</blockquote>\n<p>马库斯 · 奥勒留给自己写了一封简单而有效的提醒信，帮助他重新找回视角，保持平衡:</p>\n<blockquote>\n<p>“Run down the list of those who felt intense anger at something: the most famous, the most unfortunate, the most hated, the most whatever: Where is all that now? Smoke, dust, legend…or not even a legend. Think of all the examples. And how trivial the things we want so passionately are.” “列出那些对某事感到强烈愤怒的人的名单: 最有名的、最不幸的、最讨厌的、最无所谓的: 现在这些东西都在哪里？烟雾，尘埃，传说… 甚至不是一个传说。想想所有的例子。我们如此热切地想要的东西是多么微不足道。”</p>\n</blockquote>\n<p>值得注意的是，这里的“激情”并不是我们熟悉的现代用法，比如热情或关心某事。正如唐 · 罗伯逊在他的书中解释的那样，当斯多葛学派讨论克服激情，他们称之为可悲，他们指的是非理性、不健康和过度的欲望和情绪。愤怒就是一个很好的例子。重要的是要记住—- 这是关键的一点—- 他们寻求用幸福来代替幸福，比如快乐（joy）而不是过度的快乐（excessive pleasure）。</p>\n<p><strong>回到这个练习的重点，很简单: 记住你是多么的渺小。就此而言，请记住大多数事物是多么的渺小。</strong></p>\n<p>记住，成就可能是短暂的，你对它们的拥有只是一瞬间。</p>\n<p>如果一切都是短暂的，那还有什么意义呢？现在很重要。做一个好人，现在做正确的事，这才是最重要的，也是斯多葛派最重要的。</p>\n<p>以亚历山大大帝为例，他征服了已知的世界，并以他的名字命名了许多城市。这是常识。斯多葛学派还指出，有一次亚历山大喝醉了，和他最亲爱的朋友克雷塔斯打了一架，结果不小心把他打死了。后来，他非常沮丧，三天不能吃不能喝。希腊各地的诡辩家纷纷被叫来，想知道他们能为他的悲伤做些什么，但都无济于事。</p>\n<p>这是成功人生的标志吗？从个人的角度来看，如果你的名字在地图上被标注出来，如果你迷失了方向，伤害了你周围的人，那么这就无关紧要了。</p>\n<p>从亚历山大的错误中吸取教训。谦虚、诚实、有觉察力。这是你生命中每一天都可以拥有的。你永远不必担心有人会从你身上夺走它，或者更糟糕的是，它会控制你。</p>\n<h2 id=\"6-从上面看风景-Take-The-View-From-Above\"><a href=\"#6-从上面看风景-Take-The-View-From-Above\" class=\"headerlink\" title=\"6. 从上面看风景 | Take The View From Above\"></a>6. 从上面看风景 | Take The View From Above</h2><blockquote>\n<p>“How beautifully Plato put it. Whenever you want to talk about people, it’s best to take a bird’s- eye view and see everything all at once— of gatherings, armies, farms, weddings and divorces, births and deaths, noisy courtrooms or silent spaces, every foreign people, holidays, memorials, markets— all blended together and arranged in a pairing of opposites.” — Marcus Aurelius “柏拉图说得真好。无论何时，当你想谈论人时，最好是鸟瞰一切，一下子看到一切——聚会、军队、农场、婚礼和离婚、出生和死亡、嘈杂的法庭或安静的空间、每一个外国人、假日、纪念碑、市场——所有这些都融合在一起，并排列成对。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<p>马库斯经常做一个练习，被称为“从上面看问题”或“柏拉图的观点”它让我们后退一步，缩小视野，从比我们自己更高的角度来看待生活。这项工作——想象所有千百万人、所有“军队、农场、婚姻和离婚、出生和死亡”——促使我们以正确的眼光看待问题，就像以前的工作一样，提醒我们自己是多么渺小。正如斯多葛学派的学者皮埃尔 · 哈多所说，“从上面的观点改变了我们对事物的价值判断: 奢侈、权力、战争… 以及对日常生活的担忧变得荒谬可笑。”</p>\n<p>看到我们在事物的宏伟计划中是多么渺小只是这项工作的一部分。第二点，也是更微妙的一点，是挖掘斯多葛学派所谓的同情心，或者说与整个人类的相互依赖。正如宇航员埃德加 · 米切尔(Edgar Mitchell)所说，“在外太空，你会产生一种瞬间的全球意识，一种以人为本的思想，一种对世界状况的强烈不满，以及一种想要做点什么的冲动。”米切尔是第一批真正体验到‘从上面看世界’的人之一。</p>\n<p>以柏拉图的观点来看：从自己的担忧中退后一步，提醒自己对他人的责任。</p>\n<h2 id=\"7-死亡警告-想象你的死亡-Memento-Mori-Meditate-On-Your-Mortality\"><a href=\"#7-死亡警告-想象你的死亡-Memento-Mori-Meditate-On-Your-Mortality\" class=\"headerlink\" title=\"7. 死亡警告: 想象你的死亡 | Memento Mori: Meditate On Your Mortality\"></a>7. 死亡警告: 想象你的死亡 | Memento Mori: Meditate On Your Mortality</h2><blockquote>\n<p>“Let us prepare our minds as if we’d come to the very end of life. Let us postpone nothing. Let us balance life’s books each day. … The one who puts the finishing touches on their life each day is never short of time.” Seneca “让我们做好心理准备，就好像我们即将走到生命的尽头。我们什么也不要推迟。让我们平衡生活中的每一天。每天为自己的生活做最后润色的人永远不会缺少时间。”Seneca</p>\n</blockquote>\n<p>上面引用的塞尼卡的话部分出自《死亡记忆》(Memento mori)——这是一种对死亡进行反思的古老做法，可以追溯到苏格拉底(Socrates)。他说哲学的正确实践是 “除了死亡和被死亡之外，没有其他东西”。马库斯-奥勒留在他的《沉思录》中写道：”你现在就可以离开生活。让这一点决定你做什么、说什么、想什么”。那是对个人的提醒，让我们现在继续过着美德的生活，而不是等待。</p>\n<p>如果你没有抓住重点，冥想自己的死亡只会令人沮丧。斯多葛学派认为这种想法令人振奋和谦卑。塞尼卡有一本传记名为《每天都在死去》 ，这并不奇怪。毕竟，是塞尼卡敦促我们告诉自己: “明天你可能醒不过来了”，上床睡觉的时候，“你可能再也睡不着了”，醒来的时候提醒我们注定要死去。或者，正如另一位斯多葛学者爱比克泰德(Epictetus)所敦促他的学生们的那样: “每天把死亡和放逐放在你的眼前，还有一切看起来很可怕的东西–通过这样做，你永远不会有一个确定性的想法，也不会有过度的欲望。”利用这些提醒，每天冥想它们，让它们成为你充实生活的基石，不要浪费一秒钟。</p>\n<h2 id=\"8-消极想象-Premeditatio-Malorum\"><a href=\"#8-消极想象-Premeditatio-Malorum\" class=\"headerlink\" title=\"8. 消极想象 | Premeditatio Malorum\"></a>8. 消极想象 | Premeditatio Malorum</h2><blockquote>\n<p>“What is quite unlooked for is more crushing in its effect, and unexpectedness adds to the weight of a disaster. This is a reason for ensuring that nothing ever takes us by surprise. We should project our thoughts ahead of us at every turn and have in mind every possible eventuality instead of only the usual course of events… Rehearse them in your mind: exile, torture, war, shipwreck. All the terms of our human lot should be before our eyes.” — Seneca “完全出人意料的是，它的影响更具破坏性，而且意外性增加了灾难的重量。这就是为什么要确保没有任何事情会让我们感到意外。我们应该在每一个转折点都把我们的想法放在眼前，并且考虑到每一种可能发生的事情，而不仅仅是通常的事件过程… … 在你的脑海中重新演练一遍: 流放、折磨、战争、沉船。我们人类命运的所有条件都应摆在我们面前。”ー Seneca</p>\n</blockquote>\n<p>“ premeditatio malorum”(“罪恶的预谋”)是一种斯多葛主义的做法，用来想象可能出错或被夺走的事情。它帮助我们为生活中不可避免的挫折做好准备。我们并不总是得到本该属于我们的东西，即使是我们应得的。并不是所有的事情都像我们想象的那样简单明了。从心理学上讲，我们必须为这种情况发生做好准备。这是斯多葛学派建立恢复力和力量的工具箱中最有力的练习之一。</p>\n<p>例如，塞尼卡将首先重新审视或排练他的旅行计划。然后，在他的脑子里(或者像我们上面所说的在日记里) ，他会仔细检查那些可能出错或阻止它发生的事情ーー暴风雨可能会出现，船长可能会生病，船可能会遭到海盗的袭击。</p>\n<p>他在给一位朋友的信中写道: “智者不会出人意料。”。”… … 也不是所有事情都如他所愿，但是正如他所料，最重要的是，他认为有什么东西可以阻止他的计划”</p>\n<p>通过这次演习，塞尼卡总是做好了应对混乱的准备，并且总是在他的计划中应对这种混乱。他适合胜利或失败。</p>\n<h2 id=\"9-热爱命运-Amor-Fati\"><a href=\"#9-热爱命运-Amor-Fati\" class=\"headerlink\" title=\"9. 热爱命运 | Amor Fati\"></a>9. 热爱命运 | Amor Fati</h2><blockquote>\n<p>“To love only what happens, what was destined. No greater harmony.” — Marcus Aurelius “只爱发生的事情，注定的事情。没有比这更和谐的了。”——马库斯 · 奥勒留</p>\n</blockquote>\n<p>伟大的德国哲学家弗里德里希-尼采将他关于人类伟大的公式描述为amor fati–对命运的爱。”一个人不希望有什么不同，不是向前，不是向后，不是在所有的永恒中。不仅仅是承受必要的东西，更不是隐瞒它….，而是热爱它。”</p>\n<p>斯多葛学派不仅熟悉这种态度，而且接受这种态度。2000年前，皇帝马库斯 · 奥勒留在他的个人日记《沉思录》中写道: “燃烧的火焰使投入其中的一切都变得火焰和光明。”另一位斯多葛学派的人物，爱比克泰德(Epictetus) ，作为一名残废的奴隶，在遭遇逆境之后也面临同样的困境: “不要追求事情按照你希望的方式发生，而是希望事情按照它发生的方式发生: 那么你就会快乐。”</p>\n<p>这就是为什么 amor fati 是一种斯多葛学派的练习和心态，你要把所有发生的事情都做到最好: 把每一个时刻——不管多么具有挑战性——当作需要拥抱而不是回避的事情来对待。不仅要接受它，而且要热爱它，为它做得更好。因此，就像火中的氧气一样，障碍和逆境成为你潜能的燃料。</p>\n<h1 id=\"VII-斯多葛学派的局限性\"><a href=\"#VII-斯多葛学派的局限性\" class=\"headerlink\" title=\"VII. 斯多葛学派的局限性\"></a>VII. 斯多葛学派的局限性</h1><hr>\n<p>对于个体来说，是一种积极面对问题的态度。但是对于整个社会的宏观运作机制，则会有一种无力感，因为整体来说斯多葛学派是防御性的，把内心装进城堡，用理性和必然性的把握来减少外部世界对内心的影响。</p>\n<p>因为斯多葛学派更强调一种「命中注定」，则勇敢是不足的。因为勇敢的前提是不知道投入是否有回报就投入力量，这和斯多葛学派追求的命中注定与追求内心的宁静是天然冲突的。</p>\n<p>之所以在近代复兴，也是因为社会快速发展，阶级固化严重，我们对于社会运转的影响力越来越小，像一个无足轻重的棋子，所以需要「接受这个必然」。典型是具有较高知识储备与社会经验，理解社会运作机制，但又无力干涉其运作的人。</p>\n<p>via 《哲学家的 10 种生活提案》 by 徐英瑾</p>\n<h1 id=\"VIII-格言们-What-Are-The-Best-Stoic-Quotes\"><a href=\"#VIII-格言们-What-Are-The-Best-Stoic-Quotes\" class=\"headerlink\" title=\"VIII. 格言们 | What Are The Best Stoic Quotes?\"></a>VIII. 格言们 | What Are The Best Stoic Quotes?</h1><hr>\n<blockquote>\n<p>“We are often more frightened than hurt; and we suffer more from imagination than from reality.” — Seneca“ 我们经常更害怕而不是受伤; 我们更多地受到想象的折磨而不是现实。”ー Seneca</p>\n</blockquote>\n<blockquote>\n<p>“It’s silly to try to escape other people’s faults. They are inescapable. Just try to escape your own.” —Marcus Aurelius“ 试图逃避别人的错误是愚蠢的。这些错误是不可避免的。只是试图逃避自己的错误。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“Our life is what our thoughts make it.” — Marcus Aurelius“ 我们的生活是我们的思想造就的。”——马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“Don’t explain your philosophy. Embody it.” Epictetus“ 不要解释你的哲学，把它具体化。”Epictetus</p>\n</blockquote>\n<blockquote>\n<p>“If anyone tells you that a certain person speaks ill— of you, do not make excuses about what is said of you but answer, ‘He was ignorant of my other faults, else he would not have mentioned these alone.’” — Epictetus” 如果有人告诉你某人说你的坏话，不要为别人对你说的话找借口，而要回答说: ‘他不知道我其他的缺点，否则他不会单独提到这些缺点。’”ーー爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“If it is not right, do not do it, if it is not true, do not say it.” — Marcus Aurelius如果不对，就不要做; 如果不对，就不要说ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“You become what you give your attention to…If you yourself don’t choose what thoughts and images you expose yourself to, someone else will.” — Epictetus“ 你变成了你关注的对象… … 如果你自己不选择暴露给自己的想法和形象，别人就会选择。”ー爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“Be tolerant with others and strict with yourself.” — Marcus Aurelius“对他人宽容，对自己严格。”——马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“You always own the option of having no opinion. There is never any need to get worked up or to trouble your soul about things you can’t control. These things are not asking to be judged by you. Leave them alone.” — Marcus Aurelius“你总是可以选择不发表意见。从来没有必要因为你无法控制的事情而激动或者麻烦你的灵魂。这些事情并不是要你去评判。别管他们。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“All you need are these: certainty of judgment in the present moment; action for the common good in the present moment; and an attitude of gratitude in the present moment for anything that comes your way.” — Marcus Aurelius“你所需要的就是这些: 确信当下的判断，为当下的共同利益而行动，以及对当下发生的一切抱有感激的态度。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“No person has the power to have everything they want, but it is in their power not to want what they don’t have, and to cheerfully put to good use what they do have.” — Seneca“ 没有人有能力拥有他们想要的一切，但他们有能力不去想要他们没有的东西，并乐于好好利用他们拥有的东西。”ー 塞涅卡</p>\n</blockquote>\n<blockquote>\n<p>“If anyone can refute me—show me I’m making a mistake or looking at things from the wrong perspective—I’ll gladly change. It’s the truth I’m after, and the truth never harmed anyone.” — Marcus Aurelius“ 如果有人能反驳我ーー证明我犯了错误或者从错误的角度看问题ーー我会很乐意改变。这是我追求的真相，真相从未伤害过任何人。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“Today I escaped anxiety. Or no, I discarded it, because it was within me, in my own perceptions not outside.” — Marcus Aurelius“ 今天我摆脱了焦虑。或者不，我放弃了它，因为它在我内心，在我自己的感知里，而不是在外面。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“You have power over your mind – not outside events. Realise this, and you will find strength.” — Marcus Aurelius“ 你可以控制自己的思想——而不是外部事件。认识到这一点，你就会找到力量。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“It isn’t events themselves that disturb people, but only their judgements about them.” — Epictetus“ 困扰人们的不是事件本身，而是他们对事件的看法。”——爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“To be like the rock that the waves keep crashing over. It stands unmoved and the raging of the sea falls still around it.” — Marcus Aurelius“ 就像海浪不断拍打的岩石。它无动于衷，汹涌澎湃的海浪依然围绕着它。”ー马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“First say to yourself what you would be; and then do what you have to do.” — Epictetus“ 首先对自己说你要成为什么样的人，然后做你必须做的事。”——爱比克泰德</p>\n</blockquote>\n<blockquote>\n<p>“Waste no more time arguing what a good man should be. Be One.” — Marcus Aurelius“ 不要再浪费时间争论一个好人应该是什么样的了。做一个真正的好人。”——马库斯 · 奥勒留</p>\n</blockquote>\n<blockquote>\n<p>“The primary indication of a well-ordered mind is a man’s ability to remain in one place and linger in his own company.” — Seneca“ 思维井然有序的主要标志是一个人能够呆在一个地方，与自己的同伴相处。”ー 塞涅卡</p>\n</blockquote>\n<blockquote>\n<p>“Receive without pride, let go without attachment.” — Marcus Aurelius“ 不带骄傲地接受，不带眷恋地放手。”——马库斯 · 奥勒留</p>\n</blockquote>\n<p><a href=\"https://dailystoic.com/what-is-stoicism-a-definition-3-stoic-exercises-to-get-you-started/\">What Is Stoicism? A Definition &amp; 9 Stoic Exercises To Get You Started</a></p>\n"},{"title":"对毛泽东新中国探索的再思考","_content":"\n#### **对毛泽东新中国探索的再思考**\n\n——中共中央文献研究室副主任李捷在中国社会科学院报告速记稿\n\n李捷\n\n　　主持人：同志们，今天我们院马列所、新闻所、青年中心和政治学所，荣幸地邀请到了中央文献研究副主任、《毛泽东传》（1949-1976）的主要作者之一的李捷同志，给我们做“对毛泽东新中国探索的再思考”的学术报告。我们对李捷同志的到来表示欢迎。\n\n　　去年毛主席诞辰110周年的时候，一部反映中国当代历史，反映几代人的生活和经历的重要历史著作《毛泽东传》(1949－1976)诞生了。这是一部鸿篇巨制，是对我们党的历史、对我们国家的历史、对我们伟大领袖毛主席后半生的一个重要总结，也代表了我们党对这段历史的看法。我有幸，在这之后结识了李捷同志。作为一个学者、一个历史学家，能够参与这样的著作，应该说是一生的幸事。作为一个学者（在座的都是学者或年轻的学生），都希望自己能够留下传世之作，我想李捷同志已经是达到这样境界了，很了不起。去年我们也曾邀请李捷同志来，但是当时他太忙了。今年临近岁末，在毛主席诞辰111周年前夕，我们把李捷同志请来，我想他的报告一定会对我们大有教益。下面我们就把时间交给李捷同志。\n\n　　李捷：首先我非常感谢房宁教授，也感谢邀请我的各个所。在这样一个时间，年终岁末，各种事情都要做个了结的时候，能占用大家的时间，跟大家做一个交流，很难得。\n\n　　我今天交流的题目是“对毛泽东新中国探索的再思考”。在讲这个题目之前，我简要地介绍一下我自己的学术背景。我是1978年上的大学，在这之前当过兵，当过工人。1978年上大学，但是那个时候我没有能够考上第一批78年录取的，当时北京市委书记林乎加做了一个决定，将当年高考300分以上的同学都统统地网罗一遍，成立分校，我进入北师大的第一分校，在东大桥那个地方，读历史系。四年毕业以后，1983－1986年是在中央党校读的党史专业的研究生。我原来有一个误区，以为党史和历史这两个学科是一回事，只是时间段的不同。到了那儿学习，我才发现，这是两个不同的学科，包括学术的方法和理念都不同，但不管怎么样，它也是研究历史。这两个结合对我后来的成长有了很大的帮助。毕业以后就到了文献研究室，分在毛泽东研究组，一直干到现在。\n\n　　《毛泽东传》是在主席诞辰100周年以后1994年启动的一个项目。当时，文献研究室的领导把建国以后的《毛泽东传》这部分交给了我和高文谦。他现在在美国，写过《晚年周恩来》。当时的想法不是现在这样的《毛泽东传》，而是一个合传，就是把建国前和建国后一起写下来。但是，建国后的部分难度非常大，当时是按照评传来写的，评传是以评要为主，因为既然是代表中央，是一种正传，我们是按照传统的路子来写这个传记的，评传的写法。很多本著名传记，如《拿破仑传》、《俾斯麦传》、《罗斯福传》都是这样的写法，也是国际上通行的写法。但按这种写法，我们试了两三年以后发现不行，这个路子行不通。这时候高文谦基本上不怎么搞了，他是借着机会搞了很多的档案材料，后来借着探亲的机会跑了。实际上《毛泽东传》他一个字都没写，“文革”部分的任务就落在另外一个人身上，就是我的同事安建设，我们俩就共同探索这条路。到了1996年的时候（整个《毛泽东传》一共前前后后九年的时间）写不下去了，于是我们决定完全抛开评传的写法，转而从历史材料里面来见真实，用材料来说话，实际上采取了孔子开创的春秋笔法，述而不作。实际上，我体会述不可能不作，但是这个作要体现在述里面，实际上这也是《史记》的笔法、太史公的笔法。这样写下来以后得到大家的认可，说明这个传记还是经得起大家的认可的。这样一来，后传与前传就彻底脱钩了。前传大家都看到过，1996年出版的，是金冲及同志主持来撰写的，这个路子基本还是评传的路子，但是比评传往前迈了一步。这个传到了去年才写出来，在这个过程中，我们室的好多领导都在催。我觉得既然要出一个经得起历史检验的东西，就要耐得住性子。在这个过程中，我们单位有一个得天独厚的条件，就是大量档案材料都有复印件在我们单位（原件都在中央档案馆），既然我们占据着这样一个得天独厚的条件，那就有一个义不容辞的责任、历史的责任，就要把历史原原本本地写出来。当然，坦率地讲，我们不可能把所有的材料都写进去，因为：第一受篇幅的限制，第二受现在各种各样的情况的限制，有些东西不太好写。不好写的原因主要还不是因为说出来以后有损于毛泽东，而是说对现在有些人不利，这还是有一些禁区的。但是，我们保证一条：凡是写出来的东西都是真实的。我觉得能够做到这一点，将来过了几百年以后，那个时候恐怕档案能都开放了，人们拿着这本书对着档案看了，说这些人还可以，还能够把历史的档案原原本本地表现出来，我们就心满意足了。\n\n　　今天我想跟大家交流的主要是我自己这些年写《毛泽东传》的一些体会。这些年，我在国际上参加了一些国际上的学术研讨会，包括去年12月初在波士顿哈佛大学费正清中心召开的研讨会，题目是《再谈毛泽东》。这些年，有各式各样的说法，有赞扬毛泽东的，也有反对毛泽东的，也有根本上包括他的人格都否定的，各式各样的议论，所以我想结合这种情况，谈一点自己的体会。我觉得如果概括起来讲，毛泽东在建国以后的探索，主要是做了三件事情：\n\n　　第一件事情就是搞建设。有的人讲，毛泽东根本不懂建设，而且兴趣也不在建设，没有认认真真搞过建设。这是一种误解，毛泽东在建国以后用相当大的精力搞阶级斗争，这是不假，但是他也用了相当大的精力搞建设。但是这种建设不是一般性的建设，而是有一个主题，就是我们说的现代化的建设。从严格意义上讲，按照现在现代化的理论来讲，实际上毛泽东所探索的主要是初级工业化这个阶段的建设，他是想通过社会主义这样一种制度实现中国的初级的工业化。毛泽东经常将现代化和工业化经常混用，他没有严格地区分两者的界限。\n\n　　第二件事情就是在外交上谋求中国的大国地位。中国的大国地位在近代以来失落了，在第二次世界大战结束以后，尽管中国进入了安理会，但是中国实际上没有自己的大国地位。\n\n　　第三件事情和后来“文化大革命”的失误是有关系的，就是怎么巩固中国共产党长期执政的地位，当时的话叫“江山不能变色”。\n\n　　他做了这么三件事。这三件事，我就一一地介绍一下情况，谈一下我自己的认识。\n\n　　一、关于现代化建设。\n\n　　在现代化建设中，他做了很多很多的事情，具体的过程我就不去多说了。如果说起来的话，很多了，包括“一五建设”，后来提出的“十大关系”，初步总结我们建国以来的工业化的经验，到《关于正确处理人民内部矛盾的问题》提出来的中国自己的工业化的道路，接着发动“大跃进”等等，到了六十年代中期又搞“三线”建设。这里有一条线，一直到上个世纪七十年代，这都很清楚了。我想概括地讲，他在建设中，实际上做了三个重要的选择，对我们共和国的发展，一直到现在都产生很大的影响。\n\n　　第一个选择，是制度方面的选择。工业化有很多很多的道路，有很多的制度选择，包括资本主义的制度选择，包括社会主义像苏联那样的制度选择。在当时来说，这种制度选择对毛泽东来说是天经地义的事，作为那一代的共产党员，他必然毫不犹豫地选择社会主义的制度，通过社会主义的制度安排，来实现现代化，实现工业化。这是中国共产党义不容辞的责任，当时这是一个不容辩疑的真理。这个选择从中国共产党诞生之日起，从毛泽东选择马克思主义信仰开始，对于这一代人来说，这是不成问题的问题。\n\n　　在制度选择里面，还有一个问题。在当时来说，选择了社会主义制度，选择了社会主义的道路，实际上就是选择苏联道路。在当时来说，就是在他最初进行选择的时候，在1949年新中国成立以后，当是有一句很著名的话“苏联的今天就是我们的明天”。当时是这么一个状况，所以那个时候，我们在现实中确实很难避免这样的选择，因为我们没有经验，我们没有起家的本领，我们更没有先进的技术，在当时先进的技术西方对我们是封锁的，所以我们只能取之于苏联为首社会主义的阵营。同时，与我们对社会主义的认识也是有关的。当时认为，要搞社会主义就是要走苏联的道路，就像当年在探索出井冈山道路之前，我们认为中国既然要搞无产阶级革命，就要走十月革命的道路。所以，在那个时候，包括“一五计划”的制定，都是在苏联的帮助之下。像李富春这些领导人都是身经百战的，但是到了苏联以后甘当小学生，从ABC学起，请苏联的计划经济专家来给他们讲课。我们的“一五规划”，实际上在苏共政治局里面是经过了多次的讨论。\n\n　　客观地讲，当时，中苏关系处在一个蜜月时期，苏联对我们的帮助是巨大的，这个对于我们“一五计划”的顺利实施起了非常重要的作用。这个作用也不能抹煞，而且这里面很有意思的、也值得研究的是，我们第一个五年计划的制定形成了厚厚的一本书，这本书实际上包含了苏共中央和苏联的搞计划经济的人，对于苏联长期以来计划经济的经验，特别是它失误的地方有一种反思，而这种反思实际上体现在“一五计划”里面。这些方面很值得研究，这些材料现在在俄罗斯的档案里面都有，是不难找到的。当时，他们确实对我们有一些劝告，包括指标上。他们当时说，我们过去制定的指标太高，你们制定指标的时候保守一点，最后能超额完成，这样能鼓舞士气，而且整个的国民经济在计划里面容易平衡，过去我们老搞高指标，后来没办法只好一降再降。但是遗憾的是，我们后来到了“二五时期”，受到“大跃进”的影响，把苏联老大哥教给我们的这个经验给忘了。\n\n　　我们常说，我们现在转轨变型是从计划经济体制变成市场经济体制。实际上，中国根本就没有典型意义的计划经济体制，我们的计划经济体制实际上有一点“四不像”。但是也正因为“四不像”，我们在转轨变型的时候比前苏联要顺当得多。破绽多，漏洞多，模式不成型，制度不成型，反过来要搞改革时突破口就多，借助的力量就多，这个是相辅相成的。如果做一个简单的类比的话，跟西方相比，我们的奴隶制度不典型，所以我们转到封建制度很容易。而在封建时期，我们形成了洋洋大观、潇潇洒洒的非常典型的封建制度（我个人认为，中国的封建制度是封建制度的典型，西欧不是典型），但这也就意味着从封建制度转成资本主义制度是相当困难的。\n\n　　经过了这个探索以后，毛泽东在1956年，对整个的情况有一个反思。我们在写《毛泽东传》的时候，特别注意对毛泽东心理状态的观察。我们通过很多的材料来引证，发现毛泽东自1949年开国大典后，每次走下天安门城楼，他并不高兴。很多人反映，那几年他有点郁郁不欢。我猜想其中一个原因是担子重，未知数多，这是一个方面。而最重要的方面还是毛泽东自己讲的，很长一段时间我们是当了苏联人的奴隶，跟着他们的屁股后面走，什么都学苏联的，苏联得了感冒，我们也跟着打嚏喷。所以他说，到了1956年“十大关系”出来以后，心情才开始高兴起来。从这个地方开始，中国要走一条自己的道路了。毛泽东意识到中国不能照搬苏联的模式，但要走自己的道路，必然要付出巨大的代价。任何一个决策没有代价是不可能的。而且，你的目标取向越高，付出的代价必然也越大，它的风险也越大，这是成正比的。我们后来在现代化、工业化这条道路上跌了很多的跤。\n\n　　但是有一点，我们在《毛泽东传》已经反映了，毛泽东还是汲取了“大跃进”失误的教训的。尽管在庐山会议上彭老总给他上万言书，他看了以后火冒三丈。但是也有个过程，刚开始他不以为然，后来几个大区书记去跟他说，现在有一个跟谁的旗的问题，你再不说话的话，人家就跟彭老总的旗跑了，这个时候毛泽东重视了起来，他一晚上睡不着觉，在不冷静的情况下讲了关键性的话，这个历史教训是值得吸取的。\n\n　　在建国前，毛泽东讲了一个经验之谈。在井冈山的时候，毛泽东的性情是非常暴躁的，他是性情中人，也是一个不拘小节的人，一个大手笔的人。他的弟弟毛泽覃有一次因为一个事情和他争论了起来。（毛泽覃当时也在红四军，也在井冈山。当听说朱老总的部队在韶山附近活动之后，主席先是派了毛泽覃去，后来派了何长工。他的弟弟后来牺牲了。）毛泽东当时有点说不过他。就急了，就要动手打他。毛泽覃就说：“这是共产党，不是咱们毛家的宗祠。”主席说，他这一句话把我震醒了。毛泽东从一个具有开拓精神的地方领导人成长为一个全党公认的领袖，跟他后天的修养、磨炼是分不开的。他后来也经常讲，往往做决策的时候听到不同的意见，脑子一热就要发脾气，这时候最好不要发作，睡一觉，到第二天早晨什么都好了。这是他的经验之谈，但是这一次他睡了一觉之后，反而是火冒三丈，在一个不冷静的情况下，打破了两件事、延安整风时定的规矩：一是就事论事，不算历史旧帐；二是只对事不对人。就毛泽东一生来说，他在大多数情况下确实是这样来做的，宽大为怀，对很多的干部都是这样的，胸襟是像海一样的。在他看来，这次对彭老总的事情不是一般的小事情，是大事，既对事又对人，老帐新帐一起算。这个口子一开，坏了，所以《历史决议》上讲庐山会议破坏了党内正常的民主生活。\n\n　　但是，庐山会议以后，毛泽东也在冷静地思考。到了1963年的时候，要制定第三个五年计划，当时计委的同志脑子很热，定了很多的高指标。主席就把李富春他们叫来，对他们说，现在我们一定要吸取过去的教训，定指标的时候千万不要以我们这些人的寿命来计算时间。这句话很了不起，他是痛定思痛。所以，1965年他让彭老总到四川大三线当副总指挥的时候跟彭老总说，也许将来历史证明你是对的，这里面就有些反思的表现。但是话说回来，他的反思也不是彻底的，也有反反复复，跟我们正常人一样的，在这方面我们不能苛求于他。\n\n　　在制度方面的选择，尽管付出了代价，但是基本上还是成功的。到了七十年代中期的时候，我们建成了一个独立自主的、相对比较完整的工业体系和国民经济体系。我们基本上什么都可以造，从什么都不能造到基本上都可以造。当然，什么事情有利必有弊。从历史的延续性来看，当时比较强调独立自主，为什么？因为我们是从半殖民地半封建的经济体系，什么都仰仗于西方发达国家、受到西方发达国家不平等的经济盘剥的依附性经济，走到一种独立的国民经济体系。在此过程中强调独立自主有其合理性，也是符合国家的利益的。至于说把这个问题强调到了极端，在我们已经建成了一个独立自主的国民经济体系以后，完全跟国外的经济发展、经济联系完全脱钩，闭关锁国，闭关自守，这也是错误的。对这个问题要加以分析。从理论上来说，我们意识到“文化大革命”的一些错误做法并纠正它，这是毫无疑问是对的，由此产生了改革开放这样一条路线，这是正确的。但是另一方面，如果从历史的长河来看，这种发展有它的阶段性，也就是：只有你建立了一个独立自主的工业体系和国民经济体系以后，你才有可能在自己国家独立主权的情况下，去向世界敞开国门，去平等地、互利地打交道。没有这个基础不行，固守这个基础也不行。这个问题要做一种辩证的思考。\n\n　　第二就是路径的选择。制度的选择之后有一个路径的选择。这个路径的选择，我指的是一种比较低层面的路径选择，主要是指农轻重之间的比例关系。要搞初级的工业化，这个时候工业在创始阶段，这笔资金不可能从工业内部、第二产业内部产生，当时更谈不上第三产业，那么资金的来源，也就是原始积累的资金来源只能是有几种途径：要么就像西方一样通过殖民扩张来取得；要么就是牺牲农民的利益，像当时英国的“圈地运动”这样一种东西，还有一种就是像苏联一样来搞高积累，也是带有牺牲农民的色彩。\n\n　　作为中国来说，毛泽东在路径的选择上是很艰难的，怎么艰难呢？你仔细看他的《关于正确处理人民内部矛盾的问题》里面，如果从表面的形式逻辑来看，你会发现有一个矛盾，他一边说重工业的优先发展，这是搞工业化的一个客观规律。你不搞重装备怎么能建立你的工业基础啊？不可能的。但另一方面他又讲，一定要农业优先，按照农轻重的比例关系来安排生产。从形式逻辑来说，你看到它是一种矛盾，这里面就反映了一个客观的事实，就是说在初始工业化阶段必然要优先发展重工业，这是一个基本的事实。优先发展重工业这部分的启动资金，我们称之为原始积累的这些资金，从哪里来？不可能从工业本身解决，主要的不能靠工业本身来解决。当然轻工业的积累可以解决一部分，但是不能解决主要的部分。而且社会主义国家不可能去对外掠夺，中国的国情也不允许，中国的历史传统、中国的国情不允许这样做。只有一种办法就是要从第一产业，从农村经济、从农业生产取得一部分优先发展重工业的资金积累。这是一个方面。另一方面，毛泽东也看到了，中国是一个农民为主体的大国，无粮国家是不稳定的，农民不稳定就会起来造反，政权就会不稳定，所以要发展农民经济、改善农民的生活、发展农业。这就是毛泽东面临的一个两难的课题。\n\n　　在这样的情况下，他就在《论十大关系》中提出了一个辩证的思维逻辑，他试图把从形式逻辑来看是矛盾的东西，通过辩证逻辑、辩证思维统一起来。他讲道，你要想多搞一点重工业吗？那你就要优先发展轻工业，要优先发展农业，要多往这里投一些资，投资的目的是什么呢？投资的目的还是为了从里面取得更高的收益和积累，同时保持社会的稳定。他就是这样把一个矛盾的东西试图通过这样一个理论统一起来。毛泽东那个时代在这个问题上基本是两头兼顾的，做得还是比较好的。我们现在讲科学的发展观和五个统筹，把统筹兼顾的思想、统筹的思想往前推，最后必然要提到《关于正确处理人民内部矛盾的问题》这篇文章。\n\n　　应该说毛泽东在这个问题上不愧为一个解决矛盾的大师，一个化解矛盾的大师。当然，化解矛盾并不等于说这个矛盾不存在，还是存在的。这个时期，也就是整个毛泽东的时代、完成初级工业化的时代，实际上是跟我们现在叫做反哺农业相反的一个时代，就是说要从农业中取得积累，支持工业发展的积累。但是要取得积累，必须在这个积累的过程中给农民、农业相当多的投入，要给他一定的返还，所以他把这个取和予这对矛盾统一起来，取的方面要重一些，予的方面要小一些。小一些，但是也要考虑到农业、农村、农民的最大承受能力，有一个临界点，有一个度。这个度，总的来说，在毛泽东时代他是把握得比较好的，但是不是说他这个思想是贯穿始终的。比如说“大跃进”的时候，他受到一些表象的误导，做了一个错误的判断，他以为当时的农民思想比工人还先进。那个时候他讲，现在谁的思想最先进？我看不是工人阶级，而是农民，农民可以发扬共产主义的风格，最后导致剥夺农民。从第一次郑州会议开始，毛泽东用了两年多的时间，一直在解决这个问题。两年多以后，特别是到了三年困难时期，又继续解决这个问题，到1963年重新修订（1961年初步制定）的时候才基本把这个问题解决了。这个以后一直到文化大革命，他再也没有犯这样一个历史性的错误，这个教训还是汲取了。\n\n　　在我国现代化的过程中（我们在70年代中期完成了初级工业化以后，后来进入到改革开放时期，提出现在这种全面的、全方位的现代化），实际上有一种历史的惯性，就是我们长期习惯了这种取的这一手比较重、予的这一手比较轻这样一种历史的惯性。到了现在，在实现初级工业化阶段以后，我们应该反哺农业了，不是再从农业里面取得原始积累，而应该从第二产业、第三产业取得一些现代化的后劲和动力，也包括借助一些国外的投资，解决国内发展的资金问题。由于这种历史的惯性作用，到现在为止我们仍然没有摆脱这个困境。就是现在的三农问题实际上是因为我们从这边取的太多，予的太少，没有真正形成一种反哺农业的这样一种良性循环的模式。在联产承包责任制开始实行的那些年，那是农民日子最好的时候。那时候实际上给农民一种休养生息，但是以后就不行了。这里面也跟我们政治体制改革有关系，政治体制改革滞后，我们的基层政权很多很多的行政负担不但没有减少，而且加重，这种行政的负担很多的最后都转嫁到农民身上。\n\n　　现在，中央对这个问题相当重视。最近有几个省份已经宣布取消了农业税。但从内部来看，我一直觉得这个问题将来也会有副作用的。从农民来说，你要加强他的国家观念。其实，农民几千年来交粮纳税，这是天经地义的事，关键是轻徭薄赋。而且在交完了以后，为了培养他的国家意识，应该是通过各种渠道，不要层层盘剥、层层截留，最后返还到农民身上，这样就比较好。但现在因为返还实现不了，只能是完全免除。完全免除，在农民的国家意识这方面可能会有一些副作用，但是今后的人可能更聪明，会有更好的办法。\n\n　　第三个选择就是外部关系的选择。这个问题实际上我刚才在讲制度选择的时候已经讲到了，这就是：就对外关系来说，我们要自力更生、独立自主地实现现代化。毛泽东的考虑是从历史延伸下来的，因为我们原来是半殖民、半封建这种依附性的经济，要独立起来。同时，客观上也有一个问题，就是西方这些国家对我们不仅是封锁，而且还制裁，希望把我们扼杀在摇篮里，希望我们早晚有一天要完蛋。这个问题因为前面已经都讲到了，这里就不多说了。\n\n　　二、关于争取大国地位。\n\n　　毛泽东的第二件事情就是争取中国的大国地位。这一方面毛泽东对中国来说是功不可没，我们到现在还在享受着毛泽东当年为我们奠定中国大国地位基础的好处，受益匪浅，到现在为止还是这样。\n　　关于争取中国的大国地位，有必要实事求是地还原到中国原来的历史情况，我把这个称作历史还原法。为什么呢？我们现在很多时候都用现在的事来判断当年的是与非，用今天的观点来判断当年。很多的同志、很多学者在研究的时候，他也力图不要用现在的观念来判断当年的事与非，力图客观一点，但是由于他缺少一种必要的历史还原，缺少对当年这些领导人每天生活其中并与之打交道的这个世界的基本特征的把握，所以往往自觉不自觉地用今天的是和非来评判当年的是与非。所以，我是一直认为这个历史还原法是非常重要的。在我们研究一个问题、研究一个概念的时候，一定要注意运用这样一种方法。\n\n　　如果还原到当年，就是50年代之前的话，当时第二次世界大战刚刚结束，世界上有两个基本特征。首先，就是人们普遍担心第三次世界大战爆发。本来，在十九世纪末，很多的经济学家、社会学家包括政治学家对二十世纪人类的进步充满了一种很好的憧憬、美好的憧憬，信心很足，很看好。结果没想到进入二十世纪以后，在半个世纪之内，人类连续发生了两次世界大战，而且整个的经济特别是资本主义经济在1929年陷入了一个空前的危机，出现了一种社会、政治的危机，而且这种危机对全球、对整个世界，除了一些不发达的地方、很闭塞的地方，都产生了冲击。在这样一个情况下，在第二次世界大战结束以后，大家普遍关心的问题就是，第二次世界大战以后这个和平的局面究竟能维持多久？第三次世界大战什么时候会爆发？可不可以避免？这是当时人类共同的一个问题，不是毛泽东个人面临的问题，包括斯大林、罗斯福等等，都面临着同样的问题。\n\n　　为了要解决这个问题，就出现了第二个基本特征，就是罗斯福、丘吉尔和斯大林在一起通过雅尔塔会议，也通过这之前一系列的国际性会议，确立了一个两极格局，当然还有一些其它的大国，初步确定了苏美的两极格局。两极格局对于所有的国家，无论你是大国，小国也好，在寻求国家独立的时候都是不能不考虑的。\n　　我为什么要讲这个背景呢？这就跟毛泽东为争取中国的大国地位所做的第一件大事是紧密相关的，这件大事就是现在经常有争论的“一边倒”政策。\n\n　　在当时来说，作为一个新独立的中国，尽管它是一个大国，尽管它过去曾经在世界上有过辉煌的历史，但是毕竟这个时候是一个积贫积弱、刚刚得到独立的国家，况且还有一个敌对的政权在台湾，还占据着在联合国的合法席位。这个时候中国要取得国际上的承认，唯一一个现实的选择就是要在这两大阵营选择一个。当时对于要不要实行“一边倒”，在民主党派之间是有过争论的，有过议论的，而且这些人公推张治中向毛泽东进言。毛泽东跟他讲，我们不能搞在美、苏两边骑墙的政策，只能是“一边倒”。在这个“一边倒”的过程中，毛泽东同样面临着一个两难的选择，一方面我们要倒向苏联这一边，这是一个很现实的选择；同时我们又不能够成为苏联的小兄弟似的卫星国。怎么办？这就是毛泽东在第一次访苏的时候很艰难的一场斗争，既不能跟斯大林翻脸，但是又要结束苏联在中国的特权地位。整个的过程大家都非常清楚了，这都已经成为定论的东西了，包括俄罗斯的档案都已经公布出来了，这都是很清楚的，我就不多说了。这里我提供一个细节，实际上当时要订立中苏友好同盟互助条约，包括要收回旅顺这些港口，还包括当时我们曾经想过把外蒙古收过来，这些都在民主党派内部通报过。主席的第一次访苏都事先通报过，都征求过他们的意见，但他们都是跟共产党站在一边的，而且大家都认为毛泽东如果去了以后，把这几个问题解决了，那太好了，这是中国共产党对中华民族的一个伟大贡献。所以，在这样一个情况下，毛泽东第一次访苏可以说是只能成功，不能失败，达不到目的回来无颜见江东父老乡亲。这就是毛泽东在苏联软磨硬泡呆了两个多月之久的原因。弄得斯大林最后没招，只好适当地做一些妥协，当然我们也妥协。任何一个国际的谈判，任何一个国际条约、同盟的签订，没有双方的妥协是不可能的。现在我们把这种双方的妥协叫做双赢。这个问题如果放在当时、当地的特定背景下，我们就可以比较好看出这个决策的得失。\n\n　　第二个重要的事情就是决策抗美援朝。其实，抗美援朝大家也都知道，抗美援朝的是是非非、长长短短，现在大家都在说，见仁见智。抗美援朝有一个决策的过程，既是一个国内决策的过程；同时，这种国内决策背后也可以看到中、美、苏三国领导人智力的角斗。为什么这么说呢？当时，美国和苏联在国际战略上都没有局部战争的概念。在他们的眼里，在朝鲜半岛上打的这场仗，如果最后扩大为苏联和美国之间都出兵了，那就是第三次世界大战的爆发。苏联是这样认为，美国也是这样认为，这就是它们当时的一个国际战略的基本点，而他们双方都在力图避免由于这个地方引起两国的对垒，引起新的世界大战。所以在6月25日以后，美国人宣布要干涉朝鲜内政的时候，当时要开安理会，要成立联合国军，美国人有很多很多的准备。但是，当美国代表一进门后，看到苏联席位上马立克缺席，心里就美了。这表明苏联无意和美国人在朝鲜半岛问题摊牌，全面对抗，他心里就有底了。在这样的情况下，美国人以为可以不顾中国人的警告，以为中国人说话根本无足轻重，可以大胆地越过三八线。对于毛泽东来说，他第一招棋就放在阻止美国人越过三八线。所以在9月和10月毛泽东、周恩来连续三次发表声明，如果美军越过三八线的话，中国人绝对不会坐视不救。他们想控制这个局面，但控制不住，在这样一个情况下，中国最后没办法了，只能出兵了。\n\n　　出兵以后，毛泽东在考虑问题的时候有两个基本点：第一个就是要控制朝鲜半岛的局势，控制到什么程度呢？要避免朝鲜半岛问题国际化，局部问题局部解决，这就是后来的局部战争这个概念的由来。实际上是我们中国人通过朝鲜战争教训了美国人，美国人才从这里面得到了局部战争一个概念。第二个基本点是避免朝鲜半岛战争长期化、持久化，因为当时毛泽东认为持久对我们不利，但是这个问题后来有所改变。为什么持久对我们不利呢？主要是考虑我们国内对这场现代化战争的支撑能力，经济上和民心的支撑能力，能支撑多久？正因为有这样一个要求，所以就导致我们在抗美援朝过程中，特别是五次战役表现出了一个特点，就是越打也急，第四次战役和第五次战役，打得就有点没有节奏了，我们损失比较大，最后只能从汉城退守到三八线。在这个时候，即战争经过了一年后，出现了一个新的变化，就是国内的经济不但没有受到战争的影响，反而还受到了促进，经济在上升、在发展，因为民气起来了，包括民主党派、爱国的资本家，大家都起来了，加班加点为国贡献，支援前方、支援战争。不是战争影响了经济建设，而是促进了经济建设，这是毛泽东意想不到的。这对毛泽东后来对建设中一些东西的认识是很有影响的，这是后话。但在当时来说，这是一个非常重要的事情，毛泽东在这个时候就确立了朝鲜战争的方针，叫做“边打、边稳、边建”，“边打”就是朝鲜战争、抗美援朝战争；“边稳”稳定国内的局势，包括镇压反革命，因为当时暗藏在国内的反革命分子认为新的世界大战就要来了，中国共产党必败无疑，台湾马上就要反攻了，蒋介石马上就要反攻了，在这样一种情况下，要稳定国内的形势；“边建”就是搞经济建设。确定的是这样一个方针，也就是说国内的经济支撑能力可以使这个战争持久化，没有问题。\n\n　　与此同时，毛泽东也认识到，三八线实际上就是中美两国经济实力对比、国防实力对比的一个力量平衡线，我们打不过去，他也打不过来。在这样的情况下，毛泽东就向美国发了一个信号说，你愿意打多久，我就打多久。一直打到美国人愿意罢手为止，一直打到美国人愿意在和平谈判的协定上签字为止。在这样的情况下，新任的艾森豪威尔政府就软了。在做出一系列的分析以后，他最后得出结论，朝鲜半岛的战争持久化、长期化对美国不利。整个的战争局面随之有一个很大的转变。\n\n　　刚才也讲到，凡是决策必然要付出巨大的代价，包括中美关系长期的停滞不前，包括台湾受到影响，这都是抗美援朝所付出的代价。但是，抗美援朝的收获也是巨大的。对于当时中国来说，最大的一个“得”是什么呢？其它的还有很多，最重要的一个战略所得，就是在世界上树立起一个负责任的大国形象。这对中国不是句空话。为什么呢？过去中国政府说什么话，第一，没人听。第二，说了白说，没人怕。第三，没人信。你究竟能不能兑现，你说你不会坐视不救，我打了瞧，到你鸭绿江边，我看你敢不敢过来，跟你叫板。所以，这个“得”对于中国来说是非常重要的。所以，到了1954年开日内瓦会议的时候，美国人、英国人都一致地要邀请中国代表团。尽管他不给中国代表团相应的正式的外交礼遇。但是他承认，解决越南问题、朝鲜半岛问题，不能没有中国参加。十几年以后，美国在1964年前后制造了东京湾事件，这个事件实际上是一个战略上的试探。如果中越两方在这个问题上要示弱的话，包括苏联，它就可以派兵越过北纬17度线，扩大战争。在这样一个情况下，中国政府马上做出反应，周恩来总理代表中国政府宣布了三句话：第一句话是，如果美国人胆敢把战争扩大到17度线以北的话，中国的辽阔国土就是越南人民的可靠后方。第二句话，中国人从来不愿意和美国人打仗，但是如果这场战争和美国人打起来，战争没有国界，自己掂量吧。第三句话，中国人说话从来是算数的。这句话是一个外交辞令，实际上是在提醒美国人，你别忘了朝鲜战争。后来我听美国的学者讲，当时美国的五角大楼，就因为中国政府这三句话一周彻夜未眠。五角大楼忙活起来，赶紧去分析，包括调动它各种各样的侦查系统，最后得出结论，中国人说这几句话是要动真的。一直到1973年巴黎和约（越南问题的巴黎和约）签订为止，它从来不敢派一个兵越过17度线，它只敢狂轰滥炸。它不敢出兵，这对保证中国的国家安全，这个棋子是非常重要的。\n\n　　一直到现在，我们还在受益无穷。现在我们中国政府为什么说话还有信用？人家还怕？一般的声明，美国人、台湾人不怕。到了真正叫板的时候，说一句狠话、硬话，他还是怕的。为什么？跟这个教训有关系。现在美国人的心理状态是觉得，一般情况下，你不会像当年这些领导人这么干的。但是什么事情都有一个万一，万一最后逼急了，最后干一下，他还是很害怕。所以，现在外交部发言人讲，我们要启动国家的立法程序搞反对分裂国家法，这一下子现在美国人很惊惶。所以，我说抗美援朝对于我们今天还是受益无穷的一件事。\n\n　　第三是中苏论战，这是比较复杂的事情。我原来写过一些文章，做过一些分析。总的来说，中苏论战，就像小平讲的，双方都说了很多的大话、空话、套话。而且最后形成的一些理论观点，特别是“九评”里面形成的一些过“左”的、阶级斗争扩大化的一些理论观点，对后来的“文化大革命”的实践是非常有影响的。我们也为此付出了一些沉重的代价。但是，中苏论战有一条，没有中苏论战的话，中国不可能有今天独立自主的大国地位。我记得，90年代初期，在我们文献室的一次内部研讨会上，大家向胡绳同志提了一个问题，就是中国为什么没有走苏东的道路，因为当时苏联解体，大家都在考虑这个问题，而且也在担心中国会不会成为第二个苏东。当时胡绳同志讲了两点：一点就是《论十大关系》的发表。中国开始走自己的道路，而没有向东欧这些国家，把自己的经济命脉都系在苏联的老大哥身上，那就不是独立自主了。另外一个就是我们从中苏论战得到了一个实惠，就是我们从苏联老大哥的阵营里真正地脱出身来，彻底出来了。这样才树立了一个独立自主的大国的形象。而且我们在发展中国家、第三世界里面找到了自己的战略支撑点。\n\n　　在这一方面，我写过一篇文章，1998年我到美国哈佛的费正清研究中心参加了一个研讨会，会议上我递交的一篇论文就是这个，题目是《毛泽东向两极格局的挑战》。这篇论文，他们包括施拉姆教授看了以后，觉得有一定的道理，有一定的启发作用。这篇文章他们翻译成英文，收录到学术论文集里面去。但是题目他们换了，他们觉得这个题目非常刺激，很难接受。\n\n　　第四个是成功地研制了原子弹。这个我不多说了，这里就补充一个信息：毛泽东在1955年做出搞原子弹的决策的时候讲了一句话，“我们也要搞一点原子弹。”这句话看来很不经意地从毛泽东嘴里说出，但是事后想想很有道理。去年年初，我曾经跟咱们核物理工程研究院的前任院长，也是一个院士，见过一次面。他当时问了我一个问题，为什么毛泽东当年说搞一点原子弹？我说，对不起，这个问题我没有研究过，我只知道他说过这句话，但是他到底怎么说，我也没太在意。他说，这个“一点”特别有学问。为什么呢？要搞，不搞你没有大国地位。而且要搞就要早搞，像模像样地搞，搞晚了人家不让你搞了，制裁你，你就搞不成了。但是不能多搞，搞一点就行。多搞了，就跟苏联一样，要上美国人的当，被军备竞赛把你拖垮。这是中国的国力绝对不允许的。这个决策用今天的话来说有点“杀手锏”的意味，但是，原子弹对中国的大国地位来说远比今天的“杀手锏”更重要。原子弹爆炸以后，尼克松马上就改变了态度。尼克松当时还不是总统，他要竞选总统，他讲了一点，1965年他就讲过，再也不能够让中国逍遥在联合国等等国际机构之外，不能让它为所欲为了。我们要把它套回到国际组织里面去，让它成为像苏联一样负责任的大国。当然，他所说的“负责任”的含义跟我们所说的“负责任”是两码事。从这个来看，这件事情对于中美关系的正常化也是非常重要的。\n\n　　我想，我们和苏联决裂，真正成为一个独立自主的国家，不再依附于苏联的阵营，不再受控于苏联，这一点和我们成为核大国这一点一样，对于后来70年代中美关系正常化是起了非常重要的推动作用的。但现在俄罗斯的特别是俄共的学者（我跟他们有一些交流，打了一些交道）老是说这句话，我们苏联共产党怎么垮台的？很重要的一点，就是你们帮助美国人把我们搞垮的。他们到现在还对此耿耿于怀。\n\n　　第五件事，也是争取中国大国地位最重要的一件事情，就是启动中美关系正常化。这是非常重要的，这个历史过程我不细说了。这里面是非常有戏剧性的，把它拍成一个电影，搬上荧幕，都是非常好看的一个片子。这件事恰好是在“文化大革命”的中后期发生的。所以，我个人觉得，对“文化大革命”的本身的理论和实践的错误和“文化大革命”时期的所作所为，还不能完全等同起来。在“文化大革命”期间，我们还取得了一些重要的成就，这在《历史决议》里面也没有否认。在2002年中央党校和哈佛大学联合举办的国际研讨会上，我提交了题为《从中美关系正常化到中美建交》的论文。在这篇文章中，我详细地探讨了这件事的整个过程。这件事不是孤立的外交事件，内政和外交从来都是紧密联系在一起，我那篇论文试图从这个角度来讲内政和外交之间的互动。中美关系的正常化，得益的不仅仅是大国地位，它对于当时我们国内一系列的工作，包括落实老干部的政策、教育方针的调整等等，对于当时我们重新认识外部世界，都是很有好处、很有帮助的。\n\n　　说到这里，我顺便讲一个个人想法。我总觉得，如果要讲改革开放的历史的话，至少应该追溯到文化大革命的中期，才能够比较清晰地、比较实事求是地看出这一条历史脉搏的跳动。一个伟人在历史关节点所起的决定性的推动作用是必不可少的，但是历史伟人必须要在历史所造就的历史脉搏上跳动，才能够起到推动历史的作用，这就是四两拨千斤的道理。基础的东西还是历史脉搏的跳动。这跟我们在座的，所有的平民老百姓，所有思想界的人物，也包括一些老干部等等，这些人合力的作用是完全分不开的。\n\n　　三、巩固党的长期执政地位\n\n　　最后一个，就是巩固中国共产党的长期执政地位。这应该说是毛泽东在中国共产党执掌全国政权前后长期探索的一个历史性课题，也是在他去世以后留给后来的中国共产党人的跨世纪的历史课题。\n\n　　勾画一下毛泽东这一探索的历史线索是非常重要的，勾画这样一个历史线索，对于正确地认识和评价包括“文化大革命”这样一个被证明是错误的理论和实践都是很有益处的。很多东西被实践证明是错误的东西，对于我们研究者来说，也应该认真地去分析和思考一下，看看其中有没有一些合理的成份，有没有一些值得我们关注的问题。这比起我们很简单地去否定它，去拒绝它，甚至把它脸谱化、简单化要好得多。\n\n　　这一历程的第一步是建国前夕毛泽东提出的“两个务必”。他的第一个直觉就是，我们马上要进城了，我们马上要坐天下了。首先他就考虑了，我们这个天下能不能坐稳？会不会像李自成一样没坐多久，屁股还没有坐热呢，就被老百姓赶出来？当然，李自成是被清军赶出来的。这只是表面现象，实际上李自成一进城，包括进城前的所作所为和进城以后的表现，已经酿成了最后丧失民心的一个基础。所以，毛泽东考虑得更多的是怎么样不脱离群众、不丧失民心的问题。关于这个探讨，实际上毛泽东在1945年跟黄炎培的谈话中已经有一个基本的思想方向。黄炎培当时跟他探讨有名的历史周期律问题，他当时非常肯定的讲，中国共产党绝对不会蹈历史的覆辙。靠什么呢？靠民主。但是，对于民主，不同的阶级有不同的界定、不同的理解。毛泽东对它的理解，从上下文来看，实际上是人民民主，就是靠人民群众对人民政权实行监督，保证它不能腐败。人民民主的思路是对的，问题在于用什么形式、什么途径来实现人民民主。这应该说是毛泽东后来一直的探索，包括在“文化大革命”时期。\n\n　　第二个重要的探索步骤是建国以后多次的整党整风。大家都知道，延安整风是我们党的一个成功整风运动，但是也有后遗症，这就是后期发生的“抢救运动”。延安整风实际上是党的一种自我教育，用现在的话来讲，它是一种关门整风的形式。建国以后刚开始搞的整党，也是关门整风的形式。关门整风，毛泽东后来感觉到总是有局限性。到了57年提出《关于正确处理人民内部矛盾的问题》理论的时候，他就提出了一个发动党外来监督，帮助中国共产党整风。我们现在经常讲党外监督，其实毛泽东当时已经形成了这么一个想法，要将党内的监督和党外的监督结合在一起。发动民主党派，给共产党提意见，帮助共产党整风，这个思路很好，但是不幸的是，后来反右派斗争扩大化了。当时确实有右派言论，这个我们在传记里写了。现在很多人纠缠这么一个问题，当时扣右派帽子的人绝大部分都平反了，只剩下少数的几个人，那说明你这个反右派斗争错了。如果说右派的言论，当时确实是有。我在这里面举了一些具体的例子，比如要在党外成立平反委员会，要清算共产党从整风土改以来的问题，实际上是搞平反冤假错案了，等等。而且有的人讲了，毛泽东是大和尚，可以给小和尚提意见，不能给大和尚提意见，这些东西都是对共产党执政的不满情绪。如果在当时来衡量，还是一种右派言论。但是问题在于，把提这些意见的人划成右派是错误的，因为这些人长期和共产党共事。从方法上来说，右派言论和右派分子不能划等号，不能因为说了些你觉得是大逆不道的话，就扣上右派的帽子，这是不对的。反右派斗争扩大化以后，毛泽东对民主的问题有一个新的认识，这就是大家很清楚的“大民主”的思想，大鸣、大放、大字报、大辩论。实践证明，它是有害的，很容易使运动失控。\n\n　　接着，到了50年代后期有两个重要的事情：一个是庐山会议，前面简单地说了，这里面就不多说了。还有一个就是提出了防止和平演变的思想。这个思想在1959年提出来的时候是正确的。我们现在也还存在这个问题，就是西方敌对势力对我们实施西化和分化的问题。但是，在防止和平演变的时候，我们也要划清一个重要的界限：一个是我们内部的解放思想、实事求是，再探索一条新的改革的道路，这个过程中的种种探索，不能把它简单地和修正主义、右倾思潮划等号，这个问题当时没有完全搞清楚，这是一个教训。但是作为整个的战略来说，它的考虑还是有战略预见的。\n\n　　作为防止和平演变思想进一步的发展，60年代中期就形成了“反修防修”的战略。“反修”就是国际上的中苏论战，“防修”就是国内的“四清”运动，这两个运动实际上是一个战略指导下的两个重要车轮。刚刚我讲到了，对于确立中国的大国地位来说，中苏论战是非常重要的一个步骤。但是，如果就国内的情况来看，中苏论战助长了对国内问题的一些错误的或者说是偏激的判断。比如说，当时对于什么是资本主义复辟的理解，你可以看看“三评”。“九评”里面的“三评”划了一个杠杠，完全是以南斯拉夫的情况为界。究竟符不符合南斯拉夫的实际，这个历史已经有定论了。但是问题在于这个杠杠是用来说明国内的一些情况的，这就把很多界限混淆了。有些界限越过了以后，确实对我们国家的长治久安是很不利的。但是也有些现象又属于探索之中、改革之中的问题，不能够简单地下定论，但在这里却被混淆了。最后，形成了一种重要的假设：要警惕中央出修正主义。这个假设一出以后，就容易混淆现实的危险和长远的危险。从长远的危险来说，毫无疑问，要警惕内部出现一些对党和国家不忠的人，一些异己分子。从这个意义来说，这个假设是有其合理因素的。但是从近期来说，谁是修正主义？这个矛头越来越指向刘少奇这样一些人，这就出现问题了。但是，对于这个问题我们还是要做出一些分析。我们在《毛传》里已经写了，就是毛、刘之争事出有因，不仅仅是一个权力之争。如果仅仅是一个权力之争，毛泽东把他搞下去就完了，没必要搞“文化大革命”。实际上，“文化大革命”一发动，“炮打司令部”大字报一出，刘少奇的地位就已经不行了，就没必要再搞“文化大革命”了。这里很重要的一条，就是由于毛泽东和刘少奇对“四清”运动很多想法是不一致的，到最后毛泽东认为刘少奇是党内的资产阶级的代表人物。在得出了这样的一个结论以后，他就要想一个办法，什么办法呢？就是想搞一种反对修正主义的演习，希望这种演习锻炼群众。等到他去世以后，如果中央还出现修正主义，老百姓可以通过“大民主”的方式起来造反。使得党和国家的权力重新回到马克思主义者手里，他要解决的是这个问题。\n\n　　但是，他对刘少奇、邓小平等等这些人的判断失误了，特别是他对自己所依靠的一些人（像林彪集团、江青集团）失察了，这些复杂的情况是他万万没有想到的。他更没有想到的是，他非常轻车熟路的群众运动的办法，到了“文化大革命”的时候居然会走向反面，群众运动被少数人所利用。这些复杂的情况，毛泽东本人是始终没有认识到的。毛泽东在发动“文化大革命”的时候探讨的一个基本问题仍然是巩固党的长期执政地位，他要直接解决的一个问题是防止中央出修正主义，他针对的对象是他认定的那些所谓的走资本道路的当权派，他所采用的方法是群众运动的方法、自下而上的方法、“大民主”的方法，从这个意义上它是一种对人民民主的探讨，但是这种探讨走到了极端就成为了错误的东西。\n\n　　“文化大革命”这个问题还很值得研究。当然，现在出版的东西控制得非常严。但是，只有这个问题得到很好的研究以后，我们才能了解到，我们中国共产党在探求人民民主的历程中，在探求巩固中国共产党长期执政地位的过程中，我们走了怎样的一条道路，我们现在的认识是怎么从当年的认识中吸取它的合理因素，摒弃它的错误的东西，而达到更加接近真理的认识的。十六届四中全会的决定非常重要，是我们党内对这整个历程的科学总结。但是，探求真理的过程并没有因为这个决议的做出而结束，还需要我们理论界加倍努力继续解决这个问题。\n\n　　毛泽东最后留下了一个历史的遗憾，就是从一个正确的命题（周期律问题、“两个务必”）出发，最终导致了一个错误的理论和实践。对这个历史的遗憾怎么解答，怎么分析，怎么看待，这是我们现在理论界义不容辞的历史责任，也是绕不过去的一个问题。同时，他又留下了一个永恒的命题，“文化大革命”虽然最后使得毛泽东以悲剧的结局而告终，但是毛泽东的历史地位是永恒的；同时，他通过他这样一个不成功的探索给我们中国共产党留下了永恒的课题、永恒的思考，就是如何保持中国共产党的长期执政地位，如何保证党的性质不变质。中国共产党不能成为一个富人俱乐部，中国共产党必须始终和人民群众站在一起，这是毫无疑问的。而人民群众的主体是什么呢？是劳动群众，这是基本的群众。当然，由于我们党是执政党，我们不能以牺牲其它阶层的利益为代价来满足劳动人民群众各种各样的要求，我们应该统筹各个阶级的利益，但是我们的立足点、我们的基础永远是劳动人民群众，这才无愧于中国共产党的称号和它的理念。最后我想谢谢大家，也欢迎大家提问。\n\n　　主持人：谢谢！报告的效果从大家的掌声当中就能听得出来。我和大家感受一样。李捷的同志报告意境悠远。还有一些时间，李捷同志很愿意和大家交流，我想我们肯定有很多希望探讨的东西，大家有什么都可以说，我们自由一点儿。\n\n　　提问：李老师，我想问两个问题。第一个问题，您在报告中提到我国在70年代中期基本上建成了独立的比较完整的工业体系和国民经济体系，请问依据是什么？独立的比较完整的工业体系和国民经济体系有哪些标志？第二个问题与“大民主”有关。我们知道，作为一个发展中的社会主义大国，中国一方面需要高度集权的管理体制（当然并不一定是像苏联模式那样高度集权），另一方面民主参与、民主监督又不可避免地比较落后，两者形成了比较明显的反差，因此依靠体制内的力量很难解决官僚主义、腐败问题，甚至也难以杜绝西化的危险。所以，现在有一种议论，就是希望在可以控制的范围内发挥群众运动的作用，以弥补体制的缺陷。这种议论还往往援引现实的例子加以论证，比如，网络论坛特别是人民网的强国论坛被认为是网络版的“大字报”。又比如，今年由郎咸平引发的声讨MBO的民间浪潮就带有明显的“四大”的特征，特别是不少网民打着“清君侧”的旗号炮轰国资委，而这种民间抗议最后也引起了中央的重视， 其要求被部分地采纳，比如中央最近明令禁止大型国有企业搞MBO。请问您对此有何评价？\n\n　　李捷：先说标志的问题。我们的工业体系最主要的标志就是首先在重工业方面有了制造整个机床的能力，就是母机。过去很强调母机是重工业之母，没有这个东西其它东西都谈不上。比如，你参观德国，参观美国，特别是参观日本，它引以自豪是它的重装备制造业，这是非常重要的。当时我们有一个相对独立的可以制造自己的机床了，当然机床制造在当时是很不精密的，我们加工不了很精密的磨床，但是基础的东西我们大致还是可以的，这是一个标志。在此基础上，我们有自己的造船业、汽车制造业和飞机制造业。当然这些东西是很初步的，也还存在很多问题的，但是毕竟解决了从无到有的问题，所谓体系的产生就是解决从无到有的问题。还有我们的国防工业，国防工业是国家安全的基础，也是国家工业化水平的缩影。当时我们整个的国防制造业还是比较完备的。当然，我们相当多的企业效益并不好，是一种粗放的，有时候甚至是不计成本的。这在初级工业化阶段是很难解决的问题，是需要在下一个阶段解决的问题。独立自主的国民经济体系最主要的标志，在当时的认识就是“既无内债又无外债”。任何外债都有附加的条件，有了外债就要听命于人。这个认识有一定的局限性，但是应该说，从半殖民地半封建这样一个依附型经济走到“既无内债又无外债”这样一步，中国人真正是挺起腰板来搞自己的国民经济建设，这是很了不起的事情，是历史的跨越。很多时候历史就要走一个否定之否定这样一个过程，才能够走得过来。\n\n　　至于说“大民主”，最关键的根本区别，刚才你已经讲了，现在的民主包括强国论坛等等是在有秩序、有控制、有法律框架之内的民主，这种民主是需要的，是有好处的。但是，“大鸣、大放、大字报、大辩论”，特别是“文化大革命”这种“民主”是和法制完全对立的，就是把现有的法制秩序全部冲乱了。这样一种“民主”，这种群众运动决定一切，是错误的、不可取的。任何一个社会再重复这样的做法都是不行的。有的人讲现在贪官污吏那么多，再搞一个“文化大革命”就好了，绝对不会冤枉人。我说，中国经不起下一个“文化大革命”，再像那个搞法肯定会完蛋。\n\n　　提问：刚才您谈到，在防止和平演变的过程中，要注意划清根据解放思想、实事求是的思想路线开展的各种探索和修正主义的界限。请问您是怎么界定这个界限的？\n\n　　李捷：说老实话，这个界限我现在也划不出来。其实，先入为主地划分出一个标准不见得就是科学的、管用的。从历史上来看也是这样的，过去主席在《关于正确处理人民内部矛盾的问题》中提出了六条政治标准，这是指发表的时候。1957年2月，他讲的时候没有六条政治标准。到6月25号发表的时候，那个时候反右斗争已经走向高潮了，他为了约束这一运动提出了六条标准：越过这六条标准就是右派言论，没有越出符合这个就不是右派言论。但是实践证明，这种标准在一个运动中很难掌握。辨别是非很重要的恐怕还是具体问题具体分析，而不要先入为主。包括现在意识形态的很多问题，我们要正视它，比如现在新自由主义的影响。但是，具体到一件事情、一个观点，它是不是新自由主义的东西，还是要具体问题具体分析。但是，具体问题具体分析又会出现一个问题，你站在什么样的立场、用什么样的观点、方法分析。如果你认定了中国就应该私有化，而且中国就得搞多党制、三权分立，然后去具体问题具体分析，你肯定得出一个结论：新自由主义万万岁。我这里指的是要运用马克思主义基本的立场、观点、方法，站在国家、人民的根本利益的角度具体问题具体分析，这样可能比人为地制定一个标准要好一些。特别是在社会科学界，现在实际上更需要一种综合性的、辩证的思维，千万要避免简单化、格式化，就像电脑式的“0就是0，1就是1”那种分析，是不可取的。\n\n　　提问：您刚才说，把有些材料写进《毛泽东传》，会对现在有些人不利，请问具体是指哪些方面的材料？随着档案材料的进一步开放，将来会不会为高岗、林彪等人翻案？\n\n　　李捷：前面那个不利也只能说到此为止，我不能再说，再说就犯错误了。高岗事件和林彪事件是历史事实，历史已经有了定论。但我们对它们还是要做一个客观的分析，在高岗事件中高岗是有错误的，但是高岗这个人是有贡献的，不能一概而论。就是他在犯错误时期，他也有一些正确的认识、正确的思想，不能因人废言。林彪问题也是这样，林彪事件是一个铁案，是翻不了的。当然，林彪事件扑朔迷离。而且，大家往往有一种猎奇心理，外国人也是如此。往往什么事情只要加以炒作，就会越说越乱。我相信这个问题可能还要争论很多年。但是，我有一个感觉，林彪的问题是翻不了案的。但是，对林彪这个人也不能因人废言，包括在“文化大革命”中，也不能说林彪所讲的所有话都有阴谋，都是错的。还有，《五七一工程纪要》林彪是不是真正看过，而且每一个计划他都赞同，这个现在得不到材料上的根据和支持。这是林立果他们搞的。当然，你在认识“文化大革命”的时候，《五七一工程纪要》里面有些话，撇开暗杀主席、称主席为B52等等问题，它有些话是不是讲到了当时一些问题，比如“变相惩罚”等等这些问题？我说它还是讲了一些实话，讲了一些真话，这些问题不要一概而论。但是，并不能因此就反过来认为林彪就是好的，林彪不是搞阴谋的，这也站不住脚。高岗也是同样的。\n\n　　提问：听说康生在临死之前向毛泽东揭发了江青、张春桥的历史问题，为什么毛泽东没有反应？毛泽东对待康生的问题应该负一种什么责任？\n\n　　李捷：康生在这个人在党内确实是起了很不好的作用。大家都知道，只要一搞政治运动，康生就格外努力，而且很多重要的冤假错案中都有他的影子，这个人是很厉害的。但是，我们在总结历史经验的时候，功劳不能算作一个人的，错误、问题也不能算一个人。如果你再进一步深究的话，康生兴风作浪迫害一些人，他要有一定的气侯和条件，气侯、条件不到的时候他不敢。另外，“七大”以后有一段时间他很背，在党内非常臭，后来主席又重新信任他。主席这个人一生来说，他最自信的一点是什么呢？他认为他不会看错干部。他讲过，领导者的责任第一个是出主意，第二个是用干部。他最自信也是这两条，他认为自己的决断至少不会出现大的错误，这是他充满自信的一面。干部也是，至少关键的干部他自信不会看错。他什么时候后来变得不自信了？林彪事件出现以后对他打击非常大。实际上，重用康生、器重康生，是毛泽东很重要的一个失误，在这个问题上毛泽东还是有失察的错误，所以到了一定的气侯的时候，康生就会起他的作用。\n\n　　至于康生揭发江青、张春桥的事情，毛泽东当时没有做声，但这不等于他不重视这个事情。后来，主席始终在考虑这个权交给谁，先是考虑邓小平他们，邓小平不行了考虑华国锋，并没有把这个权给张春桥、江青，说明他头脑还是很清楚的。但是，这只是我们姑妄推测，绝对没有历史材料。不要说李捷看档案了，根据档案得出这个结论。我跟大家一样也没有看到什么，但是搞历史的人也有一种好奇心，我跟大家一样也推测一下。我总觉得，主席当时听到这个情况以后恐怕无力追究了，再追究就追究到自己夫人那儿了，再追究就追究到张春桥这样的人物身上了。但是，他没有把大权交给这些人，说明他对党对国家还是很负责任的。\n\n　　这里再说一句，粉碎“四人帮”以后，我们公布了很多主席讲的话。但是，实际上主席还讲了另外一些话，就是在批评“四人帮”的时候也讲过另外的话，就是说对这些人还是要帮的，为什么帮呢？第一发动文化大革命他们有功，第二和林彪斗争特别是70年的庐山会议他们有功，这两个功还是功不可没的，这个事情我们在这个《毛泽东传》里都写了，跟大家做一个交代。\n\n　　提问：有人说，毛泽东“开国有功，建国有过，文革有罪”，请您评价一下。\n\n　　李捷：这个话讲得不公道！为什么不公道呢？它比较片面。毛泽东建国以后有没有过呢，当然有过了，这是毫无疑问的，而且有些是重大的。《历史决议》讲了，有些是全局性的，“大跃进”是经济建设中的全局失误，“文化大革命”是政治的和整个社会、党和国家的一个劫难，这是全局性的失误，这是毫无疑问的。但是同时，刚才我也讲了，毛泽东在做这些事情的时候，第一他有他的考虑，他的考虑是从党和国家的角度考虑问题，尽管这些东西后来发生偏差。第二他在很多地方是有功的，是有贡献的，所以对人要具体问题具体分析，而且要公道、公允。我们对林彪、对高岗都尚且如此，对毛泽东更应该这样。所以仅仅说建国以后有过，是有失公允的。“文化大革命”确实是死了很多人，迫害了很多人，最不可原谅就是少奇同志的冤案，毛泽东对此有不可推卸的责任。但是如果说到法律责任，毛泽东负什么样的法律责任的话，我说他是负有一种领导的责任。如果要追究毛泽东迫害人的罪过、罪行的话，还追究不到这个份上，追究不到毛泽东身上，所以这个问题是应该做一个分析的，我是不同意这种简单化的说法的。\n\n　　提问：我觉得李老师的报告通篇贯穿着唯物史观，比如把历史上的事情放到当时的历史环境中去考察，具体问题具体分析，伟人在历史上起到“四两拨千斤”的作用，等等。我非常赞同您的看法。我的问题是，毛泽东一生探求的问题，也就是保证党的性质不变质、不变修的问题，现在是不是已经解决了？\n\n　　李捷：这个问题提得非常好，我也在思考。至少我个人现在是这样认为的，就是我们现在也还没有解决这个问题，还在探讨。现在中央对这个问题很警觉、很重视，在探索，在想怎样解决，但是这个问题并没有解决。这个问题依然还是问号，而不是句号。现在我们党有一个变质的危险，这个变质的危险，用形象的话来说就是，会不会变成一种富人的俱乐部。我这样提可能大家也就明白了，危险主要来自于哪个地方？最令人担忧是哪个地方？还是来自于高层、党的高层领导干部，他们的屁股会不会坐偏了？我们也到了一些地方，发现了过分强调GDP的问题。现在强调发展是硬道理，搞GDP，这是毫无疑问的。那么这里面就有一个问题，有些地方干部跟我们讲：现在我们也没办法，上面层层压指标，省里面到中央说10％的增长率，给我这儿要求可能就是16％。要有这个增长率，每年就要有新的亮点。新的亮点怎么办？现在国有的投资投一个垮一个，我怎么办？就得依靠纳税大户，实际上就是大老板。另外，现在社会稳定责任到人，如果我这个地方谁去闹事、上访、告状，马上下来要追究我责任。谁现在是麻烦的制造者？下岗职工、贫苦的农民。这个话很难听，但是他们讲的确实是实话。这是一个细胞，这是我们执政的一个单元。久而久之，如果这个单元放大以后成为一个整体，就有一个我们究竟代表谁、我们究竟屁股坐在谁那一边的问题。\n\n　　现在中央提出科学发展观、以人为本等等，可能都想平衡这个问题。但是，任何平衡不可能走在一极，比如索性先不管发展如何，把用来要发展的钱索性先救济穷人，那也是一条路。但问题是，如果这样的话，社会扩大再生产的资金从哪里来？发展速度从哪里来？而且，大家都知道，我们现在面临着整个世界的竞争，不要说我们不发展了，就是发展慢了，也会在世界上的竞争中败下来，最后的失败还是社会主义的失败。这个也是血的东西。所以我想，现在中央和各级领导都有一个兼顾发展和始终站在老百姓一边，兼顾决断的高度和发展人民民主的两难课题，做到熊掌和鱼兼得。这恐怕不是烹调大师，而是烹调艺术家才能做到的事情。这是比较难的，但又是非常重要的。\n\n　　提问：40年代的时候，共产党的新闻媒体都非常强调民主、自由，现在反而不如那个时候，请问这是什么原因？是不是因为共产党的性质发生了改变？我们如何加强党在这方面的领导？或者能否把这个方面放开，实行西方式的新闻出版自由？\n\n　　李捷：这个问题实际上毛泽东在进城之前已经讲到过。他说，我们现在是争民主，反迫害、反饥饿，反独裁。可能有一天我们进了城，到了现在国民党这个位置以后，到那个时候说不定老百姓也上街对着我们，跟我们要民主，要饭吃。他那个预言不幸言中。到了1956年，大家都觉得这是凯歌行进的时期，建立了社会主义制度，而且“一五”计划实施得非常顺利。但实际上，到了1956年的时候，群众闹事非常多。按照当时的统计，工人罢工就是1000多起，学生罢课是2000多起。当时很多领导干部就认为这背后有黑手，要抓阶级敌人。毛泽东提出来正确处理人民内部矛盾的问题，原因就在这儿。他认为，现在时代变了，情况变了，我们成了执政党，我们面对的大量问题，包括罢工、罢课问题，大量反映的都是人民内部矛盾，是反映了人民群众和我们政权内部少数人脱离群众、官僚主义作风之间的矛盾。从更深层的意义上来讲，反映了经济基础和上层建筑、生产力和生产关系既适应又不适应的矛盾。他认为，应该从这个地方作为突破口，来改进我们党和国家的政治生活，推进人民民主。所以他当时有一个名言，叫做“要利用群众闹事，来解决我们政府内部存在的官僚主义作风”。第一他不赞成，第二他不怕，而且还要利用它来解决我们的问题。但现在这句话我们一般都不用了。为什么？跟现在整个思路不一样。换了位以后，就有这样一个问题：当年提出的口号你要兑现，但是你不能马上兑现。不仅有些口号不能马上兑现，而且还会有新的矛盾产生。原来你可以利用新产生的矛盾推翻现政权，但现在你就是现政权，你逃也逃不掉。这个问题是比较难的。现在还没有发展到你刚才讲的执政党变了性质的程度，但是我们现在是执政党，所以很多矛头对着我们。对着我们的这些矛头不能简单地用专政工具的办法、镇压的办法，不能简单地用国家的暴力机器解决这些问题，大量还要通过人民民主的办法，解决人民内部矛盾。从这个意义上来说，人民内部矛盾的问题也是现在一个永恒的课题。而这个课题的解决与否，和我们的长期执政地位这个永恒课题是紧密地联系在一起的。谢谢！\n\n　　主持人：非常感谢李捷同志。李捷同志是领导干部，但是他以一个学者的坦诚和我们做了坦率而深入的交流。今天有机会请李捷同志就他在长期研究特别是撰写《毛传》九年当中的一些体会和大家进行交流，我们都获益匪浅。历史像一把折扇逐渐展开，也许离得越远看得越清。正像李捷同志所讲的，实践没有停止，认识也不会停止，非常希望以后还有更多的机会向李捷同志请教，再做进一步的交流。\n\n　　李捷：非常感谢大家，也祝大家新年愉快。\n\n　　主持人：报告会到此结束，谢谢各位的光临。","source":"_posts/对毛泽东新中国探索的再思考.md","raw":"---\ntitle: 对毛泽东新中国探索的再思考\n---\n\n#### **对毛泽东新中国探索的再思考**\n\n——中共中央文献研究室副主任李捷在中国社会科学院报告速记稿\n\n李捷\n\n　　主持人：同志们，今天我们院马列所、新闻所、青年中心和政治学所，荣幸地邀请到了中央文献研究副主任、《毛泽东传》（1949-1976）的主要作者之一的李捷同志，给我们做“对毛泽东新中国探索的再思考”的学术报告。我们对李捷同志的到来表示欢迎。\n\n　　去年毛主席诞辰110周年的时候，一部反映中国当代历史，反映几代人的生活和经历的重要历史著作《毛泽东传》(1949－1976)诞生了。这是一部鸿篇巨制，是对我们党的历史、对我们国家的历史、对我们伟大领袖毛主席后半生的一个重要总结，也代表了我们党对这段历史的看法。我有幸，在这之后结识了李捷同志。作为一个学者、一个历史学家，能够参与这样的著作，应该说是一生的幸事。作为一个学者（在座的都是学者或年轻的学生），都希望自己能够留下传世之作，我想李捷同志已经是达到这样境界了，很了不起。去年我们也曾邀请李捷同志来，但是当时他太忙了。今年临近岁末，在毛主席诞辰111周年前夕，我们把李捷同志请来，我想他的报告一定会对我们大有教益。下面我们就把时间交给李捷同志。\n\n　　李捷：首先我非常感谢房宁教授，也感谢邀请我的各个所。在这样一个时间，年终岁末，各种事情都要做个了结的时候，能占用大家的时间，跟大家做一个交流，很难得。\n\n　　我今天交流的题目是“对毛泽东新中国探索的再思考”。在讲这个题目之前，我简要地介绍一下我自己的学术背景。我是1978年上的大学，在这之前当过兵，当过工人。1978年上大学，但是那个时候我没有能够考上第一批78年录取的，当时北京市委书记林乎加做了一个决定，将当年高考300分以上的同学都统统地网罗一遍，成立分校，我进入北师大的第一分校，在东大桥那个地方，读历史系。四年毕业以后，1983－1986年是在中央党校读的党史专业的研究生。我原来有一个误区，以为党史和历史这两个学科是一回事，只是时间段的不同。到了那儿学习，我才发现，这是两个不同的学科，包括学术的方法和理念都不同，但不管怎么样，它也是研究历史。这两个结合对我后来的成长有了很大的帮助。毕业以后就到了文献研究室，分在毛泽东研究组，一直干到现在。\n\n　　《毛泽东传》是在主席诞辰100周年以后1994年启动的一个项目。当时，文献研究室的领导把建国以后的《毛泽东传》这部分交给了我和高文谦。他现在在美国，写过《晚年周恩来》。当时的想法不是现在这样的《毛泽东传》，而是一个合传，就是把建国前和建国后一起写下来。但是，建国后的部分难度非常大，当时是按照评传来写的，评传是以评要为主，因为既然是代表中央，是一种正传，我们是按照传统的路子来写这个传记的，评传的写法。很多本著名传记，如《拿破仑传》、《俾斯麦传》、《罗斯福传》都是这样的写法，也是国际上通行的写法。但按这种写法，我们试了两三年以后发现不行，这个路子行不通。这时候高文谦基本上不怎么搞了，他是借着机会搞了很多的档案材料，后来借着探亲的机会跑了。实际上《毛泽东传》他一个字都没写，“文革”部分的任务就落在另外一个人身上，就是我的同事安建设，我们俩就共同探索这条路。到了1996年的时候（整个《毛泽东传》一共前前后后九年的时间）写不下去了，于是我们决定完全抛开评传的写法，转而从历史材料里面来见真实，用材料来说话，实际上采取了孔子开创的春秋笔法，述而不作。实际上，我体会述不可能不作，但是这个作要体现在述里面，实际上这也是《史记》的笔法、太史公的笔法。这样写下来以后得到大家的认可，说明这个传记还是经得起大家的认可的。这样一来，后传与前传就彻底脱钩了。前传大家都看到过，1996年出版的，是金冲及同志主持来撰写的，这个路子基本还是评传的路子，但是比评传往前迈了一步。这个传到了去年才写出来，在这个过程中，我们室的好多领导都在催。我觉得既然要出一个经得起历史检验的东西，就要耐得住性子。在这个过程中，我们单位有一个得天独厚的条件，就是大量档案材料都有复印件在我们单位（原件都在中央档案馆），既然我们占据着这样一个得天独厚的条件，那就有一个义不容辞的责任、历史的责任，就要把历史原原本本地写出来。当然，坦率地讲，我们不可能把所有的材料都写进去，因为：第一受篇幅的限制，第二受现在各种各样的情况的限制，有些东西不太好写。不好写的原因主要还不是因为说出来以后有损于毛泽东，而是说对现在有些人不利，这还是有一些禁区的。但是，我们保证一条：凡是写出来的东西都是真实的。我觉得能够做到这一点，将来过了几百年以后，那个时候恐怕档案能都开放了，人们拿着这本书对着档案看了，说这些人还可以，还能够把历史的档案原原本本地表现出来，我们就心满意足了。\n\n　　今天我想跟大家交流的主要是我自己这些年写《毛泽东传》的一些体会。这些年，我在国际上参加了一些国际上的学术研讨会，包括去年12月初在波士顿哈佛大学费正清中心召开的研讨会，题目是《再谈毛泽东》。这些年，有各式各样的说法，有赞扬毛泽东的，也有反对毛泽东的，也有根本上包括他的人格都否定的，各式各样的议论，所以我想结合这种情况，谈一点自己的体会。我觉得如果概括起来讲，毛泽东在建国以后的探索，主要是做了三件事情：\n\n　　第一件事情就是搞建设。有的人讲，毛泽东根本不懂建设，而且兴趣也不在建设，没有认认真真搞过建设。这是一种误解，毛泽东在建国以后用相当大的精力搞阶级斗争，这是不假，但是他也用了相当大的精力搞建设。但是这种建设不是一般性的建设，而是有一个主题，就是我们说的现代化的建设。从严格意义上讲，按照现在现代化的理论来讲，实际上毛泽东所探索的主要是初级工业化这个阶段的建设，他是想通过社会主义这样一种制度实现中国的初级的工业化。毛泽东经常将现代化和工业化经常混用，他没有严格地区分两者的界限。\n\n　　第二件事情就是在外交上谋求中国的大国地位。中国的大国地位在近代以来失落了，在第二次世界大战结束以后，尽管中国进入了安理会，但是中国实际上没有自己的大国地位。\n\n　　第三件事情和后来“文化大革命”的失误是有关系的，就是怎么巩固中国共产党长期执政的地位，当时的话叫“江山不能变色”。\n\n　　他做了这么三件事。这三件事，我就一一地介绍一下情况，谈一下我自己的认识。\n\n　　一、关于现代化建设。\n\n　　在现代化建设中，他做了很多很多的事情，具体的过程我就不去多说了。如果说起来的话，很多了，包括“一五建设”，后来提出的“十大关系”，初步总结我们建国以来的工业化的经验，到《关于正确处理人民内部矛盾的问题》提出来的中国自己的工业化的道路，接着发动“大跃进”等等，到了六十年代中期又搞“三线”建设。这里有一条线，一直到上个世纪七十年代，这都很清楚了。我想概括地讲，他在建设中，实际上做了三个重要的选择，对我们共和国的发展，一直到现在都产生很大的影响。\n\n　　第一个选择，是制度方面的选择。工业化有很多很多的道路，有很多的制度选择，包括资本主义的制度选择，包括社会主义像苏联那样的制度选择。在当时来说，这种制度选择对毛泽东来说是天经地义的事，作为那一代的共产党员，他必然毫不犹豫地选择社会主义的制度，通过社会主义的制度安排，来实现现代化，实现工业化。这是中国共产党义不容辞的责任，当时这是一个不容辩疑的真理。这个选择从中国共产党诞生之日起，从毛泽东选择马克思主义信仰开始，对于这一代人来说，这是不成问题的问题。\n\n　　在制度选择里面，还有一个问题。在当时来说，选择了社会主义制度，选择了社会主义的道路，实际上就是选择苏联道路。在当时来说，就是在他最初进行选择的时候，在1949年新中国成立以后，当是有一句很著名的话“苏联的今天就是我们的明天”。当时是这么一个状况，所以那个时候，我们在现实中确实很难避免这样的选择，因为我们没有经验，我们没有起家的本领，我们更没有先进的技术，在当时先进的技术西方对我们是封锁的，所以我们只能取之于苏联为首社会主义的阵营。同时，与我们对社会主义的认识也是有关的。当时认为，要搞社会主义就是要走苏联的道路，就像当年在探索出井冈山道路之前，我们认为中国既然要搞无产阶级革命，就要走十月革命的道路。所以，在那个时候，包括“一五计划”的制定，都是在苏联的帮助之下。像李富春这些领导人都是身经百战的，但是到了苏联以后甘当小学生，从ABC学起，请苏联的计划经济专家来给他们讲课。我们的“一五规划”，实际上在苏共政治局里面是经过了多次的讨论。\n\n　　客观地讲，当时，中苏关系处在一个蜜月时期，苏联对我们的帮助是巨大的，这个对于我们“一五计划”的顺利实施起了非常重要的作用。这个作用也不能抹煞，而且这里面很有意思的、也值得研究的是，我们第一个五年计划的制定形成了厚厚的一本书，这本书实际上包含了苏共中央和苏联的搞计划经济的人，对于苏联长期以来计划经济的经验，特别是它失误的地方有一种反思，而这种反思实际上体现在“一五计划”里面。这些方面很值得研究，这些材料现在在俄罗斯的档案里面都有，是不难找到的。当时，他们确实对我们有一些劝告，包括指标上。他们当时说，我们过去制定的指标太高，你们制定指标的时候保守一点，最后能超额完成，这样能鼓舞士气，而且整个的国民经济在计划里面容易平衡，过去我们老搞高指标，后来没办法只好一降再降。但是遗憾的是，我们后来到了“二五时期”，受到“大跃进”的影响，把苏联老大哥教给我们的这个经验给忘了。\n\n　　我们常说，我们现在转轨变型是从计划经济体制变成市场经济体制。实际上，中国根本就没有典型意义的计划经济体制，我们的计划经济体制实际上有一点“四不像”。但是也正因为“四不像”，我们在转轨变型的时候比前苏联要顺当得多。破绽多，漏洞多，模式不成型，制度不成型，反过来要搞改革时突破口就多，借助的力量就多，这个是相辅相成的。如果做一个简单的类比的话，跟西方相比，我们的奴隶制度不典型，所以我们转到封建制度很容易。而在封建时期，我们形成了洋洋大观、潇潇洒洒的非常典型的封建制度（我个人认为，中国的封建制度是封建制度的典型，西欧不是典型），但这也就意味着从封建制度转成资本主义制度是相当困难的。\n\n　　经过了这个探索以后，毛泽东在1956年，对整个的情况有一个反思。我们在写《毛泽东传》的时候，特别注意对毛泽东心理状态的观察。我们通过很多的材料来引证，发现毛泽东自1949年开国大典后，每次走下天安门城楼，他并不高兴。很多人反映，那几年他有点郁郁不欢。我猜想其中一个原因是担子重，未知数多，这是一个方面。而最重要的方面还是毛泽东自己讲的，很长一段时间我们是当了苏联人的奴隶，跟着他们的屁股后面走，什么都学苏联的，苏联得了感冒，我们也跟着打嚏喷。所以他说，到了1956年“十大关系”出来以后，心情才开始高兴起来。从这个地方开始，中国要走一条自己的道路了。毛泽东意识到中国不能照搬苏联的模式，但要走自己的道路，必然要付出巨大的代价。任何一个决策没有代价是不可能的。而且，你的目标取向越高，付出的代价必然也越大，它的风险也越大，这是成正比的。我们后来在现代化、工业化这条道路上跌了很多的跤。\n\n　　但是有一点，我们在《毛泽东传》已经反映了，毛泽东还是汲取了“大跃进”失误的教训的。尽管在庐山会议上彭老总给他上万言书，他看了以后火冒三丈。但是也有个过程，刚开始他不以为然，后来几个大区书记去跟他说，现在有一个跟谁的旗的问题，你再不说话的话，人家就跟彭老总的旗跑了，这个时候毛泽东重视了起来，他一晚上睡不着觉，在不冷静的情况下讲了关键性的话，这个历史教训是值得吸取的。\n\n　　在建国前，毛泽东讲了一个经验之谈。在井冈山的时候，毛泽东的性情是非常暴躁的，他是性情中人，也是一个不拘小节的人，一个大手笔的人。他的弟弟毛泽覃有一次因为一个事情和他争论了起来。（毛泽覃当时也在红四军，也在井冈山。当听说朱老总的部队在韶山附近活动之后，主席先是派了毛泽覃去，后来派了何长工。他的弟弟后来牺牲了。）毛泽东当时有点说不过他。就急了，就要动手打他。毛泽覃就说：“这是共产党，不是咱们毛家的宗祠。”主席说，他这一句话把我震醒了。毛泽东从一个具有开拓精神的地方领导人成长为一个全党公认的领袖，跟他后天的修养、磨炼是分不开的。他后来也经常讲，往往做决策的时候听到不同的意见，脑子一热就要发脾气，这时候最好不要发作，睡一觉，到第二天早晨什么都好了。这是他的经验之谈，但是这一次他睡了一觉之后，反而是火冒三丈，在一个不冷静的情况下，打破了两件事、延安整风时定的规矩：一是就事论事，不算历史旧帐；二是只对事不对人。就毛泽东一生来说，他在大多数情况下确实是这样来做的，宽大为怀，对很多的干部都是这样的，胸襟是像海一样的。在他看来，这次对彭老总的事情不是一般的小事情，是大事，既对事又对人，老帐新帐一起算。这个口子一开，坏了，所以《历史决议》上讲庐山会议破坏了党内正常的民主生活。\n\n　　但是，庐山会议以后，毛泽东也在冷静地思考。到了1963年的时候，要制定第三个五年计划，当时计委的同志脑子很热，定了很多的高指标。主席就把李富春他们叫来，对他们说，现在我们一定要吸取过去的教训，定指标的时候千万不要以我们这些人的寿命来计算时间。这句话很了不起，他是痛定思痛。所以，1965年他让彭老总到四川大三线当副总指挥的时候跟彭老总说，也许将来历史证明你是对的，这里面就有些反思的表现。但是话说回来，他的反思也不是彻底的，也有反反复复，跟我们正常人一样的，在这方面我们不能苛求于他。\n\n　　在制度方面的选择，尽管付出了代价，但是基本上还是成功的。到了七十年代中期的时候，我们建成了一个独立自主的、相对比较完整的工业体系和国民经济体系。我们基本上什么都可以造，从什么都不能造到基本上都可以造。当然，什么事情有利必有弊。从历史的延续性来看，当时比较强调独立自主，为什么？因为我们是从半殖民地半封建的经济体系，什么都仰仗于西方发达国家、受到西方发达国家不平等的经济盘剥的依附性经济，走到一种独立的国民经济体系。在此过程中强调独立自主有其合理性，也是符合国家的利益的。至于说把这个问题强调到了极端，在我们已经建成了一个独立自主的国民经济体系以后，完全跟国外的经济发展、经济联系完全脱钩，闭关锁国，闭关自守，这也是错误的。对这个问题要加以分析。从理论上来说，我们意识到“文化大革命”的一些错误做法并纠正它，这是毫无疑问是对的，由此产生了改革开放这样一条路线，这是正确的。但是另一方面，如果从历史的长河来看，这种发展有它的阶段性，也就是：只有你建立了一个独立自主的工业体系和国民经济体系以后，你才有可能在自己国家独立主权的情况下，去向世界敞开国门，去平等地、互利地打交道。没有这个基础不行，固守这个基础也不行。这个问题要做一种辩证的思考。\n\n　　第二就是路径的选择。制度的选择之后有一个路径的选择。这个路径的选择，我指的是一种比较低层面的路径选择，主要是指农轻重之间的比例关系。要搞初级的工业化，这个时候工业在创始阶段，这笔资金不可能从工业内部、第二产业内部产生，当时更谈不上第三产业，那么资金的来源，也就是原始积累的资金来源只能是有几种途径：要么就像西方一样通过殖民扩张来取得；要么就是牺牲农民的利益，像当时英国的“圈地运动”这样一种东西，还有一种就是像苏联一样来搞高积累，也是带有牺牲农民的色彩。\n\n　　作为中国来说，毛泽东在路径的选择上是很艰难的，怎么艰难呢？你仔细看他的《关于正确处理人民内部矛盾的问题》里面，如果从表面的形式逻辑来看，你会发现有一个矛盾，他一边说重工业的优先发展，这是搞工业化的一个客观规律。你不搞重装备怎么能建立你的工业基础啊？不可能的。但另一方面他又讲，一定要农业优先，按照农轻重的比例关系来安排生产。从形式逻辑来说，你看到它是一种矛盾，这里面就反映了一个客观的事实，就是说在初始工业化阶段必然要优先发展重工业，这是一个基本的事实。优先发展重工业这部分的启动资金，我们称之为原始积累的这些资金，从哪里来？不可能从工业本身解决，主要的不能靠工业本身来解决。当然轻工业的积累可以解决一部分，但是不能解决主要的部分。而且社会主义国家不可能去对外掠夺，中国的国情也不允许，中国的历史传统、中国的国情不允许这样做。只有一种办法就是要从第一产业，从农村经济、从农业生产取得一部分优先发展重工业的资金积累。这是一个方面。另一方面，毛泽东也看到了，中国是一个农民为主体的大国，无粮国家是不稳定的，农民不稳定就会起来造反，政权就会不稳定，所以要发展农民经济、改善农民的生活、发展农业。这就是毛泽东面临的一个两难的课题。\n\n　　在这样的情况下，他就在《论十大关系》中提出了一个辩证的思维逻辑，他试图把从形式逻辑来看是矛盾的东西，通过辩证逻辑、辩证思维统一起来。他讲道，你要想多搞一点重工业吗？那你就要优先发展轻工业，要优先发展农业，要多往这里投一些资，投资的目的是什么呢？投资的目的还是为了从里面取得更高的收益和积累，同时保持社会的稳定。他就是这样把一个矛盾的东西试图通过这样一个理论统一起来。毛泽东那个时代在这个问题上基本是两头兼顾的，做得还是比较好的。我们现在讲科学的发展观和五个统筹，把统筹兼顾的思想、统筹的思想往前推，最后必然要提到《关于正确处理人民内部矛盾的问题》这篇文章。\n\n　　应该说毛泽东在这个问题上不愧为一个解决矛盾的大师，一个化解矛盾的大师。当然，化解矛盾并不等于说这个矛盾不存在，还是存在的。这个时期，也就是整个毛泽东的时代、完成初级工业化的时代，实际上是跟我们现在叫做反哺农业相反的一个时代，就是说要从农业中取得积累，支持工业发展的积累。但是要取得积累，必须在这个积累的过程中给农民、农业相当多的投入，要给他一定的返还，所以他把这个取和予这对矛盾统一起来，取的方面要重一些，予的方面要小一些。小一些，但是也要考虑到农业、农村、农民的最大承受能力，有一个临界点，有一个度。这个度，总的来说，在毛泽东时代他是把握得比较好的，但是不是说他这个思想是贯穿始终的。比如说“大跃进”的时候，他受到一些表象的误导，做了一个错误的判断，他以为当时的农民思想比工人还先进。那个时候他讲，现在谁的思想最先进？我看不是工人阶级，而是农民，农民可以发扬共产主义的风格，最后导致剥夺农民。从第一次郑州会议开始，毛泽东用了两年多的时间，一直在解决这个问题。两年多以后，特别是到了三年困难时期，又继续解决这个问题，到1963年重新修订（1961年初步制定）的时候才基本把这个问题解决了。这个以后一直到文化大革命，他再也没有犯这样一个历史性的错误，这个教训还是汲取了。\n\n　　在我国现代化的过程中（我们在70年代中期完成了初级工业化以后，后来进入到改革开放时期，提出现在这种全面的、全方位的现代化），实际上有一种历史的惯性，就是我们长期习惯了这种取的这一手比较重、予的这一手比较轻这样一种历史的惯性。到了现在，在实现初级工业化阶段以后，我们应该反哺农业了，不是再从农业里面取得原始积累，而应该从第二产业、第三产业取得一些现代化的后劲和动力，也包括借助一些国外的投资，解决国内发展的资金问题。由于这种历史的惯性作用，到现在为止我们仍然没有摆脱这个困境。就是现在的三农问题实际上是因为我们从这边取的太多，予的太少，没有真正形成一种反哺农业的这样一种良性循环的模式。在联产承包责任制开始实行的那些年，那是农民日子最好的时候。那时候实际上给农民一种休养生息，但是以后就不行了。这里面也跟我们政治体制改革有关系，政治体制改革滞后，我们的基层政权很多很多的行政负担不但没有减少，而且加重，这种行政的负担很多的最后都转嫁到农民身上。\n\n　　现在，中央对这个问题相当重视。最近有几个省份已经宣布取消了农业税。但从内部来看，我一直觉得这个问题将来也会有副作用的。从农民来说，你要加强他的国家观念。其实，农民几千年来交粮纳税，这是天经地义的事，关键是轻徭薄赋。而且在交完了以后，为了培养他的国家意识，应该是通过各种渠道，不要层层盘剥、层层截留，最后返还到农民身上，这样就比较好。但现在因为返还实现不了，只能是完全免除。完全免除，在农民的国家意识这方面可能会有一些副作用，但是今后的人可能更聪明，会有更好的办法。\n\n　　第三个选择就是外部关系的选择。这个问题实际上我刚才在讲制度选择的时候已经讲到了，这就是：就对外关系来说，我们要自力更生、独立自主地实现现代化。毛泽东的考虑是从历史延伸下来的，因为我们原来是半殖民、半封建这种依附性的经济，要独立起来。同时，客观上也有一个问题，就是西方这些国家对我们不仅是封锁，而且还制裁，希望把我们扼杀在摇篮里，希望我们早晚有一天要完蛋。这个问题因为前面已经都讲到了，这里就不多说了。\n\n　　二、关于争取大国地位。\n\n　　毛泽东的第二件事情就是争取中国的大国地位。这一方面毛泽东对中国来说是功不可没，我们到现在还在享受着毛泽东当年为我们奠定中国大国地位基础的好处，受益匪浅，到现在为止还是这样。\n　　关于争取中国的大国地位，有必要实事求是地还原到中国原来的历史情况，我把这个称作历史还原法。为什么呢？我们现在很多时候都用现在的事来判断当年的是与非，用今天的观点来判断当年。很多的同志、很多学者在研究的时候，他也力图不要用现在的观念来判断当年的事与非，力图客观一点，但是由于他缺少一种必要的历史还原，缺少对当年这些领导人每天生活其中并与之打交道的这个世界的基本特征的把握，所以往往自觉不自觉地用今天的是和非来评判当年的是与非。所以，我是一直认为这个历史还原法是非常重要的。在我们研究一个问题、研究一个概念的时候，一定要注意运用这样一种方法。\n\n　　如果还原到当年，就是50年代之前的话，当时第二次世界大战刚刚结束，世界上有两个基本特征。首先，就是人们普遍担心第三次世界大战爆发。本来，在十九世纪末，很多的经济学家、社会学家包括政治学家对二十世纪人类的进步充满了一种很好的憧憬、美好的憧憬，信心很足，很看好。结果没想到进入二十世纪以后，在半个世纪之内，人类连续发生了两次世界大战，而且整个的经济特别是资本主义经济在1929年陷入了一个空前的危机，出现了一种社会、政治的危机，而且这种危机对全球、对整个世界，除了一些不发达的地方、很闭塞的地方，都产生了冲击。在这样一个情况下，在第二次世界大战结束以后，大家普遍关心的问题就是，第二次世界大战以后这个和平的局面究竟能维持多久？第三次世界大战什么时候会爆发？可不可以避免？这是当时人类共同的一个问题，不是毛泽东个人面临的问题，包括斯大林、罗斯福等等，都面临着同样的问题。\n\n　　为了要解决这个问题，就出现了第二个基本特征，就是罗斯福、丘吉尔和斯大林在一起通过雅尔塔会议，也通过这之前一系列的国际性会议，确立了一个两极格局，当然还有一些其它的大国，初步确定了苏美的两极格局。两极格局对于所有的国家，无论你是大国，小国也好，在寻求国家独立的时候都是不能不考虑的。\n　　我为什么要讲这个背景呢？这就跟毛泽东为争取中国的大国地位所做的第一件大事是紧密相关的，这件大事就是现在经常有争论的“一边倒”政策。\n\n　　在当时来说，作为一个新独立的中国，尽管它是一个大国，尽管它过去曾经在世界上有过辉煌的历史，但是毕竟这个时候是一个积贫积弱、刚刚得到独立的国家，况且还有一个敌对的政权在台湾，还占据着在联合国的合法席位。这个时候中国要取得国际上的承认，唯一一个现实的选择就是要在这两大阵营选择一个。当时对于要不要实行“一边倒”，在民主党派之间是有过争论的，有过议论的，而且这些人公推张治中向毛泽东进言。毛泽东跟他讲，我们不能搞在美、苏两边骑墙的政策，只能是“一边倒”。在这个“一边倒”的过程中，毛泽东同样面临着一个两难的选择，一方面我们要倒向苏联这一边，这是一个很现实的选择；同时我们又不能够成为苏联的小兄弟似的卫星国。怎么办？这就是毛泽东在第一次访苏的时候很艰难的一场斗争，既不能跟斯大林翻脸，但是又要结束苏联在中国的特权地位。整个的过程大家都非常清楚了，这都已经成为定论的东西了，包括俄罗斯的档案都已经公布出来了，这都是很清楚的，我就不多说了。这里我提供一个细节，实际上当时要订立中苏友好同盟互助条约，包括要收回旅顺这些港口，还包括当时我们曾经想过把外蒙古收过来，这些都在民主党派内部通报过。主席的第一次访苏都事先通报过，都征求过他们的意见，但他们都是跟共产党站在一边的，而且大家都认为毛泽东如果去了以后，把这几个问题解决了，那太好了，这是中国共产党对中华民族的一个伟大贡献。所以，在这样一个情况下，毛泽东第一次访苏可以说是只能成功，不能失败，达不到目的回来无颜见江东父老乡亲。这就是毛泽东在苏联软磨硬泡呆了两个多月之久的原因。弄得斯大林最后没招，只好适当地做一些妥协，当然我们也妥协。任何一个国际的谈判，任何一个国际条约、同盟的签订，没有双方的妥协是不可能的。现在我们把这种双方的妥协叫做双赢。这个问题如果放在当时、当地的特定背景下，我们就可以比较好看出这个决策的得失。\n\n　　第二个重要的事情就是决策抗美援朝。其实，抗美援朝大家也都知道，抗美援朝的是是非非、长长短短，现在大家都在说，见仁见智。抗美援朝有一个决策的过程，既是一个国内决策的过程；同时，这种国内决策背后也可以看到中、美、苏三国领导人智力的角斗。为什么这么说呢？当时，美国和苏联在国际战略上都没有局部战争的概念。在他们的眼里，在朝鲜半岛上打的这场仗，如果最后扩大为苏联和美国之间都出兵了，那就是第三次世界大战的爆发。苏联是这样认为，美国也是这样认为，这就是它们当时的一个国际战略的基本点，而他们双方都在力图避免由于这个地方引起两国的对垒，引起新的世界大战。所以在6月25日以后，美国人宣布要干涉朝鲜内政的时候，当时要开安理会，要成立联合国军，美国人有很多很多的准备。但是，当美国代表一进门后，看到苏联席位上马立克缺席，心里就美了。这表明苏联无意和美国人在朝鲜半岛问题摊牌，全面对抗，他心里就有底了。在这样的情况下，美国人以为可以不顾中国人的警告，以为中国人说话根本无足轻重，可以大胆地越过三八线。对于毛泽东来说，他第一招棋就放在阻止美国人越过三八线。所以在9月和10月毛泽东、周恩来连续三次发表声明，如果美军越过三八线的话，中国人绝对不会坐视不救。他们想控制这个局面，但控制不住，在这样一个情况下，中国最后没办法了，只能出兵了。\n\n　　出兵以后，毛泽东在考虑问题的时候有两个基本点：第一个就是要控制朝鲜半岛的局势，控制到什么程度呢？要避免朝鲜半岛问题国际化，局部问题局部解决，这就是后来的局部战争这个概念的由来。实际上是我们中国人通过朝鲜战争教训了美国人，美国人才从这里面得到了局部战争一个概念。第二个基本点是避免朝鲜半岛战争长期化、持久化，因为当时毛泽东认为持久对我们不利，但是这个问题后来有所改变。为什么持久对我们不利呢？主要是考虑我们国内对这场现代化战争的支撑能力，经济上和民心的支撑能力，能支撑多久？正因为有这样一个要求，所以就导致我们在抗美援朝过程中，特别是五次战役表现出了一个特点，就是越打也急，第四次战役和第五次战役，打得就有点没有节奏了，我们损失比较大，最后只能从汉城退守到三八线。在这个时候，即战争经过了一年后，出现了一个新的变化，就是国内的经济不但没有受到战争的影响，反而还受到了促进，经济在上升、在发展，因为民气起来了，包括民主党派、爱国的资本家，大家都起来了，加班加点为国贡献，支援前方、支援战争。不是战争影响了经济建设，而是促进了经济建设，这是毛泽东意想不到的。这对毛泽东后来对建设中一些东西的认识是很有影响的，这是后话。但在当时来说，这是一个非常重要的事情，毛泽东在这个时候就确立了朝鲜战争的方针，叫做“边打、边稳、边建”，“边打”就是朝鲜战争、抗美援朝战争；“边稳”稳定国内的局势，包括镇压反革命，因为当时暗藏在国内的反革命分子认为新的世界大战就要来了，中国共产党必败无疑，台湾马上就要反攻了，蒋介石马上就要反攻了，在这样一种情况下，要稳定国内的形势；“边建”就是搞经济建设。确定的是这样一个方针，也就是说国内的经济支撑能力可以使这个战争持久化，没有问题。\n\n　　与此同时，毛泽东也认识到，三八线实际上就是中美两国经济实力对比、国防实力对比的一个力量平衡线，我们打不过去，他也打不过来。在这样的情况下，毛泽东就向美国发了一个信号说，你愿意打多久，我就打多久。一直打到美国人愿意罢手为止，一直打到美国人愿意在和平谈判的协定上签字为止。在这样的情况下，新任的艾森豪威尔政府就软了。在做出一系列的分析以后，他最后得出结论，朝鲜半岛的战争持久化、长期化对美国不利。整个的战争局面随之有一个很大的转变。\n\n　　刚才也讲到，凡是决策必然要付出巨大的代价，包括中美关系长期的停滞不前，包括台湾受到影响，这都是抗美援朝所付出的代价。但是，抗美援朝的收获也是巨大的。对于当时中国来说，最大的一个“得”是什么呢？其它的还有很多，最重要的一个战略所得，就是在世界上树立起一个负责任的大国形象。这对中国不是句空话。为什么呢？过去中国政府说什么话，第一，没人听。第二，说了白说，没人怕。第三，没人信。你究竟能不能兑现，你说你不会坐视不救，我打了瞧，到你鸭绿江边，我看你敢不敢过来，跟你叫板。所以，这个“得”对于中国来说是非常重要的。所以，到了1954年开日内瓦会议的时候，美国人、英国人都一致地要邀请中国代表团。尽管他不给中国代表团相应的正式的外交礼遇。但是他承认，解决越南问题、朝鲜半岛问题，不能没有中国参加。十几年以后，美国在1964年前后制造了东京湾事件，这个事件实际上是一个战略上的试探。如果中越两方在这个问题上要示弱的话，包括苏联，它就可以派兵越过北纬17度线，扩大战争。在这样一个情况下，中国政府马上做出反应，周恩来总理代表中国政府宣布了三句话：第一句话是，如果美国人胆敢把战争扩大到17度线以北的话，中国的辽阔国土就是越南人民的可靠后方。第二句话，中国人从来不愿意和美国人打仗，但是如果这场战争和美国人打起来，战争没有国界，自己掂量吧。第三句话，中国人说话从来是算数的。这句话是一个外交辞令，实际上是在提醒美国人，你别忘了朝鲜战争。后来我听美国的学者讲，当时美国的五角大楼，就因为中国政府这三句话一周彻夜未眠。五角大楼忙活起来，赶紧去分析，包括调动它各种各样的侦查系统，最后得出结论，中国人说这几句话是要动真的。一直到1973年巴黎和约（越南问题的巴黎和约）签订为止，它从来不敢派一个兵越过17度线，它只敢狂轰滥炸。它不敢出兵，这对保证中国的国家安全，这个棋子是非常重要的。\n\n　　一直到现在，我们还在受益无穷。现在我们中国政府为什么说话还有信用？人家还怕？一般的声明，美国人、台湾人不怕。到了真正叫板的时候，说一句狠话、硬话，他还是怕的。为什么？跟这个教训有关系。现在美国人的心理状态是觉得，一般情况下，你不会像当年这些领导人这么干的。但是什么事情都有一个万一，万一最后逼急了，最后干一下，他还是很害怕。所以，现在外交部发言人讲，我们要启动国家的立法程序搞反对分裂国家法，这一下子现在美国人很惊惶。所以，我说抗美援朝对于我们今天还是受益无穷的一件事。\n\n　　第三是中苏论战，这是比较复杂的事情。我原来写过一些文章，做过一些分析。总的来说，中苏论战，就像小平讲的，双方都说了很多的大话、空话、套话。而且最后形成的一些理论观点，特别是“九评”里面形成的一些过“左”的、阶级斗争扩大化的一些理论观点，对后来的“文化大革命”的实践是非常有影响的。我们也为此付出了一些沉重的代价。但是，中苏论战有一条，没有中苏论战的话，中国不可能有今天独立自主的大国地位。我记得，90年代初期，在我们文献室的一次内部研讨会上，大家向胡绳同志提了一个问题，就是中国为什么没有走苏东的道路，因为当时苏联解体，大家都在考虑这个问题，而且也在担心中国会不会成为第二个苏东。当时胡绳同志讲了两点：一点就是《论十大关系》的发表。中国开始走自己的道路，而没有向东欧这些国家，把自己的经济命脉都系在苏联的老大哥身上，那就不是独立自主了。另外一个就是我们从中苏论战得到了一个实惠，就是我们从苏联老大哥的阵营里真正地脱出身来，彻底出来了。这样才树立了一个独立自主的大国的形象。而且我们在发展中国家、第三世界里面找到了自己的战略支撑点。\n\n　　在这一方面，我写过一篇文章，1998年我到美国哈佛的费正清研究中心参加了一个研讨会，会议上我递交的一篇论文就是这个，题目是《毛泽东向两极格局的挑战》。这篇论文，他们包括施拉姆教授看了以后，觉得有一定的道理，有一定的启发作用。这篇文章他们翻译成英文，收录到学术论文集里面去。但是题目他们换了，他们觉得这个题目非常刺激，很难接受。\n\n　　第四个是成功地研制了原子弹。这个我不多说了，这里就补充一个信息：毛泽东在1955年做出搞原子弹的决策的时候讲了一句话，“我们也要搞一点原子弹。”这句话看来很不经意地从毛泽东嘴里说出，但是事后想想很有道理。去年年初，我曾经跟咱们核物理工程研究院的前任院长，也是一个院士，见过一次面。他当时问了我一个问题，为什么毛泽东当年说搞一点原子弹？我说，对不起，这个问题我没有研究过，我只知道他说过这句话，但是他到底怎么说，我也没太在意。他说，这个“一点”特别有学问。为什么呢？要搞，不搞你没有大国地位。而且要搞就要早搞，像模像样地搞，搞晚了人家不让你搞了，制裁你，你就搞不成了。但是不能多搞，搞一点就行。多搞了，就跟苏联一样，要上美国人的当，被军备竞赛把你拖垮。这是中国的国力绝对不允许的。这个决策用今天的话来说有点“杀手锏”的意味，但是，原子弹对中国的大国地位来说远比今天的“杀手锏”更重要。原子弹爆炸以后，尼克松马上就改变了态度。尼克松当时还不是总统，他要竞选总统，他讲了一点，1965年他就讲过，再也不能够让中国逍遥在联合国等等国际机构之外，不能让它为所欲为了。我们要把它套回到国际组织里面去，让它成为像苏联一样负责任的大国。当然，他所说的“负责任”的含义跟我们所说的“负责任”是两码事。从这个来看，这件事情对于中美关系的正常化也是非常重要的。\n\n　　我想，我们和苏联决裂，真正成为一个独立自主的国家，不再依附于苏联的阵营，不再受控于苏联，这一点和我们成为核大国这一点一样，对于后来70年代中美关系正常化是起了非常重要的推动作用的。但现在俄罗斯的特别是俄共的学者（我跟他们有一些交流，打了一些交道）老是说这句话，我们苏联共产党怎么垮台的？很重要的一点，就是你们帮助美国人把我们搞垮的。他们到现在还对此耿耿于怀。\n\n　　第五件事，也是争取中国大国地位最重要的一件事情，就是启动中美关系正常化。这是非常重要的，这个历史过程我不细说了。这里面是非常有戏剧性的，把它拍成一个电影，搬上荧幕，都是非常好看的一个片子。这件事恰好是在“文化大革命”的中后期发生的。所以，我个人觉得，对“文化大革命”的本身的理论和实践的错误和“文化大革命”时期的所作所为，还不能完全等同起来。在“文化大革命”期间，我们还取得了一些重要的成就，这在《历史决议》里面也没有否认。在2002年中央党校和哈佛大学联合举办的国际研讨会上，我提交了题为《从中美关系正常化到中美建交》的论文。在这篇文章中，我详细地探讨了这件事的整个过程。这件事不是孤立的外交事件，内政和外交从来都是紧密联系在一起，我那篇论文试图从这个角度来讲内政和外交之间的互动。中美关系的正常化，得益的不仅仅是大国地位，它对于当时我们国内一系列的工作，包括落实老干部的政策、教育方针的调整等等，对于当时我们重新认识外部世界，都是很有好处、很有帮助的。\n\n　　说到这里，我顺便讲一个个人想法。我总觉得，如果要讲改革开放的历史的话，至少应该追溯到文化大革命的中期，才能够比较清晰地、比较实事求是地看出这一条历史脉搏的跳动。一个伟人在历史关节点所起的决定性的推动作用是必不可少的，但是历史伟人必须要在历史所造就的历史脉搏上跳动，才能够起到推动历史的作用，这就是四两拨千斤的道理。基础的东西还是历史脉搏的跳动。这跟我们在座的，所有的平民老百姓，所有思想界的人物，也包括一些老干部等等，这些人合力的作用是完全分不开的。\n\n　　三、巩固党的长期执政地位\n\n　　最后一个，就是巩固中国共产党的长期执政地位。这应该说是毛泽东在中国共产党执掌全国政权前后长期探索的一个历史性课题，也是在他去世以后留给后来的中国共产党人的跨世纪的历史课题。\n\n　　勾画一下毛泽东这一探索的历史线索是非常重要的，勾画这样一个历史线索，对于正确地认识和评价包括“文化大革命”这样一个被证明是错误的理论和实践都是很有益处的。很多东西被实践证明是错误的东西，对于我们研究者来说，也应该认真地去分析和思考一下，看看其中有没有一些合理的成份，有没有一些值得我们关注的问题。这比起我们很简单地去否定它，去拒绝它，甚至把它脸谱化、简单化要好得多。\n\n　　这一历程的第一步是建国前夕毛泽东提出的“两个务必”。他的第一个直觉就是，我们马上要进城了，我们马上要坐天下了。首先他就考虑了，我们这个天下能不能坐稳？会不会像李自成一样没坐多久，屁股还没有坐热呢，就被老百姓赶出来？当然，李自成是被清军赶出来的。这只是表面现象，实际上李自成一进城，包括进城前的所作所为和进城以后的表现，已经酿成了最后丧失民心的一个基础。所以，毛泽东考虑得更多的是怎么样不脱离群众、不丧失民心的问题。关于这个探讨，实际上毛泽东在1945年跟黄炎培的谈话中已经有一个基本的思想方向。黄炎培当时跟他探讨有名的历史周期律问题，他当时非常肯定的讲，中国共产党绝对不会蹈历史的覆辙。靠什么呢？靠民主。但是，对于民主，不同的阶级有不同的界定、不同的理解。毛泽东对它的理解，从上下文来看，实际上是人民民主，就是靠人民群众对人民政权实行监督，保证它不能腐败。人民民主的思路是对的，问题在于用什么形式、什么途径来实现人民民主。这应该说是毛泽东后来一直的探索，包括在“文化大革命”时期。\n\n　　第二个重要的探索步骤是建国以后多次的整党整风。大家都知道，延安整风是我们党的一个成功整风运动，但是也有后遗症，这就是后期发生的“抢救运动”。延安整风实际上是党的一种自我教育，用现在的话来讲，它是一种关门整风的形式。建国以后刚开始搞的整党，也是关门整风的形式。关门整风，毛泽东后来感觉到总是有局限性。到了57年提出《关于正确处理人民内部矛盾的问题》理论的时候，他就提出了一个发动党外来监督，帮助中国共产党整风。我们现在经常讲党外监督，其实毛泽东当时已经形成了这么一个想法，要将党内的监督和党外的监督结合在一起。发动民主党派，给共产党提意见，帮助共产党整风，这个思路很好，但是不幸的是，后来反右派斗争扩大化了。当时确实有右派言论，这个我们在传记里写了。现在很多人纠缠这么一个问题，当时扣右派帽子的人绝大部分都平反了，只剩下少数的几个人，那说明你这个反右派斗争错了。如果说右派的言论，当时确实是有。我在这里面举了一些具体的例子，比如要在党外成立平反委员会，要清算共产党从整风土改以来的问题，实际上是搞平反冤假错案了，等等。而且有的人讲了，毛泽东是大和尚，可以给小和尚提意见，不能给大和尚提意见，这些东西都是对共产党执政的不满情绪。如果在当时来衡量，还是一种右派言论。但是问题在于，把提这些意见的人划成右派是错误的，因为这些人长期和共产党共事。从方法上来说，右派言论和右派分子不能划等号，不能因为说了些你觉得是大逆不道的话，就扣上右派的帽子，这是不对的。反右派斗争扩大化以后，毛泽东对民主的问题有一个新的认识，这就是大家很清楚的“大民主”的思想，大鸣、大放、大字报、大辩论。实践证明，它是有害的，很容易使运动失控。\n\n　　接着，到了50年代后期有两个重要的事情：一个是庐山会议，前面简单地说了，这里面就不多说了。还有一个就是提出了防止和平演变的思想。这个思想在1959年提出来的时候是正确的。我们现在也还存在这个问题，就是西方敌对势力对我们实施西化和分化的问题。但是，在防止和平演变的时候，我们也要划清一个重要的界限：一个是我们内部的解放思想、实事求是，再探索一条新的改革的道路，这个过程中的种种探索，不能把它简单地和修正主义、右倾思潮划等号，这个问题当时没有完全搞清楚，这是一个教训。但是作为整个的战略来说，它的考虑还是有战略预见的。\n\n　　作为防止和平演变思想进一步的发展，60年代中期就形成了“反修防修”的战略。“反修”就是国际上的中苏论战，“防修”就是国内的“四清”运动，这两个运动实际上是一个战略指导下的两个重要车轮。刚刚我讲到了，对于确立中国的大国地位来说，中苏论战是非常重要的一个步骤。但是，如果就国内的情况来看，中苏论战助长了对国内问题的一些错误的或者说是偏激的判断。比如说，当时对于什么是资本主义复辟的理解，你可以看看“三评”。“九评”里面的“三评”划了一个杠杠，完全是以南斯拉夫的情况为界。究竟符不符合南斯拉夫的实际，这个历史已经有定论了。但是问题在于这个杠杠是用来说明国内的一些情况的，这就把很多界限混淆了。有些界限越过了以后，确实对我们国家的长治久安是很不利的。但是也有些现象又属于探索之中、改革之中的问题，不能够简单地下定论，但在这里却被混淆了。最后，形成了一种重要的假设：要警惕中央出修正主义。这个假设一出以后，就容易混淆现实的危险和长远的危险。从长远的危险来说，毫无疑问，要警惕内部出现一些对党和国家不忠的人，一些异己分子。从这个意义来说，这个假设是有其合理因素的。但是从近期来说，谁是修正主义？这个矛头越来越指向刘少奇这样一些人，这就出现问题了。但是，对于这个问题我们还是要做出一些分析。我们在《毛传》里已经写了，就是毛、刘之争事出有因，不仅仅是一个权力之争。如果仅仅是一个权力之争，毛泽东把他搞下去就完了，没必要搞“文化大革命”。实际上，“文化大革命”一发动，“炮打司令部”大字报一出，刘少奇的地位就已经不行了，就没必要再搞“文化大革命”了。这里很重要的一条，就是由于毛泽东和刘少奇对“四清”运动很多想法是不一致的，到最后毛泽东认为刘少奇是党内的资产阶级的代表人物。在得出了这样的一个结论以后，他就要想一个办法，什么办法呢？就是想搞一种反对修正主义的演习，希望这种演习锻炼群众。等到他去世以后，如果中央还出现修正主义，老百姓可以通过“大民主”的方式起来造反。使得党和国家的权力重新回到马克思主义者手里，他要解决的是这个问题。\n\n　　但是，他对刘少奇、邓小平等等这些人的判断失误了，特别是他对自己所依靠的一些人（像林彪集团、江青集团）失察了，这些复杂的情况是他万万没有想到的。他更没有想到的是，他非常轻车熟路的群众运动的办法，到了“文化大革命”的时候居然会走向反面，群众运动被少数人所利用。这些复杂的情况，毛泽东本人是始终没有认识到的。毛泽东在发动“文化大革命”的时候探讨的一个基本问题仍然是巩固党的长期执政地位，他要直接解决的一个问题是防止中央出修正主义，他针对的对象是他认定的那些所谓的走资本道路的当权派，他所采用的方法是群众运动的方法、自下而上的方法、“大民主”的方法，从这个意义上它是一种对人民民主的探讨，但是这种探讨走到了极端就成为了错误的东西。\n\n　　“文化大革命”这个问题还很值得研究。当然，现在出版的东西控制得非常严。但是，只有这个问题得到很好的研究以后，我们才能了解到，我们中国共产党在探求人民民主的历程中，在探求巩固中国共产党长期执政地位的过程中，我们走了怎样的一条道路，我们现在的认识是怎么从当年的认识中吸取它的合理因素，摒弃它的错误的东西，而达到更加接近真理的认识的。十六届四中全会的决定非常重要，是我们党内对这整个历程的科学总结。但是，探求真理的过程并没有因为这个决议的做出而结束，还需要我们理论界加倍努力继续解决这个问题。\n\n　　毛泽东最后留下了一个历史的遗憾，就是从一个正确的命题（周期律问题、“两个务必”）出发，最终导致了一个错误的理论和实践。对这个历史的遗憾怎么解答，怎么分析，怎么看待，这是我们现在理论界义不容辞的历史责任，也是绕不过去的一个问题。同时，他又留下了一个永恒的命题，“文化大革命”虽然最后使得毛泽东以悲剧的结局而告终，但是毛泽东的历史地位是永恒的；同时，他通过他这样一个不成功的探索给我们中国共产党留下了永恒的课题、永恒的思考，就是如何保持中国共产党的长期执政地位，如何保证党的性质不变质。中国共产党不能成为一个富人俱乐部，中国共产党必须始终和人民群众站在一起，这是毫无疑问的。而人民群众的主体是什么呢？是劳动群众，这是基本的群众。当然，由于我们党是执政党，我们不能以牺牲其它阶层的利益为代价来满足劳动人民群众各种各样的要求，我们应该统筹各个阶级的利益，但是我们的立足点、我们的基础永远是劳动人民群众，这才无愧于中国共产党的称号和它的理念。最后我想谢谢大家，也欢迎大家提问。\n\n　　主持人：谢谢！报告的效果从大家的掌声当中就能听得出来。我和大家感受一样。李捷的同志报告意境悠远。还有一些时间，李捷同志很愿意和大家交流，我想我们肯定有很多希望探讨的东西，大家有什么都可以说，我们自由一点儿。\n\n　　提问：李老师，我想问两个问题。第一个问题，您在报告中提到我国在70年代中期基本上建成了独立的比较完整的工业体系和国民经济体系，请问依据是什么？独立的比较完整的工业体系和国民经济体系有哪些标志？第二个问题与“大民主”有关。我们知道，作为一个发展中的社会主义大国，中国一方面需要高度集权的管理体制（当然并不一定是像苏联模式那样高度集权），另一方面民主参与、民主监督又不可避免地比较落后，两者形成了比较明显的反差，因此依靠体制内的力量很难解决官僚主义、腐败问题，甚至也难以杜绝西化的危险。所以，现在有一种议论，就是希望在可以控制的范围内发挥群众运动的作用，以弥补体制的缺陷。这种议论还往往援引现实的例子加以论证，比如，网络论坛特别是人民网的强国论坛被认为是网络版的“大字报”。又比如，今年由郎咸平引发的声讨MBO的民间浪潮就带有明显的“四大”的特征，特别是不少网民打着“清君侧”的旗号炮轰国资委，而这种民间抗议最后也引起了中央的重视， 其要求被部分地采纳，比如中央最近明令禁止大型国有企业搞MBO。请问您对此有何评价？\n\n　　李捷：先说标志的问题。我们的工业体系最主要的标志就是首先在重工业方面有了制造整个机床的能力，就是母机。过去很强调母机是重工业之母，没有这个东西其它东西都谈不上。比如，你参观德国，参观美国，特别是参观日本，它引以自豪是它的重装备制造业，这是非常重要的。当时我们有一个相对独立的可以制造自己的机床了，当然机床制造在当时是很不精密的，我们加工不了很精密的磨床，但是基础的东西我们大致还是可以的，这是一个标志。在此基础上，我们有自己的造船业、汽车制造业和飞机制造业。当然这些东西是很初步的，也还存在很多问题的，但是毕竟解决了从无到有的问题，所谓体系的产生就是解决从无到有的问题。还有我们的国防工业，国防工业是国家安全的基础，也是国家工业化水平的缩影。当时我们整个的国防制造业还是比较完备的。当然，我们相当多的企业效益并不好，是一种粗放的，有时候甚至是不计成本的。这在初级工业化阶段是很难解决的问题，是需要在下一个阶段解决的问题。独立自主的国民经济体系最主要的标志，在当时的认识就是“既无内债又无外债”。任何外债都有附加的条件，有了外债就要听命于人。这个认识有一定的局限性，但是应该说，从半殖民地半封建这样一个依附型经济走到“既无内债又无外债”这样一步，中国人真正是挺起腰板来搞自己的国民经济建设，这是很了不起的事情，是历史的跨越。很多时候历史就要走一个否定之否定这样一个过程，才能够走得过来。\n\n　　至于说“大民主”，最关键的根本区别，刚才你已经讲了，现在的民主包括强国论坛等等是在有秩序、有控制、有法律框架之内的民主，这种民主是需要的，是有好处的。但是，“大鸣、大放、大字报、大辩论”，特别是“文化大革命”这种“民主”是和法制完全对立的，就是把现有的法制秩序全部冲乱了。这样一种“民主”，这种群众运动决定一切，是错误的、不可取的。任何一个社会再重复这样的做法都是不行的。有的人讲现在贪官污吏那么多，再搞一个“文化大革命”就好了，绝对不会冤枉人。我说，中国经不起下一个“文化大革命”，再像那个搞法肯定会完蛋。\n\n　　提问：刚才您谈到，在防止和平演变的过程中，要注意划清根据解放思想、实事求是的思想路线开展的各种探索和修正主义的界限。请问您是怎么界定这个界限的？\n\n　　李捷：说老实话，这个界限我现在也划不出来。其实，先入为主地划分出一个标准不见得就是科学的、管用的。从历史上来看也是这样的，过去主席在《关于正确处理人民内部矛盾的问题》中提出了六条政治标准，这是指发表的时候。1957年2月，他讲的时候没有六条政治标准。到6月25号发表的时候，那个时候反右斗争已经走向高潮了，他为了约束这一运动提出了六条标准：越过这六条标准就是右派言论，没有越出符合这个就不是右派言论。但是实践证明，这种标准在一个运动中很难掌握。辨别是非很重要的恐怕还是具体问题具体分析，而不要先入为主。包括现在意识形态的很多问题，我们要正视它，比如现在新自由主义的影响。但是，具体到一件事情、一个观点，它是不是新自由主义的东西，还是要具体问题具体分析。但是，具体问题具体分析又会出现一个问题，你站在什么样的立场、用什么样的观点、方法分析。如果你认定了中国就应该私有化，而且中国就得搞多党制、三权分立，然后去具体问题具体分析，你肯定得出一个结论：新自由主义万万岁。我这里指的是要运用马克思主义基本的立场、观点、方法，站在国家、人民的根本利益的角度具体问题具体分析，这样可能比人为地制定一个标准要好一些。特别是在社会科学界，现在实际上更需要一种综合性的、辩证的思维，千万要避免简单化、格式化，就像电脑式的“0就是0，1就是1”那种分析，是不可取的。\n\n　　提问：您刚才说，把有些材料写进《毛泽东传》，会对现在有些人不利，请问具体是指哪些方面的材料？随着档案材料的进一步开放，将来会不会为高岗、林彪等人翻案？\n\n　　李捷：前面那个不利也只能说到此为止，我不能再说，再说就犯错误了。高岗事件和林彪事件是历史事实，历史已经有了定论。但我们对它们还是要做一个客观的分析，在高岗事件中高岗是有错误的，但是高岗这个人是有贡献的，不能一概而论。就是他在犯错误时期，他也有一些正确的认识、正确的思想，不能因人废言。林彪问题也是这样，林彪事件是一个铁案，是翻不了的。当然，林彪事件扑朔迷离。而且，大家往往有一种猎奇心理，外国人也是如此。往往什么事情只要加以炒作，就会越说越乱。我相信这个问题可能还要争论很多年。但是，我有一个感觉，林彪的问题是翻不了案的。但是，对林彪这个人也不能因人废言，包括在“文化大革命”中，也不能说林彪所讲的所有话都有阴谋，都是错的。还有，《五七一工程纪要》林彪是不是真正看过，而且每一个计划他都赞同，这个现在得不到材料上的根据和支持。这是林立果他们搞的。当然，你在认识“文化大革命”的时候，《五七一工程纪要》里面有些话，撇开暗杀主席、称主席为B52等等问题，它有些话是不是讲到了当时一些问题，比如“变相惩罚”等等这些问题？我说它还是讲了一些实话，讲了一些真话，这些问题不要一概而论。但是，并不能因此就反过来认为林彪就是好的，林彪不是搞阴谋的，这也站不住脚。高岗也是同样的。\n\n　　提问：听说康生在临死之前向毛泽东揭发了江青、张春桥的历史问题，为什么毛泽东没有反应？毛泽东对待康生的问题应该负一种什么责任？\n\n　　李捷：康生在这个人在党内确实是起了很不好的作用。大家都知道，只要一搞政治运动，康生就格外努力，而且很多重要的冤假错案中都有他的影子，这个人是很厉害的。但是，我们在总结历史经验的时候，功劳不能算作一个人的，错误、问题也不能算一个人。如果你再进一步深究的话，康生兴风作浪迫害一些人，他要有一定的气侯和条件，气侯、条件不到的时候他不敢。另外，“七大”以后有一段时间他很背，在党内非常臭，后来主席又重新信任他。主席这个人一生来说，他最自信的一点是什么呢？他认为他不会看错干部。他讲过，领导者的责任第一个是出主意，第二个是用干部。他最自信也是这两条，他认为自己的决断至少不会出现大的错误，这是他充满自信的一面。干部也是，至少关键的干部他自信不会看错。他什么时候后来变得不自信了？林彪事件出现以后对他打击非常大。实际上，重用康生、器重康生，是毛泽东很重要的一个失误，在这个问题上毛泽东还是有失察的错误，所以到了一定的气侯的时候，康生就会起他的作用。\n\n　　至于康生揭发江青、张春桥的事情，毛泽东当时没有做声，但这不等于他不重视这个事情。后来，主席始终在考虑这个权交给谁，先是考虑邓小平他们，邓小平不行了考虑华国锋，并没有把这个权给张春桥、江青，说明他头脑还是很清楚的。但是，这只是我们姑妄推测，绝对没有历史材料。不要说李捷看档案了，根据档案得出这个结论。我跟大家一样也没有看到什么，但是搞历史的人也有一种好奇心，我跟大家一样也推测一下。我总觉得，主席当时听到这个情况以后恐怕无力追究了，再追究就追究到自己夫人那儿了，再追究就追究到张春桥这样的人物身上了。但是，他没有把大权交给这些人，说明他对党对国家还是很负责任的。\n\n　　这里再说一句，粉碎“四人帮”以后，我们公布了很多主席讲的话。但是，实际上主席还讲了另外一些话，就是在批评“四人帮”的时候也讲过另外的话，就是说对这些人还是要帮的，为什么帮呢？第一发动文化大革命他们有功，第二和林彪斗争特别是70年的庐山会议他们有功，这两个功还是功不可没的，这个事情我们在这个《毛泽东传》里都写了，跟大家做一个交代。\n\n　　提问：有人说，毛泽东“开国有功，建国有过，文革有罪”，请您评价一下。\n\n　　李捷：这个话讲得不公道！为什么不公道呢？它比较片面。毛泽东建国以后有没有过呢，当然有过了，这是毫无疑问的，而且有些是重大的。《历史决议》讲了，有些是全局性的，“大跃进”是经济建设中的全局失误，“文化大革命”是政治的和整个社会、党和国家的一个劫难，这是全局性的失误，这是毫无疑问的。但是同时，刚才我也讲了，毛泽东在做这些事情的时候，第一他有他的考虑，他的考虑是从党和国家的角度考虑问题，尽管这些东西后来发生偏差。第二他在很多地方是有功的，是有贡献的，所以对人要具体问题具体分析，而且要公道、公允。我们对林彪、对高岗都尚且如此，对毛泽东更应该这样。所以仅仅说建国以后有过，是有失公允的。“文化大革命”确实是死了很多人，迫害了很多人，最不可原谅就是少奇同志的冤案，毛泽东对此有不可推卸的责任。但是如果说到法律责任，毛泽东负什么样的法律责任的话，我说他是负有一种领导的责任。如果要追究毛泽东迫害人的罪过、罪行的话，还追究不到这个份上，追究不到毛泽东身上，所以这个问题是应该做一个分析的，我是不同意这种简单化的说法的。\n\n　　提问：我觉得李老师的报告通篇贯穿着唯物史观，比如把历史上的事情放到当时的历史环境中去考察，具体问题具体分析，伟人在历史上起到“四两拨千斤”的作用，等等。我非常赞同您的看法。我的问题是，毛泽东一生探求的问题，也就是保证党的性质不变质、不变修的问题，现在是不是已经解决了？\n\n　　李捷：这个问题提得非常好，我也在思考。至少我个人现在是这样认为的，就是我们现在也还没有解决这个问题，还在探讨。现在中央对这个问题很警觉、很重视，在探索，在想怎样解决，但是这个问题并没有解决。这个问题依然还是问号，而不是句号。现在我们党有一个变质的危险，这个变质的危险，用形象的话来说就是，会不会变成一种富人的俱乐部。我这样提可能大家也就明白了，危险主要来自于哪个地方？最令人担忧是哪个地方？还是来自于高层、党的高层领导干部，他们的屁股会不会坐偏了？我们也到了一些地方，发现了过分强调GDP的问题。现在强调发展是硬道理，搞GDP，这是毫无疑问的。那么这里面就有一个问题，有些地方干部跟我们讲：现在我们也没办法，上面层层压指标，省里面到中央说10％的增长率，给我这儿要求可能就是16％。要有这个增长率，每年就要有新的亮点。新的亮点怎么办？现在国有的投资投一个垮一个，我怎么办？就得依靠纳税大户，实际上就是大老板。另外，现在社会稳定责任到人，如果我这个地方谁去闹事、上访、告状，马上下来要追究我责任。谁现在是麻烦的制造者？下岗职工、贫苦的农民。这个话很难听，但是他们讲的确实是实话。这是一个细胞，这是我们执政的一个单元。久而久之，如果这个单元放大以后成为一个整体，就有一个我们究竟代表谁、我们究竟屁股坐在谁那一边的问题。\n\n　　现在中央提出科学发展观、以人为本等等，可能都想平衡这个问题。但是，任何平衡不可能走在一极，比如索性先不管发展如何，把用来要发展的钱索性先救济穷人，那也是一条路。但问题是，如果这样的话，社会扩大再生产的资金从哪里来？发展速度从哪里来？而且，大家都知道，我们现在面临着整个世界的竞争，不要说我们不发展了，就是发展慢了，也会在世界上的竞争中败下来，最后的失败还是社会主义的失败。这个也是血的东西。所以我想，现在中央和各级领导都有一个兼顾发展和始终站在老百姓一边，兼顾决断的高度和发展人民民主的两难课题，做到熊掌和鱼兼得。这恐怕不是烹调大师，而是烹调艺术家才能做到的事情。这是比较难的，但又是非常重要的。\n\n　　提问：40年代的时候，共产党的新闻媒体都非常强调民主、自由，现在反而不如那个时候，请问这是什么原因？是不是因为共产党的性质发生了改变？我们如何加强党在这方面的领导？或者能否把这个方面放开，实行西方式的新闻出版自由？\n\n　　李捷：这个问题实际上毛泽东在进城之前已经讲到过。他说，我们现在是争民主，反迫害、反饥饿，反独裁。可能有一天我们进了城，到了现在国民党这个位置以后，到那个时候说不定老百姓也上街对着我们，跟我们要民主，要饭吃。他那个预言不幸言中。到了1956年，大家都觉得这是凯歌行进的时期，建立了社会主义制度，而且“一五”计划实施得非常顺利。但实际上，到了1956年的时候，群众闹事非常多。按照当时的统计，工人罢工就是1000多起，学生罢课是2000多起。当时很多领导干部就认为这背后有黑手，要抓阶级敌人。毛泽东提出来正确处理人民内部矛盾的问题，原因就在这儿。他认为，现在时代变了，情况变了，我们成了执政党，我们面对的大量问题，包括罢工、罢课问题，大量反映的都是人民内部矛盾，是反映了人民群众和我们政权内部少数人脱离群众、官僚主义作风之间的矛盾。从更深层的意义上来讲，反映了经济基础和上层建筑、生产力和生产关系既适应又不适应的矛盾。他认为，应该从这个地方作为突破口，来改进我们党和国家的政治生活，推进人民民主。所以他当时有一个名言，叫做“要利用群众闹事，来解决我们政府内部存在的官僚主义作风”。第一他不赞成，第二他不怕，而且还要利用它来解决我们的问题。但现在这句话我们一般都不用了。为什么？跟现在整个思路不一样。换了位以后，就有这样一个问题：当年提出的口号你要兑现，但是你不能马上兑现。不仅有些口号不能马上兑现，而且还会有新的矛盾产生。原来你可以利用新产生的矛盾推翻现政权，但现在你就是现政权，你逃也逃不掉。这个问题是比较难的。现在还没有发展到你刚才讲的执政党变了性质的程度，但是我们现在是执政党，所以很多矛头对着我们。对着我们的这些矛头不能简单地用专政工具的办法、镇压的办法，不能简单地用国家的暴力机器解决这些问题，大量还要通过人民民主的办法，解决人民内部矛盾。从这个意义上来说，人民内部矛盾的问题也是现在一个永恒的课题。而这个课题的解决与否，和我们的长期执政地位这个永恒课题是紧密地联系在一起的。谢谢！\n\n　　主持人：非常感谢李捷同志。李捷同志是领导干部，但是他以一个学者的坦诚和我们做了坦率而深入的交流。今天有机会请李捷同志就他在长期研究特别是撰写《毛传》九年当中的一些体会和大家进行交流，我们都获益匪浅。历史像一把折扇逐渐展开，也许离得越远看得越清。正像李捷同志所讲的，实践没有停止，认识也不会停止，非常希望以后还有更多的机会向李捷同志请教，再做进一步的交流。\n\n　　李捷：非常感谢大家，也祝大家新年愉快。\n\n　　主持人：报告会到此结束，谢谢各位的光临。","slug":"对毛泽东新中国探索的再思考","published":1,"date":"2022-02-20T00:45:59.982Z","updated":"2022-04-12T09:54:04.633Z","_id":"cl1vyonwi0009k60m8taof55o","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"对毛泽东新中国探索的再思考\"><a href=\"#对毛泽东新中国探索的再思考\" class=\"headerlink\" title=\"对毛泽东新中国探索的再思考\"></a><strong>对毛泽东新中国探索的再思考</strong></h4><p>——中共中央文献研究室副主任李捷在中国社会科学院报告速记稿</p>\n<p>李捷</p>\n<p>　　主持人：同志们，今天我们院马列所、新闻所、青年中心和政治学所，荣幸地邀请到了中央文献研究副主任、《毛泽东传》（1949-1976）的主要作者之一的李捷同志，给我们做“对毛泽东新中国探索的再思考”的学术报告。我们对李捷同志的到来表示欢迎。</p>\n<p>　　去年毛主席诞辰110周年的时候，一部反映中国当代历史，反映几代人的生活和经历的重要历史著作《毛泽东传》(1949－1976)诞生了。这是一部鸿篇巨制，是对我们党的历史、对我们国家的历史、对我们伟大领袖毛主席后半生的一个重要总结，也代表了我们党对这段历史的看法。我有幸，在这之后结识了李捷同志。作为一个学者、一个历史学家，能够参与这样的著作，应该说是一生的幸事。作为一个学者（在座的都是学者或年轻的学生），都希望自己能够留下传世之作，我想李捷同志已经是达到这样境界了，很了不起。去年我们也曾邀请李捷同志来，但是当时他太忙了。今年临近岁末，在毛主席诞辰111周年前夕，我们把李捷同志请来，我想他的报告一定会对我们大有教益。下面我们就把时间交给李捷同志。</p>\n<p>　　李捷：首先我非常感谢房宁教授，也感谢邀请我的各个所。在这样一个时间，年终岁末，各种事情都要做个了结的时候，能占用大家的时间，跟大家做一个交流，很难得。</p>\n<p>　　我今天交流的题目是“对毛泽东新中国探索的再思考”。在讲这个题目之前，我简要地介绍一下我自己的学术背景。我是1978年上的大学，在这之前当过兵，当过工人。1978年上大学，但是那个时候我没有能够考上第一批78年录取的，当时北京市委书记林乎加做了一个决定，将当年高考300分以上的同学都统统地网罗一遍，成立分校，我进入北师大的第一分校，在东大桥那个地方，读历史系。四年毕业以后，1983－1986年是在中央党校读的党史专业的研究生。我原来有一个误区，以为党史和历史这两个学科是一回事，只是时间段的不同。到了那儿学习，我才发现，这是两个不同的学科，包括学术的方法和理念都不同，但不管怎么样，它也是研究历史。这两个结合对我后来的成长有了很大的帮助。毕业以后就到了文献研究室，分在毛泽东研究组，一直干到现在。</p>\n<p>　　《毛泽东传》是在主席诞辰100周年以后1994年启动的一个项目。当时，文献研究室的领导把建国以后的《毛泽东传》这部分交给了我和高文谦。他现在在美国，写过《晚年周恩来》。当时的想法不是现在这样的《毛泽东传》，而是一个合传，就是把建国前和建国后一起写下来。但是，建国后的部分难度非常大，当时是按照评传来写的，评传是以评要为主，因为既然是代表中央，是一种正传，我们是按照传统的路子来写这个传记的，评传的写法。很多本著名传记，如《拿破仑传》、《俾斯麦传》、《罗斯福传》都是这样的写法，也是国际上通行的写法。但按这种写法，我们试了两三年以后发现不行，这个路子行不通。这时候高文谦基本上不怎么搞了，他是借着机会搞了很多的档案材料，后来借着探亲的机会跑了。实际上《毛泽东传》他一个字都没写，“文革”部分的任务就落在另外一个人身上，就是我的同事安建设，我们俩就共同探索这条路。到了1996年的时候（整个《毛泽东传》一共前前后后九年的时间）写不下去了，于是我们决定完全抛开评传的写法，转而从历史材料里面来见真实，用材料来说话，实际上采取了孔子开创的春秋笔法，述而不作。实际上，我体会述不可能不作，但是这个作要体现在述里面，实际上这也是《史记》的笔法、太史公的笔法。这样写下来以后得到大家的认可，说明这个传记还是经得起大家的认可的。这样一来，后传与前传就彻底脱钩了。前传大家都看到过，1996年出版的，是金冲及同志主持来撰写的，这个路子基本还是评传的路子，但是比评传往前迈了一步。这个传到了去年才写出来，在这个过程中，我们室的好多领导都在催。我觉得既然要出一个经得起历史检验的东西，就要耐得住性子。在这个过程中，我们单位有一个得天独厚的条件，就是大量档案材料都有复印件在我们单位（原件都在中央档案馆），既然我们占据着这样一个得天独厚的条件，那就有一个义不容辞的责任、历史的责任，就要把历史原原本本地写出来。当然，坦率地讲，我们不可能把所有的材料都写进去，因为：第一受篇幅的限制，第二受现在各种各样的情况的限制，有些东西不太好写。不好写的原因主要还不是因为说出来以后有损于毛泽东，而是说对现在有些人不利，这还是有一些禁区的。但是，我们保证一条：凡是写出来的东西都是真实的。我觉得能够做到这一点，将来过了几百年以后，那个时候恐怕档案能都开放了，人们拿着这本书对着档案看了，说这些人还可以，还能够把历史的档案原原本本地表现出来，我们就心满意足了。</p>\n<p>　　今天我想跟大家交流的主要是我自己这些年写《毛泽东传》的一些体会。这些年，我在国际上参加了一些国际上的学术研讨会，包括去年12月初在波士顿哈佛大学费正清中心召开的研讨会，题目是《再谈毛泽东》。这些年，有各式各样的说法，有赞扬毛泽东的，也有反对毛泽东的，也有根本上包括他的人格都否定的，各式各样的议论，所以我想结合这种情况，谈一点自己的体会。我觉得如果概括起来讲，毛泽东在建国以后的探索，主要是做了三件事情：</p>\n<p>　　第一件事情就是搞建设。有的人讲，毛泽东根本不懂建设，而且兴趣也不在建设，没有认认真真搞过建设。这是一种误解，毛泽东在建国以后用相当大的精力搞阶级斗争，这是不假，但是他也用了相当大的精力搞建设。但是这种建设不是一般性的建设，而是有一个主题，就是我们说的现代化的建设。从严格意义上讲，按照现在现代化的理论来讲，实际上毛泽东所探索的主要是初级工业化这个阶段的建设，他是想通过社会主义这样一种制度实现中国的初级的工业化。毛泽东经常将现代化和工业化经常混用，他没有严格地区分两者的界限。</p>\n<p>　　第二件事情就是在外交上谋求中国的大国地位。中国的大国地位在近代以来失落了，在第二次世界大战结束以后，尽管中国进入了安理会，但是中国实际上没有自己的大国地位。</p>\n<p>　　第三件事情和后来“文化大革命”的失误是有关系的，就是怎么巩固中国共产党长期执政的地位，当时的话叫“江山不能变色”。</p>\n<p>　　他做了这么三件事。这三件事，我就一一地介绍一下情况，谈一下我自己的认识。</p>\n<p>　　一、关于现代化建设。</p>\n<p>　　在现代化建设中，他做了很多很多的事情，具体的过程我就不去多说了。如果说起来的话，很多了，包括“一五建设”，后来提出的“十大关系”，初步总结我们建国以来的工业化的经验，到《关于正确处理人民内部矛盾的问题》提出来的中国自己的工业化的道路，接着发动“大跃进”等等，到了六十年代中期又搞“三线”建设。这里有一条线，一直到上个世纪七十年代，这都很清楚了。我想概括地讲，他在建设中，实际上做了三个重要的选择，对我们共和国的发展，一直到现在都产生很大的影响。</p>\n<p>　　第一个选择，是制度方面的选择。工业化有很多很多的道路，有很多的制度选择，包括资本主义的制度选择，包括社会主义像苏联那样的制度选择。在当时来说，这种制度选择对毛泽东来说是天经地义的事，作为那一代的共产党员，他必然毫不犹豫地选择社会主义的制度，通过社会主义的制度安排，来实现现代化，实现工业化。这是中国共产党义不容辞的责任，当时这是一个不容辩疑的真理。这个选择从中国共产党诞生之日起，从毛泽东选择马克思主义信仰开始，对于这一代人来说，这是不成问题的问题。</p>\n<p>　　在制度选择里面，还有一个问题。在当时来说，选择了社会主义制度，选择了社会主义的道路，实际上就是选择苏联道路。在当时来说，就是在他最初进行选择的时候，在1949年新中国成立以后，当是有一句很著名的话“苏联的今天就是我们的明天”。当时是这么一个状况，所以那个时候，我们在现实中确实很难避免这样的选择，因为我们没有经验，我们没有起家的本领，我们更没有先进的技术，在当时先进的技术西方对我们是封锁的，所以我们只能取之于苏联为首社会主义的阵营。同时，与我们对社会主义的认识也是有关的。当时认为，要搞社会主义就是要走苏联的道路，就像当年在探索出井冈山道路之前，我们认为中国既然要搞无产阶级革命，就要走十月革命的道路。所以，在那个时候，包括“一五计划”的制定，都是在苏联的帮助之下。像李富春这些领导人都是身经百战的，但是到了苏联以后甘当小学生，从ABC学起，请苏联的计划经济专家来给他们讲课。我们的“一五规划”，实际上在苏共政治局里面是经过了多次的讨论。</p>\n<p>　　客观地讲，当时，中苏关系处在一个蜜月时期，苏联对我们的帮助是巨大的，这个对于我们“一五计划”的顺利实施起了非常重要的作用。这个作用也不能抹煞，而且这里面很有意思的、也值得研究的是，我们第一个五年计划的制定形成了厚厚的一本书，这本书实际上包含了苏共中央和苏联的搞计划经济的人，对于苏联长期以来计划经济的经验，特别是它失误的地方有一种反思，而这种反思实际上体现在“一五计划”里面。这些方面很值得研究，这些材料现在在俄罗斯的档案里面都有，是不难找到的。当时，他们确实对我们有一些劝告，包括指标上。他们当时说，我们过去制定的指标太高，你们制定指标的时候保守一点，最后能超额完成，这样能鼓舞士气，而且整个的国民经济在计划里面容易平衡，过去我们老搞高指标，后来没办法只好一降再降。但是遗憾的是，我们后来到了“二五时期”，受到“大跃进”的影响，把苏联老大哥教给我们的这个经验给忘了。</p>\n<p>　　我们常说，我们现在转轨变型是从计划经济体制变成市场经济体制。实际上，中国根本就没有典型意义的计划经济体制，我们的计划经济体制实际上有一点“四不像”。但是也正因为“四不像”，我们在转轨变型的时候比前苏联要顺当得多。破绽多，漏洞多，模式不成型，制度不成型，反过来要搞改革时突破口就多，借助的力量就多，这个是相辅相成的。如果做一个简单的类比的话，跟西方相比，我们的奴隶制度不典型，所以我们转到封建制度很容易。而在封建时期，我们形成了洋洋大观、潇潇洒洒的非常典型的封建制度（我个人认为，中国的封建制度是封建制度的典型，西欧不是典型），但这也就意味着从封建制度转成资本主义制度是相当困难的。</p>\n<p>　　经过了这个探索以后，毛泽东在1956年，对整个的情况有一个反思。我们在写《毛泽东传》的时候，特别注意对毛泽东心理状态的观察。我们通过很多的材料来引证，发现毛泽东自1949年开国大典后，每次走下天安门城楼，他并不高兴。很多人反映，那几年他有点郁郁不欢。我猜想其中一个原因是担子重，未知数多，这是一个方面。而最重要的方面还是毛泽东自己讲的，很长一段时间我们是当了苏联人的奴隶，跟着他们的屁股后面走，什么都学苏联的，苏联得了感冒，我们也跟着打嚏喷。所以他说，到了1956年“十大关系”出来以后，心情才开始高兴起来。从这个地方开始，中国要走一条自己的道路了。毛泽东意识到中国不能照搬苏联的模式，但要走自己的道路，必然要付出巨大的代价。任何一个决策没有代价是不可能的。而且，你的目标取向越高，付出的代价必然也越大，它的风险也越大，这是成正比的。我们后来在现代化、工业化这条道路上跌了很多的跤。</p>\n<p>　　但是有一点，我们在《毛泽东传》已经反映了，毛泽东还是汲取了“大跃进”失误的教训的。尽管在庐山会议上彭老总给他上万言书，他看了以后火冒三丈。但是也有个过程，刚开始他不以为然，后来几个大区书记去跟他说，现在有一个跟谁的旗的问题，你再不说话的话，人家就跟彭老总的旗跑了，这个时候毛泽东重视了起来，他一晚上睡不着觉，在不冷静的情况下讲了关键性的话，这个历史教训是值得吸取的。</p>\n<p>　　在建国前，毛泽东讲了一个经验之谈。在井冈山的时候，毛泽东的性情是非常暴躁的，他是性情中人，也是一个不拘小节的人，一个大手笔的人。他的弟弟毛泽覃有一次因为一个事情和他争论了起来。（毛泽覃当时也在红四军，也在井冈山。当听说朱老总的部队在韶山附近活动之后，主席先是派了毛泽覃去，后来派了何长工。他的弟弟后来牺牲了。）毛泽东当时有点说不过他。就急了，就要动手打他。毛泽覃就说：“这是共产党，不是咱们毛家的宗祠。”主席说，他这一句话把我震醒了。毛泽东从一个具有开拓精神的地方领导人成长为一个全党公认的领袖，跟他后天的修养、磨炼是分不开的。他后来也经常讲，往往做决策的时候听到不同的意见，脑子一热就要发脾气，这时候最好不要发作，睡一觉，到第二天早晨什么都好了。这是他的经验之谈，但是这一次他睡了一觉之后，反而是火冒三丈，在一个不冷静的情况下，打破了两件事、延安整风时定的规矩：一是就事论事，不算历史旧帐；二是只对事不对人。就毛泽东一生来说，他在大多数情况下确实是这样来做的，宽大为怀，对很多的干部都是这样的，胸襟是像海一样的。在他看来，这次对彭老总的事情不是一般的小事情，是大事，既对事又对人，老帐新帐一起算。这个口子一开，坏了，所以《历史决议》上讲庐山会议破坏了党内正常的民主生活。</p>\n<p>　　但是，庐山会议以后，毛泽东也在冷静地思考。到了1963年的时候，要制定第三个五年计划，当时计委的同志脑子很热，定了很多的高指标。主席就把李富春他们叫来，对他们说，现在我们一定要吸取过去的教训，定指标的时候千万不要以我们这些人的寿命来计算时间。这句话很了不起，他是痛定思痛。所以，1965年他让彭老总到四川大三线当副总指挥的时候跟彭老总说，也许将来历史证明你是对的，这里面就有些反思的表现。但是话说回来，他的反思也不是彻底的，也有反反复复，跟我们正常人一样的，在这方面我们不能苛求于他。</p>\n<p>　　在制度方面的选择，尽管付出了代价，但是基本上还是成功的。到了七十年代中期的时候，我们建成了一个独立自主的、相对比较完整的工业体系和国民经济体系。我们基本上什么都可以造，从什么都不能造到基本上都可以造。当然，什么事情有利必有弊。从历史的延续性来看，当时比较强调独立自主，为什么？因为我们是从半殖民地半封建的经济体系，什么都仰仗于西方发达国家、受到西方发达国家不平等的经济盘剥的依附性经济，走到一种独立的国民经济体系。在此过程中强调独立自主有其合理性，也是符合国家的利益的。至于说把这个问题强调到了极端，在我们已经建成了一个独立自主的国民经济体系以后，完全跟国外的经济发展、经济联系完全脱钩，闭关锁国，闭关自守，这也是错误的。对这个问题要加以分析。从理论上来说，我们意识到“文化大革命”的一些错误做法并纠正它，这是毫无疑问是对的，由此产生了改革开放这样一条路线，这是正确的。但是另一方面，如果从历史的长河来看，这种发展有它的阶段性，也就是：只有你建立了一个独立自主的工业体系和国民经济体系以后，你才有可能在自己国家独立主权的情况下，去向世界敞开国门，去平等地、互利地打交道。没有这个基础不行，固守这个基础也不行。这个问题要做一种辩证的思考。</p>\n<p>　　第二就是路径的选择。制度的选择之后有一个路径的选择。这个路径的选择，我指的是一种比较低层面的路径选择，主要是指农轻重之间的比例关系。要搞初级的工业化，这个时候工业在创始阶段，这笔资金不可能从工业内部、第二产业内部产生，当时更谈不上第三产业，那么资金的来源，也就是原始积累的资金来源只能是有几种途径：要么就像西方一样通过殖民扩张来取得；要么就是牺牲农民的利益，像当时英国的“圈地运动”这样一种东西，还有一种就是像苏联一样来搞高积累，也是带有牺牲农民的色彩。</p>\n<p>　　作为中国来说，毛泽东在路径的选择上是很艰难的，怎么艰难呢？你仔细看他的《关于正确处理人民内部矛盾的问题》里面，如果从表面的形式逻辑来看，你会发现有一个矛盾，他一边说重工业的优先发展，这是搞工业化的一个客观规律。你不搞重装备怎么能建立你的工业基础啊？不可能的。但另一方面他又讲，一定要农业优先，按照农轻重的比例关系来安排生产。从形式逻辑来说，你看到它是一种矛盾，这里面就反映了一个客观的事实，就是说在初始工业化阶段必然要优先发展重工业，这是一个基本的事实。优先发展重工业这部分的启动资金，我们称之为原始积累的这些资金，从哪里来？不可能从工业本身解决，主要的不能靠工业本身来解决。当然轻工业的积累可以解决一部分，但是不能解决主要的部分。而且社会主义国家不可能去对外掠夺，中国的国情也不允许，中国的历史传统、中国的国情不允许这样做。只有一种办法就是要从第一产业，从农村经济、从农业生产取得一部分优先发展重工业的资金积累。这是一个方面。另一方面，毛泽东也看到了，中国是一个农民为主体的大国，无粮国家是不稳定的，农民不稳定就会起来造反，政权就会不稳定，所以要发展农民经济、改善农民的生活、发展农业。这就是毛泽东面临的一个两难的课题。</p>\n<p>　　在这样的情况下，他就在《论十大关系》中提出了一个辩证的思维逻辑，他试图把从形式逻辑来看是矛盾的东西，通过辩证逻辑、辩证思维统一起来。他讲道，你要想多搞一点重工业吗？那你就要优先发展轻工业，要优先发展农业，要多往这里投一些资，投资的目的是什么呢？投资的目的还是为了从里面取得更高的收益和积累，同时保持社会的稳定。他就是这样把一个矛盾的东西试图通过这样一个理论统一起来。毛泽东那个时代在这个问题上基本是两头兼顾的，做得还是比较好的。我们现在讲科学的发展观和五个统筹，把统筹兼顾的思想、统筹的思想往前推，最后必然要提到《关于正确处理人民内部矛盾的问题》这篇文章。</p>\n<p>　　应该说毛泽东在这个问题上不愧为一个解决矛盾的大师，一个化解矛盾的大师。当然，化解矛盾并不等于说这个矛盾不存在，还是存在的。这个时期，也就是整个毛泽东的时代、完成初级工业化的时代，实际上是跟我们现在叫做反哺农业相反的一个时代，就是说要从农业中取得积累，支持工业发展的积累。但是要取得积累，必须在这个积累的过程中给农民、农业相当多的投入，要给他一定的返还，所以他把这个取和予这对矛盾统一起来，取的方面要重一些，予的方面要小一些。小一些，但是也要考虑到农业、农村、农民的最大承受能力，有一个临界点，有一个度。这个度，总的来说，在毛泽东时代他是把握得比较好的，但是不是说他这个思想是贯穿始终的。比如说“大跃进”的时候，他受到一些表象的误导，做了一个错误的判断，他以为当时的农民思想比工人还先进。那个时候他讲，现在谁的思想最先进？我看不是工人阶级，而是农民，农民可以发扬共产主义的风格，最后导致剥夺农民。从第一次郑州会议开始，毛泽东用了两年多的时间，一直在解决这个问题。两年多以后，特别是到了三年困难时期，又继续解决这个问题，到1963年重新修订（1961年初步制定）的时候才基本把这个问题解决了。这个以后一直到文化大革命，他再也没有犯这样一个历史性的错误，这个教训还是汲取了。</p>\n<p>　　在我国现代化的过程中（我们在70年代中期完成了初级工业化以后，后来进入到改革开放时期，提出现在这种全面的、全方位的现代化），实际上有一种历史的惯性，就是我们长期习惯了这种取的这一手比较重、予的这一手比较轻这样一种历史的惯性。到了现在，在实现初级工业化阶段以后，我们应该反哺农业了，不是再从农业里面取得原始积累，而应该从第二产业、第三产业取得一些现代化的后劲和动力，也包括借助一些国外的投资，解决国内发展的资金问题。由于这种历史的惯性作用，到现在为止我们仍然没有摆脱这个困境。就是现在的三农问题实际上是因为我们从这边取的太多，予的太少，没有真正形成一种反哺农业的这样一种良性循环的模式。在联产承包责任制开始实行的那些年，那是农民日子最好的时候。那时候实际上给农民一种休养生息，但是以后就不行了。这里面也跟我们政治体制改革有关系，政治体制改革滞后，我们的基层政权很多很多的行政负担不但没有减少，而且加重，这种行政的负担很多的最后都转嫁到农民身上。</p>\n<p>　　现在，中央对这个问题相当重视。最近有几个省份已经宣布取消了农业税。但从内部来看，我一直觉得这个问题将来也会有副作用的。从农民来说，你要加强他的国家观念。其实，农民几千年来交粮纳税，这是天经地义的事，关键是轻徭薄赋。而且在交完了以后，为了培养他的国家意识，应该是通过各种渠道，不要层层盘剥、层层截留，最后返还到农民身上，这样就比较好。但现在因为返还实现不了，只能是完全免除。完全免除，在农民的国家意识这方面可能会有一些副作用，但是今后的人可能更聪明，会有更好的办法。</p>\n<p>　　第三个选择就是外部关系的选择。这个问题实际上我刚才在讲制度选择的时候已经讲到了，这就是：就对外关系来说，我们要自力更生、独立自主地实现现代化。毛泽东的考虑是从历史延伸下来的，因为我们原来是半殖民、半封建这种依附性的经济，要独立起来。同时，客观上也有一个问题，就是西方这些国家对我们不仅是封锁，而且还制裁，希望把我们扼杀在摇篮里，希望我们早晚有一天要完蛋。这个问题因为前面已经都讲到了，这里就不多说了。</p>\n<p>　　二、关于争取大国地位。</p>\n<p>　　毛泽东的第二件事情就是争取中国的大国地位。这一方面毛泽东对中国来说是功不可没，我们到现在还在享受着毛泽东当年为我们奠定中国大国地位基础的好处，受益匪浅，到现在为止还是这样。<br>　　关于争取中国的大国地位，有必要实事求是地还原到中国原来的历史情况，我把这个称作历史还原法。为什么呢？我们现在很多时候都用现在的事来判断当年的是与非，用今天的观点来判断当年。很多的同志、很多学者在研究的时候，他也力图不要用现在的观念来判断当年的事与非，力图客观一点，但是由于他缺少一种必要的历史还原，缺少对当年这些领导人每天生活其中并与之打交道的这个世界的基本特征的把握，所以往往自觉不自觉地用今天的是和非来评判当年的是与非。所以，我是一直认为这个历史还原法是非常重要的。在我们研究一个问题、研究一个概念的时候，一定要注意运用这样一种方法。</p>\n<p>　　如果还原到当年，就是50年代之前的话，当时第二次世界大战刚刚结束，世界上有两个基本特征。首先，就是人们普遍担心第三次世界大战爆发。本来，在十九世纪末，很多的经济学家、社会学家包括政治学家对二十世纪人类的进步充满了一种很好的憧憬、美好的憧憬，信心很足，很看好。结果没想到进入二十世纪以后，在半个世纪之内，人类连续发生了两次世界大战，而且整个的经济特别是资本主义经济在1929年陷入了一个空前的危机，出现了一种社会、政治的危机，而且这种危机对全球、对整个世界，除了一些不发达的地方、很闭塞的地方，都产生了冲击。在这样一个情况下，在第二次世界大战结束以后，大家普遍关心的问题就是，第二次世界大战以后这个和平的局面究竟能维持多久？第三次世界大战什么时候会爆发？可不可以避免？这是当时人类共同的一个问题，不是毛泽东个人面临的问题，包括斯大林、罗斯福等等，都面临着同样的问题。</p>\n<p>　　为了要解决这个问题，就出现了第二个基本特征，就是罗斯福、丘吉尔和斯大林在一起通过雅尔塔会议，也通过这之前一系列的国际性会议，确立了一个两极格局，当然还有一些其它的大国，初步确定了苏美的两极格局。两极格局对于所有的国家，无论你是大国，小国也好，在寻求国家独立的时候都是不能不考虑的。<br>　　我为什么要讲这个背景呢？这就跟毛泽东为争取中国的大国地位所做的第一件大事是紧密相关的，这件大事就是现在经常有争论的“一边倒”政策。</p>\n<p>　　在当时来说，作为一个新独立的中国，尽管它是一个大国，尽管它过去曾经在世界上有过辉煌的历史，但是毕竟这个时候是一个积贫积弱、刚刚得到独立的国家，况且还有一个敌对的政权在台湾，还占据着在联合国的合法席位。这个时候中国要取得国际上的承认，唯一一个现实的选择就是要在这两大阵营选择一个。当时对于要不要实行“一边倒”，在民主党派之间是有过争论的，有过议论的，而且这些人公推张治中向毛泽东进言。毛泽东跟他讲，我们不能搞在美、苏两边骑墙的政策，只能是“一边倒”。在这个“一边倒”的过程中，毛泽东同样面临着一个两难的选择，一方面我们要倒向苏联这一边，这是一个很现实的选择；同时我们又不能够成为苏联的小兄弟似的卫星国。怎么办？这就是毛泽东在第一次访苏的时候很艰难的一场斗争，既不能跟斯大林翻脸，但是又要结束苏联在中国的特权地位。整个的过程大家都非常清楚了，这都已经成为定论的东西了，包括俄罗斯的档案都已经公布出来了，这都是很清楚的，我就不多说了。这里我提供一个细节，实际上当时要订立中苏友好同盟互助条约，包括要收回旅顺这些港口，还包括当时我们曾经想过把外蒙古收过来，这些都在民主党派内部通报过。主席的第一次访苏都事先通报过，都征求过他们的意见，但他们都是跟共产党站在一边的，而且大家都认为毛泽东如果去了以后，把这几个问题解决了，那太好了，这是中国共产党对中华民族的一个伟大贡献。所以，在这样一个情况下，毛泽东第一次访苏可以说是只能成功，不能失败，达不到目的回来无颜见江东父老乡亲。这就是毛泽东在苏联软磨硬泡呆了两个多月之久的原因。弄得斯大林最后没招，只好适当地做一些妥协，当然我们也妥协。任何一个国际的谈判，任何一个国际条约、同盟的签订，没有双方的妥协是不可能的。现在我们把这种双方的妥协叫做双赢。这个问题如果放在当时、当地的特定背景下，我们就可以比较好看出这个决策的得失。</p>\n<p>　　第二个重要的事情就是决策抗美援朝。其实，抗美援朝大家也都知道，抗美援朝的是是非非、长长短短，现在大家都在说，见仁见智。抗美援朝有一个决策的过程，既是一个国内决策的过程；同时，这种国内决策背后也可以看到中、美、苏三国领导人智力的角斗。为什么这么说呢？当时，美国和苏联在国际战略上都没有局部战争的概念。在他们的眼里，在朝鲜半岛上打的这场仗，如果最后扩大为苏联和美国之间都出兵了，那就是第三次世界大战的爆发。苏联是这样认为，美国也是这样认为，这就是它们当时的一个国际战略的基本点，而他们双方都在力图避免由于这个地方引起两国的对垒，引起新的世界大战。所以在6月25日以后，美国人宣布要干涉朝鲜内政的时候，当时要开安理会，要成立联合国军，美国人有很多很多的准备。但是，当美国代表一进门后，看到苏联席位上马立克缺席，心里就美了。这表明苏联无意和美国人在朝鲜半岛问题摊牌，全面对抗，他心里就有底了。在这样的情况下，美国人以为可以不顾中国人的警告，以为中国人说话根本无足轻重，可以大胆地越过三八线。对于毛泽东来说，他第一招棋就放在阻止美国人越过三八线。所以在9月和10月毛泽东、周恩来连续三次发表声明，如果美军越过三八线的话，中国人绝对不会坐视不救。他们想控制这个局面，但控制不住，在这样一个情况下，中国最后没办法了，只能出兵了。</p>\n<p>　　出兵以后，毛泽东在考虑问题的时候有两个基本点：第一个就是要控制朝鲜半岛的局势，控制到什么程度呢？要避免朝鲜半岛问题国际化，局部问题局部解决，这就是后来的局部战争这个概念的由来。实际上是我们中国人通过朝鲜战争教训了美国人，美国人才从这里面得到了局部战争一个概念。第二个基本点是避免朝鲜半岛战争长期化、持久化，因为当时毛泽东认为持久对我们不利，但是这个问题后来有所改变。为什么持久对我们不利呢？主要是考虑我们国内对这场现代化战争的支撑能力，经济上和民心的支撑能力，能支撑多久？正因为有这样一个要求，所以就导致我们在抗美援朝过程中，特别是五次战役表现出了一个特点，就是越打也急，第四次战役和第五次战役，打得就有点没有节奏了，我们损失比较大，最后只能从汉城退守到三八线。在这个时候，即战争经过了一年后，出现了一个新的变化，就是国内的经济不但没有受到战争的影响，反而还受到了促进，经济在上升、在发展，因为民气起来了，包括民主党派、爱国的资本家，大家都起来了，加班加点为国贡献，支援前方、支援战争。不是战争影响了经济建设，而是促进了经济建设，这是毛泽东意想不到的。这对毛泽东后来对建设中一些东西的认识是很有影响的，这是后话。但在当时来说，这是一个非常重要的事情，毛泽东在这个时候就确立了朝鲜战争的方针，叫做“边打、边稳、边建”，“边打”就是朝鲜战争、抗美援朝战争；“边稳”稳定国内的局势，包括镇压反革命，因为当时暗藏在国内的反革命分子认为新的世界大战就要来了，中国共产党必败无疑，台湾马上就要反攻了，蒋介石马上就要反攻了，在这样一种情况下，要稳定国内的形势；“边建”就是搞经济建设。确定的是这样一个方针，也就是说国内的经济支撑能力可以使这个战争持久化，没有问题。</p>\n<p>　　与此同时，毛泽东也认识到，三八线实际上就是中美两国经济实力对比、国防实力对比的一个力量平衡线，我们打不过去，他也打不过来。在这样的情况下，毛泽东就向美国发了一个信号说，你愿意打多久，我就打多久。一直打到美国人愿意罢手为止，一直打到美国人愿意在和平谈判的协定上签字为止。在这样的情况下，新任的艾森豪威尔政府就软了。在做出一系列的分析以后，他最后得出结论，朝鲜半岛的战争持久化、长期化对美国不利。整个的战争局面随之有一个很大的转变。</p>\n<p>　　刚才也讲到，凡是决策必然要付出巨大的代价，包括中美关系长期的停滞不前，包括台湾受到影响，这都是抗美援朝所付出的代价。但是，抗美援朝的收获也是巨大的。对于当时中国来说，最大的一个“得”是什么呢？其它的还有很多，最重要的一个战略所得，就是在世界上树立起一个负责任的大国形象。这对中国不是句空话。为什么呢？过去中国政府说什么话，第一，没人听。第二，说了白说，没人怕。第三，没人信。你究竟能不能兑现，你说你不会坐视不救，我打了瞧，到你鸭绿江边，我看你敢不敢过来，跟你叫板。所以，这个“得”对于中国来说是非常重要的。所以，到了1954年开日内瓦会议的时候，美国人、英国人都一致地要邀请中国代表团。尽管他不给中国代表团相应的正式的外交礼遇。但是他承认，解决越南问题、朝鲜半岛问题，不能没有中国参加。十几年以后，美国在1964年前后制造了东京湾事件，这个事件实际上是一个战略上的试探。如果中越两方在这个问题上要示弱的话，包括苏联，它就可以派兵越过北纬17度线，扩大战争。在这样一个情况下，中国政府马上做出反应，周恩来总理代表中国政府宣布了三句话：第一句话是，如果美国人胆敢把战争扩大到17度线以北的话，中国的辽阔国土就是越南人民的可靠后方。第二句话，中国人从来不愿意和美国人打仗，但是如果这场战争和美国人打起来，战争没有国界，自己掂量吧。第三句话，中国人说话从来是算数的。这句话是一个外交辞令，实际上是在提醒美国人，你别忘了朝鲜战争。后来我听美国的学者讲，当时美国的五角大楼，就因为中国政府这三句话一周彻夜未眠。五角大楼忙活起来，赶紧去分析，包括调动它各种各样的侦查系统，最后得出结论，中国人说这几句话是要动真的。一直到1973年巴黎和约（越南问题的巴黎和约）签订为止，它从来不敢派一个兵越过17度线，它只敢狂轰滥炸。它不敢出兵，这对保证中国的国家安全，这个棋子是非常重要的。</p>\n<p>　　一直到现在，我们还在受益无穷。现在我们中国政府为什么说话还有信用？人家还怕？一般的声明，美国人、台湾人不怕。到了真正叫板的时候，说一句狠话、硬话，他还是怕的。为什么？跟这个教训有关系。现在美国人的心理状态是觉得，一般情况下，你不会像当年这些领导人这么干的。但是什么事情都有一个万一，万一最后逼急了，最后干一下，他还是很害怕。所以，现在外交部发言人讲，我们要启动国家的立法程序搞反对分裂国家法，这一下子现在美国人很惊惶。所以，我说抗美援朝对于我们今天还是受益无穷的一件事。</p>\n<p>　　第三是中苏论战，这是比较复杂的事情。我原来写过一些文章，做过一些分析。总的来说，中苏论战，就像小平讲的，双方都说了很多的大话、空话、套话。而且最后形成的一些理论观点，特别是“九评”里面形成的一些过“左”的、阶级斗争扩大化的一些理论观点，对后来的“文化大革命”的实践是非常有影响的。我们也为此付出了一些沉重的代价。但是，中苏论战有一条，没有中苏论战的话，中国不可能有今天独立自主的大国地位。我记得，90年代初期，在我们文献室的一次内部研讨会上，大家向胡绳同志提了一个问题，就是中国为什么没有走苏东的道路，因为当时苏联解体，大家都在考虑这个问题，而且也在担心中国会不会成为第二个苏东。当时胡绳同志讲了两点：一点就是《论十大关系》的发表。中国开始走自己的道路，而没有向东欧这些国家，把自己的经济命脉都系在苏联的老大哥身上，那就不是独立自主了。另外一个就是我们从中苏论战得到了一个实惠，就是我们从苏联老大哥的阵营里真正地脱出身来，彻底出来了。这样才树立了一个独立自主的大国的形象。而且我们在发展中国家、第三世界里面找到了自己的战略支撑点。</p>\n<p>　　在这一方面，我写过一篇文章，1998年我到美国哈佛的费正清研究中心参加了一个研讨会，会议上我递交的一篇论文就是这个，题目是《毛泽东向两极格局的挑战》。这篇论文，他们包括施拉姆教授看了以后，觉得有一定的道理，有一定的启发作用。这篇文章他们翻译成英文，收录到学术论文集里面去。但是题目他们换了，他们觉得这个题目非常刺激，很难接受。</p>\n<p>　　第四个是成功地研制了原子弹。这个我不多说了，这里就补充一个信息：毛泽东在1955年做出搞原子弹的决策的时候讲了一句话，“我们也要搞一点原子弹。”这句话看来很不经意地从毛泽东嘴里说出，但是事后想想很有道理。去年年初，我曾经跟咱们核物理工程研究院的前任院长，也是一个院士，见过一次面。他当时问了我一个问题，为什么毛泽东当年说搞一点原子弹？我说，对不起，这个问题我没有研究过，我只知道他说过这句话，但是他到底怎么说，我也没太在意。他说，这个“一点”特别有学问。为什么呢？要搞，不搞你没有大国地位。而且要搞就要早搞，像模像样地搞，搞晚了人家不让你搞了，制裁你，你就搞不成了。但是不能多搞，搞一点就行。多搞了，就跟苏联一样，要上美国人的当，被军备竞赛把你拖垮。这是中国的国力绝对不允许的。这个决策用今天的话来说有点“杀手锏”的意味，但是，原子弹对中国的大国地位来说远比今天的“杀手锏”更重要。原子弹爆炸以后，尼克松马上就改变了态度。尼克松当时还不是总统，他要竞选总统，他讲了一点，1965年他就讲过，再也不能够让中国逍遥在联合国等等国际机构之外，不能让它为所欲为了。我们要把它套回到国际组织里面去，让它成为像苏联一样负责任的大国。当然，他所说的“负责任”的含义跟我们所说的“负责任”是两码事。从这个来看，这件事情对于中美关系的正常化也是非常重要的。</p>\n<p>　　我想，我们和苏联决裂，真正成为一个独立自主的国家，不再依附于苏联的阵营，不再受控于苏联，这一点和我们成为核大国这一点一样，对于后来70年代中美关系正常化是起了非常重要的推动作用的。但现在俄罗斯的特别是俄共的学者（我跟他们有一些交流，打了一些交道）老是说这句话，我们苏联共产党怎么垮台的？很重要的一点，就是你们帮助美国人把我们搞垮的。他们到现在还对此耿耿于怀。</p>\n<p>　　第五件事，也是争取中国大国地位最重要的一件事情，就是启动中美关系正常化。这是非常重要的，这个历史过程我不细说了。这里面是非常有戏剧性的，把它拍成一个电影，搬上荧幕，都是非常好看的一个片子。这件事恰好是在“文化大革命”的中后期发生的。所以，我个人觉得，对“文化大革命”的本身的理论和实践的错误和“文化大革命”时期的所作所为，还不能完全等同起来。在“文化大革命”期间，我们还取得了一些重要的成就，这在《历史决议》里面也没有否认。在2002年中央党校和哈佛大学联合举办的国际研讨会上，我提交了题为《从中美关系正常化到中美建交》的论文。在这篇文章中，我详细地探讨了这件事的整个过程。这件事不是孤立的外交事件，内政和外交从来都是紧密联系在一起，我那篇论文试图从这个角度来讲内政和外交之间的互动。中美关系的正常化，得益的不仅仅是大国地位，它对于当时我们国内一系列的工作，包括落实老干部的政策、教育方针的调整等等，对于当时我们重新认识外部世界，都是很有好处、很有帮助的。</p>\n<p>　　说到这里，我顺便讲一个个人想法。我总觉得，如果要讲改革开放的历史的话，至少应该追溯到文化大革命的中期，才能够比较清晰地、比较实事求是地看出这一条历史脉搏的跳动。一个伟人在历史关节点所起的决定性的推动作用是必不可少的，但是历史伟人必须要在历史所造就的历史脉搏上跳动，才能够起到推动历史的作用，这就是四两拨千斤的道理。基础的东西还是历史脉搏的跳动。这跟我们在座的，所有的平民老百姓，所有思想界的人物，也包括一些老干部等等，这些人合力的作用是完全分不开的。</p>\n<p>　　三、巩固党的长期执政地位</p>\n<p>　　最后一个，就是巩固中国共产党的长期执政地位。这应该说是毛泽东在中国共产党执掌全国政权前后长期探索的一个历史性课题，也是在他去世以后留给后来的中国共产党人的跨世纪的历史课题。</p>\n<p>　　勾画一下毛泽东这一探索的历史线索是非常重要的，勾画这样一个历史线索，对于正确地认识和评价包括“文化大革命”这样一个被证明是错误的理论和实践都是很有益处的。很多东西被实践证明是错误的东西，对于我们研究者来说，也应该认真地去分析和思考一下，看看其中有没有一些合理的成份，有没有一些值得我们关注的问题。这比起我们很简单地去否定它，去拒绝它，甚至把它脸谱化、简单化要好得多。</p>\n<p>　　这一历程的第一步是建国前夕毛泽东提出的“两个务必”。他的第一个直觉就是，我们马上要进城了，我们马上要坐天下了。首先他就考虑了，我们这个天下能不能坐稳？会不会像李自成一样没坐多久，屁股还没有坐热呢，就被老百姓赶出来？当然，李自成是被清军赶出来的。这只是表面现象，实际上李自成一进城，包括进城前的所作所为和进城以后的表现，已经酿成了最后丧失民心的一个基础。所以，毛泽东考虑得更多的是怎么样不脱离群众、不丧失民心的问题。关于这个探讨，实际上毛泽东在1945年跟黄炎培的谈话中已经有一个基本的思想方向。黄炎培当时跟他探讨有名的历史周期律问题，他当时非常肯定的讲，中国共产党绝对不会蹈历史的覆辙。靠什么呢？靠民主。但是，对于民主，不同的阶级有不同的界定、不同的理解。毛泽东对它的理解，从上下文来看，实际上是人民民主，就是靠人民群众对人民政权实行监督，保证它不能腐败。人民民主的思路是对的，问题在于用什么形式、什么途径来实现人民民主。这应该说是毛泽东后来一直的探索，包括在“文化大革命”时期。</p>\n<p>　　第二个重要的探索步骤是建国以后多次的整党整风。大家都知道，延安整风是我们党的一个成功整风运动，但是也有后遗症，这就是后期发生的“抢救运动”。延安整风实际上是党的一种自我教育，用现在的话来讲，它是一种关门整风的形式。建国以后刚开始搞的整党，也是关门整风的形式。关门整风，毛泽东后来感觉到总是有局限性。到了57年提出《关于正确处理人民内部矛盾的问题》理论的时候，他就提出了一个发动党外来监督，帮助中国共产党整风。我们现在经常讲党外监督，其实毛泽东当时已经形成了这么一个想法，要将党内的监督和党外的监督结合在一起。发动民主党派，给共产党提意见，帮助共产党整风，这个思路很好，但是不幸的是，后来反右派斗争扩大化了。当时确实有右派言论，这个我们在传记里写了。现在很多人纠缠这么一个问题，当时扣右派帽子的人绝大部分都平反了，只剩下少数的几个人，那说明你这个反右派斗争错了。如果说右派的言论，当时确实是有。我在这里面举了一些具体的例子，比如要在党外成立平反委员会，要清算共产党从整风土改以来的问题，实际上是搞平反冤假错案了，等等。而且有的人讲了，毛泽东是大和尚，可以给小和尚提意见，不能给大和尚提意见，这些东西都是对共产党执政的不满情绪。如果在当时来衡量，还是一种右派言论。但是问题在于，把提这些意见的人划成右派是错误的，因为这些人长期和共产党共事。从方法上来说，右派言论和右派分子不能划等号，不能因为说了些你觉得是大逆不道的话，就扣上右派的帽子，这是不对的。反右派斗争扩大化以后，毛泽东对民主的问题有一个新的认识，这就是大家很清楚的“大民主”的思想，大鸣、大放、大字报、大辩论。实践证明，它是有害的，很容易使运动失控。</p>\n<p>　　接着，到了50年代后期有两个重要的事情：一个是庐山会议，前面简单地说了，这里面就不多说了。还有一个就是提出了防止和平演变的思想。这个思想在1959年提出来的时候是正确的。我们现在也还存在这个问题，就是西方敌对势力对我们实施西化和分化的问题。但是，在防止和平演变的时候，我们也要划清一个重要的界限：一个是我们内部的解放思想、实事求是，再探索一条新的改革的道路，这个过程中的种种探索，不能把它简单地和修正主义、右倾思潮划等号，这个问题当时没有完全搞清楚，这是一个教训。但是作为整个的战略来说，它的考虑还是有战略预见的。</p>\n<p>　　作为防止和平演变思想进一步的发展，60年代中期就形成了“反修防修”的战略。“反修”就是国际上的中苏论战，“防修”就是国内的“四清”运动，这两个运动实际上是一个战略指导下的两个重要车轮。刚刚我讲到了，对于确立中国的大国地位来说，中苏论战是非常重要的一个步骤。但是，如果就国内的情况来看，中苏论战助长了对国内问题的一些错误的或者说是偏激的判断。比如说，当时对于什么是资本主义复辟的理解，你可以看看“三评”。“九评”里面的“三评”划了一个杠杠，完全是以南斯拉夫的情况为界。究竟符不符合南斯拉夫的实际，这个历史已经有定论了。但是问题在于这个杠杠是用来说明国内的一些情况的，这就把很多界限混淆了。有些界限越过了以后，确实对我们国家的长治久安是很不利的。但是也有些现象又属于探索之中、改革之中的问题，不能够简单地下定论，但在这里却被混淆了。最后，形成了一种重要的假设：要警惕中央出修正主义。这个假设一出以后，就容易混淆现实的危险和长远的危险。从长远的危险来说，毫无疑问，要警惕内部出现一些对党和国家不忠的人，一些异己分子。从这个意义来说，这个假设是有其合理因素的。但是从近期来说，谁是修正主义？这个矛头越来越指向刘少奇这样一些人，这就出现问题了。但是，对于这个问题我们还是要做出一些分析。我们在《毛传》里已经写了，就是毛、刘之争事出有因，不仅仅是一个权力之争。如果仅仅是一个权力之争，毛泽东把他搞下去就完了，没必要搞“文化大革命”。实际上，“文化大革命”一发动，“炮打司令部”大字报一出，刘少奇的地位就已经不行了，就没必要再搞“文化大革命”了。这里很重要的一条，就是由于毛泽东和刘少奇对“四清”运动很多想法是不一致的，到最后毛泽东认为刘少奇是党内的资产阶级的代表人物。在得出了这样的一个结论以后，他就要想一个办法，什么办法呢？就是想搞一种反对修正主义的演习，希望这种演习锻炼群众。等到他去世以后，如果中央还出现修正主义，老百姓可以通过“大民主”的方式起来造反。使得党和国家的权力重新回到马克思主义者手里，他要解决的是这个问题。</p>\n<p>　　但是，他对刘少奇、邓小平等等这些人的判断失误了，特别是他对自己所依靠的一些人（像林彪集团、江青集团）失察了，这些复杂的情况是他万万没有想到的。他更没有想到的是，他非常轻车熟路的群众运动的办法，到了“文化大革命”的时候居然会走向反面，群众运动被少数人所利用。这些复杂的情况，毛泽东本人是始终没有认识到的。毛泽东在发动“文化大革命”的时候探讨的一个基本问题仍然是巩固党的长期执政地位，他要直接解决的一个问题是防止中央出修正主义，他针对的对象是他认定的那些所谓的走资本道路的当权派，他所采用的方法是群众运动的方法、自下而上的方法、“大民主”的方法，从这个意义上它是一种对人民民主的探讨，但是这种探讨走到了极端就成为了错误的东西。</p>\n<p>　　“文化大革命”这个问题还很值得研究。当然，现在出版的东西控制得非常严。但是，只有这个问题得到很好的研究以后，我们才能了解到，我们中国共产党在探求人民民主的历程中，在探求巩固中国共产党长期执政地位的过程中，我们走了怎样的一条道路，我们现在的认识是怎么从当年的认识中吸取它的合理因素，摒弃它的错误的东西，而达到更加接近真理的认识的。十六届四中全会的决定非常重要，是我们党内对这整个历程的科学总结。但是，探求真理的过程并没有因为这个决议的做出而结束，还需要我们理论界加倍努力继续解决这个问题。</p>\n<p>　　毛泽东最后留下了一个历史的遗憾，就是从一个正确的命题（周期律问题、“两个务必”）出发，最终导致了一个错误的理论和实践。对这个历史的遗憾怎么解答，怎么分析，怎么看待，这是我们现在理论界义不容辞的历史责任，也是绕不过去的一个问题。同时，他又留下了一个永恒的命题，“文化大革命”虽然最后使得毛泽东以悲剧的结局而告终，但是毛泽东的历史地位是永恒的；同时，他通过他这样一个不成功的探索给我们中国共产党留下了永恒的课题、永恒的思考，就是如何保持中国共产党的长期执政地位，如何保证党的性质不变质。中国共产党不能成为一个富人俱乐部，中国共产党必须始终和人民群众站在一起，这是毫无疑问的。而人民群众的主体是什么呢？是劳动群众，这是基本的群众。当然，由于我们党是执政党，我们不能以牺牲其它阶层的利益为代价来满足劳动人民群众各种各样的要求，我们应该统筹各个阶级的利益，但是我们的立足点、我们的基础永远是劳动人民群众，这才无愧于中国共产党的称号和它的理念。最后我想谢谢大家，也欢迎大家提问。</p>\n<p>　　主持人：谢谢！报告的效果从大家的掌声当中就能听得出来。我和大家感受一样。李捷的同志报告意境悠远。还有一些时间，李捷同志很愿意和大家交流，我想我们肯定有很多希望探讨的东西，大家有什么都可以说，我们自由一点儿。</p>\n<p>　　提问：李老师，我想问两个问题。第一个问题，您在报告中提到我国在70年代中期基本上建成了独立的比较完整的工业体系和国民经济体系，请问依据是什么？独立的比较完整的工业体系和国民经济体系有哪些标志？第二个问题与“大民主”有关。我们知道，作为一个发展中的社会主义大国，中国一方面需要高度集权的管理体制（当然并不一定是像苏联模式那样高度集权），另一方面民主参与、民主监督又不可避免地比较落后，两者形成了比较明显的反差，因此依靠体制内的力量很难解决官僚主义、腐败问题，甚至也难以杜绝西化的危险。所以，现在有一种议论，就是希望在可以控制的范围内发挥群众运动的作用，以弥补体制的缺陷。这种议论还往往援引现实的例子加以论证，比如，网络论坛特别是人民网的强国论坛被认为是网络版的“大字报”。又比如，今年由郎咸平引发的声讨MBO的民间浪潮就带有明显的“四大”的特征，特别是不少网民打着“清君侧”的旗号炮轰国资委，而这种民间抗议最后也引起了中央的重视， 其要求被部分地采纳，比如中央最近明令禁止大型国有企业搞MBO。请问您对此有何评价？</p>\n<p>　　李捷：先说标志的问题。我们的工业体系最主要的标志就是首先在重工业方面有了制造整个机床的能力，就是母机。过去很强调母机是重工业之母，没有这个东西其它东西都谈不上。比如，你参观德国，参观美国，特别是参观日本，它引以自豪是它的重装备制造业，这是非常重要的。当时我们有一个相对独立的可以制造自己的机床了，当然机床制造在当时是很不精密的，我们加工不了很精密的磨床，但是基础的东西我们大致还是可以的，这是一个标志。在此基础上，我们有自己的造船业、汽车制造业和飞机制造业。当然这些东西是很初步的，也还存在很多问题的，但是毕竟解决了从无到有的问题，所谓体系的产生就是解决从无到有的问题。还有我们的国防工业，国防工业是国家安全的基础，也是国家工业化水平的缩影。当时我们整个的国防制造业还是比较完备的。当然，我们相当多的企业效益并不好，是一种粗放的，有时候甚至是不计成本的。这在初级工业化阶段是很难解决的问题，是需要在下一个阶段解决的问题。独立自主的国民经济体系最主要的标志，在当时的认识就是“既无内债又无外债”。任何外债都有附加的条件，有了外债就要听命于人。这个认识有一定的局限性，但是应该说，从半殖民地半封建这样一个依附型经济走到“既无内债又无外债”这样一步，中国人真正是挺起腰板来搞自己的国民经济建设，这是很了不起的事情，是历史的跨越。很多时候历史就要走一个否定之否定这样一个过程，才能够走得过来。</p>\n<p>　　至于说“大民主”，最关键的根本区别，刚才你已经讲了，现在的民主包括强国论坛等等是在有秩序、有控制、有法律框架之内的民主，这种民主是需要的，是有好处的。但是，“大鸣、大放、大字报、大辩论”，特别是“文化大革命”这种“民主”是和法制完全对立的，就是把现有的法制秩序全部冲乱了。这样一种“民主”，这种群众运动决定一切，是错误的、不可取的。任何一个社会再重复这样的做法都是不行的。有的人讲现在贪官污吏那么多，再搞一个“文化大革命”就好了，绝对不会冤枉人。我说，中国经不起下一个“文化大革命”，再像那个搞法肯定会完蛋。</p>\n<p>　　提问：刚才您谈到，在防止和平演变的过程中，要注意划清根据解放思想、实事求是的思想路线开展的各种探索和修正主义的界限。请问您是怎么界定这个界限的？</p>\n<p>　　李捷：说老实话，这个界限我现在也划不出来。其实，先入为主地划分出一个标准不见得就是科学的、管用的。从历史上来看也是这样的，过去主席在《关于正确处理人民内部矛盾的问题》中提出了六条政治标准，这是指发表的时候。1957年2月，他讲的时候没有六条政治标准。到6月25号发表的时候，那个时候反右斗争已经走向高潮了，他为了约束这一运动提出了六条标准：越过这六条标准就是右派言论，没有越出符合这个就不是右派言论。但是实践证明，这种标准在一个运动中很难掌握。辨别是非很重要的恐怕还是具体问题具体分析，而不要先入为主。包括现在意识形态的很多问题，我们要正视它，比如现在新自由主义的影响。但是，具体到一件事情、一个观点，它是不是新自由主义的东西，还是要具体问题具体分析。但是，具体问题具体分析又会出现一个问题，你站在什么样的立场、用什么样的观点、方法分析。如果你认定了中国就应该私有化，而且中国就得搞多党制、三权分立，然后去具体问题具体分析，你肯定得出一个结论：新自由主义万万岁。我这里指的是要运用马克思主义基本的立场、观点、方法，站在国家、人民的根本利益的角度具体问题具体分析，这样可能比人为地制定一个标准要好一些。特别是在社会科学界，现在实际上更需要一种综合性的、辩证的思维，千万要避免简单化、格式化，就像电脑式的“0就是0，1就是1”那种分析，是不可取的。</p>\n<p>　　提问：您刚才说，把有些材料写进《毛泽东传》，会对现在有些人不利，请问具体是指哪些方面的材料？随着档案材料的进一步开放，将来会不会为高岗、林彪等人翻案？</p>\n<p>　　李捷：前面那个不利也只能说到此为止，我不能再说，再说就犯错误了。高岗事件和林彪事件是历史事实，历史已经有了定论。但我们对它们还是要做一个客观的分析，在高岗事件中高岗是有错误的，但是高岗这个人是有贡献的，不能一概而论。就是他在犯错误时期，他也有一些正确的认识、正确的思想，不能因人废言。林彪问题也是这样，林彪事件是一个铁案，是翻不了的。当然，林彪事件扑朔迷离。而且，大家往往有一种猎奇心理，外国人也是如此。往往什么事情只要加以炒作，就会越说越乱。我相信这个问题可能还要争论很多年。但是，我有一个感觉，林彪的问题是翻不了案的。但是，对林彪这个人也不能因人废言，包括在“文化大革命”中，也不能说林彪所讲的所有话都有阴谋，都是错的。还有，《五七一工程纪要》林彪是不是真正看过，而且每一个计划他都赞同，这个现在得不到材料上的根据和支持。这是林立果他们搞的。当然，你在认识“文化大革命”的时候，《五七一工程纪要》里面有些话，撇开暗杀主席、称主席为B52等等问题，它有些话是不是讲到了当时一些问题，比如“变相惩罚”等等这些问题？我说它还是讲了一些实话，讲了一些真话，这些问题不要一概而论。但是，并不能因此就反过来认为林彪就是好的，林彪不是搞阴谋的，这也站不住脚。高岗也是同样的。</p>\n<p>　　提问：听说康生在临死之前向毛泽东揭发了江青、张春桥的历史问题，为什么毛泽东没有反应？毛泽东对待康生的问题应该负一种什么责任？</p>\n<p>　　李捷：康生在这个人在党内确实是起了很不好的作用。大家都知道，只要一搞政治运动，康生就格外努力，而且很多重要的冤假错案中都有他的影子，这个人是很厉害的。但是，我们在总结历史经验的时候，功劳不能算作一个人的，错误、问题也不能算一个人。如果你再进一步深究的话，康生兴风作浪迫害一些人，他要有一定的气侯和条件，气侯、条件不到的时候他不敢。另外，“七大”以后有一段时间他很背，在党内非常臭，后来主席又重新信任他。主席这个人一生来说，他最自信的一点是什么呢？他认为他不会看错干部。他讲过，领导者的责任第一个是出主意，第二个是用干部。他最自信也是这两条，他认为自己的决断至少不会出现大的错误，这是他充满自信的一面。干部也是，至少关键的干部他自信不会看错。他什么时候后来变得不自信了？林彪事件出现以后对他打击非常大。实际上，重用康生、器重康生，是毛泽东很重要的一个失误，在这个问题上毛泽东还是有失察的错误，所以到了一定的气侯的时候，康生就会起他的作用。</p>\n<p>　　至于康生揭发江青、张春桥的事情，毛泽东当时没有做声，但这不等于他不重视这个事情。后来，主席始终在考虑这个权交给谁，先是考虑邓小平他们，邓小平不行了考虑华国锋，并没有把这个权给张春桥、江青，说明他头脑还是很清楚的。但是，这只是我们姑妄推测，绝对没有历史材料。不要说李捷看档案了，根据档案得出这个结论。我跟大家一样也没有看到什么，但是搞历史的人也有一种好奇心，我跟大家一样也推测一下。我总觉得，主席当时听到这个情况以后恐怕无力追究了，再追究就追究到自己夫人那儿了，再追究就追究到张春桥这样的人物身上了。但是，他没有把大权交给这些人，说明他对党对国家还是很负责任的。</p>\n<p>　　这里再说一句，粉碎“四人帮”以后，我们公布了很多主席讲的话。但是，实际上主席还讲了另外一些话，就是在批评“四人帮”的时候也讲过另外的话，就是说对这些人还是要帮的，为什么帮呢？第一发动文化大革命他们有功，第二和林彪斗争特别是70年的庐山会议他们有功，这两个功还是功不可没的，这个事情我们在这个《毛泽东传》里都写了，跟大家做一个交代。</p>\n<p>　　提问：有人说，毛泽东“开国有功，建国有过，文革有罪”，请您评价一下。</p>\n<p>　　李捷：这个话讲得不公道！为什么不公道呢？它比较片面。毛泽东建国以后有没有过呢，当然有过了，这是毫无疑问的，而且有些是重大的。《历史决议》讲了，有些是全局性的，“大跃进”是经济建设中的全局失误，“文化大革命”是政治的和整个社会、党和国家的一个劫难，这是全局性的失误，这是毫无疑问的。但是同时，刚才我也讲了，毛泽东在做这些事情的时候，第一他有他的考虑，他的考虑是从党和国家的角度考虑问题，尽管这些东西后来发生偏差。第二他在很多地方是有功的，是有贡献的，所以对人要具体问题具体分析，而且要公道、公允。我们对林彪、对高岗都尚且如此，对毛泽东更应该这样。所以仅仅说建国以后有过，是有失公允的。“文化大革命”确实是死了很多人，迫害了很多人，最不可原谅就是少奇同志的冤案，毛泽东对此有不可推卸的责任。但是如果说到法律责任，毛泽东负什么样的法律责任的话，我说他是负有一种领导的责任。如果要追究毛泽东迫害人的罪过、罪行的话，还追究不到这个份上，追究不到毛泽东身上，所以这个问题是应该做一个分析的，我是不同意这种简单化的说法的。</p>\n<p>　　提问：我觉得李老师的报告通篇贯穿着唯物史观，比如把历史上的事情放到当时的历史环境中去考察，具体问题具体分析，伟人在历史上起到“四两拨千斤”的作用，等等。我非常赞同您的看法。我的问题是，毛泽东一生探求的问题，也就是保证党的性质不变质、不变修的问题，现在是不是已经解决了？</p>\n<p>　　李捷：这个问题提得非常好，我也在思考。至少我个人现在是这样认为的，就是我们现在也还没有解决这个问题，还在探讨。现在中央对这个问题很警觉、很重视，在探索，在想怎样解决，但是这个问题并没有解决。这个问题依然还是问号，而不是句号。现在我们党有一个变质的危险，这个变质的危险，用形象的话来说就是，会不会变成一种富人的俱乐部。我这样提可能大家也就明白了，危险主要来自于哪个地方？最令人担忧是哪个地方？还是来自于高层、党的高层领导干部，他们的屁股会不会坐偏了？我们也到了一些地方，发现了过分强调GDP的问题。现在强调发展是硬道理，搞GDP，这是毫无疑问的。那么这里面就有一个问题，有些地方干部跟我们讲：现在我们也没办法，上面层层压指标，省里面到中央说10％的增长率，给我这儿要求可能就是16％。要有这个增长率，每年就要有新的亮点。新的亮点怎么办？现在国有的投资投一个垮一个，我怎么办？就得依靠纳税大户，实际上就是大老板。另外，现在社会稳定责任到人，如果我这个地方谁去闹事、上访、告状，马上下来要追究我责任。谁现在是麻烦的制造者？下岗职工、贫苦的农民。这个话很难听，但是他们讲的确实是实话。这是一个细胞，这是我们执政的一个单元。久而久之，如果这个单元放大以后成为一个整体，就有一个我们究竟代表谁、我们究竟屁股坐在谁那一边的问题。</p>\n<p>　　现在中央提出科学发展观、以人为本等等，可能都想平衡这个问题。但是，任何平衡不可能走在一极，比如索性先不管发展如何，把用来要发展的钱索性先救济穷人，那也是一条路。但问题是，如果这样的话，社会扩大再生产的资金从哪里来？发展速度从哪里来？而且，大家都知道，我们现在面临着整个世界的竞争，不要说我们不发展了，就是发展慢了，也会在世界上的竞争中败下来，最后的失败还是社会主义的失败。这个也是血的东西。所以我想，现在中央和各级领导都有一个兼顾发展和始终站在老百姓一边，兼顾决断的高度和发展人民民主的两难课题，做到熊掌和鱼兼得。这恐怕不是烹调大师，而是烹调艺术家才能做到的事情。这是比较难的，但又是非常重要的。</p>\n<p>　　提问：40年代的时候，共产党的新闻媒体都非常强调民主、自由，现在反而不如那个时候，请问这是什么原因？是不是因为共产党的性质发生了改变？我们如何加强党在这方面的领导？或者能否把这个方面放开，实行西方式的新闻出版自由？</p>\n<p>　　李捷：这个问题实际上毛泽东在进城之前已经讲到过。他说，我们现在是争民主，反迫害、反饥饿，反独裁。可能有一天我们进了城，到了现在国民党这个位置以后，到那个时候说不定老百姓也上街对着我们，跟我们要民主，要饭吃。他那个预言不幸言中。到了1956年，大家都觉得这是凯歌行进的时期，建立了社会主义制度，而且“一五”计划实施得非常顺利。但实际上，到了1956年的时候，群众闹事非常多。按照当时的统计，工人罢工就是1000多起，学生罢课是2000多起。当时很多领导干部就认为这背后有黑手，要抓阶级敌人。毛泽东提出来正确处理人民内部矛盾的问题，原因就在这儿。他认为，现在时代变了，情况变了，我们成了执政党，我们面对的大量问题，包括罢工、罢课问题，大量反映的都是人民内部矛盾，是反映了人民群众和我们政权内部少数人脱离群众、官僚主义作风之间的矛盾。从更深层的意义上来讲，反映了经济基础和上层建筑、生产力和生产关系既适应又不适应的矛盾。他认为，应该从这个地方作为突破口，来改进我们党和国家的政治生活，推进人民民主。所以他当时有一个名言，叫做“要利用群众闹事，来解决我们政府内部存在的官僚主义作风”。第一他不赞成，第二他不怕，而且还要利用它来解决我们的问题。但现在这句话我们一般都不用了。为什么？跟现在整个思路不一样。换了位以后，就有这样一个问题：当年提出的口号你要兑现，但是你不能马上兑现。不仅有些口号不能马上兑现，而且还会有新的矛盾产生。原来你可以利用新产生的矛盾推翻现政权，但现在你就是现政权，你逃也逃不掉。这个问题是比较难的。现在还没有发展到你刚才讲的执政党变了性质的程度，但是我们现在是执政党，所以很多矛头对着我们。对着我们的这些矛头不能简单地用专政工具的办法、镇压的办法，不能简单地用国家的暴力机器解决这些问题，大量还要通过人民民主的办法，解决人民内部矛盾。从这个意义上来说，人民内部矛盾的问题也是现在一个永恒的课题。而这个课题的解决与否，和我们的长期执政地位这个永恒课题是紧密地联系在一起的。谢谢！</p>\n<p>　　主持人：非常感谢李捷同志。李捷同志是领导干部，但是他以一个学者的坦诚和我们做了坦率而深入的交流。今天有机会请李捷同志就他在长期研究特别是撰写《毛传》九年当中的一些体会和大家进行交流，我们都获益匪浅。历史像一把折扇逐渐展开，也许离得越远看得越清。正像李捷同志所讲的，实践没有停止，认识也不会停止，非常希望以后还有更多的机会向李捷同志请教，再做进一步的交流。</p>\n<p>　　李捷：非常感谢大家，也祝大家新年愉快。</p>\n<p>　　主持人：报告会到此结束，谢谢各位的光临。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"对毛泽东新中国探索的再思考\"><a href=\"#对毛泽东新中国探索的再思考\" class=\"headerlink\" title=\"对毛泽东新中国探索的再思考\"></a><strong>对毛泽东新中国探索的再思考</strong></h4><p>——中共中央文献研究室副主任李捷在中国社会科学院报告速记稿</p>\n<p>李捷</p>\n<p>　　主持人：同志们，今天我们院马列所、新闻所、青年中心和政治学所，荣幸地邀请到了中央文献研究副主任、《毛泽东传》（1949-1976）的主要作者之一的李捷同志，给我们做“对毛泽东新中国探索的再思考”的学术报告。我们对李捷同志的到来表示欢迎。</p>\n<p>　　去年毛主席诞辰110周年的时候，一部反映中国当代历史，反映几代人的生活和经历的重要历史著作《毛泽东传》(1949－1976)诞生了。这是一部鸿篇巨制，是对我们党的历史、对我们国家的历史、对我们伟大领袖毛主席后半生的一个重要总结，也代表了我们党对这段历史的看法。我有幸，在这之后结识了李捷同志。作为一个学者、一个历史学家，能够参与这样的著作，应该说是一生的幸事。作为一个学者（在座的都是学者或年轻的学生），都希望自己能够留下传世之作，我想李捷同志已经是达到这样境界了，很了不起。去年我们也曾邀请李捷同志来，但是当时他太忙了。今年临近岁末，在毛主席诞辰111周年前夕，我们把李捷同志请来，我想他的报告一定会对我们大有教益。下面我们就把时间交给李捷同志。</p>\n<p>　　李捷：首先我非常感谢房宁教授，也感谢邀请我的各个所。在这样一个时间，年终岁末，各种事情都要做个了结的时候，能占用大家的时间，跟大家做一个交流，很难得。</p>\n<p>　　我今天交流的题目是“对毛泽东新中国探索的再思考”。在讲这个题目之前，我简要地介绍一下我自己的学术背景。我是1978年上的大学，在这之前当过兵，当过工人。1978年上大学，但是那个时候我没有能够考上第一批78年录取的，当时北京市委书记林乎加做了一个决定，将当年高考300分以上的同学都统统地网罗一遍，成立分校，我进入北师大的第一分校，在东大桥那个地方，读历史系。四年毕业以后，1983－1986年是在中央党校读的党史专业的研究生。我原来有一个误区，以为党史和历史这两个学科是一回事，只是时间段的不同。到了那儿学习，我才发现，这是两个不同的学科，包括学术的方法和理念都不同，但不管怎么样，它也是研究历史。这两个结合对我后来的成长有了很大的帮助。毕业以后就到了文献研究室，分在毛泽东研究组，一直干到现在。</p>\n<p>　　《毛泽东传》是在主席诞辰100周年以后1994年启动的一个项目。当时，文献研究室的领导把建国以后的《毛泽东传》这部分交给了我和高文谦。他现在在美国，写过《晚年周恩来》。当时的想法不是现在这样的《毛泽东传》，而是一个合传，就是把建国前和建国后一起写下来。但是，建国后的部分难度非常大，当时是按照评传来写的，评传是以评要为主，因为既然是代表中央，是一种正传，我们是按照传统的路子来写这个传记的，评传的写法。很多本著名传记，如《拿破仑传》、《俾斯麦传》、《罗斯福传》都是这样的写法，也是国际上通行的写法。但按这种写法，我们试了两三年以后发现不行，这个路子行不通。这时候高文谦基本上不怎么搞了，他是借着机会搞了很多的档案材料，后来借着探亲的机会跑了。实际上《毛泽东传》他一个字都没写，“文革”部分的任务就落在另外一个人身上，就是我的同事安建设，我们俩就共同探索这条路。到了1996年的时候（整个《毛泽东传》一共前前后后九年的时间）写不下去了，于是我们决定完全抛开评传的写法，转而从历史材料里面来见真实，用材料来说话，实际上采取了孔子开创的春秋笔法，述而不作。实际上，我体会述不可能不作，但是这个作要体现在述里面，实际上这也是《史记》的笔法、太史公的笔法。这样写下来以后得到大家的认可，说明这个传记还是经得起大家的认可的。这样一来，后传与前传就彻底脱钩了。前传大家都看到过，1996年出版的，是金冲及同志主持来撰写的，这个路子基本还是评传的路子，但是比评传往前迈了一步。这个传到了去年才写出来，在这个过程中，我们室的好多领导都在催。我觉得既然要出一个经得起历史检验的东西，就要耐得住性子。在这个过程中，我们单位有一个得天独厚的条件，就是大量档案材料都有复印件在我们单位（原件都在中央档案馆），既然我们占据着这样一个得天独厚的条件，那就有一个义不容辞的责任、历史的责任，就要把历史原原本本地写出来。当然，坦率地讲，我们不可能把所有的材料都写进去，因为：第一受篇幅的限制，第二受现在各种各样的情况的限制，有些东西不太好写。不好写的原因主要还不是因为说出来以后有损于毛泽东，而是说对现在有些人不利，这还是有一些禁区的。但是，我们保证一条：凡是写出来的东西都是真实的。我觉得能够做到这一点，将来过了几百年以后，那个时候恐怕档案能都开放了，人们拿着这本书对着档案看了，说这些人还可以，还能够把历史的档案原原本本地表现出来，我们就心满意足了。</p>\n<p>　　今天我想跟大家交流的主要是我自己这些年写《毛泽东传》的一些体会。这些年，我在国际上参加了一些国际上的学术研讨会，包括去年12月初在波士顿哈佛大学费正清中心召开的研讨会，题目是《再谈毛泽东》。这些年，有各式各样的说法，有赞扬毛泽东的，也有反对毛泽东的，也有根本上包括他的人格都否定的，各式各样的议论，所以我想结合这种情况，谈一点自己的体会。我觉得如果概括起来讲，毛泽东在建国以后的探索，主要是做了三件事情：</p>\n<p>　　第一件事情就是搞建设。有的人讲，毛泽东根本不懂建设，而且兴趣也不在建设，没有认认真真搞过建设。这是一种误解，毛泽东在建国以后用相当大的精力搞阶级斗争，这是不假，但是他也用了相当大的精力搞建设。但是这种建设不是一般性的建设，而是有一个主题，就是我们说的现代化的建设。从严格意义上讲，按照现在现代化的理论来讲，实际上毛泽东所探索的主要是初级工业化这个阶段的建设，他是想通过社会主义这样一种制度实现中国的初级的工业化。毛泽东经常将现代化和工业化经常混用，他没有严格地区分两者的界限。</p>\n<p>　　第二件事情就是在外交上谋求中国的大国地位。中国的大国地位在近代以来失落了，在第二次世界大战结束以后，尽管中国进入了安理会，但是中国实际上没有自己的大国地位。</p>\n<p>　　第三件事情和后来“文化大革命”的失误是有关系的，就是怎么巩固中国共产党长期执政的地位，当时的话叫“江山不能变色”。</p>\n<p>　　他做了这么三件事。这三件事，我就一一地介绍一下情况，谈一下我自己的认识。</p>\n<p>　　一、关于现代化建设。</p>\n<p>　　在现代化建设中，他做了很多很多的事情，具体的过程我就不去多说了。如果说起来的话，很多了，包括“一五建设”，后来提出的“十大关系”，初步总结我们建国以来的工业化的经验，到《关于正确处理人民内部矛盾的问题》提出来的中国自己的工业化的道路，接着发动“大跃进”等等，到了六十年代中期又搞“三线”建设。这里有一条线，一直到上个世纪七十年代，这都很清楚了。我想概括地讲，他在建设中，实际上做了三个重要的选择，对我们共和国的发展，一直到现在都产生很大的影响。</p>\n<p>　　第一个选择，是制度方面的选择。工业化有很多很多的道路，有很多的制度选择，包括资本主义的制度选择，包括社会主义像苏联那样的制度选择。在当时来说，这种制度选择对毛泽东来说是天经地义的事，作为那一代的共产党员，他必然毫不犹豫地选择社会主义的制度，通过社会主义的制度安排，来实现现代化，实现工业化。这是中国共产党义不容辞的责任，当时这是一个不容辩疑的真理。这个选择从中国共产党诞生之日起，从毛泽东选择马克思主义信仰开始，对于这一代人来说，这是不成问题的问题。</p>\n<p>　　在制度选择里面，还有一个问题。在当时来说，选择了社会主义制度，选择了社会主义的道路，实际上就是选择苏联道路。在当时来说，就是在他最初进行选择的时候，在1949年新中国成立以后，当是有一句很著名的话“苏联的今天就是我们的明天”。当时是这么一个状况，所以那个时候，我们在现实中确实很难避免这样的选择，因为我们没有经验，我们没有起家的本领，我们更没有先进的技术，在当时先进的技术西方对我们是封锁的，所以我们只能取之于苏联为首社会主义的阵营。同时，与我们对社会主义的认识也是有关的。当时认为，要搞社会主义就是要走苏联的道路，就像当年在探索出井冈山道路之前，我们认为中国既然要搞无产阶级革命，就要走十月革命的道路。所以，在那个时候，包括“一五计划”的制定，都是在苏联的帮助之下。像李富春这些领导人都是身经百战的，但是到了苏联以后甘当小学生，从ABC学起，请苏联的计划经济专家来给他们讲课。我们的“一五规划”，实际上在苏共政治局里面是经过了多次的讨论。</p>\n<p>　　客观地讲，当时，中苏关系处在一个蜜月时期，苏联对我们的帮助是巨大的，这个对于我们“一五计划”的顺利实施起了非常重要的作用。这个作用也不能抹煞，而且这里面很有意思的、也值得研究的是，我们第一个五年计划的制定形成了厚厚的一本书，这本书实际上包含了苏共中央和苏联的搞计划经济的人，对于苏联长期以来计划经济的经验，特别是它失误的地方有一种反思，而这种反思实际上体现在“一五计划”里面。这些方面很值得研究，这些材料现在在俄罗斯的档案里面都有，是不难找到的。当时，他们确实对我们有一些劝告，包括指标上。他们当时说，我们过去制定的指标太高，你们制定指标的时候保守一点，最后能超额完成，这样能鼓舞士气，而且整个的国民经济在计划里面容易平衡，过去我们老搞高指标，后来没办法只好一降再降。但是遗憾的是，我们后来到了“二五时期”，受到“大跃进”的影响，把苏联老大哥教给我们的这个经验给忘了。</p>\n<p>　　我们常说，我们现在转轨变型是从计划经济体制变成市场经济体制。实际上，中国根本就没有典型意义的计划经济体制，我们的计划经济体制实际上有一点“四不像”。但是也正因为“四不像”，我们在转轨变型的时候比前苏联要顺当得多。破绽多，漏洞多，模式不成型，制度不成型，反过来要搞改革时突破口就多，借助的力量就多，这个是相辅相成的。如果做一个简单的类比的话，跟西方相比，我们的奴隶制度不典型，所以我们转到封建制度很容易。而在封建时期，我们形成了洋洋大观、潇潇洒洒的非常典型的封建制度（我个人认为，中国的封建制度是封建制度的典型，西欧不是典型），但这也就意味着从封建制度转成资本主义制度是相当困难的。</p>\n<p>　　经过了这个探索以后，毛泽东在1956年，对整个的情况有一个反思。我们在写《毛泽东传》的时候，特别注意对毛泽东心理状态的观察。我们通过很多的材料来引证，发现毛泽东自1949年开国大典后，每次走下天安门城楼，他并不高兴。很多人反映，那几年他有点郁郁不欢。我猜想其中一个原因是担子重，未知数多，这是一个方面。而最重要的方面还是毛泽东自己讲的，很长一段时间我们是当了苏联人的奴隶，跟着他们的屁股后面走，什么都学苏联的，苏联得了感冒，我们也跟着打嚏喷。所以他说，到了1956年“十大关系”出来以后，心情才开始高兴起来。从这个地方开始，中国要走一条自己的道路了。毛泽东意识到中国不能照搬苏联的模式，但要走自己的道路，必然要付出巨大的代价。任何一个决策没有代价是不可能的。而且，你的目标取向越高，付出的代价必然也越大，它的风险也越大，这是成正比的。我们后来在现代化、工业化这条道路上跌了很多的跤。</p>\n<p>　　但是有一点，我们在《毛泽东传》已经反映了，毛泽东还是汲取了“大跃进”失误的教训的。尽管在庐山会议上彭老总给他上万言书，他看了以后火冒三丈。但是也有个过程，刚开始他不以为然，后来几个大区书记去跟他说，现在有一个跟谁的旗的问题，你再不说话的话，人家就跟彭老总的旗跑了，这个时候毛泽东重视了起来，他一晚上睡不着觉，在不冷静的情况下讲了关键性的话，这个历史教训是值得吸取的。</p>\n<p>　　在建国前，毛泽东讲了一个经验之谈。在井冈山的时候，毛泽东的性情是非常暴躁的，他是性情中人，也是一个不拘小节的人，一个大手笔的人。他的弟弟毛泽覃有一次因为一个事情和他争论了起来。（毛泽覃当时也在红四军，也在井冈山。当听说朱老总的部队在韶山附近活动之后，主席先是派了毛泽覃去，后来派了何长工。他的弟弟后来牺牲了。）毛泽东当时有点说不过他。就急了，就要动手打他。毛泽覃就说：“这是共产党，不是咱们毛家的宗祠。”主席说，他这一句话把我震醒了。毛泽东从一个具有开拓精神的地方领导人成长为一个全党公认的领袖，跟他后天的修养、磨炼是分不开的。他后来也经常讲，往往做决策的时候听到不同的意见，脑子一热就要发脾气，这时候最好不要发作，睡一觉，到第二天早晨什么都好了。这是他的经验之谈，但是这一次他睡了一觉之后，反而是火冒三丈，在一个不冷静的情况下，打破了两件事、延安整风时定的规矩：一是就事论事，不算历史旧帐；二是只对事不对人。就毛泽东一生来说，他在大多数情况下确实是这样来做的，宽大为怀，对很多的干部都是这样的，胸襟是像海一样的。在他看来，这次对彭老总的事情不是一般的小事情，是大事，既对事又对人，老帐新帐一起算。这个口子一开，坏了，所以《历史决议》上讲庐山会议破坏了党内正常的民主生活。</p>\n<p>　　但是，庐山会议以后，毛泽东也在冷静地思考。到了1963年的时候，要制定第三个五年计划，当时计委的同志脑子很热，定了很多的高指标。主席就把李富春他们叫来，对他们说，现在我们一定要吸取过去的教训，定指标的时候千万不要以我们这些人的寿命来计算时间。这句话很了不起，他是痛定思痛。所以，1965年他让彭老总到四川大三线当副总指挥的时候跟彭老总说，也许将来历史证明你是对的，这里面就有些反思的表现。但是话说回来，他的反思也不是彻底的，也有反反复复，跟我们正常人一样的，在这方面我们不能苛求于他。</p>\n<p>　　在制度方面的选择，尽管付出了代价，但是基本上还是成功的。到了七十年代中期的时候，我们建成了一个独立自主的、相对比较完整的工业体系和国民经济体系。我们基本上什么都可以造，从什么都不能造到基本上都可以造。当然，什么事情有利必有弊。从历史的延续性来看，当时比较强调独立自主，为什么？因为我们是从半殖民地半封建的经济体系，什么都仰仗于西方发达国家、受到西方发达国家不平等的经济盘剥的依附性经济，走到一种独立的国民经济体系。在此过程中强调独立自主有其合理性，也是符合国家的利益的。至于说把这个问题强调到了极端，在我们已经建成了一个独立自主的国民经济体系以后，完全跟国外的经济发展、经济联系完全脱钩，闭关锁国，闭关自守，这也是错误的。对这个问题要加以分析。从理论上来说，我们意识到“文化大革命”的一些错误做法并纠正它，这是毫无疑问是对的，由此产生了改革开放这样一条路线，这是正确的。但是另一方面，如果从历史的长河来看，这种发展有它的阶段性，也就是：只有你建立了一个独立自主的工业体系和国民经济体系以后，你才有可能在自己国家独立主权的情况下，去向世界敞开国门，去平等地、互利地打交道。没有这个基础不行，固守这个基础也不行。这个问题要做一种辩证的思考。</p>\n<p>　　第二就是路径的选择。制度的选择之后有一个路径的选择。这个路径的选择，我指的是一种比较低层面的路径选择，主要是指农轻重之间的比例关系。要搞初级的工业化，这个时候工业在创始阶段，这笔资金不可能从工业内部、第二产业内部产生，当时更谈不上第三产业，那么资金的来源，也就是原始积累的资金来源只能是有几种途径：要么就像西方一样通过殖民扩张来取得；要么就是牺牲农民的利益，像当时英国的“圈地运动”这样一种东西，还有一种就是像苏联一样来搞高积累，也是带有牺牲农民的色彩。</p>\n<p>　　作为中国来说，毛泽东在路径的选择上是很艰难的，怎么艰难呢？你仔细看他的《关于正确处理人民内部矛盾的问题》里面，如果从表面的形式逻辑来看，你会发现有一个矛盾，他一边说重工业的优先发展，这是搞工业化的一个客观规律。你不搞重装备怎么能建立你的工业基础啊？不可能的。但另一方面他又讲，一定要农业优先，按照农轻重的比例关系来安排生产。从形式逻辑来说，你看到它是一种矛盾，这里面就反映了一个客观的事实，就是说在初始工业化阶段必然要优先发展重工业，这是一个基本的事实。优先发展重工业这部分的启动资金，我们称之为原始积累的这些资金，从哪里来？不可能从工业本身解决，主要的不能靠工业本身来解决。当然轻工业的积累可以解决一部分，但是不能解决主要的部分。而且社会主义国家不可能去对外掠夺，中国的国情也不允许，中国的历史传统、中国的国情不允许这样做。只有一种办法就是要从第一产业，从农村经济、从农业生产取得一部分优先发展重工业的资金积累。这是一个方面。另一方面，毛泽东也看到了，中国是一个农民为主体的大国，无粮国家是不稳定的，农民不稳定就会起来造反，政权就会不稳定，所以要发展农民经济、改善农民的生活、发展农业。这就是毛泽东面临的一个两难的课题。</p>\n<p>　　在这样的情况下，他就在《论十大关系》中提出了一个辩证的思维逻辑，他试图把从形式逻辑来看是矛盾的东西，通过辩证逻辑、辩证思维统一起来。他讲道，你要想多搞一点重工业吗？那你就要优先发展轻工业，要优先发展农业，要多往这里投一些资，投资的目的是什么呢？投资的目的还是为了从里面取得更高的收益和积累，同时保持社会的稳定。他就是这样把一个矛盾的东西试图通过这样一个理论统一起来。毛泽东那个时代在这个问题上基本是两头兼顾的，做得还是比较好的。我们现在讲科学的发展观和五个统筹，把统筹兼顾的思想、统筹的思想往前推，最后必然要提到《关于正确处理人民内部矛盾的问题》这篇文章。</p>\n<p>　　应该说毛泽东在这个问题上不愧为一个解决矛盾的大师，一个化解矛盾的大师。当然，化解矛盾并不等于说这个矛盾不存在，还是存在的。这个时期，也就是整个毛泽东的时代、完成初级工业化的时代，实际上是跟我们现在叫做反哺农业相反的一个时代，就是说要从农业中取得积累，支持工业发展的积累。但是要取得积累，必须在这个积累的过程中给农民、农业相当多的投入，要给他一定的返还，所以他把这个取和予这对矛盾统一起来，取的方面要重一些，予的方面要小一些。小一些，但是也要考虑到农业、农村、农民的最大承受能力，有一个临界点，有一个度。这个度，总的来说，在毛泽东时代他是把握得比较好的，但是不是说他这个思想是贯穿始终的。比如说“大跃进”的时候，他受到一些表象的误导，做了一个错误的判断，他以为当时的农民思想比工人还先进。那个时候他讲，现在谁的思想最先进？我看不是工人阶级，而是农民，农民可以发扬共产主义的风格，最后导致剥夺农民。从第一次郑州会议开始，毛泽东用了两年多的时间，一直在解决这个问题。两年多以后，特别是到了三年困难时期，又继续解决这个问题，到1963年重新修订（1961年初步制定）的时候才基本把这个问题解决了。这个以后一直到文化大革命，他再也没有犯这样一个历史性的错误，这个教训还是汲取了。</p>\n<p>　　在我国现代化的过程中（我们在70年代中期完成了初级工业化以后，后来进入到改革开放时期，提出现在这种全面的、全方位的现代化），实际上有一种历史的惯性，就是我们长期习惯了这种取的这一手比较重、予的这一手比较轻这样一种历史的惯性。到了现在，在实现初级工业化阶段以后，我们应该反哺农业了，不是再从农业里面取得原始积累，而应该从第二产业、第三产业取得一些现代化的后劲和动力，也包括借助一些国外的投资，解决国内发展的资金问题。由于这种历史的惯性作用，到现在为止我们仍然没有摆脱这个困境。就是现在的三农问题实际上是因为我们从这边取的太多，予的太少，没有真正形成一种反哺农业的这样一种良性循环的模式。在联产承包责任制开始实行的那些年，那是农民日子最好的时候。那时候实际上给农民一种休养生息，但是以后就不行了。这里面也跟我们政治体制改革有关系，政治体制改革滞后，我们的基层政权很多很多的行政负担不但没有减少，而且加重，这种行政的负担很多的最后都转嫁到农民身上。</p>\n<p>　　现在，中央对这个问题相当重视。最近有几个省份已经宣布取消了农业税。但从内部来看，我一直觉得这个问题将来也会有副作用的。从农民来说，你要加强他的国家观念。其实，农民几千年来交粮纳税，这是天经地义的事，关键是轻徭薄赋。而且在交完了以后，为了培养他的国家意识，应该是通过各种渠道，不要层层盘剥、层层截留，最后返还到农民身上，这样就比较好。但现在因为返还实现不了，只能是完全免除。完全免除，在农民的国家意识这方面可能会有一些副作用，但是今后的人可能更聪明，会有更好的办法。</p>\n<p>　　第三个选择就是外部关系的选择。这个问题实际上我刚才在讲制度选择的时候已经讲到了，这就是：就对外关系来说，我们要自力更生、独立自主地实现现代化。毛泽东的考虑是从历史延伸下来的，因为我们原来是半殖民、半封建这种依附性的经济，要独立起来。同时，客观上也有一个问题，就是西方这些国家对我们不仅是封锁，而且还制裁，希望把我们扼杀在摇篮里，希望我们早晚有一天要完蛋。这个问题因为前面已经都讲到了，这里就不多说了。</p>\n<p>　　二、关于争取大国地位。</p>\n<p>　　毛泽东的第二件事情就是争取中国的大国地位。这一方面毛泽东对中国来说是功不可没，我们到现在还在享受着毛泽东当年为我们奠定中国大国地位基础的好处，受益匪浅，到现在为止还是这样。<br>　　关于争取中国的大国地位，有必要实事求是地还原到中国原来的历史情况，我把这个称作历史还原法。为什么呢？我们现在很多时候都用现在的事来判断当年的是与非，用今天的观点来判断当年。很多的同志、很多学者在研究的时候，他也力图不要用现在的观念来判断当年的事与非，力图客观一点，但是由于他缺少一种必要的历史还原，缺少对当年这些领导人每天生活其中并与之打交道的这个世界的基本特征的把握，所以往往自觉不自觉地用今天的是和非来评判当年的是与非。所以，我是一直认为这个历史还原法是非常重要的。在我们研究一个问题、研究一个概念的时候，一定要注意运用这样一种方法。</p>\n<p>　　如果还原到当年，就是50年代之前的话，当时第二次世界大战刚刚结束，世界上有两个基本特征。首先，就是人们普遍担心第三次世界大战爆发。本来，在十九世纪末，很多的经济学家、社会学家包括政治学家对二十世纪人类的进步充满了一种很好的憧憬、美好的憧憬，信心很足，很看好。结果没想到进入二十世纪以后，在半个世纪之内，人类连续发生了两次世界大战，而且整个的经济特别是资本主义经济在1929年陷入了一个空前的危机，出现了一种社会、政治的危机，而且这种危机对全球、对整个世界，除了一些不发达的地方、很闭塞的地方，都产生了冲击。在这样一个情况下，在第二次世界大战结束以后，大家普遍关心的问题就是，第二次世界大战以后这个和平的局面究竟能维持多久？第三次世界大战什么时候会爆发？可不可以避免？这是当时人类共同的一个问题，不是毛泽东个人面临的问题，包括斯大林、罗斯福等等，都面临着同样的问题。</p>\n<p>　　为了要解决这个问题，就出现了第二个基本特征，就是罗斯福、丘吉尔和斯大林在一起通过雅尔塔会议，也通过这之前一系列的国际性会议，确立了一个两极格局，当然还有一些其它的大国，初步确定了苏美的两极格局。两极格局对于所有的国家，无论你是大国，小国也好，在寻求国家独立的时候都是不能不考虑的。<br>　　我为什么要讲这个背景呢？这就跟毛泽东为争取中国的大国地位所做的第一件大事是紧密相关的，这件大事就是现在经常有争论的“一边倒”政策。</p>\n<p>　　在当时来说，作为一个新独立的中国，尽管它是一个大国，尽管它过去曾经在世界上有过辉煌的历史，但是毕竟这个时候是一个积贫积弱、刚刚得到独立的国家，况且还有一个敌对的政权在台湾，还占据着在联合国的合法席位。这个时候中国要取得国际上的承认，唯一一个现实的选择就是要在这两大阵营选择一个。当时对于要不要实行“一边倒”，在民主党派之间是有过争论的，有过议论的，而且这些人公推张治中向毛泽东进言。毛泽东跟他讲，我们不能搞在美、苏两边骑墙的政策，只能是“一边倒”。在这个“一边倒”的过程中，毛泽东同样面临着一个两难的选择，一方面我们要倒向苏联这一边，这是一个很现实的选择；同时我们又不能够成为苏联的小兄弟似的卫星国。怎么办？这就是毛泽东在第一次访苏的时候很艰难的一场斗争，既不能跟斯大林翻脸，但是又要结束苏联在中国的特权地位。整个的过程大家都非常清楚了，这都已经成为定论的东西了，包括俄罗斯的档案都已经公布出来了，这都是很清楚的，我就不多说了。这里我提供一个细节，实际上当时要订立中苏友好同盟互助条约，包括要收回旅顺这些港口，还包括当时我们曾经想过把外蒙古收过来，这些都在民主党派内部通报过。主席的第一次访苏都事先通报过，都征求过他们的意见，但他们都是跟共产党站在一边的，而且大家都认为毛泽东如果去了以后，把这几个问题解决了，那太好了，这是中国共产党对中华民族的一个伟大贡献。所以，在这样一个情况下，毛泽东第一次访苏可以说是只能成功，不能失败，达不到目的回来无颜见江东父老乡亲。这就是毛泽东在苏联软磨硬泡呆了两个多月之久的原因。弄得斯大林最后没招，只好适当地做一些妥协，当然我们也妥协。任何一个国际的谈判，任何一个国际条约、同盟的签订，没有双方的妥协是不可能的。现在我们把这种双方的妥协叫做双赢。这个问题如果放在当时、当地的特定背景下，我们就可以比较好看出这个决策的得失。</p>\n<p>　　第二个重要的事情就是决策抗美援朝。其实，抗美援朝大家也都知道，抗美援朝的是是非非、长长短短，现在大家都在说，见仁见智。抗美援朝有一个决策的过程，既是一个国内决策的过程；同时，这种国内决策背后也可以看到中、美、苏三国领导人智力的角斗。为什么这么说呢？当时，美国和苏联在国际战略上都没有局部战争的概念。在他们的眼里，在朝鲜半岛上打的这场仗，如果最后扩大为苏联和美国之间都出兵了，那就是第三次世界大战的爆发。苏联是这样认为，美国也是这样认为，这就是它们当时的一个国际战略的基本点，而他们双方都在力图避免由于这个地方引起两国的对垒，引起新的世界大战。所以在6月25日以后，美国人宣布要干涉朝鲜内政的时候，当时要开安理会，要成立联合国军，美国人有很多很多的准备。但是，当美国代表一进门后，看到苏联席位上马立克缺席，心里就美了。这表明苏联无意和美国人在朝鲜半岛问题摊牌，全面对抗，他心里就有底了。在这样的情况下，美国人以为可以不顾中国人的警告，以为中国人说话根本无足轻重，可以大胆地越过三八线。对于毛泽东来说，他第一招棋就放在阻止美国人越过三八线。所以在9月和10月毛泽东、周恩来连续三次发表声明，如果美军越过三八线的话，中国人绝对不会坐视不救。他们想控制这个局面，但控制不住，在这样一个情况下，中国最后没办法了，只能出兵了。</p>\n<p>　　出兵以后，毛泽东在考虑问题的时候有两个基本点：第一个就是要控制朝鲜半岛的局势，控制到什么程度呢？要避免朝鲜半岛问题国际化，局部问题局部解决，这就是后来的局部战争这个概念的由来。实际上是我们中国人通过朝鲜战争教训了美国人，美国人才从这里面得到了局部战争一个概念。第二个基本点是避免朝鲜半岛战争长期化、持久化，因为当时毛泽东认为持久对我们不利，但是这个问题后来有所改变。为什么持久对我们不利呢？主要是考虑我们国内对这场现代化战争的支撑能力，经济上和民心的支撑能力，能支撑多久？正因为有这样一个要求，所以就导致我们在抗美援朝过程中，特别是五次战役表现出了一个特点，就是越打也急，第四次战役和第五次战役，打得就有点没有节奏了，我们损失比较大，最后只能从汉城退守到三八线。在这个时候，即战争经过了一年后，出现了一个新的变化，就是国内的经济不但没有受到战争的影响，反而还受到了促进，经济在上升、在发展，因为民气起来了，包括民主党派、爱国的资本家，大家都起来了，加班加点为国贡献，支援前方、支援战争。不是战争影响了经济建设，而是促进了经济建设，这是毛泽东意想不到的。这对毛泽东后来对建设中一些东西的认识是很有影响的，这是后话。但在当时来说，这是一个非常重要的事情，毛泽东在这个时候就确立了朝鲜战争的方针，叫做“边打、边稳、边建”，“边打”就是朝鲜战争、抗美援朝战争；“边稳”稳定国内的局势，包括镇压反革命，因为当时暗藏在国内的反革命分子认为新的世界大战就要来了，中国共产党必败无疑，台湾马上就要反攻了，蒋介石马上就要反攻了，在这样一种情况下，要稳定国内的形势；“边建”就是搞经济建设。确定的是这样一个方针，也就是说国内的经济支撑能力可以使这个战争持久化，没有问题。</p>\n<p>　　与此同时，毛泽东也认识到，三八线实际上就是中美两国经济实力对比、国防实力对比的一个力量平衡线，我们打不过去，他也打不过来。在这样的情况下，毛泽东就向美国发了一个信号说，你愿意打多久，我就打多久。一直打到美国人愿意罢手为止，一直打到美国人愿意在和平谈判的协定上签字为止。在这样的情况下，新任的艾森豪威尔政府就软了。在做出一系列的分析以后，他最后得出结论，朝鲜半岛的战争持久化、长期化对美国不利。整个的战争局面随之有一个很大的转变。</p>\n<p>　　刚才也讲到，凡是决策必然要付出巨大的代价，包括中美关系长期的停滞不前，包括台湾受到影响，这都是抗美援朝所付出的代价。但是，抗美援朝的收获也是巨大的。对于当时中国来说，最大的一个“得”是什么呢？其它的还有很多，最重要的一个战略所得，就是在世界上树立起一个负责任的大国形象。这对中国不是句空话。为什么呢？过去中国政府说什么话，第一，没人听。第二，说了白说，没人怕。第三，没人信。你究竟能不能兑现，你说你不会坐视不救，我打了瞧，到你鸭绿江边，我看你敢不敢过来，跟你叫板。所以，这个“得”对于中国来说是非常重要的。所以，到了1954年开日内瓦会议的时候，美国人、英国人都一致地要邀请中国代表团。尽管他不给中国代表团相应的正式的外交礼遇。但是他承认，解决越南问题、朝鲜半岛问题，不能没有中国参加。十几年以后，美国在1964年前后制造了东京湾事件，这个事件实际上是一个战略上的试探。如果中越两方在这个问题上要示弱的话，包括苏联，它就可以派兵越过北纬17度线，扩大战争。在这样一个情况下，中国政府马上做出反应，周恩来总理代表中国政府宣布了三句话：第一句话是，如果美国人胆敢把战争扩大到17度线以北的话，中国的辽阔国土就是越南人民的可靠后方。第二句话，中国人从来不愿意和美国人打仗，但是如果这场战争和美国人打起来，战争没有国界，自己掂量吧。第三句话，中国人说话从来是算数的。这句话是一个外交辞令，实际上是在提醒美国人，你别忘了朝鲜战争。后来我听美国的学者讲，当时美国的五角大楼，就因为中国政府这三句话一周彻夜未眠。五角大楼忙活起来，赶紧去分析，包括调动它各种各样的侦查系统，最后得出结论，中国人说这几句话是要动真的。一直到1973年巴黎和约（越南问题的巴黎和约）签订为止，它从来不敢派一个兵越过17度线，它只敢狂轰滥炸。它不敢出兵，这对保证中国的国家安全，这个棋子是非常重要的。</p>\n<p>　　一直到现在，我们还在受益无穷。现在我们中国政府为什么说话还有信用？人家还怕？一般的声明，美国人、台湾人不怕。到了真正叫板的时候，说一句狠话、硬话，他还是怕的。为什么？跟这个教训有关系。现在美国人的心理状态是觉得，一般情况下，你不会像当年这些领导人这么干的。但是什么事情都有一个万一，万一最后逼急了，最后干一下，他还是很害怕。所以，现在外交部发言人讲，我们要启动国家的立法程序搞反对分裂国家法，这一下子现在美国人很惊惶。所以，我说抗美援朝对于我们今天还是受益无穷的一件事。</p>\n<p>　　第三是中苏论战，这是比较复杂的事情。我原来写过一些文章，做过一些分析。总的来说，中苏论战，就像小平讲的，双方都说了很多的大话、空话、套话。而且最后形成的一些理论观点，特别是“九评”里面形成的一些过“左”的、阶级斗争扩大化的一些理论观点，对后来的“文化大革命”的实践是非常有影响的。我们也为此付出了一些沉重的代价。但是，中苏论战有一条，没有中苏论战的话，中国不可能有今天独立自主的大国地位。我记得，90年代初期，在我们文献室的一次内部研讨会上，大家向胡绳同志提了一个问题，就是中国为什么没有走苏东的道路，因为当时苏联解体，大家都在考虑这个问题，而且也在担心中国会不会成为第二个苏东。当时胡绳同志讲了两点：一点就是《论十大关系》的发表。中国开始走自己的道路，而没有向东欧这些国家，把自己的经济命脉都系在苏联的老大哥身上，那就不是独立自主了。另外一个就是我们从中苏论战得到了一个实惠，就是我们从苏联老大哥的阵营里真正地脱出身来，彻底出来了。这样才树立了一个独立自主的大国的形象。而且我们在发展中国家、第三世界里面找到了自己的战略支撑点。</p>\n<p>　　在这一方面，我写过一篇文章，1998年我到美国哈佛的费正清研究中心参加了一个研讨会，会议上我递交的一篇论文就是这个，题目是《毛泽东向两极格局的挑战》。这篇论文，他们包括施拉姆教授看了以后，觉得有一定的道理，有一定的启发作用。这篇文章他们翻译成英文，收录到学术论文集里面去。但是题目他们换了，他们觉得这个题目非常刺激，很难接受。</p>\n<p>　　第四个是成功地研制了原子弹。这个我不多说了，这里就补充一个信息：毛泽东在1955年做出搞原子弹的决策的时候讲了一句话，“我们也要搞一点原子弹。”这句话看来很不经意地从毛泽东嘴里说出，但是事后想想很有道理。去年年初，我曾经跟咱们核物理工程研究院的前任院长，也是一个院士，见过一次面。他当时问了我一个问题，为什么毛泽东当年说搞一点原子弹？我说，对不起，这个问题我没有研究过，我只知道他说过这句话，但是他到底怎么说，我也没太在意。他说，这个“一点”特别有学问。为什么呢？要搞，不搞你没有大国地位。而且要搞就要早搞，像模像样地搞，搞晚了人家不让你搞了，制裁你，你就搞不成了。但是不能多搞，搞一点就行。多搞了，就跟苏联一样，要上美国人的当，被军备竞赛把你拖垮。这是中国的国力绝对不允许的。这个决策用今天的话来说有点“杀手锏”的意味，但是，原子弹对中国的大国地位来说远比今天的“杀手锏”更重要。原子弹爆炸以后，尼克松马上就改变了态度。尼克松当时还不是总统，他要竞选总统，他讲了一点，1965年他就讲过，再也不能够让中国逍遥在联合国等等国际机构之外，不能让它为所欲为了。我们要把它套回到国际组织里面去，让它成为像苏联一样负责任的大国。当然，他所说的“负责任”的含义跟我们所说的“负责任”是两码事。从这个来看，这件事情对于中美关系的正常化也是非常重要的。</p>\n<p>　　我想，我们和苏联决裂，真正成为一个独立自主的国家，不再依附于苏联的阵营，不再受控于苏联，这一点和我们成为核大国这一点一样，对于后来70年代中美关系正常化是起了非常重要的推动作用的。但现在俄罗斯的特别是俄共的学者（我跟他们有一些交流，打了一些交道）老是说这句话，我们苏联共产党怎么垮台的？很重要的一点，就是你们帮助美国人把我们搞垮的。他们到现在还对此耿耿于怀。</p>\n<p>　　第五件事，也是争取中国大国地位最重要的一件事情，就是启动中美关系正常化。这是非常重要的，这个历史过程我不细说了。这里面是非常有戏剧性的，把它拍成一个电影，搬上荧幕，都是非常好看的一个片子。这件事恰好是在“文化大革命”的中后期发生的。所以，我个人觉得，对“文化大革命”的本身的理论和实践的错误和“文化大革命”时期的所作所为，还不能完全等同起来。在“文化大革命”期间，我们还取得了一些重要的成就，这在《历史决议》里面也没有否认。在2002年中央党校和哈佛大学联合举办的国际研讨会上，我提交了题为《从中美关系正常化到中美建交》的论文。在这篇文章中，我详细地探讨了这件事的整个过程。这件事不是孤立的外交事件，内政和外交从来都是紧密联系在一起，我那篇论文试图从这个角度来讲内政和外交之间的互动。中美关系的正常化，得益的不仅仅是大国地位，它对于当时我们国内一系列的工作，包括落实老干部的政策、教育方针的调整等等，对于当时我们重新认识外部世界，都是很有好处、很有帮助的。</p>\n<p>　　说到这里，我顺便讲一个个人想法。我总觉得，如果要讲改革开放的历史的话，至少应该追溯到文化大革命的中期，才能够比较清晰地、比较实事求是地看出这一条历史脉搏的跳动。一个伟人在历史关节点所起的决定性的推动作用是必不可少的，但是历史伟人必须要在历史所造就的历史脉搏上跳动，才能够起到推动历史的作用，这就是四两拨千斤的道理。基础的东西还是历史脉搏的跳动。这跟我们在座的，所有的平民老百姓，所有思想界的人物，也包括一些老干部等等，这些人合力的作用是完全分不开的。</p>\n<p>　　三、巩固党的长期执政地位</p>\n<p>　　最后一个，就是巩固中国共产党的长期执政地位。这应该说是毛泽东在中国共产党执掌全国政权前后长期探索的一个历史性课题，也是在他去世以后留给后来的中国共产党人的跨世纪的历史课题。</p>\n<p>　　勾画一下毛泽东这一探索的历史线索是非常重要的，勾画这样一个历史线索，对于正确地认识和评价包括“文化大革命”这样一个被证明是错误的理论和实践都是很有益处的。很多东西被实践证明是错误的东西，对于我们研究者来说，也应该认真地去分析和思考一下，看看其中有没有一些合理的成份，有没有一些值得我们关注的问题。这比起我们很简单地去否定它，去拒绝它，甚至把它脸谱化、简单化要好得多。</p>\n<p>　　这一历程的第一步是建国前夕毛泽东提出的“两个务必”。他的第一个直觉就是，我们马上要进城了，我们马上要坐天下了。首先他就考虑了，我们这个天下能不能坐稳？会不会像李自成一样没坐多久，屁股还没有坐热呢，就被老百姓赶出来？当然，李自成是被清军赶出来的。这只是表面现象，实际上李自成一进城，包括进城前的所作所为和进城以后的表现，已经酿成了最后丧失民心的一个基础。所以，毛泽东考虑得更多的是怎么样不脱离群众、不丧失民心的问题。关于这个探讨，实际上毛泽东在1945年跟黄炎培的谈话中已经有一个基本的思想方向。黄炎培当时跟他探讨有名的历史周期律问题，他当时非常肯定的讲，中国共产党绝对不会蹈历史的覆辙。靠什么呢？靠民主。但是，对于民主，不同的阶级有不同的界定、不同的理解。毛泽东对它的理解，从上下文来看，实际上是人民民主，就是靠人民群众对人民政权实行监督，保证它不能腐败。人民民主的思路是对的，问题在于用什么形式、什么途径来实现人民民主。这应该说是毛泽东后来一直的探索，包括在“文化大革命”时期。</p>\n<p>　　第二个重要的探索步骤是建国以后多次的整党整风。大家都知道，延安整风是我们党的一个成功整风运动，但是也有后遗症，这就是后期发生的“抢救运动”。延安整风实际上是党的一种自我教育，用现在的话来讲，它是一种关门整风的形式。建国以后刚开始搞的整党，也是关门整风的形式。关门整风，毛泽东后来感觉到总是有局限性。到了57年提出《关于正确处理人民内部矛盾的问题》理论的时候，他就提出了一个发动党外来监督，帮助中国共产党整风。我们现在经常讲党外监督，其实毛泽东当时已经形成了这么一个想法，要将党内的监督和党外的监督结合在一起。发动民主党派，给共产党提意见，帮助共产党整风，这个思路很好，但是不幸的是，后来反右派斗争扩大化了。当时确实有右派言论，这个我们在传记里写了。现在很多人纠缠这么一个问题，当时扣右派帽子的人绝大部分都平反了，只剩下少数的几个人，那说明你这个反右派斗争错了。如果说右派的言论，当时确实是有。我在这里面举了一些具体的例子，比如要在党外成立平反委员会，要清算共产党从整风土改以来的问题，实际上是搞平反冤假错案了，等等。而且有的人讲了，毛泽东是大和尚，可以给小和尚提意见，不能给大和尚提意见，这些东西都是对共产党执政的不满情绪。如果在当时来衡量，还是一种右派言论。但是问题在于，把提这些意见的人划成右派是错误的，因为这些人长期和共产党共事。从方法上来说，右派言论和右派分子不能划等号，不能因为说了些你觉得是大逆不道的话，就扣上右派的帽子，这是不对的。反右派斗争扩大化以后，毛泽东对民主的问题有一个新的认识，这就是大家很清楚的“大民主”的思想，大鸣、大放、大字报、大辩论。实践证明，它是有害的，很容易使运动失控。</p>\n<p>　　接着，到了50年代后期有两个重要的事情：一个是庐山会议，前面简单地说了，这里面就不多说了。还有一个就是提出了防止和平演变的思想。这个思想在1959年提出来的时候是正确的。我们现在也还存在这个问题，就是西方敌对势力对我们实施西化和分化的问题。但是，在防止和平演变的时候，我们也要划清一个重要的界限：一个是我们内部的解放思想、实事求是，再探索一条新的改革的道路，这个过程中的种种探索，不能把它简单地和修正主义、右倾思潮划等号，这个问题当时没有完全搞清楚，这是一个教训。但是作为整个的战略来说，它的考虑还是有战略预见的。</p>\n<p>　　作为防止和平演变思想进一步的发展，60年代中期就形成了“反修防修”的战略。“反修”就是国际上的中苏论战，“防修”就是国内的“四清”运动，这两个运动实际上是一个战略指导下的两个重要车轮。刚刚我讲到了，对于确立中国的大国地位来说，中苏论战是非常重要的一个步骤。但是，如果就国内的情况来看，中苏论战助长了对国内问题的一些错误的或者说是偏激的判断。比如说，当时对于什么是资本主义复辟的理解，你可以看看“三评”。“九评”里面的“三评”划了一个杠杠，完全是以南斯拉夫的情况为界。究竟符不符合南斯拉夫的实际，这个历史已经有定论了。但是问题在于这个杠杠是用来说明国内的一些情况的，这就把很多界限混淆了。有些界限越过了以后，确实对我们国家的长治久安是很不利的。但是也有些现象又属于探索之中、改革之中的问题，不能够简单地下定论，但在这里却被混淆了。最后，形成了一种重要的假设：要警惕中央出修正主义。这个假设一出以后，就容易混淆现实的危险和长远的危险。从长远的危险来说，毫无疑问，要警惕内部出现一些对党和国家不忠的人，一些异己分子。从这个意义来说，这个假设是有其合理因素的。但是从近期来说，谁是修正主义？这个矛头越来越指向刘少奇这样一些人，这就出现问题了。但是，对于这个问题我们还是要做出一些分析。我们在《毛传》里已经写了，就是毛、刘之争事出有因，不仅仅是一个权力之争。如果仅仅是一个权力之争，毛泽东把他搞下去就完了，没必要搞“文化大革命”。实际上，“文化大革命”一发动，“炮打司令部”大字报一出，刘少奇的地位就已经不行了，就没必要再搞“文化大革命”了。这里很重要的一条，就是由于毛泽东和刘少奇对“四清”运动很多想法是不一致的，到最后毛泽东认为刘少奇是党内的资产阶级的代表人物。在得出了这样的一个结论以后，他就要想一个办法，什么办法呢？就是想搞一种反对修正主义的演习，希望这种演习锻炼群众。等到他去世以后，如果中央还出现修正主义，老百姓可以通过“大民主”的方式起来造反。使得党和国家的权力重新回到马克思主义者手里，他要解决的是这个问题。</p>\n<p>　　但是，他对刘少奇、邓小平等等这些人的判断失误了，特别是他对自己所依靠的一些人（像林彪集团、江青集团）失察了，这些复杂的情况是他万万没有想到的。他更没有想到的是，他非常轻车熟路的群众运动的办法，到了“文化大革命”的时候居然会走向反面，群众运动被少数人所利用。这些复杂的情况，毛泽东本人是始终没有认识到的。毛泽东在发动“文化大革命”的时候探讨的一个基本问题仍然是巩固党的长期执政地位，他要直接解决的一个问题是防止中央出修正主义，他针对的对象是他认定的那些所谓的走资本道路的当权派，他所采用的方法是群众运动的方法、自下而上的方法、“大民主”的方法，从这个意义上它是一种对人民民主的探讨，但是这种探讨走到了极端就成为了错误的东西。</p>\n<p>　　“文化大革命”这个问题还很值得研究。当然，现在出版的东西控制得非常严。但是，只有这个问题得到很好的研究以后，我们才能了解到，我们中国共产党在探求人民民主的历程中，在探求巩固中国共产党长期执政地位的过程中，我们走了怎样的一条道路，我们现在的认识是怎么从当年的认识中吸取它的合理因素，摒弃它的错误的东西，而达到更加接近真理的认识的。十六届四中全会的决定非常重要，是我们党内对这整个历程的科学总结。但是，探求真理的过程并没有因为这个决议的做出而结束，还需要我们理论界加倍努力继续解决这个问题。</p>\n<p>　　毛泽东最后留下了一个历史的遗憾，就是从一个正确的命题（周期律问题、“两个务必”）出发，最终导致了一个错误的理论和实践。对这个历史的遗憾怎么解答，怎么分析，怎么看待，这是我们现在理论界义不容辞的历史责任，也是绕不过去的一个问题。同时，他又留下了一个永恒的命题，“文化大革命”虽然最后使得毛泽东以悲剧的结局而告终，但是毛泽东的历史地位是永恒的；同时，他通过他这样一个不成功的探索给我们中国共产党留下了永恒的课题、永恒的思考，就是如何保持中国共产党的长期执政地位，如何保证党的性质不变质。中国共产党不能成为一个富人俱乐部，中国共产党必须始终和人民群众站在一起，这是毫无疑问的。而人民群众的主体是什么呢？是劳动群众，这是基本的群众。当然，由于我们党是执政党，我们不能以牺牲其它阶层的利益为代价来满足劳动人民群众各种各样的要求，我们应该统筹各个阶级的利益，但是我们的立足点、我们的基础永远是劳动人民群众，这才无愧于中国共产党的称号和它的理念。最后我想谢谢大家，也欢迎大家提问。</p>\n<p>　　主持人：谢谢！报告的效果从大家的掌声当中就能听得出来。我和大家感受一样。李捷的同志报告意境悠远。还有一些时间，李捷同志很愿意和大家交流，我想我们肯定有很多希望探讨的东西，大家有什么都可以说，我们自由一点儿。</p>\n<p>　　提问：李老师，我想问两个问题。第一个问题，您在报告中提到我国在70年代中期基本上建成了独立的比较完整的工业体系和国民经济体系，请问依据是什么？独立的比较完整的工业体系和国民经济体系有哪些标志？第二个问题与“大民主”有关。我们知道，作为一个发展中的社会主义大国，中国一方面需要高度集权的管理体制（当然并不一定是像苏联模式那样高度集权），另一方面民主参与、民主监督又不可避免地比较落后，两者形成了比较明显的反差，因此依靠体制内的力量很难解决官僚主义、腐败问题，甚至也难以杜绝西化的危险。所以，现在有一种议论，就是希望在可以控制的范围内发挥群众运动的作用，以弥补体制的缺陷。这种议论还往往援引现实的例子加以论证，比如，网络论坛特别是人民网的强国论坛被认为是网络版的“大字报”。又比如，今年由郎咸平引发的声讨MBO的民间浪潮就带有明显的“四大”的特征，特别是不少网民打着“清君侧”的旗号炮轰国资委，而这种民间抗议最后也引起了中央的重视， 其要求被部分地采纳，比如中央最近明令禁止大型国有企业搞MBO。请问您对此有何评价？</p>\n<p>　　李捷：先说标志的问题。我们的工业体系最主要的标志就是首先在重工业方面有了制造整个机床的能力，就是母机。过去很强调母机是重工业之母，没有这个东西其它东西都谈不上。比如，你参观德国，参观美国，特别是参观日本，它引以自豪是它的重装备制造业，这是非常重要的。当时我们有一个相对独立的可以制造自己的机床了，当然机床制造在当时是很不精密的，我们加工不了很精密的磨床，但是基础的东西我们大致还是可以的，这是一个标志。在此基础上，我们有自己的造船业、汽车制造业和飞机制造业。当然这些东西是很初步的，也还存在很多问题的，但是毕竟解决了从无到有的问题，所谓体系的产生就是解决从无到有的问题。还有我们的国防工业，国防工业是国家安全的基础，也是国家工业化水平的缩影。当时我们整个的国防制造业还是比较完备的。当然，我们相当多的企业效益并不好，是一种粗放的，有时候甚至是不计成本的。这在初级工业化阶段是很难解决的问题，是需要在下一个阶段解决的问题。独立自主的国民经济体系最主要的标志，在当时的认识就是“既无内债又无外债”。任何外债都有附加的条件，有了外债就要听命于人。这个认识有一定的局限性，但是应该说，从半殖民地半封建这样一个依附型经济走到“既无内债又无外债”这样一步，中国人真正是挺起腰板来搞自己的国民经济建设，这是很了不起的事情，是历史的跨越。很多时候历史就要走一个否定之否定这样一个过程，才能够走得过来。</p>\n<p>　　至于说“大民主”，最关键的根本区别，刚才你已经讲了，现在的民主包括强国论坛等等是在有秩序、有控制、有法律框架之内的民主，这种民主是需要的，是有好处的。但是，“大鸣、大放、大字报、大辩论”，特别是“文化大革命”这种“民主”是和法制完全对立的，就是把现有的法制秩序全部冲乱了。这样一种“民主”，这种群众运动决定一切，是错误的、不可取的。任何一个社会再重复这样的做法都是不行的。有的人讲现在贪官污吏那么多，再搞一个“文化大革命”就好了，绝对不会冤枉人。我说，中国经不起下一个“文化大革命”，再像那个搞法肯定会完蛋。</p>\n<p>　　提问：刚才您谈到，在防止和平演变的过程中，要注意划清根据解放思想、实事求是的思想路线开展的各种探索和修正主义的界限。请问您是怎么界定这个界限的？</p>\n<p>　　李捷：说老实话，这个界限我现在也划不出来。其实，先入为主地划分出一个标准不见得就是科学的、管用的。从历史上来看也是这样的，过去主席在《关于正确处理人民内部矛盾的问题》中提出了六条政治标准，这是指发表的时候。1957年2月，他讲的时候没有六条政治标准。到6月25号发表的时候，那个时候反右斗争已经走向高潮了，他为了约束这一运动提出了六条标准：越过这六条标准就是右派言论，没有越出符合这个就不是右派言论。但是实践证明，这种标准在一个运动中很难掌握。辨别是非很重要的恐怕还是具体问题具体分析，而不要先入为主。包括现在意识形态的很多问题，我们要正视它，比如现在新自由主义的影响。但是，具体到一件事情、一个观点，它是不是新自由主义的东西，还是要具体问题具体分析。但是，具体问题具体分析又会出现一个问题，你站在什么样的立场、用什么样的观点、方法分析。如果你认定了中国就应该私有化，而且中国就得搞多党制、三权分立，然后去具体问题具体分析，你肯定得出一个结论：新自由主义万万岁。我这里指的是要运用马克思主义基本的立场、观点、方法，站在国家、人民的根本利益的角度具体问题具体分析，这样可能比人为地制定一个标准要好一些。特别是在社会科学界，现在实际上更需要一种综合性的、辩证的思维，千万要避免简单化、格式化，就像电脑式的“0就是0，1就是1”那种分析，是不可取的。</p>\n<p>　　提问：您刚才说，把有些材料写进《毛泽东传》，会对现在有些人不利，请问具体是指哪些方面的材料？随着档案材料的进一步开放，将来会不会为高岗、林彪等人翻案？</p>\n<p>　　李捷：前面那个不利也只能说到此为止，我不能再说，再说就犯错误了。高岗事件和林彪事件是历史事实，历史已经有了定论。但我们对它们还是要做一个客观的分析，在高岗事件中高岗是有错误的，但是高岗这个人是有贡献的，不能一概而论。就是他在犯错误时期，他也有一些正确的认识、正确的思想，不能因人废言。林彪问题也是这样，林彪事件是一个铁案，是翻不了的。当然，林彪事件扑朔迷离。而且，大家往往有一种猎奇心理，外国人也是如此。往往什么事情只要加以炒作，就会越说越乱。我相信这个问题可能还要争论很多年。但是，我有一个感觉，林彪的问题是翻不了案的。但是，对林彪这个人也不能因人废言，包括在“文化大革命”中，也不能说林彪所讲的所有话都有阴谋，都是错的。还有，《五七一工程纪要》林彪是不是真正看过，而且每一个计划他都赞同，这个现在得不到材料上的根据和支持。这是林立果他们搞的。当然，你在认识“文化大革命”的时候，《五七一工程纪要》里面有些话，撇开暗杀主席、称主席为B52等等问题，它有些话是不是讲到了当时一些问题，比如“变相惩罚”等等这些问题？我说它还是讲了一些实话，讲了一些真话，这些问题不要一概而论。但是，并不能因此就反过来认为林彪就是好的，林彪不是搞阴谋的，这也站不住脚。高岗也是同样的。</p>\n<p>　　提问：听说康生在临死之前向毛泽东揭发了江青、张春桥的历史问题，为什么毛泽东没有反应？毛泽东对待康生的问题应该负一种什么责任？</p>\n<p>　　李捷：康生在这个人在党内确实是起了很不好的作用。大家都知道，只要一搞政治运动，康生就格外努力，而且很多重要的冤假错案中都有他的影子，这个人是很厉害的。但是，我们在总结历史经验的时候，功劳不能算作一个人的，错误、问题也不能算一个人。如果你再进一步深究的话，康生兴风作浪迫害一些人，他要有一定的气侯和条件，气侯、条件不到的时候他不敢。另外，“七大”以后有一段时间他很背，在党内非常臭，后来主席又重新信任他。主席这个人一生来说，他最自信的一点是什么呢？他认为他不会看错干部。他讲过，领导者的责任第一个是出主意，第二个是用干部。他最自信也是这两条，他认为自己的决断至少不会出现大的错误，这是他充满自信的一面。干部也是，至少关键的干部他自信不会看错。他什么时候后来变得不自信了？林彪事件出现以后对他打击非常大。实际上，重用康生、器重康生，是毛泽东很重要的一个失误，在这个问题上毛泽东还是有失察的错误，所以到了一定的气侯的时候，康生就会起他的作用。</p>\n<p>　　至于康生揭发江青、张春桥的事情，毛泽东当时没有做声，但这不等于他不重视这个事情。后来，主席始终在考虑这个权交给谁，先是考虑邓小平他们，邓小平不行了考虑华国锋，并没有把这个权给张春桥、江青，说明他头脑还是很清楚的。但是，这只是我们姑妄推测，绝对没有历史材料。不要说李捷看档案了，根据档案得出这个结论。我跟大家一样也没有看到什么，但是搞历史的人也有一种好奇心，我跟大家一样也推测一下。我总觉得，主席当时听到这个情况以后恐怕无力追究了，再追究就追究到自己夫人那儿了，再追究就追究到张春桥这样的人物身上了。但是，他没有把大权交给这些人，说明他对党对国家还是很负责任的。</p>\n<p>　　这里再说一句，粉碎“四人帮”以后，我们公布了很多主席讲的话。但是，实际上主席还讲了另外一些话，就是在批评“四人帮”的时候也讲过另外的话，就是说对这些人还是要帮的，为什么帮呢？第一发动文化大革命他们有功，第二和林彪斗争特别是70年的庐山会议他们有功，这两个功还是功不可没的，这个事情我们在这个《毛泽东传》里都写了，跟大家做一个交代。</p>\n<p>　　提问：有人说，毛泽东“开国有功，建国有过，文革有罪”，请您评价一下。</p>\n<p>　　李捷：这个话讲得不公道！为什么不公道呢？它比较片面。毛泽东建国以后有没有过呢，当然有过了，这是毫无疑问的，而且有些是重大的。《历史决议》讲了，有些是全局性的，“大跃进”是经济建设中的全局失误，“文化大革命”是政治的和整个社会、党和国家的一个劫难，这是全局性的失误，这是毫无疑问的。但是同时，刚才我也讲了，毛泽东在做这些事情的时候，第一他有他的考虑，他的考虑是从党和国家的角度考虑问题，尽管这些东西后来发生偏差。第二他在很多地方是有功的，是有贡献的，所以对人要具体问题具体分析，而且要公道、公允。我们对林彪、对高岗都尚且如此，对毛泽东更应该这样。所以仅仅说建国以后有过，是有失公允的。“文化大革命”确实是死了很多人，迫害了很多人，最不可原谅就是少奇同志的冤案，毛泽东对此有不可推卸的责任。但是如果说到法律责任，毛泽东负什么样的法律责任的话，我说他是负有一种领导的责任。如果要追究毛泽东迫害人的罪过、罪行的话，还追究不到这个份上，追究不到毛泽东身上，所以这个问题是应该做一个分析的，我是不同意这种简单化的说法的。</p>\n<p>　　提问：我觉得李老师的报告通篇贯穿着唯物史观，比如把历史上的事情放到当时的历史环境中去考察，具体问题具体分析，伟人在历史上起到“四两拨千斤”的作用，等等。我非常赞同您的看法。我的问题是，毛泽东一生探求的问题，也就是保证党的性质不变质、不变修的问题，现在是不是已经解决了？</p>\n<p>　　李捷：这个问题提得非常好，我也在思考。至少我个人现在是这样认为的，就是我们现在也还没有解决这个问题，还在探讨。现在中央对这个问题很警觉、很重视，在探索，在想怎样解决，但是这个问题并没有解决。这个问题依然还是问号，而不是句号。现在我们党有一个变质的危险，这个变质的危险，用形象的话来说就是，会不会变成一种富人的俱乐部。我这样提可能大家也就明白了，危险主要来自于哪个地方？最令人担忧是哪个地方？还是来自于高层、党的高层领导干部，他们的屁股会不会坐偏了？我们也到了一些地方，发现了过分强调GDP的问题。现在强调发展是硬道理，搞GDP，这是毫无疑问的。那么这里面就有一个问题，有些地方干部跟我们讲：现在我们也没办法，上面层层压指标，省里面到中央说10％的增长率，给我这儿要求可能就是16％。要有这个增长率，每年就要有新的亮点。新的亮点怎么办？现在国有的投资投一个垮一个，我怎么办？就得依靠纳税大户，实际上就是大老板。另外，现在社会稳定责任到人，如果我这个地方谁去闹事、上访、告状，马上下来要追究我责任。谁现在是麻烦的制造者？下岗职工、贫苦的农民。这个话很难听，但是他们讲的确实是实话。这是一个细胞，这是我们执政的一个单元。久而久之，如果这个单元放大以后成为一个整体，就有一个我们究竟代表谁、我们究竟屁股坐在谁那一边的问题。</p>\n<p>　　现在中央提出科学发展观、以人为本等等，可能都想平衡这个问题。但是，任何平衡不可能走在一极，比如索性先不管发展如何，把用来要发展的钱索性先救济穷人，那也是一条路。但问题是，如果这样的话，社会扩大再生产的资金从哪里来？发展速度从哪里来？而且，大家都知道，我们现在面临着整个世界的竞争，不要说我们不发展了，就是发展慢了，也会在世界上的竞争中败下来，最后的失败还是社会主义的失败。这个也是血的东西。所以我想，现在中央和各级领导都有一个兼顾发展和始终站在老百姓一边，兼顾决断的高度和发展人民民主的两难课题，做到熊掌和鱼兼得。这恐怕不是烹调大师，而是烹调艺术家才能做到的事情。这是比较难的，但又是非常重要的。</p>\n<p>　　提问：40年代的时候，共产党的新闻媒体都非常强调民主、自由，现在反而不如那个时候，请问这是什么原因？是不是因为共产党的性质发生了改变？我们如何加强党在这方面的领导？或者能否把这个方面放开，实行西方式的新闻出版自由？</p>\n<p>　　李捷：这个问题实际上毛泽东在进城之前已经讲到过。他说，我们现在是争民主，反迫害、反饥饿，反独裁。可能有一天我们进了城，到了现在国民党这个位置以后，到那个时候说不定老百姓也上街对着我们，跟我们要民主，要饭吃。他那个预言不幸言中。到了1956年，大家都觉得这是凯歌行进的时期，建立了社会主义制度，而且“一五”计划实施得非常顺利。但实际上，到了1956年的时候，群众闹事非常多。按照当时的统计，工人罢工就是1000多起，学生罢课是2000多起。当时很多领导干部就认为这背后有黑手，要抓阶级敌人。毛泽东提出来正确处理人民内部矛盾的问题，原因就在这儿。他认为，现在时代变了，情况变了，我们成了执政党，我们面对的大量问题，包括罢工、罢课问题，大量反映的都是人民内部矛盾，是反映了人民群众和我们政权内部少数人脱离群众、官僚主义作风之间的矛盾。从更深层的意义上来讲，反映了经济基础和上层建筑、生产力和生产关系既适应又不适应的矛盾。他认为，应该从这个地方作为突破口，来改进我们党和国家的政治生活，推进人民民主。所以他当时有一个名言，叫做“要利用群众闹事，来解决我们政府内部存在的官僚主义作风”。第一他不赞成，第二他不怕，而且还要利用它来解决我们的问题。但现在这句话我们一般都不用了。为什么？跟现在整个思路不一样。换了位以后，就有这样一个问题：当年提出的口号你要兑现，但是你不能马上兑现。不仅有些口号不能马上兑现，而且还会有新的矛盾产生。原来你可以利用新产生的矛盾推翻现政权，但现在你就是现政权，你逃也逃不掉。这个问题是比较难的。现在还没有发展到你刚才讲的执政党变了性质的程度，但是我们现在是执政党，所以很多矛头对着我们。对着我们的这些矛头不能简单地用专政工具的办法、镇压的办法，不能简单地用国家的暴力机器解决这些问题，大量还要通过人民民主的办法，解决人民内部矛盾。从这个意义上来说，人民内部矛盾的问题也是现在一个永恒的课题。而这个课题的解决与否，和我们的长期执政地位这个永恒课题是紧密地联系在一起的。谢谢！</p>\n<p>　　主持人：非常感谢李捷同志。李捷同志是领导干部，但是他以一个学者的坦诚和我们做了坦率而深入的交流。今天有机会请李捷同志就他在长期研究特别是撰写《毛传》九年当中的一些体会和大家进行交流，我们都获益匪浅。历史像一把折扇逐渐展开，也许离得越远看得越清。正像李捷同志所讲的，实践没有停止，认识也不会停止，非常希望以后还有更多的机会向李捷同志请教，再做进一步的交流。</p>\n<p>　　李捷：非常感谢大家，也祝大家新年愉快。</p>\n<p>　　主持人：报告会到此结束，谢谢各位的光临。</p>\n"},{"title":"沙赫特","_content":"\n#### 金融之王\n\n##### 第三帝国的兴起与第二次大战的起源\n\n###### 希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\n\n   为了对抗一个共同的敌人而缔结的战争同盟，总是注定了会短命的，因为一旦这个敌人被击败了之后，同盟的重心也就随之而毁灭了。很少有理由可以假定赢得第一次世界大战的英美法三国之间的协约，能够比勒班陀海战以后的神圣同盟或是滑铁卢之战以后的战胜国会议支持更长久的时间。但是与后者作一个比较，则不免具有一个极大的差异：当拿破仑最后失败之后，差不多在一百年的时间当中，“不列颠的和平”始终能在欧洲诸国之间，维持着一个权力平衡的局势。到了第一次大战爆发，这种局势才被破坏了。此后由于美国的参战，于是国际联盟就开始代替了“不列颠的和平”。可是这个工具的设计却完全文不对题，它既不能取消一切足以引起战争的原因，复不能重建一个权力平衡的局势。它硬性的要世界接受一种和平路线，这条路线与历史、地理和经济三方面都是不符合的。国际联盟的毛病是陈义过高，只有空谈，而无实力。所以结果不但不能有益于世界和平的维护，反而更增加了摩擦和冲突的机会。于是终于有“暴君”出现了，他们出现了，他们向它挑战并利用其无能的弱点。\n　　在这些权力的艺术家之中，有两个人——墨索里尼和希特勒——是具有一种新的哲学思想。他们敢向经济人（Economic Man）的神话挑战，这是资本主义、社会主义和共产主义的共同基本因素，而想把“英雄人”（Heroic Man）的神话来代替它。有一位著名的法国军人昆顿（Rene Quinton），在他所著的《军人的圣经》一书中，对于此种神话曾经有明白的解释。\n　　“所谓英雄就是一个为旁人而忘记了他自己的人。天之所以生出英雄来，不是为了生活而是为了服务。英雄是与凡人不同的，因为他的生活是具有神意的。战争把人类已经所丧失了的宗教又带回来了。生命的安全足以使神意失效，反之若不惜一死，则人也可以拯救世界的生命。人类的建立者不是人而是思想。”\n　　从希特勒眼中看来，国际资本主义和马克思主义是完全一样的东西。他认为他们都缺乏牺牲精神，是违反自然的，足以毁灭人类。所以他提出了他的教条，“一个民族，一个国家，一个领袖”。一方面相信雅利安人和条顿族是优秀的，另一方面又对于犹太人表示激烈的仇恨，在他的圣经《我的奋斗》（Mein Kamf）一书中，可以看出来他的思想是与昆顿的理论极为接近：\n　　“人们不肯为事业而死，但却肯为理想而死。要生存的人却必须要战斗。在这个世界上，凡是不想战斗的人也就没有生存的权利，因为在这个世界上，生活的法律即为永远的斗争。为了恢复日尔曼的权力，你们不应询问：“我们怎样的制造武器？”而应询问：“我们怎样的培养一种精神，使这个民族能够负起武器来？”雅利安人的伟大，其基础并不是他的智力，而是他愿意牺牲一切以来为团体服务的意志。这种心理态度足以强迫私利退后，而让公义出头。这也是任何种类的真正人类文明的第一先决条件。追寻一己私利的人是不值得一顾的，而牺牲自己幸福的英雄则值得歌颂。”\n　　德鲁克（P．F．Druber）在其所著的《经济人的结束》一书中，对于这种教条曾经有极精辟的批评：\n　　 “若认为极权主义中的这种号召牺牲的理想，只是一种伪善、自欺之谈或是宣传高调，那才是大错而特错。它是从失望的深渊中长成出来的。正和一八八〇年虚无主义在俄国的流行一样，它可以吸引最高贵的和最勇敢的青年人，今天在德国和意大利的情形也是一样。这些战后一代中的优秀份子拒绝与这个现有的世界妥协，他们觉得这个世界既无值得一死的真正价值，而又无值得一活的活跃思想。”\n　　除非对于这两种神话——经济人与英雄人——的斗争有所了解，否则对于一九三九年的浩劫也许就无法了解，而会认为这完全是天命了。\n　　希特勒的父母为奥国人，一八八九年四月二十日，出生于莱茵河上的布劳瑙（Braunau）。当一九一四年第一次大战爆发时，他投入了巴伐里亚第十六步兵团当兵。在所有的新兵中，也许更没有第二个人会像他这样的合于“彻底的无产阶级”的资格。凭着军功，他获得了不少的勋奖，可是说也奇怪，他的阶级却始终只升到了下士为止。\n　　当一九一八年十一月十一日，德军在康宾森林中投降时，希特勒下士正睡在医院中，他因为受了毒气伤，眼睛已经半瞎了。谁也不会预料到将来有一天，这个默默无名的小兵，会在同一个地点接受法军的投降，并且把他的卍字旗从大西洋插到了伏尔加河上。\n　　这是什么力量使他能有如此的成就呢？一方面是由于他具有政治天才和特殊的领导能力，但是另一方面，比较最重要的，却是他自信是受了神的指示，来领导日尔曼人民走上复兴的道路。他是一个中了“神毒”的人，他相信散布不公正种子的人，应自食其恶果。\n　　使他着了魔的即为凡尔赛条约，它与威尔逊十四点的精神是完全不符合。一九二三年，潘卡里侵入鲁尔地区，破坏了德国的币制，扫灭了德国的中等阶级。在一九二四年到了一九三〇年之间，德国的外债增到了七亿五千万镑，使德国人民感到民不聊生。最后美国证券交易的总崩溃，更使一九二九年到一九三一年之间，全世界上都发生了金融上的不景气。\n　　在一九三〇年，德国人民仰赖政府救济生活的共一千七百五十万人，在一九三一年，共产党的选票增到了五百万张以上。在那一年，有一位美国记者尼克波克（H．R．Knickerbocker）在他所著的《德国——法西斯乎？苏维埃乎？》一书中，估计至少有一千五百万德国人是不能完全吃饱的，选民中有三分之二是仇视资本主义的，而过半数以上是反对现有号称“民主”的政治制度的。次年，希特勒即在这个局面之下获得了胜利。诚如他自己所形容的，在一九一九年，他简直不能算是一个人，当时他加入了一个不知名的政治组织。这个组织自称为“日尔曼劳动党”，一共只有六个党员，他就做了第七名党员。一九三二年，这个党改名为“国家社会日尔曼劳动者党”（National Socialist German Worker's Party），在七月间的大选中从三干六百万张的选票中，他一共获得了一三、七七九、〇一七张之多。一九三三年一月三十日，德国总统兴登堡命令他以最大政党的领袖身份，出任德国总理并组织一个政府。一年之后，在六月三十日那一天，希特勒开始清党，用一连串的暗杀手段，把异己份子杀死数百人。最后到了八月二日，兴登堡元帅逝世，于是他就取消了总统制，而且任德国人民的元首。\n　　除非是亲眼目击的人，否则对于希特勒的勃兴，简直会认为是一个难以置信的神话。早在一九三四年，当赫斯（Rudoff Hess）代表全体纳粹党人向希特勒效忠时，其所说的话从麦克风中传到了每一个德国人的耳朵里，在他们的内心中引起了共鸣。\n　　“这个宣誓使我们把生命寄托在一个人的身上。照我们所相信的，这个人是替天行道的。不要用你们的头脑去寻找希特勒，他是存在于你们的心灵之中。希特勒就是日尔曼，日尔曼就是希特勒。日尔曼就是我们在地球上的上帝。”\n　　尽管他的敌人曾经宣称这个非常的人物，是一个魔鬼，是一个疯人，但是我们却决不能轻视事实——他曾经扑灭了在德国境内的布尔什维克主义和完成了许多惊人的伟大事业。实际上这个人是具有二重人格的，一方面他也是一个正常的人，另一方面他却是一位“真神”。假使不是如此，则有许多事实就都会无法解释。劳合－乔治总要算是一个智慧超群的人，当他在一九三六年访问过希特勒之后，回到英国时曾经发表他的观感说：“我从来不曾看见过比德国人更快乐的民族。在我所遇见过的许多伟大人物之中，希特勒要算是最伟大的一个。”邱吉尔也曾经说过：“假使我们的国家若是失败了，我希望也能找到这样一个领袖来恢复我们的勇气，和领导我们回到与各国平等的地位。”\n　　希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\n　　希特勒认为只要国际货币制度还是以黄金为本位的，则一个能够垄断黄金的国家，即可以使缺乏黄金的国家屈服于其意志之下。这个手段就是吸干其外汇的来源，迫使他们必须借债以来维持生产。他的理论是说：“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才又能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义。”所以他决定：（一）拒绝接受国外的借款，以生产为德国货币的基础，而不以黄金为本位。（二）用直接易货的方式以来获得输入品，必要时并补助输出。（三）停止所谓“外汇的自由”——即准许在货币方面实行赌博，并依照政冶情况，把私有的财产由此国移到彼国。（四）当有了可以工作的人力和物资时，就制造货币而不向国外借债。\n　　因为当时国际金融的生命，就是寄托在向经济困难的国家放债营利的行为之上。所以希特勒的政策简直是切断了它的生命线。假使若是准许他成功了，则其他诸国势必都会起而效尤。若是所有缺乏黄金的国家，都纷纷实行以货易货的办法，则不仅无人借款了，而且黄金也就丧失了它的权力，所有的放债者都只好关店了。\n　　这支财政性的手枪，尤其是直指在美国的身上，因为它是世界上黄金的主要供给者，而且它的大量生产制度使其必须输出其产品的百分之十来避免失业的危机。此外，又因为希特勒对于犹太人采取野蛮的虐待政策，所以当然得罪了美国的犹太籍的金融界巨子。当希特勒做了德国首揆后还不过六个月，纽约的一位富翁乌特梅耶（Samuel Untermyer）就开始向他挑战了。他主张向纳粹主义展开“圣战”，呼吁对于德国的货物，商船和劳务，都采取经济上的杯葛主义。美国的国务卿赫尔（Corded Hull），也依照一九三四年的贸易协定法案，坚持的主张美国的国外贸易决不能因为外汇管制，政策专卖和易货制度而受到任何的损害。\n　　从一九三三年到一九三六年之间，希特勒已经使德国的失业人数由六百万人减到一百万人，繁荣与复兴的程度简直使英国人感到害怕。据说在一九三六年，邱吉尔也正像一九〇七年的巴福尔一样，他曾经告诉美国的伍德将军（Gem R．E．Wood）说：“德国是已经变得太强了，我们必须把它击碎”。到了一九三七年九月间，美国又开始发生了一个新的大萧条，其扩展的速度也是非常的惊人。十月十九日，证券市场完全崩溃了，到了十一月间，据调查全部失业人数已达一千一百万之多，另外还有部份失业人数五百五十万。对于这种困难的国内情况，必须要设法分散人民的注意力，尤其是总统大选又已经迫在眉睫了。所以在十月五日，罗斯福总统发表其著名的“检疫演讲词”（Quarantine Speech）。他痛斥现有的恐怖性统治，认为人类文明的基础已经受到严重的威胁，并且呼吁美国人不要幻想以为美国可以幸免，西半球可以不受到攻击。最后提出建议说，增强道义标准的最容易措施，即莫过于对侵略者实行国际性的防疫隔离。不久之后，这个主要的侵略者也被指明了出来。巴鲁赫（Bernord Baruch）曾经向马歇尔将军（Gen. G. C Marshall）说：“我们应该把希特勒这个家伙打倒，不让他的那个玩意儿成功。”什么玩意儿？可能他所指的就是希特勒的易货制度。因为在一九三九年九月间，巴鲁赫曾经把他与美国总统会谈的结论，公开发表如下：“假使我们能够把价格压低，则并无理由说我们就不能够把主顾们争取回来，因为战争的缘故，敌国必须放弃他们的主顾。于是德国人的易货制度就会归于毁灭了。”\n　　在不列颠，对于易货制度也同样的展开了猛烈的攻击。一九三九年三月九日，驻伦敦的波兰大使报告他的政府说：英国的海外贸易部长哈德逊（R．S．Hudson）曾经向他说过：“不列颠政府决定不放弃在欧洲的任何那一个市场，也决不放弃其经济上的优势以来使德国坐享其利。今天我们正在经济领域之内进行谈判，来摧毁德国人的易货制度。”这个经济战争是已经激烈到如此的程度，所以舍伍德（R.E. Sherwood）在其所编的《霍普金斯白宫文件》一书中，曾经有过下述的一段记录：一九三九年四月间，美国大使馆中驻柏林的代理武官向华盛顿当局报告着说：“目前的情况是已经十分的明显，德国是已经在积极的进行一个战争。这是德国为了其生死存亡而作的经济战争。德国的货物必须要有市场，否则就只好坐以待毙，而德国当然不愿意死亡。”\n　　当我们考虑到第二次大战的经济原因时，内心里必须要记着，也和第一次大战一样，这种两个不同经济制度之间的斗争是无所谓是非善恶的，而只是具有生存的价值。资本主义为了维持其优势而战，与希特勒为了其易货制度而战，在善恶上来说是没有什么高下之分的。对于他们而言，这都是存亡之所系，这都是贸易竞争的产品——也是工业革命的后果。\n\n\n前奏：上帝保佑打败仗的人民　　　　\n二十世纪二十年代初，一战硝烟远去未久，古老的德国笼罩在一片几乎毫无希望的风雨凄迷中。人们尚未来得及摆脱战败的沮丧和羞辱，严峻的生计问题就紧逼了上来。德国在战争中丧失了总人口的10％和将近七分之一的土地，换来的是每年1320亿金马克的赔款，相当于1921年德国商品出口总值的四分之一。德国拿不出这笔钱，法国就伙着比利时波兰，毫不客气地进占了德国经济命脉鲁尔工业区，是为“鲁尔危机”。正倒着霉的时候，你往往想不到有一天还能更加倒霉，于是手忙脚乱的政府采取了千古不变的饮鸩止渴老办法：增发纸币。　　　　\n真正的灾难开始了。随着印刷机全速开动，1921年1月31日，世界金融史上前所未有的恶性通货膨胀，如同张开翅膀的死神，扑向了已经奄奄一息的德国经济。美元与马克的比率从1921年1月的1：64，到1923年11月已经崩溃为1：4,200,000,000,000。如此骇人的程度，即使到今天，也只有1946年的墨西哥和1949年的中国可以相提并论（顺便说一下，到目前为止中国还保持着这项领先记录）。　　　　\n到了这个地步，德国的日常生活可想而知。薪水得按天给，要不然到了月末你会发现本来买面包的钱只能买面包渣了。发工资前大家都要活动一下腿脚，准备好起跑姿势，钱一到手，立刻拿出百米冲刺的激情和速度——冲向市场与杂货店。腿脚慢点的，往往就难以买到足够的生活必需品。农产品和工业品生产都在急遽萎缩，市面上商品短缺，唯一不缺的就是钱，纸钱！没有购买力的纸币像没有生殖力的性器官，叫人想着就伤心，孩子们在街上大捆大捆地拿它们堆房子玩。1923年《每日快报》上刊登过一则轶事：一对老夫妇金婚之喜，市政府发来贺信，通知他们将按照普鲁士风俗得到一笔礼金。第二天，市长带着一众随从隆重而来，庄严地以国家名义赠给他们1,000,000,000,000马克——或者半个便士。　　　　\n对于德国的悲惨境地，它一战中的对手们反应并不一致。老对头法国自然是盼着这个强邻兼宿敌越倒霉越好，在赔款问题上咬紧牙关毫不让步；苏联因为社会制度被西方排除在战后的“凡尔赛——华盛顿体系”之外，割地赔款全没它的份，又刚刚跟波兰打了一场败仗，希望借助德国的先进军事经验，1922年开始就与德国秘密合作（结果是搬起石头砸了自己20年后的脚）；英国秉承一贯的老奸巨猾，继续“均衡势力”品牌之大陆政策，不希望德国过分削弱而使法国坐大。小国家们有的内部爆发民族革命自顾不暇，有的在老大中间小心翼翼找个位置坐下观看演出，有机会也诈点汤喝喝。　　\n战败者付出代价，古来皆然。历史上没事就打来打去的欧洲，利益变幻翻云覆雨，沾亲带故反目成仇，一千多年下来戏码反复，不过如此。　　　　\n然而，这次的确有点不同。　　　　\n现在的人们讨论一战远远没有二战兴趣浓厚，但是事实上，今天国际关系和文明准则的基础，大部分是由一战奠定的，某种意义上来说，第一次世界大战真正摧毁了传统世界的根基，而二战是一战遗留矛盾的延续和清算。如果说从前欧洲的战争是国王和贵族的战争，那么一战就是第一次现代意义上国家之间的战争，从它的政治根源、战争动员、兵役体制和战后安排上，无不体现出鲜明的现代国家主义特点。不管主动还是被动，战争成为全民对国家的事务的参与，惩罚也成为有理论依据的全民责任。这样，每个人难免要反思一下，打了这个仗，对每个人来说意味着什么？　　　　\n另外，通过一战，人类在自相残杀方面的创造力表现得没有最强，只有更强。在凡尔登的绞肉机和索姆河的坦克面前，19世纪天真的乐观情绪，对主流古典人文主义的自信土崩瓦解了。新的思潮纷纷登上舞台，直截了当，冷酷无情，与这个铁血强权的时代宾主相得一拍即合。　　　　潘多拉的盒子打开了，古老的欧洲现在到处都是打碎的坛坛罐罐，德国的巴掌挨得最响亮，然而他们要报复的并不仅仅是从普鲁士时代延续下来的那些敌人们。在这个产生过无数哲学巨人的民族，思考活动一向壮丽而可怖，短暂的痛苦过后，将化身为钢铁的洪流，无论说它邪恶还是野蛮，它是从我们自以为是的文明中生长出来的，让我们前所未闻，目瞪口呆。　　　　\n完成这个过程，它需要的只有一种力量：金钱。　　\n\n二、帝国银行里的华尔街精英　　　　\n1923年11月，德国发生了两桩对历史有深远影响的事件。　　\n第一件是阿道夫?希特勒发动了以失败告终的慕尼黑啤酒馆政变。尽管此前他爱国愤青的风头一时无贰，甚至原陆军总司令、德高望重的鲁登道夫将军都稀里糊涂地被拉上了他的检阅台；在德国普通人眼里，恐怕这位热血沸腾的老兄当时也和一个比较抢镜的行为艺术家差不了多少。在这个动荡不安的年代，又何尝缺乏大胆冒险的事件，和昙花一现的赌徒呢？于是未来的元首只好郁闷地在监狱里写他的奋斗。比较有趣的是，希特勒提到了他对通货膨胀及其原因的看法。　　　　\n“政府镇定沉着地继续印发这些废纸,因为,如果停止印发的话,政府就完蛋了，因为一旦印刷机停止转动——而这是稳定马克的先决条件——骗局马上就会暴露在光天化日之下。??????如果受惊的人民注意到,他们即使有几十亿马克,也只有挨饿的份儿，那他们一定会作出这个结论:我们不能再听命于一个建筑在骗人的多数决定的玩意儿上面的国家了：我们需要独裁 \" (转引自威廉?夏伊勒《第三帝国的兴亡》)　　　　\n从这段有意思的话里头，我们能够看到古往今来煽动艺术的精髓。凭心而论，希特勒确实颇有几分洞察力，他看出马克的疯狂贬值被有意利用来应对外债（赔款是用马克计算的），政府也的确难辞其咎，然而由此得出结论——“民主不如独裁”，就莫名其妙了。而煽动的诀窍偏偏就在于此，观点必须震撼，论据必须彪悍——那么从论据到论点到底是什么逻辑，基本上就没多少人注意了。不信你翻翻文革的大字报，保证有所印证。　　　　\n差不多同时发生的第二件事，可要比那位退役下士的表现吸引力大多了。甚至可以说，停战以来，德国人民第一次听见了好消息。　　\n\n持续将近三年的恶性通胀，在1923年底开始得到缓解和控制。　　　　\n历史学家们将这个功绩与1923年11月的一个任命联系起来：46岁的德意志帝国银行董事亚尔马-霍雷斯-格里雷-沙赫特被任命为国家货币流通专员。\n　　沙赫特1877年1月生于特因利夫（原属德国，现属丹麦），父亲是德裔美国公民，母亲是丹麦裔。他的父亲为纽约公平信托公司工作了将近30年，亚尔马之所以在德国而不是美国出生，只是因为他母亲当时患病必须全家回德国治疗。和今天的众多移民一样，老沙赫特觉得美国的月亮特别圆，为了聊表对第二祖国的热爱之情，居然把一位美国反蓄奴制政治家的名字放进了儿子的姓名中间，这就是他奇怪的中间名的来由。在日耳曼的命名方法里，中间名本应是父名和祖父名，这个独特的做法如同一个奇异的预言，在他的一生中深深刻下了难以磨灭的美国印记。\n　　小亚尔马聪明而勤奋，具有德意志历史上那些百科全书式学者的天资气质，他先后专门学习过医学、哲学和政治科学，年仅22岁就得到了经济学博士头衔。年轻的沙赫特博士秉承父业，进入德雷斯顿银行。他本人出众的能力加上老头子在金融界广泛的人际关系，沙赫特一帆风顺，很快成为引起关注的金融精英。1916年，他成为德国国家银行的董事之一。1923年，沙赫特临危受命，拯救灾难中的德国货币流通体系。　　\n货币崩溃的根源在于沉重的赔款负担，沙赫特当然清楚，一切金融改革的举措如果不解决好这个问题，只会引发更可怕的动荡。他上任之后，立刻从两个方面齐头并进：一边寻求外国金融资本的支持，一边改革货币，用新的地产抵押马克（Rentenmark）取代极度滥发的旧马克。　　那么该向谁寻求帮助呢？哪个国家有能力又有意愿帮助德国呢？欧洲的邻居和对手们要么心怀叵测，要么自己也穷得够呛，沙赫特也根本不指望它们，他的目光越过浩瀚的大西洋，精准地投向了自己的精神故乡——美国。　　　　\n一次大战最重要的后果，既不是霍亨斯陶格、哈布斯堡、罗曼诺夫三大欧洲王室的垮台，也不是共产主义革命的兴起，而是美国作为国际经济政治关系中最强有力，甚至决定性的一端，羽翼丰满，开始闪亮登场。巴黎和会和国际联盟提供了它的出场秀，然而要真正深化美国对世界的控制能力，向欧洲大陆的经济渗透是一个重要途径。德国伸过来的求援之手，与华尔街的金色魔杖正好一拍即合。　　　　\n二十年代的华尔街，宛如现实版的迪斯尼乐园，不断在狂欢的气氛中迎来繁荣奇迹，几大主要银行财团积累下来的资本迫切要向外扩张。马克思曾有言道，300%的利润下资本就敢冒上绞架的危险，绞架尚且不怕，何况区区一个德国。1924年，以美国银行的查尔斯道斯为首的委员会推出了“道斯计划”，1924-1928年内总计8亿美元贷款流向德国，帮助它偿还凡尔赛条约的赔款，利息收益直接投资于德国市场。同时，国联调停法比两国撤军，接管鲁尔工业区。　　\n时来天地皆同力，沙赫特一旦心中有底，立刻果断地行动起来，用国家银行黄金储备为基础的新马克，以一比三十亿的悬殊比率兑换旧马克，到1924年8月这个过程基本完成，马克汇率开始在国际市场上稳定下来，国际投机者逐渐停止了对它的攻击。折磨德国的漫长通货膨胀结束了，乱云犹飞，千山已渡，沙赫特经此一役，证明自己不愧为金融奇才！　　　　\n\n1928年，沙赫特率领德国国家银行代表团，与美国为首的国联赔款委员会谈判签订了“杨计划”，它是道斯计划的延续，德国每年只要付赔款额的1/3，剩下的部分可以推迟。1929年世界经济危机爆发之后，胡佛总统干脆提议暂停德国赔款的90%。等到1933年纳粹上台，就压根一分钱都不给了\n　　道斯计划和杨计划背后，都站着华尔街金融巨鳄J?P?摩根的庞大身影。道斯计划，据美国乔治华盛顿大学国际关系教授卡罗尔?奎格雷的研究结果，“很大程度上是一个J?P?摩根产物”，而杨计划的这位“杨”——Owen Young，直接就是J?P?摩根派出的代表。这两个计划最大程度保证了美国金融资本的利益，在1934年分业法案之前，像摩根这种巨无霸的金融恐龙一手控制信贷，一手承销证券，去了德国的贷款在华尔街发行成债券，巨额佣金收入滚滚而来，像金雨一样幸福地淋在华尔街精英高贵的脑袋上。　　　　\n然而，道斯和杨计划的另一个结果，却是双方始料未及的。那就是“迅雷不及掩耳盗铃之势”的美国资本赤裸裸占领了德国实业界，将德国私人资本严重排挤出去。一方面，德国中小企业破产，实业资本流失，造成了大面积失业，刚刚稳定的经济又面对考验，大家伙出得狼窝入虎穴，使纳粹的蛊惑宣传有了民意基础；另一方面，美国资本集中在电力、钢铁、化工几个大的行业中，大展拳脚滚雪球，恰恰是这里生长出的垄断寡头，为希特勒的竞选活动提供了主要资助，进而为他发动的战争承担经济支持。　　　　\n从沙赫特其人来看，他与华尔街的渊源明显而深刻，他父亲就职的纽约公平信托公司就是被摩根财团控股的。早在1905年，他随同德累斯顿银行董事会访美时，就会晤过J?P?摩根本人。他英语说得比德语都流利，以至于几十年后对他的审判是采用英德双语进行的。从广义上讲，沙赫特是以华尔街为代表的国际金融精英圈子里的一分子，一个“大人物”。资本没有国家之界，只有利益之别，资本家何尝不是一样？纽伦堡法庭上，只有三个被告指控没有成立，当庭释放，当过纳粹财政部长和中央银行首脑，为整个战争筹集资金的沙赫特就是其中之一，苏联代表尖刻地指责“资本家永远不会受惩罚”，此言未必正确，但西方对他偏袒却是毋庸置疑的明显。　　　　\n然而，成为沟通华尔街金融集团和纳粹德国核心圈子的关键人物，20年代离沙赫特尚颇遥远，就是说起来都匪夷所思。那个粗俗的流浪汉出身，政变未遂的小头目？大概他连帝国银行的门往哪儿开都没搞清呢，在这些衣冠楚楚手握经济命脉的绅士们中间，谁会给他一个正眼呢？然而历史的魅力就在于此，昨日言犹在耳，今朝沧海桑田；聚光灯下，王子与贫儿的游戏不断被命运慷慨刷新，只不过每次付出代价的，永远都是黑暗里的芸芸众生。\n\n三．资助希特勒的工业寡头们　　　　\n国王死了，国王万岁。此时一战勇士穷途潦倒，二战豪杰尚未登上舞台，灯光下活跃的是一批当代英雄。德国需要钱，华尔街需要能赚更多钱的钱。货币和货币的交流没有语言文化制度历史种种障碍，是世界上最亲密无间直截了当的尔虞我诈。　　　　\n1924年到1933年，在道斯计划和杨计划之下，通过华尔街的国际财团经手流入德国的贷款总额为330亿马克，其中的最大三笔款项，分别建立和帮助了三家大工业卡特尔。　　　　\n“卡特尔”这种垄断形式最早就源于德国，词根也是德语，指的是把小生产厂家由统一定价限量的协议联合起来，控制某一种行业的整个市场，比方说OPEC组织就是一个卡特尔。卡特尔的特点是简单有效，缺点是不够稳定，每人都有破坏协议的动机。但是在德国这种持重守信的地方比较合适，它从汉撒同盟时期开始就有一个悠久的信用传统，背信弃义的事不太流行。美国的资本进来之后，很快就看中了这种垄断形式。银行家们的操纵方法很简单，控股其中最强的一个或几个企业，让它们在一两种基本产品上占绝对优势，进而控制整个卡特尔。　　\n这三家卡特尔分别是德国通用电力（A.E.G），联合钢铁，I.G.法本，它们分别控制了电力、钢铁和化工行业，把握了德国的工业命脉。到1937年，联合钢铁和IG法本生产的爆炸物加起来占全国总量的95％，著名的克虏伯军火公司也在它们控制之下。这个不仅得益于美国贷款，还有美国的技术。美国的投资者直接进了它们的董事会，顺便说一句，战后他们都没有因为给希特勒的政治献金受到审问。\n　　这三个卡特尔的美国债主子和经手人皆为华尔街银行中最显贵的名字——迪隆&里德（Dillon Read）; 哈里斯福布斯（Harris，Forbes）；国家城市公司（national city）　　公平信托（Equitable trust）……　　　　\n美国资本促进了德国工业的迅速卡特尔化，除了上一节提到的，为希特勒上台提供了经济环境和金钱资助之外，这个结果本身也被上台后的纳粹当作宝贵遗产和大好经验继承下来。纳粹的经济政策很重要的一部分就是在工业界大搞卡特尔，用巨额订单喂养它们，整合出几个高效又听话的巨型战争齿轮来，纳粹党人可从来不是自由市场经济的Fans。\n　　　　\n这是后话，目前还轮不到希特勒说三道四。中学政治课本告诉我们，垄断资本家阶级挑选了代理人某某，旁边还常给配个图：一个大腹便便穿燕尾服的和一个干瘪猴瘦戴礼帽的，俩家伙正在弹冠相庆。话倒没说错，不过和没说差不多，反正我感兴趣的是某某怎样被招聘录用为资本家代理人的，这种好事怎么才能赶上哪。　　　　\n希特勒也不是个第一眼帅哥，开始没人觉得他能成气候。当时德国政坛风起云涌，政党林立，国会席位非常分散，导致的直接结果就是投票难以出现优势多数，几个党联盟起来可以有简单多数，但是中间一出个反水的，马上优势就没了，这种状况正好给小党派提供了砝码，在分裂和混乱中找到机会出头。\n　　1930年，希特勒赢得了选举中的第一次胜利，取得107席，成为德国议会第二大党。这个胜利令人吃惊，也来之不易，1928年国家社会主义工人党才只有可怜的12席，但是毛主席说得好，世上事怕就怕认真二字。\n\n   希特勒全国奔波，四处演讲(参看附录)，外加到处赠送他的大作《我的奋斗》，功夫不负苦心人，渐渐他的周围也聚集了一些有头有脸的人物，包括他的早期资助者。上面提到过的卡特尔——“联合钢铁”老板弗里茨?蒂森，以及鲁尔煤矿大王埃米尔?寇道夫。这些工业家之所以靠近希特勒，是因为他强烈支持禁止罢工和工会活动。　　\n老鼠和猫，钱和选票，一样都不能少。希特勒转身讨好工人用的许诺是消灭失业，提高福利。这个诺言当时听来格外动人，因为1929年从美国开始，席卷世界的经济危机爆发了。　　\n经过6年的资本输出，现在德国总共欠了美国70多亿美元，整个国民经济高度依赖美资。华尔街一崩溃，银行出现挤兑，开始从国外急调资金回国，多米诺骨牌效应立刻把德国拉进了深渊，生产收缩，失业率骤增。那边凡尔赛赔款还没完呢，杨计划规定每年必还的那三分之一，是用商品消费税保证的，结果结结实实转嫁在了民众身上。末世而妖言用，本来希特勒的极右翼主张在主流社会总是被当作笑柄，现在却有不少人真的追随他了，希特勒的煽动迷人之处在于简单直接——不还钱！赔款和债务是由这些外国资本家、犹太佬和卖国贼造成的，老百姓凭什么负责。　　　　\n然而，听得热血冲脑，怒发冲冠的人们哪里想到，希特勒这时正在紧锣密鼓地想办法扩大外国资本对他的支持。仿佛命运在冥冥之中的安排，正在他选举胜利的前几个月，亚尔马?沙赫特博士从德国国家银行主席的职位上辞职了。　　　　\n沙赫特辞职和杨计划后续谈判中与政府的摩擦有关，他对政府作出的一些新让步十分不满，在没有通知政府的情况下，他给J-P-摩根写了一封信威胁要退出巴塞尔的国际清算银行。这封信在美国报纸上发表后，德国政府大为震惊和丢脸，财政部长公开和他闹翻了，在兴登堡总统的压力下，沙赫特愤然辞职。　　\n这次离职对沙赫特的影响是微妙的，首先深觉羞辱，他是第一个没到任期就被赶下台的帝国银行主席；同时也委屈和愤怒，且不说当年力挽狂澜拯救通胀的功劳，就是这两年领着谈判队伍，寸土必争一条一条争取到的利益被政府漠视，也让他觉得寒心。他离职后马上去了美国，应邀在各大学里演讲，会见各界名流尤其是华尔街的同事，抨击凡尔赛条约，鼓吹德国经济复兴。就在这次旅途上，沙赫特读到了《我的奋斗》。　　尽管他评价希特勒的文笔在糟踏德语，但是对里面表达的观点却心中一动。软弱无能的魏玛政府不再让他寄托希望了，那么换一剂猛药如何？　　\n1930年底，沙赫特会见了纳粹党二号人物戈林，31年初，沙赫特与希特勒见面了。\n\n　　沙赫特对未来元首的感觉还不错，希特勒在这次会晤中表现得“真诚而谦虚”，他的自信和敢于行动的决心给沙赫特留下了很深印象，滔滔不绝的口才也名不虚传。沙赫特显得很有兴趣地听着，然后给了个小小建议，推荐一位金融记者瓦尔特?丰克给希特勒讲授一些基本的经济学知识（此人后来接替沙赫特担任纳粹经济部长）。我看沙赫特回忆录写到这里，想象博士忍耐着这位对经济学一窍不通还特别能侃的主儿，顿觉情景可笑。沙赫特是何等阅人无数老奸巨滑的人物，怎么会被希特勒那套古怪混乱的理论忽悠了去呢？　　\n\n答案似乎出现了一点影子，1931年春天，沙赫特会见希特勒的新闻在金融家圈子里不胫而走，人们猜测他政治上向右转的同时，还大胆预测他要借助纳粹的力量竞选下一任德国总统。沙赫特自己的话也加剧了这种猜测，当他的朋友、一位美国女记者问他会不会帮助纳粹统治德国经济之时，沙赫特回答“不，纳粹不会统治，但我会通过他们统治。”　　\n共谋！考察每一个历史关键时刻的背后，各种目的与意志盘根错节纠集在一起，我们看到只不过是一个合力的表现而已。希特勒、沙赫特，投票给希特勒的德国老百姓还有与纳粹合作的美国资本家，都怀着各自目的处于合力当中。能造时势的英雄，就是在这个巨大的拼图游戏里有幸拿到最后一块图版的人。　　\n不管出于良好的愿望还是勃勃的野心，在历史的转折关头，沙赫特帮希特勒弄到了那块最后的拼图。　　　　\n1931年之后，沙赫特开始运用他的声望、人脉和杰出的理财本领，为希特勒经营竞选资金。1932年11月，沙赫特成功发动了一次德国工业和金融界大规模联名上书，由他领衔，要求兴登堡总统任命希特勒为帝国总理。1933年1月底，希特勒戏剧性地当上台，2月宣布竞选总统，沙赫特为他组织了一个晚会，在他的惊人能量作用下，与会者涵盖了工业界的大部分巨头，包括I。G。法本及其美国分公司，克虏伯军火公司，通用电力，德国汽车协会，联合钢铁公司，电报电话公司；当场筹资3百万马克。希特勒在财运上终于告别诸多蝌蚪，遇见了一群牛蛙。这笔钱十分阔绰地解决了竞选资金问题，选完之后还剩了大约60万。　　　　\n\n除了筹资，更重要的是，这是一个显著的信号，表达了德国工业寡头，以及站在背后的美国金融资本对希特勒上台和进一步统治的认可。就拿占总献金额30%的法本（如果再加上它的美国子公司就占45%了）来说，此时它的董事会包括了华尔街和美国实业界最显赫的一批人：福特汽车公司的老板，纽约联储银行的董事，新泽西标准石油公司的董事，曼哈顿银行总裁，以及弗兰克林罗斯福温泉基金的主席。　　　　\n风雷动，鱼龙惨，魏玛共和国就这样不知不觉走到了尽头，这个夹在两个铁血帝国时期之间，德国历史上罕见柔仁的民主共和国，既生不逢时又先天不足。它失败的最深刻的根源，是它始终建筑在一个极不稳定的经济基础上，畸形的资本结构，沉重的外债负担，脆弱的货币体系，以及对德国中小企业和国内贸易传统的破坏，使任何一点经济波动都有可能引发灾难性的动荡，最后摧毁上层建筑。从《魏玛宪法》到希特勒上台，它的民主从最完善的文本开始，用最糟糕的实践结束。在历史的吊诡里，人人看到开头却总猜不中这结局，国会大厦巨大的阴影倾斜在柏林的夕阳下，犹如共和国无声的挽歌，的确，它作为殉葬品的命运也马上就要宣判了。\n\n谁为战争付了钱？　　　　\n国会纵火案为魏玛共和国钉入了棺材的最后一颗钉子，1934年8月2日，兴登堡总统去世，孤独而衰老的帝国元帅在风雨飘摇中撑了很久终于还是放弃了，漫长的高寿并未给他带来荣光。现在希特勒坐在总统府里，正在对老总统留下的遗嘱——复辟霍亨斯陶格王室——嗤之以鼻，他的最新头衔是元首兼国家总理，在这个国家和这个世界上，再没有任何人能阻止他全速开动国家机器，实现他壮丽而恐怖的千年帝国之梦。　　\n老朋友得到了回报，就在同一天——8月2日，沙赫特博士成为了内阁经济部长。在此之前，他已经回到帝国银行那间熟悉的主席办公室，把三年前替代他的路德博士赶到了国外当大使。卷土重来如此之迅速，使当初黯然去职的心情都变成了欣慰的回忆，他证明了德国多么需要他，并且凭经济学家的本能开始为一个全新的舞台摩拳擦掌。　　　　\n\n华尔街故人无恙否？他们用什么眼光考虑这件事呢？　　\n其实上一节我们已经提到，华尔街通过所控制的德国寡头企业向希特勒提供了支持。然而，华尔街还有更为直接的动作，这就是当时希特勒得到神秘资助的所谓“西德尼?瓦伯格”之谜。　　\n1933年11月，在荷兰突然出现了一本小册子，其中有一位名为“西德尼。瓦伯格”的银行家与希特勒的数段对话，里面披露了美国最顶端的工业家和金融家，包括洛克菲勒与亨利福特，在希特勒上台前后，通过JP摩根与柴斯银行集团向他提供了数额达到三千二百万美元之巨的资助。这本书在1934年就立刻被查禁了，它所影射的法本公司美国和德国的董事瓦伯格兄弟也矢口否认和这本书有关，但是，书中翔实的细节却和很多现实资料一致，遂成疑云，普遍被人们认为是华尔街的国际投资者们与纳粹合作的一项佐证。\n\n　　希特勒的上台令民主世界舆论哗然，1933年5月沙赫特访问美国，还没下船就被蜂拥而至的美国记者包围起\n\n来，围追堵截质问他对反犹暴行的看法，沙赫特被烦得罕见地大发了一次脾气，把记者递给他的一份《纽约时\n\n报》狠狠扔在了甲板上。开头不妙，他的使命看起来前途暗淡。沙赫特是来要求推迟支付美国银行贷款的，大\n\n萧条已经延续了三年多，罗斯福新政尚在福祸未卜，大家谁的日子也不好过，美国政府和华尔街还能象前几年\n\n一样好说话吗？\n　　　　\n莎士比亚说过，别借钱给你的朋友，要么你会失去钱，要么失去朋友。沙赫特这次又赌赢了，美国选择了前者。一方面，美国资本已经在德国陷得太深，太多利益攸关彼此纠缠；另一方面，德国重整军备扩大采购的过程，对美国经济恢复是一个良好的刺激。至于买了军火要对付谁，反正不是美国。沙赫特博士给了一个多么容易理解的理由啊，“如果德国能够获得它自己的原料而在经济上得到发展，这只会有助于刺激一般的世界贸易。它将帮助增加消费，促进繁荣，不仅提高德国人民的生活水平，而且将提高整个工业世界的生活水平 \"　　\n沙赫特甚至还把反犹行为的原因归于“一个民族处于经济绝望和可怕困境时的表现”，并且保证“一旦德国享有公平与繁荣后，这些表现就会完全消失”。（沙赫特在《外交事务》上的文章）　　　　\n\n罗斯福总统对沙赫特印象并不好，他觉得对方傲慢自大；对希特勒也非常不感冒，就在沙赫特访问结束的时候，他还几乎故意任命一位犹太人去柏林当大使。但是令人遗憾，也是我们很少提到的是，罗斯福在他第一任任期里，与绥靖主义者的主张并没有什么本质分歧。在他的施政纲领中国内经济是第一位的，对外交只简单提一个“睦邻关系”，保住拉美后院不起火足矣。这不仅仅为了迎合孤立主义势力，罗斯福本人也是一个灵活的务实主义者，并不介意握脏了手，在他上任不久就和苏联建交了，让欧洲自相钳制，何乐而不为呢。　　　　\n1933年8月，美国银行协会同希特勒德国就贷款问题进行谈判。美国银行同意德国延期偿还以前的贷款，并且保证今后美国在德国的资本和产业的全部收入只在德国使用，并用此来兴建新的军事企业或者改建原来的军工企业。\n\n　　纳粹德国没有食言，作为一个好胃口的买家，立刻把这些延期支付的贷款派上了用场，从1933年到1939年，在德国为第二次世界大战做准备的6年时间里，杜邦财团与化学公司、洛克菲勒财团和美孚石油公司、摩根财团及它控制的电报电话公司、福特汽车公司（亨利福特本人由于与纳粹的合作还得到了十字鹰徽勋章）争先恐后跟德国签下了巨额的战略原料和军工项目的订单。仅仅飞机一项，1934年8个月中美国对德国的出口数量就比1933年增加了不止5倍。33年到39年间，在纳粹德国的军事机构中营业的美国公司超过60家。　　\n在技术输出贸易上也毫不含糊，杜邦公司通过I. G. 法本把氯丁橡胶和飞机防爆剂的技术卖给德国；坦克润滑油的技术是从美孚石油公司得到的；希特勒发展空军的重要帮助来自于美孚在德国设立的一家飞机专用汽油厂；电报电话公司参加了德国新型飞机的研制。后来在战争中，连美国的海军部长都承认是美国向希特勒提供了最先进的飞机发动机。　　　　\n\n一个不可思议的诡异循环出现了，华尔街借出去的钱，被希特勒拿过来，从华尔街金融资本控制下的工业托拉斯购买军火和技术，得到的利润又用于向德国的军工行业继续扩大投资。金钱的血液周而复始不分昼夜地流动着，结果是一端生长出了武装到牙齿的德国军备，另一端美国的诸多庞大工业帝国，在艰难时世中维持甚至扩大了生产和市场，罗斯福新政能够奏效，也未尝不对此多赖借助。　　 　　\n\n然而真有这么轻巧的双赢吗？世界上没有任何事情是无缘无故发生的，哪怕是从天上掉下来一块陨石也不例外。人们永远没有完全决定眼前事务的能力，路径依赖的力量常常比想象中大得多。美国与德国战前资本融合的惯性，一步步导向如今的政策，不是当政者不懂养虎遗患、尾大不掉，谁都知道希特勒是什么人，但是形势如此，加深这种合作关系比破坏它更为划算。经济学家梅纳德?凯恩斯说破了残酷的真理：“在长期，大家都死了。”千年田易八百主，所谓长期打算、远大目光往往成了政治家的高调，立竿见影的利益却是人人难以抗拒。金融资本的盲目性尤其明显。金融市场上每一天时间都在用贴现率表达着它的价值，今天能挣的钱就不能留到明天，活在当下是华尔街唯一永恒的真理，其他的，包括战争，都可以往后放。上世纪末东南亚金融危机之后，各国对经济安全人人自危，殊不知金融资本从来就是见血就上拔腿就跑，不择手段不计后果的角色，现在如此，当年也差不多，上演的都是鬼打墙的老故事。　　　　\n\n既已暗渡了陈仓，就不怕明修它栈道。德国撕毁凡尔赛条约限制，恢复普遍兵役制，扩充常备军，进入莱因非武装区。美国对此听之任之，生意做得更加热火朝天。其实别的国家又何尝不是一样呢？英国和德国也有合作，并且是美国的一个主要竞争对手，对这些举动不过嘴上谴责一下。法国虽然是德国的传统敌人，但是战前正赶上右翼上台正在严防共产党，外加殖民地麻烦一大堆，还指望着希特勒对付苏联。回望第二次世界大战爆发的前夜，我们会目瞪口呆地看到美、英、法、苏争相和自己未来的侵略者眉来眼去，比赛着为它添砖加瓦的奇异景象，希特勒不打这场战争简直都对不起老天的眷顾。　　　　\n象最深沉的梦魇，清醒者无法动弹地看着深渊越来越逼近，又象一场荒诞派戏剧，各方势力挤在十字路口上等待自己的戈多。经济复兴？遏制共产主义？均衡的欧洲？互不侵犯？　　　　\n\n戈多没有来，来的是希特勒。纳粹德国带着华尔街的金钱，美英的技术和装备，苏联训练出来的军官，揭开了第二次世界大战的序幕。\n镀金时代的秘密与巫师的命运　　　　\n纳粹德国的“复兴奇迹”一直是第三帝国Fans津津乐道的题目。希特勒以前的内阁总理换来换去，愿许得真不少，每次但听环佩响，不见美人来；佳人不来，也就罢了，可是今天通胀明天衰退加上还不完的外债，来的都是这种牛鬼蛇神，真叫人无语凝噎。希特勒上台4年，失业率从高于30%下降到几乎为0，国民经济总值增长超过100%，同时完成了全国高速公路网的建设，重整了重工业基础体系，还装备了一支现代化军队。如果你看过雷妮?里芬斯塔尔那部著名的《奥林匹克》，一定会对1936年德国综合国力和精神状态留下深刻印象，那响彻云霄的欢呼，如林屹立的手臂，气势宏伟的建筑，健美如神祗的运动员，无一不暗示着隐然志在天下的实力与霸气。希特勒的个人威望也达到了顶峰，他甚至不再需要早年那样的演讲才华，只消在公共场合露露小脸，成千上万群众就宛如自动催眠一般立马如醉如痴。　　　　\n那么，如果这时候希特勒有幸意外死亡的话，是不是就“生得伟大，死得光荣”了，然后以民族救星的形象名垂青史？\n　　　　\n希特勒是如何创造经济奇迹的呢？　　　　\n对比希特勒政府和罗斯福政府在1933年之后的经济政策，不难发现它们何其相似乃尔。同样的国家干涉，兴建公共项目，发行公债，贬值货币，扩大卡特尔组织；甚至连名字都差不多，罗斯福的叫“新政”（New Deal），希特勒的叫“新计划”（New Plan）。诚然，在世界范围经济危机条件下，大家面对的问题大同小异，比较行之有效的也无非国家垄断主义那一套。然而，同样的照方抓药，各国家底不同，人家吃独味人参，你可能只弄得起点参须，贾府的方子刘姥姥看了也是干瞪眼。美国的广阔幅员、丰富资源、生产潜力没有一条德国能望其项背，这且不提，单单说通货这一块，它就是一战最大的获利者，加上延续下来一贯的高保护关税政策，资本对外扩张多年带来的惊人收益，它的国际收支平衡表和战后年年赔款的德国怎么比？有黄金和外汇的保障，人家可以搞货币贬值而不引起通货膨胀，可以玩赤字游戏而不导致财政破产；换了你行吗？\n　　\n摆在经济部长沙赫特博士面前的就是这样一顿无米之炊。　　　　\n然而，和十年之前一样，这个老巫师如同听到召唤的战马，再一次奔向危机时刻的舞台，一样的雄心勃勃，一样的自信不疑。他的确带来了新节目，电光火石间只见他在国际经济舞台上纵横捭阖，原汤化原食，空手套白狼，一系列动作令人眼花缭乱——“德国欠你的钱越多，你就越想和它做生意。”——沙赫特用魔术般的手段创造了信用。\n　　在一个基本没什么财政准备金的国家里干事，只能使上点无中生有的办法，这个`“生”法有文的，也有武的。武的就是明抢，只不过大盗剪径变成了国家没收，受害者自然是可怜的犹太人；文的就不那么简单了，沙赫特一开始必须有节制地使用印钞机来做启动。　　我查阅的中文史料中，有限地提到沙赫特的几次，大多都说他为了重整纳粹军备，怎么热衷搞通货膨胀，仿佛他是个金融狂人。这个印象之由来，以我自己的猜测，可能和中央银行主席孔祥熙博士有关。他1937年拜访沙赫特，对军备资金问题交谈之后，大概自以为深受启发，抗战后期也效仿人家搞货币增发，结果演砸了，真的变成了通货膨胀。孔博士虽然堂堂名校海龟，贵为两位国家元首的连襟，理财的本事还是比不上敛财的本事。沙赫特开动过印钞机是不假，但是他的政策总体上却是紧银根的，这意味着严格控制物价和外汇汇率，而且将大量增发的银行券的用在非生产领域，也就是基建和军工，尽量减少对一般市场流通的压力，比如著名的“米福”（Mefo）军用券，就是由国家保证，专门支付军火商的，由银行秘密贴现，不入财政报告。这种办法兼顾了解决就业、不造成生产过剩和军事保密要求，将“拖”字诀发挥到了极致。\n　　\n沙赫特所创造的信用奇迹还包括，为了避免外汇流失，他同几十个国家谈判了（对德国）“惊人有利”的物物交易（夏伊勒语）。到1936年中，德国已经建了28个清算协定，在与这些国家贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持齐平，这样，这些依赖德国市场的国家（大多是南欧和美洲的原料输出国）没有办法，为了清算马克欠款，只好允许德国继续购货。\n　　　　\n沙赫特在“新计划”期间之卖力，确实有几分“士为知己者死”的味道。为了给德国弄到更多外汇，他甚至不惜损害自己在国际金融中的信誉，在进口商品以后千方百计阻挠付款，或者代之以物物交换，连华尔街的老朋友都在指责这种“金融强盗行径”。　　　　\n可是，随着时光飞转，随着军队强大起来的脚步，这个精明的老巫师没想到的是，希特勒的目标并不是让德国成为一个经济强国和贸易霸主，他把经济全权交给他，是因为他自己根本不感兴趣。赌桌上再有千般计较，总还要按理出牌，然而，他已经等不及了,他要的比沙赫特能给他的更多，更直截了当。　\n　　　\n1936年开始，形势看上去正是莺歌燕舞一片大好，沙赫特却开始隐隐感到问题不妙，像一个在舞台上停留过长时间的魔术师，他发觉帽子里已经没有新兔子可以变了。首先是德国在军备上的畸形投资，占用了他千方百计从国际金融界弄来的，和从国内人民牙缝里抠出来的大部分外汇，他主持修订的经济法律严厉到对私藏外汇可以判处死刑，却仍然难以应付军队巨大的钢铁胃袋；另一方面，重整军备的动静实在太大，其他国家虽然有跟着起哄沾光的一面，却也有惊心警惕的时候，德国的国际环境悄然逐步恶化，国际贸易越来越不好做。特别是，华尔街虽然慷慨给了钱和技术，但是像过去杨计划中发生过的一样，它们在合作中试图控制德国伙伴，而为战争做准备的德国工业寡头，还有它们的政治靠山，当然不会答应，政治原因带来的摩擦也影响了经济关系，使沙赫特大为头痛。\n　　　　\n沙赫特最深刻的不安来自希特勒和他对经济政策的要求在本质上有分歧。希特勒对经济完全持一种实用主义态度。如果把纳粹党和希特勒本人对经济问题发表的零星高论放在一起看，就会发现简直没有他们没主张过的观点：支持国有化、支持私有化、主张自由竞争、主张计划经济、打击垄断、保护垄断、限制利息、反对限制利息……总而言之，看上去矛盾百出，实际是见人说人话，见鬼说鬼话，为政治要求服务。虽然沙赫特很知趣地在报纸上撰文，说元首“领导了每一个经济计划、参加了每一项法令制度的修订”，其实希特勒在其中的贡献，也就和金日成同志对《卖花姑娘》音乐创作的贡献差不多。沙赫特将高帽子奉送得这么慷慨大方，恰恰因为希特勒当时没太多插手他的工作；而一旦领导打算亲切关怀了，沙赫特与纳粹的蜜月期也就开始面临危机。\n　　　　\n1936年秋，戈林被任命为“四年计划”全权代表，这个“四年计划全权机关”与帝国经济部产生了严重的机构重叠，最后不可避免地引向了沙赫特与戈林之间的冲突。沙赫特从这个“四年计划”诞生开始就对它深恶痛绝，不仅因为它的掣肘争权，更因为它是一个完全以战争着眼的，策划德国4年后勉强自给自足的计划。虽然沙赫特肯定不是一个理想主义的自由贸易信奉者，但是国际贸易和金融对德国的致命意义他是再清楚不过了，德国没有广大殖民地作为廉价原料来源和产品市场，去消化国内的经济波动，因此一举一动都和国际金融市场息息相关，要不他那么辛苦节省外汇干什么？一旦风吹草动，马克受到攻击，以当前国内的信用“圆环套圆环”遍地打白条的现实，这场热热闹闹的“经济复兴”搞不好立马变成镜花水月！“四年计划”在他不仅达不到什么自给自足的目的，反而会摧毁辛苦建立的国际贸易成就，并且引发国际金融市场对德国信用的怀疑。　　\n沙赫特愤然指责戈林“你的外汇政策，你的生产政策和你的财政政策是靠不住的”，而希特勒在这场争执中会支持哪一方呢？看看这位元首风向标式的言论吧。　　\n“在德国，往往是在政治力量高涨的时候，经济情况才开始改善；反过来，往往在经济成了我国人民生活中唯一内容，窒息了思想力量的时候，国家就趋于崩溃，而 且在很短时间内，把经济生活也拖着一起崩溃……从来没有一个国家是靠和平的经济手段建立的”。　　“避开一切世界工业和世界贸易政 策的尝试，代之以集中一切力量，旨在为它的人民在下一世纪分配获得一块立足的生存空间开辟出一条生存之路……”　　　　\n另一个使人不安的征兆是，杨计划和道斯计划债券在1935到1936年的价格大幅度下降，道斯债券从79美元下降到37美元，杨债券从59美元下降到29美元。这意味着华尔街对德国发生动荡的深深忧虑。铅云低垂，斜阳诡异，沙赫特独坐在帝国经济部办公室里，看着多年围绕在他鞍前马后的工业家们，蜂拥着向戈林的订单扑去，不祥的预感在心中升起，海天之间一场新的风暴就要来临，他的命运又将如何呢？\n　　　　\n1937年8月，沙赫特向希特勒递交了辞呈，12月正式从经济部长任上离职；1939年1月，他被免除帝国银行总裁职务，虽然还保留着内阁成员的虚衔，事实上已经离开了德国的权力中心，虽然他之后的人生依然颇有戏剧性，但已不再对历史发生真正的影响。　　\n沙赫特的命运是一个富有深意的象征。他终身未加入纳粹党，但是在纳粹上台和准备战争过程中的作用却可能超过了任何纳粹高官。他本人的浮沉，就是国际金融资本与德国政治势力关系的生动历史。如同传说中的双头蛇，政治与经济的逻辑相互推动也相互反噬。沙赫特尽管清楚地知道自己在为侵略战争筹资（这一点无可置辩），而且在奥地利合并和捷克事件中他都把帝国银行的手伸了进去，但是从本质上他是按照国际金融资本——当然也包括德国金融资本——的利益去行动的。然而，“大炮和黄油”是政治发展的逻辑，有自身合理的惯性，对一种成型的政治文化来说，经济力量可以是发动机，却从来不是刹车。何况这“惊险的一跳”在好日子里难道没有露出过征兆吗？希特勒也许是个魔鬼，但很难说是个骗子，他的基本主张——种族主义和生存空间扩展论从来直言不讳，这样的理论基础最后必将引向战争。发现这一点并不需要什么特别的洞察力，只不过，象十日谈里古老的故事一样，希图利用魔鬼的最后难免沦为魔鬼的奴隶，或者，魔鬼和人类本来就没什么真正的界限？　　　　\n\n纽伦堡的美国人放过了沙赫特，他的祖国却没有原谅他，战后巴伐利亚拒绝他居住，他漫长的后半生背负着纳粹帮凶的骂名。然而华尔街呢？J。P。摩根财团呢？那些显赫的信托银行呢？洛克菲勒、亨利福特、杜邦这些工业帝国呢？伯尔尼和日内瓦赚得钵满盆满的金融家和军火中间商呢？即使在战败的德国，那些曾经不可一世的托拉斯们，总电力公司、法本、联合钢铁，谁又受到任何真正的触动了呢？在两极格局的战后世界中，又一轮金钱和控制的奇妙博弈开始了……　\n　\n你看你看世界的脸。　　\n“波丽娜，她无处不在，她就是社会……”——巴尔扎克《驴皮记》　　　　\n这篇大而无当的文章结束之前，不妨再对沙赫特苍老的背影目送一程。这个精装的伏冷脱，失去法术的老巫师，最后一次见到希特勒是在1941年一个公开场合上。希特勒的问题依然和华尔街有关，他问他是否能再去美国一次，争取华尔街新的贷款。这次沙赫特没有丝毫犹豫地告诉他，在《租借法案》生效之后，已经完全不可能。　　　　\n这是他对希特勒说的最后一句话，也是华尔街与纳粹德国这出人间喜剧的最后落幕。　　　　\n亚尔马。沙赫特1944年被牵扯进谋害希特勒的720事件，被送进达豪集中营。1945年达豪被盟军占领。1948年受审无罪释放后，先后担任印度尼西亚、埃及的经济顾问，1952年在阿以中东战争中作为埃及的顾问，1953年后回到德国重新投入金融界，同时写作回忆录《我的前76年》、《一个老巫师的告白》。1970年6月4日，在希特勒和罗斯福死去整整25年后，93岁高龄的沙赫特去世。\n　　\n他象一只从树上掉下来的猫，姿态难看却总能安全地四脚落地，一时的凶险也变成了因祸得福的契机。读他那洋洋洒洒一册又一册的回忆录，你很难相信这个耄耋老人身上有如此过人的精力和记忆力。甚至还在监狱他就和出版商定了合同，在儿子战死，自己等待受审、前途未卜的日子里，我看到这个71岁的老巫师写道：　　\n“我一直雄心勃勃，现在我依然如此。”　\n　　　\n不知为什么，这种过于强烈的生命意志，令我反感，就像对第三帝国那种狞厉嚣张的美。也许唯一例外的是这个细节。当写到他的爱子Jen在苏联战俘营里失踪，文风铺张华丽的沙赫特只淡淡说了一句：他是个温和而内向的孩子，本该是个很好的经济学家。　　\n可是呢？　　\n他活到了93岁，然而包括他的孩子在内，几千万年青人死于这场战争。　　\n他一生梦想着德国的强大复兴，在临死前，他看到的是自己帮助发动的战争制造出的一道柏林墙。　　　　\n陈词滥调，有时候却真的难以替代：　　\n愿后人勿复哀后人！\n\n华尔街借钱给德国购买华尔街控制的美国工业的军火和技术，得到的利润再投入德国军工业以扩大投资。纳粹德国的复兴奇迹奥秘即在于此。对于华尔街金融寡头，这样可以控制德国经济，赚取暴利。\n　　 但希特勒并不甘心于寄人篱下。他说过，“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义”。依靠华尔街德国重建了完整的工业体系，此时的希特勒意欲在这个基础之上打破英美主导的国际经济与金融体系，建立以德国为核心的欧洲经济新秩序。\n　　 希特勒所做的第一步就是要将华尔街控制的德国金融体系转移到政府手中。很快，政府便完全控制了德国国家银行，加强了对商业银行的监管。1934年12月5日的德国信贷法使政府可以监督银行业务活动的各个方面，政府不仅能要求知道银行各项办事手续的全部细节，而且能对银行放给私人的贷款实行严格的控制，以保证它们的目的完全符合政府的全盘计划。政?还严格控制金融市场来适应国家的长期目标。比如，新股票在发行前需要通过一个专门委员会来审查其是否可能有利于国家经济建设。\n　　 纳粹政府严格控制外币使用，管制进口，管制外国人使用德国银行的贷款，管制德国人向外国人出售马克。比如，德国贷款马克给巴西，但这些钱只能用于购买德国货，而不能到德国银行兑换成黄金。\n　　 严格管制的措施会降低进出口贸易量。沙赫特又和各个国家签署了双边的汇划结算协议。所谓汇划结算协议，就是德国进口商向德国央行账户支付马克，至于出口商是立即得?当地货币付款还是等待一些时日，则取决于德国政府的出口政策。有些商品，外国央行接过限制使用范围的马克后立即向出口商支付当地货币，这将使出口国家国民收入没有变化，不仅是来自德国的进口品不能增加国民收入，而且整个进口品都不能增加国民收入，此即支付原则。还有些商品，德国央行先让出口商等待，一旦德国的某一个进口商能够从德国购买商品之时，该进口商才能用当地货币购买马克，而央行则用这笔当地货币来支付原来的那位出口商。这就是所谓的等待原则。\n　　 因此，德国可以通过关税与适当的汇率，来限制进口或者促进出口。比如，在进口方面又可搞买家独家垄断，政府对进口商品都征税，或者向进口商卖出外汇，其汇率比从出口商那里买进时高出很多，政府收入得以增加。如果目的是进口而不是出口，以特殊方式即从国外借钱的方式改善国际收支，就可以用补贴汇率自由进口，但按很高的汇率出售外国需要的出口商品，为出口造成困难。为了最大限度地利用垄断的好处，改善贸易比价，对于国外需求不受价格影响的商品，汇率可以提得很高。而对于供应不受价格影响的进口商品，汇率可以压得很低。\n　　 沙赫特创造了200多种货币、银行券、债券和各种五花八门的信用工具，与汇划结算协议相结合来调控资金的流向。比如旅游马克只能用来支付在德国的火车、旅馆和饭店的账单，机床马克只能购买德产工作母机等机械设备，啤酒马克只能购买德国产的含酒精的饮料，而钟表马克则只能购买德产钟表。通过这种方法，德国有垄断地位的商品如仪器与光学设备，将不会被低廉的马克买走，而只能用来换取真金白银或是德国需要的外国商品。这种?殊的马克其实是放弃了黄金而以某一种物品作为其发行的储备。这是因为当时的黄金储备主要集中在英美两国。\n　　 此外，大量增发的各种信用工具只能用在基建或军工等生产领域，而不会进入消费品市场，通胀的威胁自然也就消除了。比如，1934～1936年发行的专门支付给军火商的米福债券就是如此。在沙赫特的撮合下，西门子公司、古特霍夫农冶公司、克虏伯公司和莱茵金属公司这4家德国支柱企业成立冶金研究有限公司。出自这家公司的米福债券便由一些资本有限、向德军供应物资的小公司出票，金属研究公司承兑之后到帝国银行去贴现，或者向资本市场出售。1936年，米福债券的未清偿总额达120亿马克，支持了当时德国军备重整一半的费用。到了1938年，沙赫特又发行了供应商国库券来支持军备重整。\n　　 但经济自有其规律，信用扩张与通胀是一枚硬币的两面。为了防止通胀，除了高税率和控制发放红利外，德国还有种种有关物价和工资的规定。根据1936年10月29日的一项法令，德国设立了一个物价管制委员会。先前授予任何政府部门的监督、批准或规定物价的全部权力，都移交给了物价管制委员会主任。他不仅负责为到达最后消费者手中的商品规定价格，而且?责对生产过程中各个中间阶段中的价格进行监督。\n　　 从1936年起，德国物价政策的基础就是1936年11月26日的冻结物价法令。根据这项法令，除特别许可的以外，物价管制委员会主任禁止任何物价提高到超过1936年10月17日的水平。由于物价冻结不仅冻结了个别商品的价格，而且冻结了各种商品价格之间的关系。结果德国物价一直保持稳定，批发价格指数（PPI，以1913年为基数100）从1936年到1939年仅从104.1上升到106.9。\n　　 当然，对英美主导的国际金融秩序，最为釜底抽薪的是易货贸易的国际结算方式。当时国际金融家获利方式仍然停留在19世纪的旧模式，也就是向经济困难的国家放债盈利。如果德国的易货贸易被其他缺乏黄金与外汇的国家所仿效的话，国际金融家不仅很难找到借款人，而且其财富也要严重缩水。随着货币与实物之间关系的脱离，英美主导的国际经济与金融的主导权自然而然地就会被瓦解。\n　　 仅在1934年，德国就完成了与保加利亚、罗马尼亚关于大豆和石油的易货贸易合同，与匈牙利和南斯拉夫涉及铝矾土和镁的易货合同，与丹麦关于家畜、黄油和猪油的易货贸易合同。德国还和中东欧建立起紧密的贸易关系。20世纪20年代末，德国占匈牙利、罗马尼亚、保加利亚、南斯拉夫、希腊和土耳其总贸易额的15%左右，到了30年代末，这个比例提高到40%。沙赫特禁止德国企业未经政府允许就进行国际贸易。所有国外债权人在德国只允许使用德国马克。\n　　 为了贯彻这一政策，沙赫特在德国设立了24个监控站，时刻监视着德国商人的贸易活动。根据国家的战略需要，沙赫特将商品划分为不同的等级：粮食、铁矿砂、钨、锑、铬等稀有金属等级最高，其次是煤炭、有色金属、矿物油、化工产品、润滑油以及棉花、羊毛和橡胶等。到1936年，德国已经签订了28个清算协定，在与这些国家的贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持平衡。在“二战”爆发前，德国国际贸易中的83%是通过易货贸易方式进行的。\n　　 沙赫特的想法是从英美主导的国际金融体系中找到漏洞，循序渐进地让德国也分一杯金融霸权之羹。而希特勒则求快求速，意图一蹴而就。结果到1938年，沙赫特被解职，戈林从沙赫特手中接过对德国经济与金融的控制权，他便将政府的政治目标和军事目标置于德国经济之上。\n　　 有破则有立，德国企业建立新的经济与金融体系。接替沙赫特经济部长位置的是瓦尔特&#8226;丰克。他是受戈林委托的制订新秩序计划的部长。新经济秩序是将欧洲组成一个单一的经济共同体，在德国的指导下进行运作。德国将成为欧洲大陆的工业中心，周围是一批组织起来供应它所缺少的农产品和矿产品的国家：东南欧将增加农业生产，放弃军备及辅助工业；丹麦将减少养牛和乳类生产，增加谷类和饲料的产量；挪威将致力于在农业上自给自足；甚至?国也将被看做是一个农业国和粮食输出国。\n　　 为了达到这一目的，德国必须要成为欧洲金融体系的核心，正如丰克所坦然承认的：“我们决不奉行一种会使我们依赖黄金的通货政策，因为我们不能使自己受到一种我们无法决定其价值的交换媒介的约束。”欧洲的货币将与黄金完全脱离，成员国之间的交易将在固定兑换率的基础上进行。德国将双边清算协议扩展为多边贸易制度。按照这种制度，所有的欧洲国家将通过设在柏林的一个中央票据交换所，用德国马克来结算其贸易账目。柏林将成为欧洲的金融中心。\n　　 “二战”期间，德国便根据既定方针在欧洲打造起新经济秩序的雏形。德国人首先没收和强迫收购被占领国家政府与私人拥有的黄金和国外资产，干涉被占领国家国内流通的货币，把这些货币同德国马克的兑换率人为地定得很低，勒索占领费，征收罚金，以及改造并周密地控制被占领国家的银行系统。\n　　 1939年9月，德国信贷银行在波兰创立，信贷银行有权将高达10亿马克的款项贷给德国供它在占领区使用，也可发放短期抵押贷款，贴现和接受不计息的转账及存款，以及发行票面额从50芬尼到50马克的纸币。纸币的准备金包括：德国信贷银行由于贷款和贴现的票据而拥有的资产，德国货币的准备金，在德国国家银行和各票据交换所的贷方余额，德国国库债券的准备金，以及给予德国的贷款。这些纸币在被占领国家内按固定的兑换率同该国的货币一起流通，兑换率通常大致相当于入侵前的比率，它们不能随便兑换成德国国家银行的钞票。这是一项必要的规定，用来防止因发行大量德国信贷银行纸币而造成的通胀影响到德国本土。\n　　 德国还以金融手段控制外国企业，其中德意志银行和德累斯顿银行征服欧洲工业的主要工具之一。它们通过诸如连锁董事会、股份所有权、代表投票制和操纵新的放款等方法，控制有关国家的主要商业银行，从而控制与这些银行有关的工业企业。比如，在捷克斯洛伐克，德意志银行和德累斯顿银行分别接收了波希米亚联合银行和波希米亚贴现银行后，就使德国控制了波尔迪纳尔铸造厂、克拉洛多沃尔水泥厂、布尔诺第一机械厂、波希米亚铜厂、索洛火柴垄断企业、金刚砂厂等该国的主要工业企业。\n　　 不过，打破甚至摧毁英美金融帝国的唯一的最有力的金融武器是多边清算协议。到1941年年底，德国已同欧洲大陆所有其他国家谈判了清算协定，这些国家彼此之间也进行了很多这样的谈判。后一类协定中有些是通过设在柏林的中央票据交换所结算的。在那段时间，柏林成了欧洲大陆的金融中心，马克成了居统治地位的货币，许多国家开始通过柏林以马克来结算它们的全部国际贸易。就像现在的美国一样，德国则凭借占压倒性优势的军事、政治和经济力量，强迫贷款国提供巨额贷款。换而言之，整个欧洲被迫不断供给德国它所需要的任何可以买卖的东西。\n　　 通过建立欧洲经济新秩序，德国人将战争造成的通胀全部输出到其他国家。德国信贷银行纸币有意在被征服的国家增加流通的货币量，人为制造通货膨胀。实际上，即便这种纸币被收回，也未消除通胀的压力。原因在于它们只不过由数目相等的本国货币取代而已。柏林的德国票据也起了制造通胀的作用，这等于德国人拿到商品却不付钱。按1939年的物价计算，1940～1944年，德国从被它占领的国家和被它统治的国家至少掠夺了1 040亿马克的财富，约占德国GNP的14%。\n　　 其他国家的政府为了防止出口商破产，只好通过无限制地批准贷款来垫付货款，结果货币发行量大为增加，通胀恶化，商品供应减少，甚至在希腊等国造成了政府财政的全面崩溃。而在德国，通胀趋势则受到强有力的控制。在外国进行的征敛，增加了可以获得的商品数量而又丝毫未增加流通的货币数量，大大削弱了通胀。\n\n　　　　从本质上讲，德国、英国与美国之间在金融上的争霸并无善恶之分。其实，希特勒本人并没有发动世界大战的企图。开战之前，德国军费开支占GDP才15%左右，与英国相当。1939年慕尼黑协定签订后。德国已削减了军费开支，结果英国军费比例大为超过德国。一直到1942年斯大林格勒战役开始之前，德国军备生产都一直在下降。结果，即便在战时，德国人的生活水平也未下降，因为希特勒不希望因此而削弱了自己在德国人民中神一般的形象。\n　　　　自始至终，希特勒的胜利秘诀是政治智慧，而不是军事征服。希特勒并不认为德国有同英美苏三大国的联盟发生长期战争的可能，他自信自己可以通过外交手段达到目的，若不行则通过一系列小规模战争解决德国的生存空间问题。在他看来，在政治手段和进攻波兰的小规模战争之间没有清楚的分界线。希特勒本人也知道，一旦国家综合实力与军事力量成为决定因素时德国便会完蛋。\n　　　　德国的领土扩张与日本的侵略也有本质性的不同。“光复”与“侵略”只是站在不同立场上的描述同一件事的不同词语。从欧洲历史来看，德意志人的神圣罗马帝国曾统治了欧洲大陆的大部分土地。遗憾的是，德国一直到19世纪中期都未结束分裂状态。俾斯麦虽在1871年创建了新德国，但却把奥地利以及其他德意志人居住区排除在外。希特勒收回萨尔地区，派兵进驻本国的莱因地区，将奥地利，捷克斯洛伐克苏台德地区纳入德国版图。站在德国人的立场看，无非是收复久远的故土。\n　　　　纳粹德国唯一的遭人诟病的犹太人大屠杀也不是没有辩解的理由。在纳粹统治下的欧洲，食利者阶层的犹太金融家被逐出欧洲经济圈。比如那个风光百余年的罗斯柴尔德家族在欧洲大陆的财富与权势便被纳粹德国破坏殆尽。1938年，《犹太人资产登记法令》颁布后，罗氏家族的财产受到严重冲击。第二年，几乎所有的罗氏家族的慈善与教育机构全部被解散或被国有化，而罗氏家族很多人都沦为难民。维也纳的罗氏家族掌门人路易斯&#8226;冯&#8226;罗斯柴尔德被逮捕和关押，直到他在奥地利的所有资产都被转让给德国政府后才被释放。他在法兰克福的豪华住宅以61万马克的超低价被政府征收，一百多年来价值连城的艺术品则以象征性的230万马克的代价被政府收购。位于捷克的维特科威兹钢铁厂都被赫尔曼&#8226;戈林国家工厂兼并。这些对于欧洲人来说未尝不是一件好事。\n　　　　刚开始，希特勒也未动过灭绝犹太人的念头。犹太复国主义者曾与纳粹合作，希望将犹太人迁移到某个地区重建国家。但是包括英美在内的世界上绝大部分国家均不接收犹太人。英美列强甚至暗自高兴，希特勒做了他们想做而不愿公开做的事。直到美国对德宣战，德国人认为这是犹太财团鼓动的结果，于是开始屠杀犹太人以示报复。如果说德国是屠杀犹太人的元凶，那么英美两国就是将犹太人送进屠宰场的从犯。\n　　　　对德国人来说，维持现状不是和平，而是屈服于英美。英美保住一战胜利果实，德国则想消除其失败的影响，突破英美在政治、经济与金融上的霸权。这都无可厚非，正如英国历史学家泰勒所写的：“在主权国家的世界中，每个国家都尽最大的努力谋求它自己的利益，至多由于错误而不是由于罪行受到批评。像往常一样，俾斯麦在谈到1866年奥普战争时发表的意见是正确的：‘奥地利反对我们的要求和我们提出要求一样不是什么错误’……希特勒的目的是使德国成为欧洲的支配性大国，或许更久以后成为世界的支配性大国。其它强国过去追求相似的目的，现在仍然如此。其他强国也把小国看作他们的仆从国。其他强国也试图用武力保卫他们的重大利益。在国际事务中，希特勒除了是一个德国人之外，他没有什么过错。”\n　　\n\n\n\n\n【附录】\n\n希特勒演讲：为日耳曼民族而战\n\n（作者:希特勒 ）\n\n　　“今天，我们站在这里！站在德国人的土地上！站在柏林，这块我们祖先用鲜血和尊严浇灌的土地上！我的身后，是安德烈.柯里昂的雕像！他是全世界公认的自由斗士！他是全世界的光！”\n\n“我的面前，站着的是一个民族，一个在屈辱中呻吟的民族！”“那场战争结束之后，我们这个民族的骄傲就没有了！那些战胜者们骑在我们的脖子上作威作福，他们随意践踏我们的尊严，一个欧洲大陆上最高贵的民族地尊严！你们告诉我，你们是选择像本杰明.马丁一样去做一个自由的斗士，还是一个奴隶？！”\n\n“你们或许要说：希特勒先生，我需要一个工作，一块面包。是地。你的说法很对，生命实在是太重要了。但是我要告诉你们。这世界上还有一种东西比生命更重要，那是自由！那就是尊严！”\n\n“只要阿尔萨斯和洛林上空一日还飘扬着法国的国旗，我们的尊严就不存在！只要那些法国人、英国人在我们的国土上横行霸道，我们地尊严就不存在！只要在欧洲的版图上，这个叫德国的国家四分五裂积弱不堪。我们地尊严就不存在！只要其他国家的人，在聊天的时候说到德国这个字眼的时候会发出一声轻蔑的笑声，我们的尊严就不存在！”\n\n“我们需要的，不是一块面包！而是一个生存空间！一个民族的生存空间！这生存空间，不是靠乞求和抗议来实现的，而是靠铁和血来实现的！”\n\n“别人欺辱我们，哪怕是最弱小的民族也来践踏我们，我们只会叫着：我们表示强烈的愤慨和抗议，这样的人。是没有骨头的！这样的人，是低贱的！我们应该用大炮地震耳欲聋声让敌人颤抖！我们应该碾压他们的尊严、生命，让他们知道我们不是一群只知道抗议的懦夫！”\n\n“你们要记住，一个只懂得抗议的国家，是一个没有骨头的国家！一个只懂得抗议的政丶府，是一个没有骨头的政丶府！当我们地尊严、领土、生存地空间都遭受践踏的时候，还不知羞耻地抗议地政丶府，我们是不需要的！你们最后也会抛弃它们的！”\n\n“我很骄傲，在你们这些人中。这样没有骨头的人，少之又少！我的面前，是一个留着千年不屈血液的军团！这血液，曾经在我们祖先的血管里面流淌过，他们没有屈服过！现在，它们在我们的身体里面汩汩奔涌，你们告诉我。你们愿意它冷却吗！？”\n\n“能够团结人们的。有两件东西：共同的理想和共同的犯罪。我们有雕刻在德意志旗帜上面的伟大理想，我们会为这理想流尽我们的最后一滴血！在今天的柏林。没有任何东西能够拯救我们的祖国，只有这理想！凡尔赛条约，是一个极大的耻辱！我们有拒绝执行它的决心和理由！做你们想做的吧！就像本杰明.马丁拿起枪，就像他带领着他的同胞们高举着那面自由的大旗英勇杀敌一样！假如你们期望战斗，那就去战斗吧！然后我就能够看到你们是七千万奴隶还是七千万坚贞不屈的日耳曼人！”\n\n“如果有那么一天，我，阿道夫.希特勒，也会想本杰明.马丁那样，举着属于我们德意志的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些德意志的荣耀的祖先们，我可以昂着头颅走到伟大的腓特烈大帝跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的德意志流尽了最后一滴血！”\n\n“我们不为奴役而战！我们为自由而战！我们不是机器，不是牛马，我们是人！是从来没有屈服过的日耳曼人！”\n\n“我们以自由的名义团结起来！为一个新的、公平的世界而战！我们为人人有工作而战！为那些奴役我们的人滚出德国人的土地而战！为我们不需要整天喊着抗议而战！为我们的尊严而战！为我们的诺言而战！”\n\n“为解放这个国家而战！日耳曼人，我们为我们的祖先的荣耀而战！为我们的子孙后代能够骄傲地宣传：我们是从来不屈服的日耳曼人而战！”\n\n“我的同胞们，德国和德国人民万岁！自由，万岁!”","source":"_posts/金融之王——沙赫特[德国].md","raw":"---\ntitle: 沙赫特\n---\n\n#### 金融之王\n\n##### 第三帝国的兴起与第二次大战的起源\n\n###### 希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\n\n   为了对抗一个共同的敌人而缔结的战争同盟，总是注定了会短命的，因为一旦这个敌人被击败了之后，同盟的重心也就随之而毁灭了。很少有理由可以假定赢得第一次世界大战的英美法三国之间的协约，能够比勒班陀海战以后的神圣同盟或是滑铁卢之战以后的战胜国会议支持更长久的时间。但是与后者作一个比较，则不免具有一个极大的差异：当拿破仑最后失败之后，差不多在一百年的时间当中，“不列颠的和平”始终能在欧洲诸国之间，维持着一个权力平衡的局势。到了第一次大战爆发，这种局势才被破坏了。此后由于美国的参战，于是国际联盟就开始代替了“不列颠的和平”。可是这个工具的设计却完全文不对题，它既不能取消一切足以引起战争的原因，复不能重建一个权力平衡的局势。它硬性的要世界接受一种和平路线，这条路线与历史、地理和经济三方面都是不符合的。国际联盟的毛病是陈义过高，只有空谈，而无实力。所以结果不但不能有益于世界和平的维护，反而更增加了摩擦和冲突的机会。于是终于有“暴君”出现了，他们出现了，他们向它挑战并利用其无能的弱点。\n　　在这些权力的艺术家之中，有两个人——墨索里尼和希特勒——是具有一种新的哲学思想。他们敢向经济人（Economic Man）的神话挑战，这是资本主义、社会主义和共产主义的共同基本因素，而想把“英雄人”（Heroic Man）的神话来代替它。有一位著名的法国军人昆顿（Rene Quinton），在他所著的《军人的圣经》一书中，对于此种神话曾经有明白的解释。\n　　“所谓英雄就是一个为旁人而忘记了他自己的人。天之所以生出英雄来，不是为了生活而是为了服务。英雄是与凡人不同的，因为他的生活是具有神意的。战争把人类已经所丧失了的宗教又带回来了。生命的安全足以使神意失效，反之若不惜一死，则人也可以拯救世界的生命。人类的建立者不是人而是思想。”\n　　从希特勒眼中看来，国际资本主义和马克思主义是完全一样的东西。他认为他们都缺乏牺牲精神，是违反自然的，足以毁灭人类。所以他提出了他的教条，“一个民族，一个国家，一个领袖”。一方面相信雅利安人和条顿族是优秀的，另一方面又对于犹太人表示激烈的仇恨，在他的圣经《我的奋斗》（Mein Kamf）一书中，可以看出来他的思想是与昆顿的理论极为接近：\n　　“人们不肯为事业而死，但却肯为理想而死。要生存的人却必须要战斗。在这个世界上，凡是不想战斗的人也就没有生存的权利，因为在这个世界上，生活的法律即为永远的斗争。为了恢复日尔曼的权力，你们不应询问：“我们怎样的制造武器？”而应询问：“我们怎样的培养一种精神，使这个民族能够负起武器来？”雅利安人的伟大，其基础并不是他的智力，而是他愿意牺牲一切以来为团体服务的意志。这种心理态度足以强迫私利退后，而让公义出头。这也是任何种类的真正人类文明的第一先决条件。追寻一己私利的人是不值得一顾的，而牺牲自己幸福的英雄则值得歌颂。”\n　　德鲁克（P．F．Druber）在其所著的《经济人的结束》一书中，对于这种教条曾经有极精辟的批评：\n　　 “若认为极权主义中的这种号召牺牲的理想，只是一种伪善、自欺之谈或是宣传高调，那才是大错而特错。它是从失望的深渊中长成出来的。正和一八八〇年虚无主义在俄国的流行一样，它可以吸引最高贵的和最勇敢的青年人，今天在德国和意大利的情形也是一样。这些战后一代中的优秀份子拒绝与这个现有的世界妥协，他们觉得这个世界既无值得一死的真正价值，而又无值得一活的活跃思想。”\n　　除非对于这两种神话——经济人与英雄人——的斗争有所了解，否则对于一九三九年的浩劫也许就无法了解，而会认为这完全是天命了。\n　　希特勒的父母为奥国人，一八八九年四月二十日，出生于莱茵河上的布劳瑙（Braunau）。当一九一四年第一次大战爆发时，他投入了巴伐里亚第十六步兵团当兵。在所有的新兵中，也许更没有第二个人会像他这样的合于“彻底的无产阶级”的资格。凭着军功，他获得了不少的勋奖，可是说也奇怪，他的阶级却始终只升到了下士为止。\n　　当一九一八年十一月十一日，德军在康宾森林中投降时，希特勒下士正睡在医院中，他因为受了毒气伤，眼睛已经半瞎了。谁也不会预料到将来有一天，这个默默无名的小兵，会在同一个地点接受法军的投降，并且把他的卍字旗从大西洋插到了伏尔加河上。\n　　这是什么力量使他能有如此的成就呢？一方面是由于他具有政治天才和特殊的领导能力，但是另一方面，比较最重要的，却是他自信是受了神的指示，来领导日尔曼人民走上复兴的道路。他是一个中了“神毒”的人，他相信散布不公正种子的人，应自食其恶果。\n　　使他着了魔的即为凡尔赛条约，它与威尔逊十四点的精神是完全不符合。一九二三年，潘卡里侵入鲁尔地区，破坏了德国的币制，扫灭了德国的中等阶级。在一九二四年到了一九三〇年之间，德国的外债增到了七亿五千万镑，使德国人民感到民不聊生。最后美国证券交易的总崩溃，更使一九二九年到一九三一年之间，全世界上都发生了金融上的不景气。\n　　在一九三〇年，德国人民仰赖政府救济生活的共一千七百五十万人，在一九三一年，共产党的选票增到了五百万张以上。在那一年，有一位美国记者尼克波克（H．R．Knickerbocker）在他所著的《德国——法西斯乎？苏维埃乎？》一书中，估计至少有一千五百万德国人是不能完全吃饱的，选民中有三分之二是仇视资本主义的，而过半数以上是反对现有号称“民主”的政治制度的。次年，希特勒即在这个局面之下获得了胜利。诚如他自己所形容的，在一九一九年，他简直不能算是一个人，当时他加入了一个不知名的政治组织。这个组织自称为“日尔曼劳动党”，一共只有六个党员，他就做了第七名党员。一九三二年，这个党改名为“国家社会日尔曼劳动者党”（National Socialist German Worker's Party），在七月间的大选中从三干六百万张的选票中，他一共获得了一三、七七九、〇一七张之多。一九三三年一月三十日，德国总统兴登堡命令他以最大政党的领袖身份，出任德国总理并组织一个政府。一年之后，在六月三十日那一天，希特勒开始清党，用一连串的暗杀手段，把异己份子杀死数百人。最后到了八月二日，兴登堡元帅逝世，于是他就取消了总统制，而且任德国人民的元首。\n　　除非是亲眼目击的人，否则对于希特勒的勃兴，简直会认为是一个难以置信的神话。早在一九三四年，当赫斯（Rudoff Hess）代表全体纳粹党人向希特勒效忠时，其所说的话从麦克风中传到了每一个德国人的耳朵里，在他们的内心中引起了共鸣。\n　　“这个宣誓使我们把生命寄托在一个人的身上。照我们所相信的，这个人是替天行道的。不要用你们的头脑去寻找希特勒，他是存在于你们的心灵之中。希特勒就是日尔曼，日尔曼就是希特勒。日尔曼就是我们在地球上的上帝。”\n　　尽管他的敌人曾经宣称这个非常的人物，是一个魔鬼，是一个疯人，但是我们却决不能轻视事实——他曾经扑灭了在德国境内的布尔什维克主义和完成了许多惊人的伟大事业。实际上这个人是具有二重人格的，一方面他也是一个正常的人，另一方面他却是一位“真神”。假使不是如此，则有许多事实就都会无法解释。劳合－乔治总要算是一个智慧超群的人，当他在一九三六年访问过希特勒之后，回到英国时曾经发表他的观感说：“我从来不曾看见过比德国人更快乐的民族。在我所遇见过的许多伟大人物之中，希特勒要算是最伟大的一个。”邱吉尔也曾经说过：“假使我们的国家若是失败了，我希望也能找到这样一个领袖来恢复我们的勇气，和领导我们回到与各国平等的地位。”\n　　希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\n　　希特勒认为只要国际货币制度还是以黄金为本位的，则一个能够垄断黄金的国家，即可以使缺乏黄金的国家屈服于其意志之下。这个手段就是吸干其外汇的来源，迫使他们必须借债以来维持生产。他的理论是说：“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才又能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义。”所以他决定：（一）拒绝接受国外的借款，以生产为德国货币的基础，而不以黄金为本位。（二）用直接易货的方式以来获得输入品，必要时并补助输出。（三）停止所谓“外汇的自由”——即准许在货币方面实行赌博，并依照政冶情况，把私有的财产由此国移到彼国。（四）当有了可以工作的人力和物资时，就制造货币而不向国外借债。\n　　因为当时国际金融的生命，就是寄托在向经济困难的国家放债营利的行为之上。所以希特勒的政策简直是切断了它的生命线。假使若是准许他成功了，则其他诸国势必都会起而效尤。若是所有缺乏黄金的国家，都纷纷实行以货易货的办法，则不仅无人借款了，而且黄金也就丧失了它的权力，所有的放债者都只好关店了。\n　　这支财政性的手枪，尤其是直指在美国的身上，因为它是世界上黄金的主要供给者，而且它的大量生产制度使其必须输出其产品的百分之十来避免失业的危机。此外，又因为希特勒对于犹太人采取野蛮的虐待政策，所以当然得罪了美国的犹太籍的金融界巨子。当希特勒做了德国首揆后还不过六个月，纽约的一位富翁乌特梅耶（Samuel Untermyer）就开始向他挑战了。他主张向纳粹主义展开“圣战”，呼吁对于德国的货物，商船和劳务，都采取经济上的杯葛主义。美国的国务卿赫尔（Corded Hull），也依照一九三四年的贸易协定法案，坚持的主张美国的国外贸易决不能因为外汇管制，政策专卖和易货制度而受到任何的损害。\n　　从一九三三年到一九三六年之间，希特勒已经使德国的失业人数由六百万人减到一百万人，繁荣与复兴的程度简直使英国人感到害怕。据说在一九三六年，邱吉尔也正像一九〇七年的巴福尔一样，他曾经告诉美国的伍德将军（Gem R．E．Wood）说：“德国是已经变得太强了，我们必须把它击碎”。到了一九三七年九月间，美国又开始发生了一个新的大萧条，其扩展的速度也是非常的惊人。十月十九日，证券市场完全崩溃了，到了十一月间，据调查全部失业人数已达一千一百万之多，另外还有部份失业人数五百五十万。对于这种困难的国内情况，必须要设法分散人民的注意力，尤其是总统大选又已经迫在眉睫了。所以在十月五日，罗斯福总统发表其著名的“检疫演讲词”（Quarantine Speech）。他痛斥现有的恐怖性统治，认为人类文明的基础已经受到严重的威胁，并且呼吁美国人不要幻想以为美国可以幸免，西半球可以不受到攻击。最后提出建议说，增强道义标准的最容易措施，即莫过于对侵略者实行国际性的防疫隔离。不久之后，这个主要的侵略者也被指明了出来。巴鲁赫（Bernord Baruch）曾经向马歇尔将军（Gen. G. C Marshall）说：“我们应该把希特勒这个家伙打倒，不让他的那个玩意儿成功。”什么玩意儿？可能他所指的就是希特勒的易货制度。因为在一九三九年九月间，巴鲁赫曾经把他与美国总统会谈的结论，公开发表如下：“假使我们能够把价格压低，则并无理由说我们就不能够把主顾们争取回来，因为战争的缘故，敌国必须放弃他们的主顾。于是德国人的易货制度就会归于毁灭了。”\n　　在不列颠，对于易货制度也同样的展开了猛烈的攻击。一九三九年三月九日，驻伦敦的波兰大使报告他的政府说：英国的海外贸易部长哈德逊（R．S．Hudson）曾经向他说过：“不列颠政府决定不放弃在欧洲的任何那一个市场，也决不放弃其经济上的优势以来使德国坐享其利。今天我们正在经济领域之内进行谈判，来摧毁德国人的易货制度。”这个经济战争是已经激烈到如此的程度，所以舍伍德（R.E. Sherwood）在其所编的《霍普金斯白宫文件》一书中，曾经有过下述的一段记录：一九三九年四月间，美国大使馆中驻柏林的代理武官向华盛顿当局报告着说：“目前的情况是已经十分的明显，德国是已经在积极的进行一个战争。这是德国为了其生死存亡而作的经济战争。德国的货物必须要有市场，否则就只好坐以待毙，而德国当然不愿意死亡。”\n　　当我们考虑到第二次大战的经济原因时，内心里必须要记着，也和第一次大战一样，这种两个不同经济制度之间的斗争是无所谓是非善恶的，而只是具有生存的价值。资本主义为了维持其优势而战，与希特勒为了其易货制度而战，在善恶上来说是没有什么高下之分的。对于他们而言，这都是存亡之所系，这都是贸易竞争的产品——也是工业革命的后果。\n\n\n前奏：上帝保佑打败仗的人民　　　　\n二十世纪二十年代初，一战硝烟远去未久，古老的德国笼罩在一片几乎毫无希望的风雨凄迷中。人们尚未来得及摆脱战败的沮丧和羞辱，严峻的生计问题就紧逼了上来。德国在战争中丧失了总人口的10％和将近七分之一的土地，换来的是每年1320亿金马克的赔款，相当于1921年德国商品出口总值的四分之一。德国拿不出这笔钱，法国就伙着比利时波兰，毫不客气地进占了德国经济命脉鲁尔工业区，是为“鲁尔危机”。正倒着霉的时候，你往往想不到有一天还能更加倒霉，于是手忙脚乱的政府采取了千古不变的饮鸩止渴老办法：增发纸币。　　　　\n真正的灾难开始了。随着印刷机全速开动，1921年1月31日，世界金融史上前所未有的恶性通货膨胀，如同张开翅膀的死神，扑向了已经奄奄一息的德国经济。美元与马克的比率从1921年1月的1：64，到1923年11月已经崩溃为1：4,200,000,000,000。如此骇人的程度，即使到今天，也只有1946年的墨西哥和1949年的中国可以相提并论（顺便说一下，到目前为止中国还保持着这项领先记录）。　　　　\n到了这个地步，德国的日常生活可想而知。薪水得按天给，要不然到了月末你会发现本来买面包的钱只能买面包渣了。发工资前大家都要活动一下腿脚，准备好起跑姿势，钱一到手，立刻拿出百米冲刺的激情和速度——冲向市场与杂货店。腿脚慢点的，往往就难以买到足够的生活必需品。农产品和工业品生产都在急遽萎缩，市面上商品短缺，唯一不缺的就是钱，纸钱！没有购买力的纸币像没有生殖力的性器官，叫人想着就伤心，孩子们在街上大捆大捆地拿它们堆房子玩。1923年《每日快报》上刊登过一则轶事：一对老夫妇金婚之喜，市政府发来贺信，通知他们将按照普鲁士风俗得到一笔礼金。第二天，市长带着一众随从隆重而来，庄严地以国家名义赠给他们1,000,000,000,000马克——或者半个便士。　　　　\n对于德国的悲惨境地，它一战中的对手们反应并不一致。老对头法国自然是盼着这个强邻兼宿敌越倒霉越好，在赔款问题上咬紧牙关毫不让步；苏联因为社会制度被西方排除在战后的“凡尔赛——华盛顿体系”之外，割地赔款全没它的份，又刚刚跟波兰打了一场败仗，希望借助德国的先进军事经验，1922年开始就与德国秘密合作（结果是搬起石头砸了自己20年后的脚）；英国秉承一贯的老奸巨猾，继续“均衡势力”品牌之大陆政策，不希望德国过分削弱而使法国坐大。小国家们有的内部爆发民族革命自顾不暇，有的在老大中间小心翼翼找个位置坐下观看演出，有机会也诈点汤喝喝。　　\n战败者付出代价，古来皆然。历史上没事就打来打去的欧洲，利益变幻翻云覆雨，沾亲带故反目成仇，一千多年下来戏码反复，不过如此。　　　　\n然而，这次的确有点不同。　　　　\n现在的人们讨论一战远远没有二战兴趣浓厚，但是事实上，今天国际关系和文明准则的基础，大部分是由一战奠定的，某种意义上来说，第一次世界大战真正摧毁了传统世界的根基，而二战是一战遗留矛盾的延续和清算。如果说从前欧洲的战争是国王和贵族的战争，那么一战就是第一次现代意义上国家之间的战争，从它的政治根源、战争动员、兵役体制和战后安排上，无不体现出鲜明的现代国家主义特点。不管主动还是被动，战争成为全民对国家的事务的参与，惩罚也成为有理论依据的全民责任。这样，每个人难免要反思一下，打了这个仗，对每个人来说意味着什么？　　　　\n另外，通过一战，人类在自相残杀方面的创造力表现得没有最强，只有更强。在凡尔登的绞肉机和索姆河的坦克面前，19世纪天真的乐观情绪，对主流古典人文主义的自信土崩瓦解了。新的思潮纷纷登上舞台，直截了当，冷酷无情，与这个铁血强权的时代宾主相得一拍即合。　　　　潘多拉的盒子打开了，古老的欧洲现在到处都是打碎的坛坛罐罐，德国的巴掌挨得最响亮，然而他们要报复的并不仅仅是从普鲁士时代延续下来的那些敌人们。在这个产生过无数哲学巨人的民族，思考活动一向壮丽而可怖，短暂的痛苦过后，将化身为钢铁的洪流，无论说它邪恶还是野蛮，它是从我们自以为是的文明中生长出来的，让我们前所未闻，目瞪口呆。　　　　\n完成这个过程，它需要的只有一种力量：金钱。　　\n\n二、帝国银行里的华尔街精英　　　　\n1923年11月，德国发生了两桩对历史有深远影响的事件。　　\n第一件是阿道夫?希特勒发动了以失败告终的慕尼黑啤酒馆政变。尽管此前他爱国愤青的风头一时无贰，甚至原陆军总司令、德高望重的鲁登道夫将军都稀里糊涂地被拉上了他的检阅台；在德国普通人眼里，恐怕这位热血沸腾的老兄当时也和一个比较抢镜的行为艺术家差不了多少。在这个动荡不安的年代，又何尝缺乏大胆冒险的事件，和昙花一现的赌徒呢？于是未来的元首只好郁闷地在监狱里写他的奋斗。比较有趣的是，希特勒提到了他对通货膨胀及其原因的看法。　　　　\n“政府镇定沉着地继续印发这些废纸,因为,如果停止印发的话,政府就完蛋了，因为一旦印刷机停止转动——而这是稳定马克的先决条件——骗局马上就会暴露在光天化日之下。??????如果受惊的人民注意到,他们即使有几十亿马克,也只有挨饿的份儿，那他们一定会作出这个结论:我们不能再听命于一个建筑在骗人的多数决定的玩意儿上面的国家了：我们需要独裁 \" (转引自威廉?夏伊勒《第三帝国的兴亡》)　　　　\n从这段有意思的话里头，我们能够看到古往今来煽动艺术的精髓。凭心而论，希特勒确实颇有几分洞察力，他看出马克的疯狂贬值被有意利用来应对外债（赔款是用马克计算的），政府也的确难辞其咎，然而由此得出结论——“民主不如独裁”，就莫名其妙了。而煽动的诀窍偏偏就在于此，观点必须震撼，论据必须彪悍——那么从论据到论点到底是什么逻辑，基本上就没多少人注意了。不信你翻翻文革的大字报，保证有所印证。　　　　\n差不多同时发生的第二件事，可要比那位退役下士的表现吸引力大多了。甚至可以说，停战以来，德国人民第一次听见了好消息。　　\n\n持续将近三年的恶性通胀，在1923年底开始得到缓解和控制。　　　　\n历史学家们将这个功绩与1923年11月的一个任命联系起来：46岁的德意志帝国银行董事亚尔马-霍雷斯-格里雷-沙赫特被任命为国家货币流通专员。\n　　沙赫特1877年1月生于特因利夫（原属德国，现属丹麦），父亲是德裔美国公民，母亲是丹麦裔。他的父亲为纽约公平信托公司工作了将近30年，亚尔马之所以在德国而不是美国出生，只是因为他母亲当时患病必须全家回德国治疗。和今天的众多移民一样，老沙赫特觉得美国的月亮特别圆，为了聊表对第二祖国的热爱之情，居然把一位美国反蓄奴制政治家的名字放进了儿子的姓名中间，这就是他奇怪的中间名的来由。在日耳曼的命名方法里，中间名本应是父名和祖父名，这个独特的做法如同一个奇异的预言，在他的一生中深深刻下了难以磨灭的美国印记。\n　　小亚尔马聪明而勤奋，具有德意志历史上那些百科全书式学者的天资气质，他先后专门学习过医学、哲学和政治科学，年仅22岁就得到了经济学博士头衔。年轻的沙赫特博士秉承父业，进入德雷斯顿银行。他本人出众的能力加上老头子在金融界广泛的人际关系，沙赫特一帆风顺，很快成为引起关注的金融精英。1916年，他成为德国国家银行的董事之一。1923年，沙赫特临危受命，拯救灾难中的德国货币流通体系。　　\n货币崩溃的根源在于沉重的赔款负担，沙赫特当然清楚，一切金融改革的举措如果不解决好这个问题，只会引发更可怕的动荡。他上任之后，立刻从两个方面齐头并进：一边寻求外国金融资本的支持，一边改革货币，用新的地产抵押马克（Rentenmark）取代极度滥发的旧马克。　　那么该向谁寻求帮助呢？哪个国家有能力又有意愿帮助德国呢？欧洲的邻居和对手们要么心怀叵测，要么自己也穷得够呛，沙赫特也根本不指望它们，他的目光越过浩瀚的大西洋，精准地投向了自己的精神故乡——美国。　　　　\n一次大战最重要的后果，既不是霍亨斯陶格、哈布斯堡、罗曼诺夫三大欧洲王室的垮台，也不是共产主义革命的兴起，而是美国作为国际经济政治关系中最强有力，甚至决定性的一端，羽翼丰满，开始闪亮登场。巴黎和会和国际联盟提供了它的出场秀，然而要真正深化美国对世界的控制能力，向欧洲大陆的经济渗透是一个重要途径。德国伸过来的求援之手，与华尔街的金色魔杖正好一拍即合。　　　　\n二十年代的华尔街，宛如现实版的迪斯尼乐园，不断在狂欢的气氛中迎来繁荣奇迹，几大主要银行财团积累下来的资本迫切要向外扩张。马克思曾有言道，300%的利润下资本就敢冒上绞架的危险，绞架尚且不怕，何况区区一个德国。1924年，以美国银行的查尔斯道斯为首的委员会推出了“道斯计划”，1924-1928年内总计8亿美元贷款流向德国，帮助它偿还凡尔赛条约的赔款，利息收益直接投资于德国市场。同时，国联调停法比两国撤军，接管鲁尔工业区。　　\n时来天地皆同力，沙赫特一旦心中有底，立刻果断地行动起来，用国家银行黄金储备为基础的新马克，以一比三十亿的悬殊比率兑换旧马克，到1924年8月这个过程基本完成，马克汇率开始在国际市场上稳定下来，国际投机者逐渐停止了对它的攻击。折磨德国的漫长通货膨胀结束了，乱云犹飞，千山已渡，沙赫特经此一役，证明自己不愧为金融奇才！　　　　\n\n1928年，沙赫特率领德国国家银行代表团，与美国为首的国联赔款委员会谈判签订了“杨计划”，它是道斯计划的延续，德国每年只要付赔款额的1/3，剩下的部分可以推迟。1929年世界经济危机爆发之后，胡佛总统干脆提议暂停德国赔款的90%。等到1933年纳粹上台，就压根一分钱都不给了\n　　道斯计划和杨计划背后，都站着华尔街金融巨鳄J?P?摩根的庞大身影。道斯计划，据美国乔治华盛顿大学国际关系教授卡罗尔?奎格雷的研究结果，“很大程度上是一个J?P?摩根产物”，而杨计划的这位“杨”——Owen Young，直接就是J?P?摩根派出的代表。这两个计划最大程度保证了美国金融资本的利益，在1934年分业法案之前，像摩根这种巨无霸的金融恐龙一手控制信贷，一手承销证券，去了德国的贷款在华尔街发行成债券，巨额佣金收入滚滚而来，像金雨一样幸福地淋在华尔街精英高贵的脑袋上。　　　　\n然而，道斯和杨计划的另一个结果，却是双方始料未及的。那就是“迅雷不及掩耳盗铃之势”的美国资本赤裸裸占领了德国实业界，将德国私人资本严重排挤出去。一方面，德国中小企业破产，实业资本流失，造成了大面积失业，刚刚稳定的经济又面对考验，大家伙出得狼窝入虎穴，使纳粹的蛊惑宣传有了民意基础；另一方面，美国资本集中在电力、钢铁、化工几个大的行业中，大展拳脚滚雪球，恰恰是这里生长出的垄断寡头，为希特勒的竞选活动提供了主要资助，进而为他发动的战争承担经济支持。　　　　\n从沙赫特其人来看，他与华尔街的渊源明显而深刻，他父亲就职的纽约公平信托公司就是被摩根财团控股的。早在1905年，他随同德累斯顿银行董事会访美时，就会晤过J?P?摩根本人。他英语说得比德语都流利，以至于几十年后对他的审判是采用英德双语进行的。从广义上讲，沙赫特是以华尔街为代表的国际金融精英圈子里的一分子，一个“大人物”。资本没有国家之界，只有利益之别，资本家何尝不是一样？纽伦堡法庭上，只有三个被告指控没有成立，当庭释放，当过纳粹财政部长和中央银行首脑，为整个战争筹集资金的沙赫特就是其中之一，苏联代表尖刻地指责“资本家永远不会受惩罚”，此言未必正确，但西方对他偏袒却是毋庸置疑的明显。　　　　\n然而，成为沟通华尔街金融集团和纳粹德国核心圈子的关键人物，20年代离沙赫特尚颇遥远，就是说起来都匪夷所思。那个粗俗的流浪汉出身，政变未遂的小头目？大概他连帝国银行的门往哪儿开都没搞清呢，在这些衣冠楚楚手握经济命脉的绅士们中间，谁会给他一个正眼呢？然而历史的魅力就在于此，昨日言犹在耳，今朝沧海桑田；聚光灯下，王子与贫儿的游戏不断被命运慷慨刷新，只不过每次付出代价的，永远都是黑暗里的芸芸众生。\n\n三．资助希特勒的工业寡头们　　　　\n国王死了，国王万岁。此时一战勇士穷途潦倒，二战豪杰尚未登上舞台，灯光下活跃的是一批当代英雄。德国需要钱，华尔街需要能赚更多钱的钱。货币和货币的交流没有语言文化制度历史种种障碍，是世界上最亲密无间直截了当的尔虞我诈。　　　　\n1924年到1933年，在道斯计划和杨计划之下，通过华尔街的国际财团经手流入德国的贷款总额为330亿马克，其中的最大三笔款项，分别建立和帮助了三家大工业卡特尔。　　　　\n“卡特尔”这种垄断形式最早就源于德国，词根也是德语，指的是把小生产厂家由统一定价限量的协议联合起来，控制某一种行业的整个市场，比方说OPEC组织就是一个卡特尔。卡特尔的特点是简单有效，缺点是不够稳定，每人都有破坏协议的动机。但是在德国这种持重守信的地方比较合适，它从汉撒同盟时期开始就有一个悠久的信用传统，背信弃义的事不太流行。美国的资本进来之后，很快就看中了这种垄断形式。银行家们的操纵方法很简单，控股其中最强的一个或几个企业，让它们在一两种基本产品上占绝对优势，进而控制整个卡特尔。　　\n这三家卡特尔分别是德国通用电力（A.E.G），联合钢铁，I.G.法本，它们分别控制了电力、钢铁和化工行业，把握了德国的工业命脉。到1937年，联合钢铁和IG法本生产的爆炸物加起来占全国总量的95％，著名的克虏伯军火公司也在它们控制之下。这个不仅得益于美国贷款，还有美国的技术。美国的投资者直接进了它们的董事会，顺便说一句，战后他们都没有因为给希特勒的政治献金受到审问。\n　　这三个卡特尔的美国债主子和经手人皆为华尔街银行中最显贵的名字——迪隆&里德（Dillon Read）; 哈里斯福布斯（Harris，Forbes）；国家城市公司（national city）　　公平信托（Equitable trust）……　　　　\n美国资本促进了德国工业的迅速卡特尔化，除了上一节提到的，为希特勒上台提供了经济环境和金钱资助之外，这个结果本身也被上台后的纳粹当作宝贵遗产和大好经验继承下来。纳粹的经济政策很重要的一部分就是在工业界大搞卡特尔，用巨额订单喂养它们，整合出几个高效又听话的巨型战争齿轮来，纳粹党人可从来不是自由市场经济的Fans。\n　　　　\n这是后话，目前还轮不到希特勒说三道四。中学政治课本告诉我们，垄断资本家阶级挑选了代理人某某，旁边还常给配个图：一个大腹便便穿燕尾服的和一个干瘪猴瘦戴礼帽的，俩家伙正在弹冠相庆。话倒没说错，不过和没说差不多，反正我感兴趣的是某某怎样被招聘录用为资本家代理人的，这种好事怎么才能赶上哪。　　　　\n希特勒也不是个第一眼帅哥，开始没人觉得他能成气候。当时德国政坛风起云涌，政党林立，国会席位非常分散，导致的直接结果就是投票难以出现优势多数，几个党联盟起来可以有简单多数，但是中间一出个反水的，马上优势就没了，这种状况正好给小党派提供了砝码，在分裂和混乱中找到机会出头。\n　　1930年，希特勒赢得了选举中的第一次胜利，取得107席，成为德国议会第二大党。这个胜利令人吃惊，也来之不易，1928年国家社会主义工人党才只有可怜的12席，但是毛主席说得好，世上事怕就怕认真二字。\n\n   希特勒全国奔波，四处演讲(参看附录)，外加到处赠送他的大作《我的奋斗》，功夫不负苦心人，渐渐他的周围也聚集了一些有头有脸的人物，包括他的早期资助者。上面提到过的卡特尔——“联合钢铁”老板弗里茨?蒂森，以及鲁尔煤矿大王埃米尔?寇道夫。这些工业家之所以靠近希特勒，是因为他强烈支持禁止罢工和工会活动。　　\n老鼠和猫，钱和选票，一样都不能少。希特勒转身讨好工人用的许诺是消灭失业，提高福利。这个诺言当时听来格外动人，因为1929年从美国开始，席卷世界的经济危机爆发了。　　\n经过6年的资本输出，现在德国总共欠了美国70多亿美元，整个国民经济高度依赖美资。华尔街一崩溃，银行出现挤兑，开始从国外急调资金回国，多米诺骨牌效应立刻把德国拉进了深渊，生产收缩，失业率骤增。那边凡尔赛赔款还没完呢，杨计划规定每年必还的那三分之一，是用商品消费税保证的，结果结结实实转嫁在了民众身上。末世而妖言用，本来希特勒的极右翼主张在主流社会总是被当作笑柄，现在却有不少人真的追随他了，希特勒的煽动迷人之处在于简单直接——不还钱！赔款和债务是由这些外国资本家、犹太佬和卖国贼造成的，老百姓凭什么负责。　　　　\n然而，听得热血冲脑，怒发冲冠的人们哪里想到，希特勒这时正在紧锣密鼓地想办法扩大外国资本对他的支持。仿佛命运在冥冥之中的安排，正在他选举胜利的前几个月，亚尔马?沙赫特博士从德国国家银行主席的职位上辞职了。　　　　\n沙赫特辞职和杨计划后续谈判中与政府的摩擦有关，他对政府作出的一些新让步十分不满，在没有通知政府的情况下，他给J-P-摩根写了一封信威胁要退出巴塞尔的国际清算银行。这封信在美国报纸上发表后，德国政府大为震惊和丢脸，财政部长公开和他闹翻了，在兴登堡总统的压力下，沙赫特愤然辞职。　　\n这次离职对沙赫特的影响是微妙的，首先深觉羞辱，他是第一个没到任期就被赶下台的帝国银行主席；同时也委屈和愤怒，且不说当年力挽狂澜拯救通胀的功劳，就是这两年领着谈判队伍，寸土必争一条一条争取到的利益被政府漠视，也让他觉得寒心。他离职后马上去了美国，应邀在各大学里演讲，会见各界名流尤其是华尔街的同事，抨击凡尔赛条约，鼓吹德国经济复兴。就在这次旅途上，沙赫特读到了《我的奋斗》。　　尽管他评价希特勒的文笔在糟踏德语，但是对里面表达的观点却心中一动。软弱无能的魏玛政府不再让他寄托希望了，那么换一剂猛药如何？　　\n1930年底，沙赫特会见了纳粹党二号人物戈林，31年初，沙赫特与希特勒见面了。\n\n　　沙赫特对未来元首的感觉还不错，希特勒在这次会晤中表现得“真诚而谦虚”，他的自信和敢于行动的决心给沙赫特留下了很深印象，滔滔不绝的口才也名不虚传。沙赫特显得很有兴趣地听着，然后给了个小小建议，推荐一位金融记者瓦尔特?丰克给希特勒讲授一些基本的经济学知识（此人后来接替沙赫特担任纳粹经济部长）。我看沙赫特回忆录写到这里，想象博士忍耐着这位对经济学一窍不通还特别能侃的主儿，顿觉情景可笑。沙赫特是何等阅人无数老奸巨滑的人物，怎么会被希特勒那套古怪混乱的理论忽悠了去呢？　　\n\n答案似乎出现了一点影子，1931年春天，沙赫特会见希特勒的新闻在金融家圈子里不胫而走，人们猜测他政治上向右转的同时，还大胆预测他要借助纳粹的力量竞选下一任德国总统。沙赫特自己的话也加剧了这种猜测，当他的朋友、一位美国女记者问他会不会帮助纳粹统治德国经济之时，沙赫特回答“不，纳粹不会统治，但我会通过他们统治。”　　\n共谋！考察每一个历史关键时刻的背后，各种目的与意志盘根错节纠集在一起，我们看到只不过是一个合力的表现而已。希特勒、沙赫特，投票给希特勒的德国老百姓还有与纳粹合作的美国资本家，都怀着各自目的处于合力当中。能造时势的英雄，就是在这个巨大的拼图游戏里有幸拿到最后一块图版的人。　　\n不管出于良好的愿望还是勃勃的野心，在历史的转折关头，沙赫特帮希特勒弄到了那块最后的拼图。　　　　\n1931年之后，沙赫特开始运用他的声望、人脉和杰出的理财本领，为希特勒经营竞选资金。1932年11月，沙赫特成功发动了一次德国工业和金融界大规模联名上书，由他领衔，要求兴登堡总统任命希特勒为帝国总理。1933年1月底，希特勒戏剧性地当上台，2月宣布竞选总统，沙赫特为他组织了一个晚会，在他的惊人能量作用下，与会者涵盖了工业界的大部分巨头，包括I。G。法本及其美国分公司，克虏伯军火公司，通用电力，德国汽车协会，联合钢铁公司，电报电话公司；当场筹资3百万马克。希特勒在财运上终于告别诸多蝌蚪，遇见了一群牛蛙。这笔钱十分阔绰地解决了竞选资金问题，选完之后还剩了大约60万。　　　　\n\n除了筹资，更重要的是，这是一个显著的信号，表达了德国工业寡头，以及站在背后的美国金融资本对希特勒上台和进一步统治的认可。就拿占总献金额30%的法本（如果再加上它的美国子公司就占45%了）来说，此时它的董事会包括了华尔街和美国实业界最显赫的一批人：福特汽车公司的老板，纽约联储银行的董事，新泽西标准石油公司的董事，曼哈顿银行总裁，以及弗兰克林罗斯福温泉基金的主席。　　　　\n风雷动，鱼龙惨，魏玛共和国就这样不知不觉走到了尽头，这个夹在两个铁血帝国时期之间，德国历史上罕见柔仁的民主共和国，既生不逢时又先天不足。它失败的最深刻的根源，是它始终建筑在一个极不稳定的经济基础上，畸形的资本结构，沉重的外债负担，脆弱的货币体系，以及对德国中小企业和国内贸易传统的破坏，使任何一点经济波动都有可能引发灾难性的动荡，最后摧毁上层建筑。从《魏玛宪法》到希特勒上台，它的民主从最完善的文本开始，用最糟糕的实践结束。在历史的吊诡里，人人看到开头却总猜不中这结局，国会大厦巨大的阴影倾斜在柏林的夕阳下，犹如共和国无声的挽歌，的确，它作为殉葬品的命运也马上就要宣判了。\n\n谁为战争付了钱？　　　　\n国会纵火案为魏玛共和国钉入了棺材的最后一颗钉子，1934年8月2日，兴登堡总统去世，孤独而衰老的帝国元帅在风雨飘摇中撑了很久终于还是放弃了，漫长的高寿并未给他带来荣光。现在希特勒坐在总统府里，正在对老总统留下的遗嘱——复辟霍亨斯陶格王室——嗤之以鼻，他的最新头衔是元首兼国家总理，在这个国家和这个世界上，再没有任何人能阻止他全速开动国家机器，实现他壮丽而恐怖的千年帝国之梦。　　\n老朋友得到了回报，就在同一天——8月2日，沙赫特博士成为了内阁经济部长。在此之前，他已经回到帝国银行那间熟悉的主席办公室，把三年前替代他的路德博士赶到了国外当大使。卷土重来如此之迅速，使当初黯然去职的心情都变成了欣慰的回忆，他证明了德国多么需要他，并且凭经济学家的本能开始为一个全新的舞台摩拳擦掌。　　　　\n\n华尔街故人无恙否？他们用什么眼光考虑这件事呢？　　\n其实上一节我们已经提到，华尔街通过所控制的德国寡头企业向希特勒提供了支持。然而，华尔街还有更为直接的动作，这就是当时希特勒得到神秘资助的所谓“西德尼?瓦伯格”之谜。　　\n1933年11月，在荷兰突然出现了一本小册子，其中有一位名为“西德尼。瓦伯格”的银行家与希特勒的数段对话，里面披露了美国最顶端的工业家和金融家，包括洛克菲勒与亨利福特，在希特勒上台前后，通过JP摩根与柴斯银行集团向他提供了数额达到三千二百万美元之巨的资助。这本书在1934年就立刻被查禁了，它所影射的法本公司美国和德国的董事瓦伯格兄弟也矢口否认和这本书有关，但是，书中翔实的细节却和很多现实资料一致，遂成疑云，普遍被人们认为是华尔街的国际投资者们与纳粹合作的一项佐证。\n\n　　希特勒的上台令民主世界舆论哗然，1933年5月沙赫特访问美国，还没下船就被蜂拥而至的美国记者包围起\n\n来，围追堵截质问他对反犹暴行的看法，沙赫特被烦得罕见地大发了一次脾气，把记者递给他的一份《纽约时\n\n报》狠狠扔在了甲板上。开头不妙，他的使命看起来前途暗淡。沙赫特是来要求推迟支付美国银行贷款的，大\n\n萧条已经延续了三年多，罗斯福新政尚在福祸未卜，大家谁的日子也不好过，美国政府和华尔街还能象前几年\n\n一样好说话吗？\n　　　　\n莎士比亚说过，别借钱给你的朋友，要么你会失去钱，要么失去朋友。沙赫特这次又赌赢了，美国选择了前者。一方面，美国资本已经在德国陷得太深，太多利益攸关彼此纠缠；另一方面，德国重整军备扩大采购的过程，对美国经济恢复是一个良好的刺激。至于买了军火要对付谁，反正不是美国。沙赫特博士给了一个多么容易理解的理由啊，“如果德国能够获得它自己的原料而在经济上得到发展，这只会有助于刺激一般的世界贸易。它将帮助增加消费，促进繁荣，不仅提高德国人民的生活水平，而且将提高整个工业世界的生活水平 \"　　\n沙赫特甚至还把反犹行为的原因归于“一个民族处于经济绝望和可怕困境时的表现”，并且保证“一旦德国享有公平与繁荣后，这些表现就会完全消失”。（沙赫特在《外交事务》上的文章）　　　　\n\n罗斯福总统对沙赫特印象并不好，他觉得对方傲慢自大；对希特勒也非常不感冒，就在沙赫特访问结束的时候，他还几乎故意任命一位犹太人去柏林当大使。但是令人遗憾，也是我们很少提到的是，罗斯福在他第一任任期里，与绥靖主义者的主张并没有什么本质分歧。在他的施政纲领中国内经济是第一位的，对外交只简单提一个“睦邻关系”，保住拉美后院不起火足矣。这不仅仅为了迎合孤立主义势力，罗斯福本人也是一个灵活的务实主义者，并不介意握脏了手，在他上任不久就和苏联建交了，让欧洲自相钳制，何乐而不为呢。　　　　\n1933年8月，美国银行协会同希特勒德国就贷款问题进行谈判。美国银行同意德国延期偿还以前的贷款，并且保证今后美国在德国的资本和产业的全部收入只在德国使用，并用此来兴建新的军事企业或者改建原来的军工企业。\n\n　　纳粹德国没有食言，作为一个好胃口的买家，立刻把这些延期支付的贷款派上了用场，从1933年到1939年，在德国为第二次世界大战做准备的6年时间里，杜邦财团与化学公司、洛克菲勒财团和美孚石油公司、摩根财团及它控制的电报电话公司、福特汽车公司（亨利福特本人由于与纳粹的合作还得到了十字鹰徽勋章）争先恐后跟德国签下了巨额的战略原料和军工项目的订单。仅仅飞机一项，1934年8个月中美国对德国的出口数量就比1933年增加了不止5倍。33年到39年间，在纳粹德国的军事机构中营业的美国公司超过60家。　　\n在技术输出贸易上也毫不含糊，杜邦公司通过I. G. 法本把氯丁橡胶和飞机防爆剂的技术卖给德国；坦克润滑油的技术是从美孚石油公司得到的；希特勒发展空军的重要帮助来自于美孚在德国设立的一家飞机专用汽油厂；电报电话公司参加了德国新型飞机的研制。后来在战争中，连美国的海军部长都承认是美国向希特勒提供了最先进的飞机发动机。　　　　\n\n一个不可思议的诡异循环出现了，华尔街借出去的钱，被希特勒拿过来，从华尔街金融资本控制下的工业托拉斯购买军火和技术，得到的利润又用于向德国的军工行业继续扩大投资。金钱的血液周而复始不分昼夜地流动着，结果是一端生长出了武装到牙齿的德国军备，另一端美国的诸多庞大工业帝国，在艰难时世中维持甚至扩大了生产和市场，罗斯福新政能够奏效，也未尝不对此多赖借助。　　 　　\n\n然而真有这么轻巧的双赢吗？世界上没有任何事情是无缘无故发生的，哪怕是从天上掉下来一块陨石也不例外。人们永远没有完全决定眼前事务的能力，路径依赖的力量常常比想象中大得多。美国与德国战前资本融合的惯性，一步步导向如今的政策，不是当政者不懂养虎遗患、尾大不掉，谁都知道希特勒是什么人，但是形势如此，加深这种合作关系比破坏它更为划算。经济学家梅纳德?凯恩斯说破了残酷的真理：“在长期，大家都死了。”千年田易八百主，所谓长期打算、远大目光往往成了政治家的高调，立竿见影的利益却是人人难以抗拒。金融资本的盲目性尤其明显。金融市场上每一天时间都在用贴现率表达着它的价值，今天能挣的钱就不能留到明天，活在当下是华尔街唯一永恒的真理，其他的，包括战争，都可以往后放。上世纪末东南亚金融危机之后，各国对经济安全人人自危，殊不知金融资本从来就是见血就上拔腿就跑，不择手段不计后果的角色，现在如此，当年也差不多，上演的都是鬼打墙的老故事。　　　　\n\n既已暗渡了陈仓，就不怕明修它栈道。德国撕毁凡尔赛条约限制，恢复普遍兵役制，扩充常备军，进入莱因非武装区。美国对此听之任之，生意做得更加热火朝天。其实别的国家又何尝不是一样呢？英国和德国也有合作，并且是美国的一个主要竞争对手，对这些举动不过嘴上谴责一下。法国虽然是德国的传统敌人，但是战前正赶上右翼上台正在严防共产党，外加殖民地麻烦一大堆，还指望着希特勒对付苏联。回望第二次世界大战爆发的前夜，我们会目瞪口呆地看到美、英、法、苏争相和自己未来的侵略者眉来眼去，比赛着为它添砖加瓦的奇异景象，希特勒不打这场战争简直都对不起老天的眷顾。　　　　\n象最深沉的梦魇，清醒者无法动弹地看着深渊越来越逼近，又象一场荒诞派戏剧，各方势力挤在十字路口上等待自己的戈多。经济复兴？遏制共产主义？均衡的欧洲？互不侵犯？　　　　\n\n戈多没有来，来的是希特勒。纳粹德国带着华尔街的金钱，美英的技术和装备，苏联训练出来的军官，揭开了第二次世界大战的序幕。\n镀金时代的秘密与巫师的命运　　　　\n纳粹德国的“复兴奇迹”一直是第三帝国Fans津津乐道的题目。希特勒以前的内阁总理换来换去，愿许得真不少，每次但听环佩响，不见美人来；佳人不来，也就罢了，可是今天通胀明天衰退加上还不完的外债，来的都是这种牛鬼蛇神，真叫人无语凝噎。希特勒上台4年，失业率从高于30%下降到几乎为0，国民经济总值增长超过100%，同时完成了全国高速公路网的建设，重整了重工业基础体系，还装备了一支现代化军队。如果你看过雷妮?里芬斯塔尔那部著名的《奥林匹克》，一定会对1936年德国综合国力和精神状态留下深刻印象，那响彻云霄的欢呼，如林屹立的手臂，气势宏伟的建筑，健美如神祗的运动员，无一不暗示着隐然志在天下的实力与霸气。希特勒的个人威望也达到了顶峰，他甚至不再需要早年那样的演讲才华，只消在公共场合露露小脸，成千上万群众就宛如自动催眠一般立马如醉如痴。　　　　\n那么，如果这时候希特勒有幸意外死亡的话，是不是就“生得伟大，死得光荣”了，然后以民族救星的形象名垂青史？\n　　　　\n希特勒是如何创造经济奇迹的呢？　　　　\n对比希特勒政府和罗斯福政府在1933年之后的经济政策，不难发现它们何其相似乃尔。同样的国家干涉，兴建公共项目，发行公债，贬值货币，扩大卡特尔组织；甚至连名字都差不多，罗斯福的叫“新政”（New Deal），希特勒的叫“新计划”（New Plan）。诚然，在世界范围经济危机条件下，大家面对的问题大同小异，比较行之有效的也无非国家垄断主义那一套。然而，同样的照方抓药，各国家底不同，人家吃独味人参，你可能只弄得起点参须，贾府的方子刘姥姥看了也是干瞪眼。美国的广阔幅员、丰富资源、生产潜力没有一条德国能望其项背，这且不提，单单说通货这一块，它就是一战最大的获利者，加上延续下来一贯的高保护关税政策，资本对外扩张多年带来的惊人收益，它的国际收支平衡表和战后年年赔款的德国怎么比？有黄金和外汇的保障，人家可以搞货币贬值而不引起通货膨胀，可以玩赤字游戏而不导致财政破产；换了你行吗？\n　　\n摆在经济部长沙赫特博士面前的就是这样一顿无米之炊。　　　　\n然而，和十年之前一样，这个老巫师如同听到召唤的战马，再一次奔向危机时刻的舞台，一样的雄心勃勃，一样的自信不疑。他的确带来了新节目，电光火石间只见他在国际经济舞台上纵横捭阖，原汤化原食，空手套白狼，一系列动作令人眼花缭乱——“德国欠你的钱越多，你就越想和它做生意。”——沙赫特用魔术般的手段创造了信用。\n　　在一个基本没什么财政准备金的国家里干事，只能使上点无中生有的办法，这个`“生”法有文的，也有武的。武的就是明抢，只不过大盗剪径变成了国家没收，受害者自然是可怜的犹太人；文的就不那么简单了，沙赫特一开始必须有节制地使用印钞机来做启动。　　我查阅的中文史料中，有限地提到沙赫特的几次，大多都说他为了重整纳粹军备，怎么热衷搞通货膨胀，仿佛他是个金融狂人。这个印象之由来，以我自己的猜测，可能和中央银行主席孔祥熙博士有关。他1937年拜访沙赫特，对军备资金问题交谈之后，大概自以为深受启发，抗战后期也效仿人家搞货币增发，结果演砸了，真的变成了通货膨胀。孔博士虽然堂堂名校海龟，贵为两位国家元首的连襟，理财的本事还是比不上敛财的本事。沙赫特开动过印钞机是不假，但是他的政策总体上却是紧银根的，这意味着严格控制物价和外汇汇率，而且将大量增发的银行券的用在非生产领域，也就是基建和军工，尽量减少对一般市场流通的压力，比如著名的“米福”（Mefo）军用券，就是由国家保证，专门支付军火商的，由银行秘密贴现，不入财政报告。这种办法兼顾了解决就业、不造成生产过剩和军事保密要求，将“拖”字诀发挥到了极致。\n　　\n沙赫特所创造的信用奇迹还包括，为了避免外汇流失，他同几十个国家谈判了（对德国）“惊人有利”的物物交易（夏伊勒语）。到1936年中，德国已经建了28个清算协定，在与这些国家贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持齐平，这样，这些依赖德国市场的国家（大多是南欧和美洲的原料输出国）没有办法，为了清算马克欠款，只好允许德国继续购货。\n　　　　\n沙赫特在“新计划”期间之卖力，确实有几分“士为知己者死”的味道。为了给德国弄到更多外汇，他甚至不惜损害自己在国际金融中的信誉，在进口商品以后千方百计阻挠付款，或者代之以物物交换，连华尔街的老朋友都在指责这种“金融强盗行径”。　　　　\n可是，随着时光飞转，随着军队强大起来的脚步，这个精明的老巫师没想到的是，希特勒的目标并不是让德国成为一个经济强国和贸易霸主，他把经济全权交给他，是因为他自己根本不感兴趣。赌桌上再有千般计较，总还要按理出牌，然而，他已经等不及了,他要的比沙赫特能给他的更多，更直截了当。　\n　　　\n1936年开始，形势看上去正是莺歌燕舞一片大好，沙赫特却开始隐隐感到问题不妙，像一个在舞台上停留过长时间的魔术师，他发觉帽子里已经没有新兔子可以变了。首先是德国在军备上的畸形投资，占用了他千方百计从国际金融界弄来的，和从国内人民牙缝里抠出来的大部分外汇，他主持修订的经济法律严厉到对私藏外汇可以判处死刑，却仍然难以应付军队巨大的钢铁胃袋；另一方面，重整军备的动静实在太大，其他国家虽然有跟着起哄沾光的一面，却也有惊心警惕的时候，德国的国际环境悄然逐步恶化，国际贸易越来越不好做。特别是，华尔街虽然慷慨给了钱和技术，但是像过去杨计划中发生过的一样，它们在合作中试图控制德国伙伴，而为战争做准备的德国工业寡头，还有它们的政治靠山，当然不会答应，政治原因带来的摩擦也影响了经济关系，使沙赫特大为头痛。\n　　　　\n沙赫特最深刻的不安来自希特勒和他对经济政策的要求在本质上有分歧。希特勒对经济完全持一种实用主义态度。如果把纳粹党和希特勒本人对经济问题发表的零星高论放在一起看，就会发现简直没有他们没主张过的观点：支持国有化、支持私有化、主张自由竞争、主张计划经济、打击垄断、保护垄断、限制利息、反对限制利息……总而言之，看上去矛盾百出，实际是见人说人话，见鬼说鬼话，为政治要求服务。虽然沙赫特很知趣地在报纸上撰文，说元首“领导了每一个经济计划、参加了每一项法令制度的修订”，其实希特勒在其中的贡献，也就和金日成同志对《卖花姑娘》音乐创作的贡献差不多。沙赫特将高帽子奉送得这么慷慨大方，恰恰因为希特勒当时没太多插手他的工作；而一旦领导打算亲切关怀了，沙赫特与纳粹的蜜月期也就开始面临危机。\n　　　　\n1936年秋，戈林被任命为“四年计划”全权代表，这个“四年计划全权机关”与帝国经济部产生了严重的机构重叠，最后不可避免地引向了沙赫特与戈林之间的冲突。沙赫特从这个“四年计划”诞生开始就对它深恶痛绝，不仅因为它的掣肘争权，更因为它是一个完全以战争着眼的，策划德国4年后勉强自给自足的计划。虽然沙赫特肯定不是一个理想主义的自由贸易信奉者，但是国际贸易和金融对德国的致命意义他是再清楚不过了，德国没有广大殖民地作为廉价原料来源和产品市场，去消化国内的经济波动，因此一举一动都和国际金融市场息息相关，要不他那么辛苦节省外汇干什么？一旦风吹草动，马克受到攻击，以当前国内的信用“圆环套圆环”遍地打白条的现实，这场热热闹闹的“经济复兴”搞不好立马变成镜花水月！“四年计划”在他不仅达不到什么自给自足的目的，反而会摧毁辛苦建立的国际贸易成就，并且引发国际金融市场对德国信用的怀疑。　　\n沙赫特愤然指责戈林“你的外汇政策，你的生产政策和你的财政政策是靠不住的”，而希特勒在这场争执中会支持哪一方呢？看看这位元首风向标式的言论吧。　　\n“在德国，往往是在政治力量高涨的时候，经济情况才开始改善；反过来，往往在经济成了我国人民生活中唯一内容，窒息了思想力量的时候，国家就趋于崩溃，而 且在很短时间内，把经济生活也拖着一起崩溃……从来没有一个国家是靠和平的经济手段建立的”。　　“避开一切世界工业和世界贸易政 策的尝试，代之以集中一切力量，旨在为它的人民在下一世纪分配获得一块立足的生存空间开辟出一条生存之路……”　　　　\n另一个使人不安的征兆是，杨计划和道斯计划债券在1935到1936年的价格大幅度下降，道斯债券从79美元下降到37美元，杨债券从59美元下降到29美元。这意味着华尔街对德国发生动荡的深深忧虑。铅云低垂，斜阳诡异，沙赫特独坐在帝国经济部办公室里，看着多年围绕在他鞍前马后的工业家们，蜂拥着向戈林的订单扑去，不祥的预感在心中升起，海天之间一场新的风暴就要来临，他的命运又将如何呢？\n　　　　\n1937年8月，沙赫特向希特勒递交了辞呈，12月正式从经济部长任上离职；1939年1月，他被免除帝国银行总裁职务，虽然还保留着内阁成员的虚衔，事实上已经离开了德国的权力中心，虽然他之后的人生依然颇有戏剧性，但已不再对历史发生真正的影响。　　\n沙赫特的命运是一个富有深意的象征。他终身未加入纳粹党，但是在纳粹上台和准备战争过程中的作用却可能超过了任何纳粹高官。他本人的浮沉，就是国际金融资本与德国政治势力关系的生动历史。如同传说中的双头蛇，政治与经济的逻辑相互推动也相互反噬。沙赫特尽管清楚地知道自己在为侵略战争筹资（这一点无可置辩），而且在奥地利合并和捷克事件中他都把帝国银行的手伸了进去，但是从本质上他是按照国际金融资本——当然也包括德国金融资本——的利益去行动的。然而，“大炮和黄油”是政治发展的逻辑，有自身合理的惯性，对一种成型的政治文化来说，经济力量可以是发动机，却从来不是刹车。何况这“惊险的一跳”在好日子里难道没有露出过征兆吗？希特勒也许是个魔鬼，但很难说是个骗子，他的基本主张——种族主义和生存空间扩展论从来直言不讳，这样的理论基础最后必将引向战争。发现这一点并不需要什么特别的洞察力，只不过，象十日谈里古老的故事一样，希图利用魔鬼的最后难免沦为魔鬼的奴隶，或者，魔鬼和人类本来就没什么真正的界限？　　　　\n\n纽伦堡的美国人放过了沙赫特，他的祖国却没有原谅他，战后巴伐利亚拒绝他居住，他漫长的后半生背负着纳粹帮凶的骂名。然而华尔街呢？J。P。摩根财团呢？那些显赫的信托银行呢？洛克菲勒、亨利福特、杜邦这些工业帝国呢？伯尔尼和日内瓦赚得钵满盆满的金融家和军火中间商呢？即使在战败的德国，那些曾经不可一世的托拉斯们，总电力公司、法本、联合钢铁，谁又受到任何真正的触动了呢？在两极格局的战后世界中，又一轮金钱和控制的奇妙博弈开始了……　\n　\n你看你看世界的脸。　　\n“波丽娜，她无处不在，她就是社会……”——巴尔扎克《驴皮记》　　　　\n这篇大而无当的文章结束之前，不妨再对沙赫特苍老的背影目送一程。这个精装的伏冷脱，失去法术的老巫师，最后一次见到希特勒是在1941年一个公开场合上。希特勒的问题依然和华尔街有关，他问他是否能再去美国一次，争取华尔街新的贷款。这次沙赫特没有丝毫犹豫地告诉他，在《租借法案》生效之后，已经完全不可能。　　　　\n这是他对希特勒说的最后一句话，也是华尔街与纳粹德国这出人间喜剧的最后落幕。　　　　\n亚尔马。沙赫特1944年被牵扯进谋害希特勒的720事件，被送进达豪集中营。1945年达豪被盟军占领。1948年受审无罪释放后，先后担任印度尼西亚、埃及的经济顾问，1952年在阿以中东战争中作为埃及的顾问，1953年后回到德国重新投入金融界，同时写作回忆录《我的前76年》、《一个老巫师的告白》。1970年6月4日，在希特勒和罗斯福死去整整25年后，93岁高龄的沙赫特去世。\n　　\n他象一只从树上掉下来的猫，姿态难看却总能安全地四脚落地，一时的凶险也变成了因祸得福的契机。读他那洋洋洒洒一册又一册的回忆录，你很难相信这个耄耋老人身上有如此过人的精力和记忆力。甚至还在监狱他就和出版商定了合同，在儿子战死，自己等待受审、前途未卜的日子里，我看到这个71岁的老巫师写道：　　\n“我一直雄心勃勃，现在我依然如此。”　\n　　　\n不知为什么，这种过于强烈的生命意志，令我反感，就像对第三帝国那种狞厉嚣张的美。也许唯一例外的是这个细节。当写到他的爱子Jen在苏联战俘营里失踪，文风铺张华丽的沙赫特只淡淡说了一句：他是个温和而内向的孩子，本该是个很好的经济学家。　　\n可是呢？　　\n他活到了93岁，然而包括他的孩子在内，几千万年青人死于这场战争。　　\n他一生梦想着德国的强大复兴，在临死前，他看到的是自己帮助发动的战争制造出的一道柏林墙。　　　　\n陈词滥调，有时候却真的难以替代：　　\n愿后人勿复哀后人！\n\n华尔街借钱给德国购买华尔街控制的美国工业的军火和技术，得到的利润再投入德国军工业以扩大投资。纳粹德国的复兴奇迹奥秘即在于此。对于华尔街金融寡头，这样可以控制德国经济，赚取暴利。\n　　 但希特勒并不甘心于寄人篱下。他说过，“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义”。依靠华尔街德国重建了完整的工业体系，此时的希特勒意欲在这个基础之上打破英美主导的国际经济与金融体系，建立以德国为核心的欧洲经济新秩序。\n　　 希特勒所做的第一步就是要将华尔街控制的德国金融体系转移到政府手中。很快，政府便完全控制了德国国家银行，加强了对商业银行的监管。1934年12月5日的德国信贷法使政府可以监督银行业务活动的各个方面，政府不仅能要求知道银行各项办事手续的全部细节，而且能对银行放给私人的贷款实行严格的控制，以保证它们的目的完全符合政府的全盘计划。政?还严格控制金融市场来适应国家的长期目标。比如，新股票在发行前需要通过一个专门委员会来审查其是否可能有利于国家经济建设。\n　　 纳粹政府严格控制外币使用，管制进口，管制外国人使用德国银行的贷款，管制德国人向外国人出售马克。比如，德国贷款马克给巴西，但这些钱只能用于购买德国货，而不能到德国银行兑换成黄金。\n　　 严格管制的措施会降低进出口贸易量。沙赫特又和各个国家签署了双边的汇划结算协议。所谓汇划结算协议，就是德国进口商向德国央行账户支付马克，至于出口商是立即得?当地货币付款还是等待一些时日，则取决于德国政府的出口政策。有些商品，外国央行接过限制使用范围的马克后立即向出口商支付当地货币，这将使出口国家国民收入没有变化，不仅是来自德国的进口品不能增加国民收入，而且整个进口品都不能增加国民收入，此即支付原则。还有些商品，德国央行先让出口商等待，一旦德国的某一个进口商能够从德国购买商品之时，该进口商才能用当地货币购买马克，而央行则用这笔当地货币来支付原来的那位出口商。这就是所谓的等待原则。\n　　 因此，德国可以通过关税与适当的汇率，来限制进口或者促进出口。比如，在进口方面又可搞买家独家垄断，政府对进口商品都征税，或者向进口商卖出外汇，其汇率比从出口商那里买进时高出很多，政府收入得以增加。如果目的是进口而不是出口，以特殊方式即从国外借钱的方式改善国际收支，就可以用补贴汇率自由进口，但按很高的汇率出售外国需要的出口商品，为出口造成困难。为了最大限度地利用垄断的好处，改善贸易比价，对于国外需求不受价格影响的商品，汇率可以提得很高。而对于供应不受价格影响的进口商品，汇率可以压得很低。\n　　 沙赫特创造了200多种货币、银行券、债券和各种五花八门的信用工具，与汇划结算协议相结合来调控资金的流向。比如旅游马克只能用来支付在德国的火车、旅馆和饭店的账单，机床马克只能购买德产工作母机等机械设备，啤酒马克只能购买德国产的含酒精的饮料，而钟表马克则只能购买德产钟表。通过这种方法，德国有垄断地位的商品如仪器与光学设备，将不会被低廉的马克买走，而只能用来换取真金白银或是德国需要的外国商品。这种?殊的马克其实是放弃了黄金而以某一种物品作为其发行的储备。这是因为当时的黄金储备主要集中在英美两国。\n　　 此外，大量增发的各种信用工具只能用在基建或军工等生产领域，而不会进入消费品市场，通胀的威胁自然也就消除了。比如，1934～1936年发行的专门支付给军火商的米福债券就是如此。在沙赫特的撮合下，西门子公司、古特霍夫农冶公司、克虏伯公司和莱茵金属公司这4家德国支柱企业成立冶金研究有限公司。出自这家公司的米福债券便由一些资本有限、向德军供应物资的小公司出票，金属研究公司承兑之后到帝国银行去贴现，或者向资本市场出售。1936年，米福债券的未清偿总额达120亿马克，支持了当时德国军备重整一半的费用。到了1938年，沙赫特又发行了供应商国库券来支持军备重整。\n　　 但经济自有其规律，信用扩张与通胀是一枚硬币的两面。为了防止通胀，除了高税率和控制发放红利外，德国还有种种有关物价和工资的规定。根据1936年10月29日的一项法令，德国设立了一个物价管制委员会。先前授予任何政府部门的监督、批准或规定物价的全部权力，都移交给了物价管制委员会主任。他不仅负责为到达最后消费者手中的商品规定价格，而且?责对生产过程中各个中间阶段中的价格进行监督。\n　　 从1936年起，德国物价政策的基础就是1936年11月26日的冻结物价法令。根据这项法令，除特别许可的以外，物价管制委员会主任禁止任何物价提高到超过1936年10月17日的水平。由于物价冻结不仅冻结了个别商品的价格，而且冻结了各种商品价格之间的关系。结果德国物价一直保持稳定，批发价格指数（PPI，以1913年为基数100）从1936年到1939年仅从104.1上升到106.9。\n　　 当然，对英美主导的国际金融秩序，最为釜底抽薪的是易货贸易的国际结算方式。当时国际金融家获利方式仍然停留在19世纪的旧模式，也就是向经济困难的国家放债盈利。如果德国的易货贸易被其他缺乏黄金与外汇的国家所仿效的话，国际金融家不仅很难找到借款人，而且其财富也要严重缩水。随着货币与实物之间关系的脱离，英美主导的国际经济与金融的主导权自然而然地就会被瓦解。\n　　 仅在1934年，德国就完成了与保加利亚、罗马尼亚关于大豆和石油的易货贸易合同，与匈牙利和南斯拉夫涉及铝矾土和镁的易货合同，与丹麦关于家畜、黄油和猪油的易货贸易合同。德国还和中东欧建立起紧密的贸易关系。20世纪20年代末，德国占匈牙利、罗马尼亚、保加利亚、南斯拉夫、希腊和土耳其总贸易额的15%左右，到了30年代末，这个比例提高到40%。沙赫特禁止德国企业未经政府允许就进行国际贸易。所有国外债权人在德国只允许使用德国马克。\n　　 为了贯彻这一政策，沙赫特在德国设立了24个监控站，时刻监视着德国商人的贸易活动。根据国家的战略需要，沙赫特将商品划分为不同的等级：粮食、铁矿砂、钨、锑、铬等稀有金属等级最高，其次是煤炭、有色金属、矿物油、化工产品、润滑油以及棉花、羊毛和橡胶等。到1936年，德国已经签订了28个清算协定，在与这些国家的贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持平衡。在“二战”爆发前，德国国际贸易中的83%是通过易货贸易方式进行的。\n　　 沙赫特的想法是从英美主导的国际金融体系中找到漏洞，循序渐进地让德国也分一杯金融霸权之羹。而希特勒则求快求速，意图一蹴而就。结果到1938年，沙赫特被解职，戈林从沙赫特手中接过对德国经济与金融的控制权，他便将政府的政治目标和军事目标置于德国经济之上。\n　　 有破则有立，德国企业建立新的经济与金融体系。接替沙赫特经济部长位置的是瓦尔特&#8226;丰克。他是受戈林委托的制订新秩序计划的部长。新经济秩序是将欧洲组成一个单一的经济共同体，在德国的指导下进行运作。德国将成为欧洲大陆的工业中心，周围是一批组织起来供应它所缺少的农产品和矿产品的国家：东南欧将增加农业生产，放弃军备及辅助工业；丹麦将减少养牛和乳类生产，增加谷类和饲料的产量；挪威将致力于在农业上自给自足；甚至?国也将被看做是一个农业国和粮食输出国。\n　　 为了达到这一目的，德国必须要成为欧洲金融体系的核心，正如丰克所坦然承认的：“我们决不奉行一种会使我们依赖黄金的通货政策，因为我们不能使自己受到一种我们无法决定其价值的交换媒介的约束。”欧洲的货币将与黄金完全脱离，成员国之间的交易将在固定兑换率的基础上进行。德国将双边清算协议扩展为多边贸易制度。按照这种制度，所有的欧洲国家将通过设在柏林的一个中央票据交换所，用德国马克来结算其贸易账目。柏林将成为欧洲的金融中心。\n　　 “二战”期间，德国便根据既定方针在欧洲打造起新经济秩序的雏形。德国人首先没收和强迫收购被占领国家政府与私人拥有的黄金和国外资产，干涉被占领国家国内流通的货币，把这些货币同德国马克的兑换率人为地定得很低，勒索占领费，征收罚金，以及改造并周密地控制被占领国家的银行系统。\n　　 1939年9月，德国信贷银行在波兰创立，信贷银行有权将高达10亿马克的款项贷给德国供它在占领区使用，也可发放短期抵押贷款，贴现和接受不计息的转账及存款，以及发行票面额从50芬尼到50马克的纸币。纸币的准备金包括：德国信贷银行由于贷款和贴现的票据而拥有的资产，德国货币的准备金，在德国国家银行和各票据交换所的贷方余额，德国国库债券的准备金，以及给予德国的贷款。这些纸币在被占领国家内按固定的兑换率同该国的货币一起流通，兑换率通常大致相当于入侵前的比率，它们不能随便兑换成德国国家银行的钞票。这是一项必要的规定，用来防止因发行大量德国信贷银行纸币而造成的通胀影响到德国本土。\n　　 德国还以金融手段控制外国企业，其中德意志银行和德累斯顿银行征服欧洲工业的主要工具之一。它们通过诸如连锁董事会、股份所有权、代表投票制和操纵新的放款等方法，控制有关国家的主要商业银行，从而控制与这些银行有关的工业企业。比如，在捷克斯洛伐克，德意志银行和德累斯顿银行分别接收了波希米亚联合银行和波希米亚贴现银行后，就使德国控制了波尔迪纳尔铸造厂、克拉洛多沃尔水泥厂、布尔诺第一机械厂、波希米亚铜厂、索洛火柴垄断企业、金刚砂厂等该国的主要工业企业。\n　　 不过，打破甚至摧毁英美金融帝国的唯一的最有力的金融武器是多边清算协议。到1941年年底，德国已同欧洲大陆所有其他国家谈判了清算协定，这些国家彼此之间也进行了很多这样的谈判。后一类协定中有些是通过设在柏林的中央票据交换所结算的。在那段时间，柏林成了欧洲大陆的金融中心，马克成了居统治地位的货币，许多国家开始通过柏林以马克来结算它们的全部国际贸易。就像现在的美国一样，德国则凭借占压倒性优势的军事、政治和经济力量，强迫贷款国提供巨额贷款。换而言之，整个欧洲被迫不断供给德国它所需要的任何可以买卖的东西。\n　　 通过建立欧洲经济新秩序，德国人将战争造成的通胀全部输出到其他国家。德国信贷银行纸币有意在被征服的国家增加流通的货币量，人为制造通货膨胀。实际上，即便这种纸币被收回，也未消除通胀的压力。原因在于它们只不过由数目相等的本国货币取代而已。柏林的德国票据也起了制造通胀的作用，这等于德国人拿到商品却不付钱。按1939年的物价计算，1940～1944年，德国从被它占领的国家和被它统治的国家至少掠夺了1 040亿马克的财富，约占德国GNP的14%。\n　　 其他国家的政府为了防止出口商破产，只好通过无限制地批准贷款来垫付货款，结果货币发行量大为增加，通胀恶化，商品供应减少，甚至在希腊等国造成了政府财政的全面崩溃。而在德国，通胀趋势则受到强有力的控制。在外国进行的征敛，增加了可以获得的商品数量而又丝毫未增加流通的货币数量，大大削弱了通胀。\n\n　　　　从本质上讲，德国、英国与美国之间在金融上的争霸并无善恶之分。其实，希特勒本人并没有发动世界大战的企图。开战之前，德国军费开支占GDP才15%左右，与英国相当。1939年慕尼黑协定签订后。德国已削减了军费开支，结果英国军费比例大为超过德国。一直到1942年斯大林格勒战役开始之前，德国军备生产都一直在下降。结果，即便在战时，德国人的生活水平也未下降，因为希特勒不希望因此而削弱了自己在德国人民中神一般的形象。\n　　　　自始至终，希特勒的胜利秘诀是政治智慧，而不是军事征服。希特勒并不认为德国有同英美苏三大国的联盟发生长期战争的可能，他自信自己可以通过外交手段达到目的，若不行则通过一系列小规模战争解决德国的生存空间问题。在他看来，在政治手段和进攻波兰的小规模战争之间没有清楚的分界线。希特勒本人也知道，一旦国家综合实力与军事力量成为决定因素时德国便会完蛋。\n　　　　德国的领土扩张与日本的侵略也有本质性的不同。“光复”与“侵略”只是站在不同立场上的描述同一件事的不同词语。从欧洲历史来看，德意志人的神圣罗马帝国曾统治了欧洲大陆的大部分土地。遗憾的是，德国一直到19世纪中期都未结束分裂状态。俾斯麦虽在1871年创建了新德国，但却把奥地利以及其他德意志人居住区排除在外。希特勒收回萨尔地区，派兵进驻本国的莱因地区，将奥地利，捷克斯洛伐克苏台德地区纳入德国版图。站在德国人的立场看，无非是收复久远的故土。\n　　　　纳粹德国唯一的遭人诟病的犹太人大屠杀也不是没有辩解的理由。在纳粹统治下的欧洲，食利者阶层的犹太金融家被逐出欧洲经济圈。比如那个风光百余年的罗斯柴尔德家族在欧洲大陆的财富与权势便被纳粹德国破坏殆尽。1938年，《犹太人资产登记法令》颁布后，罗氏家族的财产受到严重冲击。第二年，几乎所有的罗氏家族的慈善与教育机构全部被解散或被国有化，而罗氏家族很多人都沦为难民。维也纳的罗氏家族掌门人路易斯&#8226;冯&#8226;罗斯柴尔德被逮捕和关押，直到他在奥地利的所有资产都被转让给德国政府后才被释放。他在法兰克福的豪华住宅以61万马克的超低价被政府征收，一百多年来价值连城的艺术品则以象征性的230万马克的代价被政府收购。位于捷克的维特科威兹钢铁厂都被赫尔曼&#8226;戈林国家工厂兼并。这些对于欧洲人来说未尝不是一件好事。\n　　　　刚开始，希特勒也未动过灭绝犹太人的念头。犹太复国主义者曾与纳粹合作，希望将犹太人迁移到某个地区重建国家。但是包括英美在内的世界上绝大部分国家均不接收犹太人。英美列强甚至暗自高兴，希特勒做了他们想做而不愿公开做的事。直到美国对德宣战，德国人认为这是犹太财团鼓动的结果，于是开始屠杀犹太人以示报复。如果说德国是屠杀犹太人的元凶，那么英美两国就是将犹太人送进屠宰场的从犯。\n　　　　对德国人来说，维持现状不是和平，而是屈服于英美。英美保住一战胜利果实，德国则想消除其失败的影响，突破英美在政治、经济与金融上的霸权。这都无可厚非，正如英国历史学家泰勒所写的：“在主权国家的世界中，每个国家都尽最大的努力谋求它自己的利益，至多由于错误而不是由于罪行受到批评。像往常一样，俾斯麦在谈到1866年奥普战争时发表的意见是正确的：‘奥地利反对我们的要求和我们提出要求一样不是什么错误’……希特勒的目的是使德国成为欧洲的支配性大国，或许更久以后成为世界的支配性大国。其它强国过去追求相似的目的，现在仍然如此。其他强国也把小国看作他们的仆从国。其他强国也试图用武力保卫他们的重大利益。在国际事务中，希特勒除了是一个德国人之外，他没有什么过错。”\n　　\n\n\n\n\n【附录】\n\n希特勒演讲：为日耳曼民族而战\n\n（作者:希特勒 ）\n\n　　“今天，我们站在这里！站在德国人的土地上！站在柏林，这块我们祖先用鲜血和尊严浇灌的土地上！我的身后，是安德烈.柯里昂的雕像！他是全世界公认的自由斗士！他是全世界的光！”\n\n“我的面前，站着的是一个民族，一个在屈辱中呻吟的民族！”“那场战争结束之后，我们这个民族的骄傲就没有了！那些战胜者们骑在我们的脖子上作威作福，他们随意践踏我们的尊严，一个欧洲大陆上最高贵的民族地尊严！你们告诉我，你们是选择像本杰明.马丁一样去做一个自由的斗士，还是一个奴隶？！”\n\n“你们或许要说：希特勒先生，我需要一个工作，一块面包。是地。你的说法很对，生命实在是太重要了。但是我要告诉你们。这世界上还有一种东西比生命更重要，那是自由！那就是尊严！”\n\n“只要阿尔萨斯和洛林上空一日还飘扬着法国的国旗，我们的尊严就不存在！只要那些法国人、英国人在我们的国土上横行霸道，我们地尊严就不存在！只要在欧洲的版图上，这个叫德国的国家四分五裂积弱不堪。我们地尊严就不存在！只要其他国家的人，在聊天的时候说到德国这个字眼的时候会发出一声轻蔑的笑声，我们的尊严就不存在！”\n\n“我们需要的，不是一块面包！而是一个生存空间！一个民族的生存空间！这生存空间，不是靠乞求和抗议来实现的，而是靠铁和血来实现的！”\n\n“别人欺辱我们，哪怕是最弱小的民族也来践踏我们，我们只会叫着：我们表示强烈的愤慨和抗议，这样的人。是没有骨头的！这样的人，是低贱的！我们应该用大炮地震耳欲聋声让敌人颤抖！我们应该碾压他们的尊严、生命，让他们知道我们不是一群只知道抗议的懦夫！”\n\n“你们要记住，一个只懂得抗议的国家，是一个没有骨头的国家！一个只懂得抗议的政丶府，是一个没有骨头的政丶府！当我们地尊严、领土、生存地空间都遭受践踏的时候，还不知羞耻地抗议地政丶府，我们是不需要的！你们最后也会抛弃它们的！”\n\n“我很骄傲，在你们这些人中。这样没有骨头的人，少之又少！我的面前，是一个留着千年不屈血液的军团！这血液，曾经在我们祖先的血管里面流淌过，他们没有屈服过！现在，它们在我们的身体里面汩汩奔涌，你们告诉我。你们愿意它冷却吗！？”\n\n“能够团结人们的。有两件东西：共同的理想和共同的犯罪。我们有雕刻在德意志旗帜上面的伟大理想，我们会为这理想流尽我们的最后一滴血！在今天的柏林。没有任何东西能够拯救我们的祖国，只有这理想！凡尔赛条约，是一个极大的耻辱！我们有拒绝执行它的决心和理由！做你们想做的吧！就像本杰明.马丁拿起枪，就像他带领着他的同胞们高举着那面自由的大旗英勇杀敌一样！假如你们期望战斗，那就去战斗吧！然后我就能够看到你们是七千万奴隶还是七千万坚贞不屈的日耳曼人！”\n\n“如果有那么一天，我，阿道夫.希特勒，也会想本杰明.马丁那样，举着属于我们德意志的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些德意志的荣耀的祖先们，我可以昂着头颅走到伟大的腓特烈大帝跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的德意志流尽了最后一滴血！”\n\n“我们不为奴役而战！我们为自由而战！我们不是机器，不是牛马，我们是人！是从来没有屈服过的日耳曼人！”\n\n“我们以自由的名义团结起来！为一个新的、公平的世界而战！我们为人人有工作而战！为那些奴役我们的人滚出德国人的土地而战！为我们不需要整天喊着抗议而战！为我们的尊严而战！为我们的诺言而战！”\n\n“为解放这个国家而战！日耳曼人，我们为我们的祖先的荣耀而战！为我们的子孙后代能够骄傲地宣传：我们是从来不屈服的日耳曼人而战！”\n\n“我的同胞们，德国和德国人民万岁！自由，万岁!”","slug":"金融之王——沙赫特[德国]","published":1,"date":"2022-04-11T13:29:48.504Z","updated":"2022-04-12T09:57:50.677Z","_id":"cl1vyonwp000ak60m1b3xasgb","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"金融之王\"><a href=\"#金融之王\" class=\"headerlink\" title=\"金融之王\"></a>金融之王</h4><h5 id=\"第三帝国的兴起与第二次大战的起源\"><a href=\"#第三帝国的兴起与第二次大战的起源\" class=\"headerlink\" title=\"第三帝国的兴起与第二次大战的起源\"></a>第三帝国的兴起与第二次大战的起源</h5><h6 id=\"希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\"><a href=\"#希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\" class=\"headerlink\" title=\"希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\"></a>希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。</h6><p>   为了对抗一个共同的敌人而缔结的战争同盟，总是注定了会短命的，因为一旦这个敌人被击败了之后，同盟的重心也就随之而毁灭了。很少有理由可以假定赢得第一次世界大战的英美法三国之间的协约，能够比勒班陀海战以后的神圣同盟或是滑铁卢之战以后的战胜国会议支持更长久的时间。但是与后者作一个比较，则不免具有一个极大的差异：当拿破仑最后失败之后，差不多在一百年的时间当中，“不列颠的和平”始终能在欧洲诸国之间，维持着一个权力平衡的局势。到了第一次大战爆发，这种局势才被破坏了。此后由于美国的参战，于是国际联盟就开始代替了“不列颠的和平”。可是这个工具的设计却完全文不对题，它既不能取消一切足以引起战争的原因，复不能重建一个权力平衡的局势。它硬性的要世界接受一种和平路线，这条路线与历史、地理和经济三方面都是不符合的。国际联盟的毛病是陈义过高，只有空谈，而无实力。所以结果不但不能有益于世界和平的维护，反而更增加了摩擦和冲突的机会。于是终于有“暴君”出现了，他们出现了，他们向它挑战并利用其无能的弱点。<br>　　在这些权力的艺术家之中，有两个人——墨索里尼和希特勒——是具有一种新的哲学思想。他们敢向经济人（Economic Man）的神话挑战，这是资本主义、社会主义和共产主义的共同基本因素，而想把“英雄人”（Heroic Man）的神话来代替它。有一位著名的法国军人昆顿（Rene Quinton），在他所著的《军人的圣经》一书中，对于此种神话曾经有明白的解释。<br>　　“所谓英雄就是一个为旁人而忘记了他自己的人。天之所以生出英雄来，不是为了生活而是为了服务。英雄是与凡人不同的，因为他的生活是具有神意的。战争把人类已经所丧失了的宗教又带回来了。生命的安全足以使神意失效，反之若不惜一死，则人也可以拯救世界的生命。人类的建立者不是人而是思想。”<br>　　从希特勒眼中看来，国际资本主义和马克思主义是完全一样的东西。他认为他们都缺乏牺牲精神，是违反自然的，足以毁灭人类。所以他提出了他的教条，“一个民族，一个国家，一个领袖”。一方面相信雅利安人和条顿族是优秀的，另一方面又对于犹太人表示激烈的仇恨，在他的圣经《我的奋斗》（Mein Kamf）一书中，可以看出来他的思想是与昆顿的理论极为接近：<br>　　“人们不肯为事业而死，但却肯为理想而死。要生存的人却必须要战斗。在这个世界上，凡是不想战斗的人也就没有生存的权利，因为在这个世界上，生活的法律即为永远的斗争。为了恢复日尔曼的权力，你们不应询问：“我们怎样的制造武器？”而应询问：“我们怎样的培养一种精神，使这个民族能够负起武器来？”雅利安人的伟大，其基础并不是他的智力，而是他愿意牺牲一切以来为团体服务的意志。这种心理态度足以强迫私利退后，而让公义出头。这也是任何种类的真正人类文明的第一先决条件。追寻一己私利的人是不值得一顾的，而牺牲自己幸福的英雄则值得歌颂。”<br>　　德鲁克（P．F．Druber）在其所著的《经济人的结束》一书中，对于这种教条曾经有极精辟的批评：<br>　　 “若认为极权主义中的这种号召牺牲的理想，只是一种伪善、自欺之谈或是宣传高调，那才是大错而特错。它是从失望的深渊中长成出来的。正和一八八〇年虚无主义在俄国的流行一样，它可以吸引最高贵的和最勇敢的青年人，今天在德国和意大利的情形也是一样。这些战后一代中的优秀份子拒绝与这个现有的世界妥协，他们觉得这个世界既无值得一死的真正价值，而又无值得一活的活跃思想。”<br>　　除非对于这两种神话——经济人与英雄人——的斗争有所了解，否则对于一九三九年的浩劫也许就无法了解，而会认为这完全是天命了。<br>　　希特勒的父母为奥国人，一八八九年四月二十日，出生于莱茵河上的布劳瑙（Braunau）。当一九一四年第一次大战爆发时，他投入了巴伐里亚第十六步兵团当兵。在所有的新兵中，也许更没有第二个人会像他这样的合于“彻底的无产阶级”的资格。凭着军功，他获得了不少的勋奖，可是说也奇怪，他的阶级却始终只升到了下士为止。<br>　　当一九一八年十一月十一日，德军在康宾森林中投降时，希特勒下士正睡在医院中，他因为受了毒气伤，眼睛已经半瞎了。谁也不会预料到将来有一天，这个默默无名的小兵，会在同一个地点接受法军的投降，并且把他的卍字旗从大西洋插到了伏尔加河上。<br>　　这是什么力量使他能有如此的成就呢？一方面是由于他具有政治天才和特殊的领导能力，但是另一方面，比较最重要的，却是他自信是受了神的指示，来领导日尔曼人民走上复兴的道路。他是一个中了“神毒”的人，他相信散布不公正种子的人，应自食其恶果。<br>　　使他着了魔的即为凡尔赛条约，它与威尔逊十四点的精神是完全不符合。一九二三年，潘卡里侵入鲁尔地区，破坏了德国的币制，扫灭了德国的中等阶级。在一九二四年到了一九三〇年之间，德国的外债增到了七亿五千万镑，使德国人民感到民不聊生。最后美国证券交易的总崩溃，更使一九二九年到一九三一年之间，全世界上都发生了金融上的不景气。<br>　　在一九三〇年，德国人民仰赖政府救济生活的共一千七百五十万人，在一九三一年，共产党的选票增到了五百万张以上。在那一年，有一位美国记者尼克波克（H．R．Knickerbocker）在他所著的《德国——法西斯乎？苏维埃乎？》一书中，估计至少有一千五百万德国人是不能完全吃饱的，选民中有三分之二是仇视资本主义的，而过半数以上是反对现有号称“民主”的政治制度的。次年，希特勒即在这个局面之下获得了胜利。诚如他自己所形容的，在一九一九年，他简直不能算是一个人，当时他加入了一个不知名的政治组织。这个组织自称为“日尔曼劳动党”，一共只有六个党员，他就做了第七名党员。一九三二年，这个党改名为“国家社会日尔曼劳动者党”（National Socialist German Worker’s Party），在七月间的大选中从三干六百万张的选票中，他一共获得了一三、七七九、〇一七张之多。一九三三年一月三十日，德国总统兴登堡命令他以最大政党的领袖身份，出任德国总理并组织一个政府。一年之后，在六月三十日那一天，希特勒开始清党，用一连串的暗杀手段，把异己份子杀死数百人。最后到了八月二日，兴登堡元帅逝世，于是他就取消了总统制，而且任德国人民的元首。<br>　　除非是亲眼目击的人，否则对于希特勒的勃兴，简直会认为是一个难以置信的神话。早在一九三四年，当赫斯（Rudoff Hess）代表全体纳粹党人向希特勒效忠时，其所说的话从麦克风中传到了每一个德国人的耳朵里，在他们的内心中引起了共鸣。<br>　　“这个宣誓使我们把生命寄托在一个人的身上。照我们所相信的，这个人是替天行道的。不要用你们的头脑去寻找希特勒，他是存在于你们的心灵之中。希特勒就是日尔曼，日尔曼就是希特勒。日尔曼就是我们在地球上的上帝。”<br>　　尽管他的敌人曾经宣称这个非常的人物，是一个魔鬼，是一个疯人，但是我们却决不能轻视事实——他曾经扑灭了在德国境内的布尔什维克主义和完成了许多惊人的伟大事业。实际上这个人是具有二重人格的，一方面他也是一个正常的人，另一方面他却是一位“真神”。假使不是如此，则有许多事实就都会无法解释。劳合－乔治总要算是一个智慧超群的人，当他在一九三六年访问过希特勒之后，回到英国时曾经发表他的观感说：“我从来不曾看见过比德国人更快乐的民族。在我所遇见过的许多伟大人物之中，希特勒要算是最伟大的一个。”邱吉尔也曾经说过：“假使我们的国家若是失败了，我希望也能找到这样一个领袖来恢复我们的勇气，和领导我们回到与各国平等的地位。”<br>　　希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。<br>　　希特勒认为只要国际货币制度还是以黄金为本位的，则一个能够垄断黄金的国家，即可以使缺乏黄金的国家屈服于其意志之下。这个手段就是吸干其外汇的来源，迫使他们必须借债以来维持生产。他的理论是说：“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才又能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义。”所以他决定：（一）拒绝接受国外的借款，以生产为德国货币的基础，而不以黄金为本位。（二）用直接易货的方式以来获得输入品，必要时并补助输出。（三）停止所谓“外汇的自由”——即准许在货币方面实行赌博，并依照政冶情况，把私有的财产由此国移到彼国。（四）当有了可以工作的人力和物资时，就制造货币而不向国外借债。<br>　　因为当时国际金融的生命，就是寄托在向经济困难的国家放债营利的行为之上。所以希特勒的政策简直是切断了它的生命线。假使若是准许他成功了，则其他诸国势必都会起而效尤。若是所有缺乏黄金的国家，都纷纷实行以货易货的办法，则不仅无人借款了，而且黄金也就丧失了它的权力，所有的放债者都只好关店了。<br>　　这支财政性的手枪，尤其是直指在美国的身上，因为它是世界上黄金的主要供给者，而且它的大量生产制度使其必须输出其产品的百分之十来避免失业的危机。此外，又因为希特勒对于犹太人采取野蛮的虐待政策，所以当然得罪了美国的犹太籍的金融界巨子。当希特勒做了德国首揆后还不过六个月，纽约的一位富翁乌特梅耶（Samuel Untermyer）就开始向他挑战了。他主张向纳粹主义展开“圣战”，呼吁对于德国的货物，商船和劳务，都采取经济上的杯葛主义。美国的国务卿赫尔（Corded Hull），也依照一九三四年的贸易协定法案，坚持的主张美国的国外贸易决不能因为外汇管制，政策专卖和易货制度而受到任何的损害。<br>　　从一九三三年到一九三六年之间，希特勒已经使德国的失业人数由六百万人减到一百万人，繁荣与复兴的程度简直使英国人感到害怕。据说在一九三六年，邱吉尔也正像一九〇七年的巴福尔一样，他曾经告诉美国的伍德将军（Gem R．E．Wood）说：“德国是已经变得太强了，我们必须把它击碎”。到了一九三七年九月间，美国又开始发生了一个新的大萧条，其扩展的速度也是非常的惊人。十月十九日，证券市场完全崩溃了，到了十一月间，据调查全部失业人数已达一千一百万之多，另外还有部份失业人数五百五十万。对于这种困难的国内情况，必须要设法分散人民的注意力，尤其是总统大选又已经迫在眉睫了。所以在十月五日，罗斯福总统发表其著名的“检疫演讲词”（Quarantine Speech）。他痛斥现有的恐怖性统治，认为人类文明的基础已经受到严重的威胁，并且呼吁美国人不要幻想以为美国可以幸免，西半球可以不受到攻击。最后提出建议说，增强道义标准的最容易措施，即莫过于对侵略者实行国际性的防疫隔离。不久之后，这个主要的侵略者也被指明了出来。巴鲁赫（Bernord Baruch）曾经向马歇尔将军（Gen. G. C Marshall）说：“我们应该把希特勒这个家伙打倒，不让他的那个玩意儿成功。”什么玩意儿？可能他所指的就是希特勒的易货制度。因为在一九三九年九月间，巴鲁赫曾经把他与美国总统会谈的结论，公开发表如下：“假使我们能够把价格压低，则并无理由说我们就不能够把主顾们争取回来，因为战争的缘故，敌国必须放弃他们的主顾。于是德国人的易货制度就会归于毁灭了。”<br>　　在不列颠，对于易货制度也同样的展开了猛烈的攻击。一九三九年三月九日，驻伦敦的波兰大使报告他的政府说：英国的海外贸易部长哈德逊（R．S．Hudson）曾经向他说过：“不列颠政府决定不放弃在欧洲的任何那一个市场，也决不放弃其经济上的优势以来使德国坐享其利。今天我们正在经济领域之内进行谈判，来摧毁德国人的易货制度。”这个经济战争是已经激烈到如此的程度，所以舍伍德（R.E. Sherwood）在其所编的《霍普金斯白宫文件》一书中，曾经有过下述的一段记录：一九三九年四月间，美国大使馆中驻柏林的代理武官向华盛顿当局报告着说：“目前的情况是已经十分的明显，德国是已经在积极的进行一个战争。这是德国为了其生死存亡而作的经济战争。德国的货物必须要有市场，否则就只好坐以待毙，而德国当然不愿意死亡。”<br>　　当我们考虑到第二次大战的经济原因时，内心里必须要记着，也和第一次大战一样，这种两个不同经济制度之间的斗争是无所谓是非善恶的，而只是具有生存的价值。资本主义为了维持其优势而战，与希特勒为了其易货制度而战，在善恶上来说是没有什么高下之分的。对于他们而言，这都是存亡之所系，这都是贸易竞争的产品——也是工业革命的后果。</p>\n<p>前奏：上帝保佑打败仗的人民　　　　<br>二十世纪二十年代初，一战硝烟远去未久，古老的德国笼罩在一片几乎毫无希望的风雨凄迷中。人们尚未来得及摆脱战败的沮丧和羞辱，严峻的生计问题就紧逼了上来。德国在战争中丧失了总人口的10％和将近七分之一的土地，换来的是每年1320亿金马克的赔款，相当于1921年德国商品出口总值的四分之一。德国拿不出这笔钱，法国就伙着比利时波兰，毫不客气地进占了德国经济命脉鲁尔工业区，是为“鲁尔危机”。正倒着霉的时候，你往往想不到有一天还能更加倒霉，于是手忙脚乱的政府采取了千古不变的饮鸩止渴老办法：增发纸币。　　　　<br>真正的灾难开始了。随着印刷机全速开动，1921年1月31日，世界金融史上前所未有的恶性通货膨胀，如同张开翅膀的死神，扑向了已经奄奄一息的德国经济。美元与马克的比率从1921年1月的1：64，到1923年11月已经崩溃为1：4,200,000,000,000。如此骇人的程度，即使到今天，也只有1946年的墨西哥和1949年的中国可以相提并论（顺便说一下，到目前为止中国还保持着这项领先记录）。　　　　<br>到了这个地步，德国的日常生活可想而知。薪水得按天给，要不然到了月末你会发现本来买面包的钱只能买面包渣了。发工资前大家都要活动一下腿脚，准备好起跑姿势，钱一到手，立刻拿出百米冲刺的激情和速度——冲向市场与杂货店。腿脚慢点的，往往就难以买到足够的生活必需品。农产品和工业品生产都在急遽萎缩，市面上商品短缺，唯一不缺的就是钱，纸钱！没有购买力的纸币像没有生殖力的性器官，叫人想着就伤心，孩子们在街上大捆大捆地拿它们堆房子玩。1923年《每日快报》上刊登过一则轶事：一对老夫妇金婚之喜，市政府发来贺信，通知他们将按照普鲁士风俗得到一笔礼金。第二天，市长带着一众随从隆重而来，庄严地以国家名义赠给他们1,000,000,000,000马克——或者半个便士。　　　　<br>对于德国的悲惨境地，它一战中的对手们反应并不一致。老对头法国自然是盼着这个强邻兼宿敌越倒霉越好，在赔款问题上咬紧牙关毫不让步；苏联因为社会制度被西方排除在战后的“凡尔赛——华盛顿体系”之外，割地赔款全没它的份，又刚刚跟波兰打了一场败仗，希望借助德国的先进军事经验，1922年开始就与德国秘密合作（结果是搬起石头砸了自己20年后的脚）；英国秉承一贯的老奸巨猾，继续“均衡势力”品牌之大陆政策，不希望德国过分削弱而使法国坐大。小国家们有的内部爆发民族革命自顾不暇，有的在老大中间小心翼翼找个位置坐下观看演出，有机会也诈点汤喝喝。　　<br>战败者付出代价，古来皆然。历史上没事就打来打去的欧洲，利益变幻翻云覆雨，沾亲带故反目成仇，一千多年下来戏码反复，不过如此。　　　　<br>然而，这次的确有点不同。　　　　<br>现在的人们讨论一战远远没有二战兴趣浓厚，但是事实上，今天国际关系和文明准则的基础，大部分是由一战奠定的，某种意义上来说，第一次世界大战真正摧毁了传统世界的根基，而二战是一战遗留矛盾的延续和清算。如果说从前欧洲的战争是国王和贵族的战争，那么一战就是第一次现代意义上国家之间的战争，从它的政治根源、战争动员、兵役体制和战后安排上，无不体现出鲜明的现代国家主义特点。不管主动还是被动，战争成为全民对国家的事务的参与，惩罚也成为有理论依据的全民责任。这样，每个人难免要反思一下，打了这个仗，对每个人来说意味着什么？　　　　<br>另外，通过一战，人类在自相残杀方面的创造力表现得没有最强，只有更强。在凡尔登的绞肉机和索姆河的坦克面前，19世纪天真的乐观情绪，对主流古典人文主义的自信土崩瓦解了。新的思潮纷纷登上舞台，直截了当，冷酷无情，与这个铁血强权的时代宾主相得一拍即合。　　　　潘多拉的盒子打开了，古老的欧洲现在到处都是打碎的坛坛罐罐，德国的巴掌挨得最响亮，然而他们要报复的并不仅仅是从普鲁士时代延续下来的那些敌人们。在这个产生过无数哲学巨人的民族，思考活动一向壮丽而可怖，短暂的痛苦过后，将化身为钢铁的洪流，无论说它邪恶还是野蛮，它是从我们自以为是的文明中生长出来的，让我们前所未闻，目瞪口呆。　　　　<br>完成这个过程，它需要的只有一种力量：金钱。　　</p>\n<p>二、帝国银行里的华尔街精英　　　　<br>1923年11月，德国发生了两桩对历史有深远影响的事件。　　<br>第一件是阿道夫?希特勒发动了以失败告终的慕尼黑啤酒馆政变。尽管此前他爱国愤青的风头一时无贰，甚至原陆军总司令、德高望重的鲁登道夫将军都稀里糊涂地被拉上了他的检阅台；在德国普通人眼里，恐怕这位热血沸腾的老兄当时也和一个比较抢镜的行为艺术家差不了多少。在这个动荡不安的年代，又何尝缺乏大胆冒险的事件，和昙花一现的赌徒呢？于是未来的元首只好郁闷地在监狱里写他的奋斗。比较有趣的是，希特勒提到了他对通货膨胀及其原因的看法。　　　　<br>“政府镇定沉着地继续印发这些废纸,因为,如果停止印发的话,政府就完蛋了，因为一旦印刷机停止转动——而这是稳定马克的先决条件——骗局马上就会暴露在光天化日之下。??????如果受惊的人民注意到,他们即使有几十亿马克,也只有挨饿的份儿，那他们一定会作出这个结论:我们不能再听命于一个建筑在骗人的多数决定的玩意儿上面的国家了：我们需要独裁 “ (转引自威廉?夏伊勒《第三帝国的兴亡》)　　　　<br>从这段有意思的话里头，我们能够看到古往今来煽动艺术的精髓。凭心而论，希特勒确实颇有几分洞察力，他看出马克的疯狂贬值被有意利用来应对外债（赔款是用马克计算的），政府也的确难辞其咎，然而由此得出结论——“民主不如独裁”，就莫名其妙了。而煽动的诀窍偏偏就在于此，观点必须震撼，论据必须彪悍——那么从论据到论点到底是什么逻辑，基本上就没多少人注意了。不信你翻翻文革的大字报，保证有所印证。　　　　<br>差不多同时发生的第二件事，可要比那位退役下士的表现吸引力大多了。甚至可以说，停战以来，德国人民第一次听见了好消息。　　</p>\n<p>持续将近三年的恶性通胀，在1923年底开始得到缓解和控制。　　　　<br>历史学家们将这个功绩与1923年11月的一个任命联系起来：46岁的德意志帝国银行董事亚尔马-霍雷斯-格里雷-沙赫特被任命为国家货币流通专员。<br>　　沙赫特1877年1月生于特因利夫（原属德国，现属丹麦），父亲是德裔美国公民，母亲是丹麦裔。他的父亲为纽约公平信托公司工作了将近30年，亚尔马之所以在德国而不是美国出生，只是因为他母亲当时患病必须全家回德国治疗。和今天的众多移民一样，老沙赫特觉得美国的月亮特别圆，为了聊表对第二祖国的热爱之情，居然把一位美国反蓄奴制政治家的名字放进了儿子的姓名中间，这就是他奇怪的中间名的来由。在日耳曼的命名方法里，中间名本应是父名和祖父名，这个独特的做法如同一个奇异的预言，在他的一生中深深刻下了难以磨灭的美国印记。<br>　　小亚尔马聪明而勤奋，具有德意志历史上那些百科全书式学者的天资气质，他先后专门学习过医学、哲学和政治科学，年仅22岁就得到了经济学博士头衔。年轻的沙赫特博士秉承父业，进入德雷斯顿银行。他本人出众的能力加上老头子在金融界广泛的人际关系，沙赫特一帆风顺，很快成为引起关注的金融精英。1916年，他成为德国国家银行的董事之一。1923年，沙赫特临危受命，拯救灾难中的德国货币流通体系。　　<br>货币崩溃的根源在于沉重的赔款负担，沙赫特当然清楚，一切金融改革的举措如果不解决好这个问题，只会引发更可怕的动荡。他上任之后，立刻从两个方面齐头并进：一边寻求外国金融资本的支持，一边改革货币，用新的地产抵押马克（Rentenmark）取代极度滥发的旧马克。　　那么该向谁寻求帮助呢？哪个国家有能力又有意愿帮助德国呢？欧洲的邻居和对手们要么心怀叵测，要么自己也穷得够呛，沙赫特也根本不指望它们，他的目光越过浩瀚的大西洋，精准地投向了自己的精神故乡——美国。　　　　<br>一次大战最重要的后果，既不是霍亨斯陶格、哈布斯堡、罗曼诺夫三大欧洲王室的垮台，也不是共产主义革命的兴起，而是美国作为国际经济政治关系中最强有力，甚至决定性的一端，羽翼丰满，开始闪亮登场。巴黎和会和国际联盟提供了它的出场秀，然而要真正深化美国对世界的控制能力，向欧洲大陆的经济渗透是一个重要途径。德国伸过来的求援之手，与华尔街的金色魔杖正好一拍即合。　　　　<br>二十年代的华尔街，宛如现实版的迪斯尼乐园，不断在狂欢的气氛中迎来繁荣奇迹，几大主要银行财团积累下来的资本迫切要向外扩张。马克思曾有言道，300%的利润下资本就敢冒上绞架的危险，绞架尚且不怕，何况区区一个德国。1924年，以美国银行的查尔斯道斯为首的委员会推出了“道斯计划”，1924-1928年内总计8亿美元贷款流向德国，帮助它偿还凡尔赛条约的赔款，利息收益直接投资于德国市场。同时，国联调停法比两国撤军，接管鲁尔工业区。　　<br>时来天地皆同力，沙赫特一旦心中有底，立刻果断地行动起来，用国家银行黄金储备为基础的新马克，以一比三十亿的悬殊比率兑换旧马克，到1924年8月这个过程基本完成，马克汇率开始在国际市场上稳定下来，国际投机者逐渐停止了对它的攻击。折磨德国的漫长通货膨胀结束了，乱云犹飞，千山已渡，沙赫特经此一役，证明自己不愧为金融奇才！　　　　</p>\n<p>1928年，沙赫特率领德国国家银行代表团，与美国为首的国联赔款委员会谈判签订了“杨计划”，它是道斯计划的延续，德国每年只要付赔款额的1/3，剩下的部分可以推迟。1929年世界经济危机爆发之后，胡佛总统干脆提议暂停德国赔款的90%。等到1933年纳粹上台，就压根一分钱都不给了<br>　　道斯计划和杨计划背后，都站着华尔街金融巨鳄J?P?摩根的庞大身影。道斯计划，据美国乔治华盛顿大学国际关系教授卡罗尔?奎格雷的研究结果，“很大程度上是一个J?P?摩根产物”，而杨计划的这位“杨”——Owen Young，直接就是J?P?摩根派出的代表。这两个计划最大程度保证了美国金融资本的利益，在1934年分业法案之前，像摩根这种巨无霸的金融恐龙一手控制信贷，一手承销证券，去了德国的贷款在华尔街发行成债券，巨额佣金收入滚滚而来，像金雨一样幸福地淋在华尔街精英高贵的脑袋上。　　　　<br>然而，道斯和杨计划的另一个结果，却是双方始料未及的。那就是“迅雷不及掩耳盗铃之势”的美国资本赤裸裸占领了德国实业界，将德国私人资本严重排挤出去。一方面，德国中小企业破产，实业资本流失，造成了大面积失业，刚刚稳定的经济又面对考验，大家伙出得狼窝入虎穴，使纳粹的蛊惑宣传有了民意基础；另一方面，美国资本集中在电力、钢铁、化工几个大的行业中，大展拳脚滚雪球，恰恰是这里生长出的垄断寡头，为希特勒的竞选活动提供了主要资助，进而为他发动的战争承担经济支持。　　　　<br>从沙赫特其人来看，他与华尔街的渊源明显而深刻，他父亲就职的纽约公平信托公司就是被摩根财团控股的。早在1905年，他随同德累斯顿银行董事会访美时，就会晤过J?P?摩根本人。他英语说得比德语都流利，以至于几十年后对他的审判是采用英德双语进行的。从广义上讲，沙赫特是以华尔街为代表的国际金融精英圈子里的一分子，一个“大人物”。资本没有国家之界，只有利益之别，资本家何尝不是一样？纽伦堡法庭上，只有三个被告指控没有成立，当庭释放，当过纳粹财政部长和中央银行首脑，为整个战争筹集资金的沙赫特就是其中之一，苏联代表尖刻地指责“资本家永远不会受惩罚”，此言未必正确，但西方对他偏袒却是毋庸置疑的明显。　　　　<br>然而，成为沟通华尔街金融集团和纳粹德国核心圈子的关键人物，20年代离沙赫特尚颇遥远，就是说起来都匪夷所思。那个粗俗的流浪汉出身，政变未遂的小头目？大概他连帝国银行的门往哪儿开都没搞清呢，在这些衣冠楚楚手握经济命脉的绅士们中间，谁会给他一个正眼呢？然而历史的魅力就在于此，昨日言犹在耳，今朝沧海桑田；聚光灯下，王子与贫儿的游戏不断被命运慷慨刷新，只不过每次付出代价的，永远都是黑暗里的芸芸众生。</p>\n<p>三．资助希特勒的工业寡头们　　　　<br>国王死了，国王万岁。此时一战勇士穷途潦倒，二战豪杰尚未登上舞台，灯光下活跃的是一批当代英雄。德国需要钱，华尔街需要能赚更多钱的钱。货币和货币的交流没有语言文化制度历史种种障碍，是世界上最亲密无间直截了当的尔虞我诈。　　　　<br>1924年到1933年，在道斯计划和杨计划之下，通过华尔街的国际财团经手流入德国的贷款总额为330亿马克，其中的最大三笔款项，分别建立和帮助了三家大工业卡特尔。　　　　<br>“卡特尔”这种垄断形式最早就源于德国，词根也是德语，指的是把小生产厂家由统一定价限量的协议联合起来，控制某一种行业的整个市场，比方说OPEC组织就是一个卡特尔。卡特尔的特点是简单有效，缺点是不够稳定，每人都有破坏协议的动机。但是在德国这种持重守信的地方比较合适，它从汉撒同盟时期开始就有一个悠久的信用传统，背信弃义的事不太流行。美国的资本进来之后，很快就看中了这种垄断形式。银行家们的操纵方法很简单，控股其中最强的一个或几个企业，让它们在一两种基本产品上占绝对优势，进而控制整个卡特尔。　　<br>这三家卡特尔分别是德国通用电力（A.E.G），联合钢铁，I.G.法本，它们分别控制了电力、钢铁和化工行业，把握了德国的工业命脉。到1937年，联合钢铁和IG法本生产的爆炸物加起来占全国总量的95％，著名的克虏伯军火公司也在它们控制之下。这个不仅得益于美国贷款，还有美国的技术。美国的投资者直接进了它们的董事会，顺便说一句，战后他们都没有因为给希特勒的政治献金受到审问。<br>　　这三个卡特尔的美国债主子和经手人皆为华尔街银行中最显贵的名字——迪隆&amp;里德（Dillon Read）; 哈里斯福布斯（Harris，Forbes）；国家城市公司（national city）　　公平信托（Equitable trust）……　　　　<br>美国资本促进了德国工业的迅速卡特尔化，除了上一节提到的，为希特勒上台提供了经济环境和金钱资助之外，这个结果本身也被上台后的纳粹当作宝贵遗产和大好经验继承下来。纳粹的经济政策很重要的一部分就是在工业界大搞卡特尔，用巨额订单喂养它们，整合出几个高效又听话的巨型战争齿轮来，纳粹党人可从来不是自由市场经济的Fans。<br>　　　　<br>这是后话，目前还轮不到希特勒说三道四。中学政治课本告诉我们，垄断资本家阶级挑选了代理人某某，旁边还常给配个图：一个大腹便便穿燕尾服的和一个干瘪猴瘦戴礼帽的，俩家伙正在弹冠相庆。话倒没说错，不过和没说差不多，反正我感兴趣的是某某怎样被招聘录用为资本家代理人的，这种好事怎么才能赶上哪。　　　　<br>希特勒也不是个第一眼帅哥，开始没人觉得他能成气候。当时德国政坛风起云涌，政党林立，国会席位非常分散，导致的直接结果就是投票难以出现优势多数，几个党联盟起来可以有简单多数，但是中间一出个反水的，马上优势就没了，这种状况正好给小党派提供了砝码，在分裂和混乱中找到机会出头。<br>　　1930年，希特勒赢得了选举中的第一次胜利，取得107席，成为德国议会第二大党。这个胜利令人吃惊，也来之不易，1928年国家社会主义工人党才只有可怜的12席，但是毛主席说得好，世上事怕就怕认真二字。</p>\n<p>   希特勒全国奔波，四处演讲(参看附录)，外加到处赠送他的大作《我的奋斗》，功夫不负苦心人，渐渐他的周围也聚集了一些有头有脸的人物，包括他的早期资助者。上面提到过的卡特尔——“联合钢铁”老板弗里茨?蒂森，以及鲁尔煤矿大王埃米尔?寇道夫。这些工业家之所以靠近希特勒，是因为他强烈支持禁止罢工和工会活动。　　<br>老鼠和猫，钱和选票，一样都不能少。希特勒转身讨好工人用的许诺是消灭失业，提高福利。这个诺言当时听来格外动人，因为1929年从美国开始，席卷世界的经济危机爆发了。　　<br>经过6年的资本输出，现在德国总共欠了美国70多亿美元，整个国民经济高度依赖美资。华尔街一崩溃，银行出现挤兑，开始从国外急调资金回国，多米诺骨牌效应立刻把德国拉进了深渊，生产收缩，失业率骤增。那边凡尔赛赔款还没完呢，杨计划规定每年必还的那三分之一，是用商品消费税保证的，结果结结实实转嫁在了民众身上。末世而妖言用，本来希特勒的极右翼主张在主流社会总是被当作笑柄，现在却有不少人真的追随他了，希特勒的煽动迷人之处在于简单直接——不还钱！赔款和债务是由这些外国资本家、犹太佬和卖国贼造成的，老百姓凭什么负责。　　　　<br>然而，听得热血冲脑，怒发冲冠的人们哪里想到，希特勒这时正在紧锣密鼓地想办法扩大外国资本对他的支持。仿佛命运在冥冥之中的安排，正在他选举胜利的前几个月，亚尔马?沙赫特博士从德国国家银行主席的职位上辞职了。　　　　<br>沙赫特辞职和杨计划后续谈判中与政府的摩擦有关，他对政府作出的一些新让步十分不满，在没有通知政府的情况下，他给J-P-摩根写了一封信威胁要退出巴塞尔的国际清算银行。这封信在美国报纸上发表后，德国政府大为震惊和丢脸，财政部长公开和他闹翻了，在兴登堡总统的压力下，沙赫特愤然辞职。　　<br>这次离职对沙赫特的影响是微妙的，首先深觉羞辱，他是第一个没到任期就被赶下台的帝国银行主席；同时也委屈和愤怒，且不说当年力挽狂澜拯救通胀的功劳，就是这两年领着谈判队伍，寸土必争一条一条争取到的利益被政府漠视，也让他觉得寒心。他离职后马上去了美国，应邀在各大学里演讲，会见各界名流尤其是华尔街的同事，抨击凡尔赛条约，鼓吹德国经济复兴。就在这次旅途上，沙赫特读到了《我的奋斗》。　　尽管他评价希特勒的文笔在糟踏德语，但是对里面表达的观点却心中一动。软弱无能的魏玛政府不再让他寄托希望了，那么换一剂猛药如何？　　<br>1930年底，沙赫特会见了纳粹党二号人物戈林，31年初，沙赫特与希特勒见面了。</p>\n<p>　　沙赫特对未来元首的感觉还不错，希特勒在这次会晤中表现得“真诚而谦虚”，他的自信和敢于行动的决心给沙赫特留下了很深印象，滔滔不绝的口才也名不虚传。沙赫特显得很有兴趣地听着，然后给了个小小建议，推荐一位金融记者瓦尔特?丰克给希特勒讲授一些基本的经济学知识（此人后来接替沙赫特担任纳粹经济部长）。我看沙赫特回忆录写到这里，想象博士忍耐着这位对经济学一窍不通还特别能侃的主儿，顿觉情景可笑。沙赫特是何等阅人无数老奸巨滑的人物，怎么会被希特勒那套古怪混乱的理论忽悠了去呢？　　</p>\n<p>答案似乎出现了一点影子，1931年春天，沙赫特会见希特勒的新闻在金融家圈子里不胫而走，人们猜测他政治上向右转的同时，还大胆预测他要借助纳粹的力量竞选下一任德国总统。沙赫特自己的话也加剧了这种猜测，当他的朋友、一位美国女记者问他会不会帮助纳粹统治德国经济之时，沙赫特回答“不，纳粹不会统治，但我会通过他们统治。”　　<br>共谋！考察每一个历史关键时刻的背后，各种目的与意志盘根错节纠集在一起，我们看到只不过是一个合力的表现而已。希特勒、沙赫特，投票给希特勒的德国老百姓还有与纳粹合作的美国资本家，都怀着各自目的处于合力当中。能造时势的英雄，就是在这个巨大的拼图游戏里有幸拿到最后一块图版的人。　　<br>不管出于良好的愿望还是勃勃的野心，在历史的转折关头，沙赫特帮希特勒弄到了那块最后的拼图。　　　　<br>1931年之后，沙赫特开始运用他的声望、人脉和杰出的理财本领，为希特勒经营竞选资金。1932年11月，沙赫特成功发动了一次德国工业和金融界大规模联名上书，由他领衔，要求兴登堡总统任命希特勒为帝国总理。1933年1月底，希特勒戏剧性地当上台，2月宣布竞选总统，沙赫特为他组织了一个晚会，在他的惊人能量作用下，与会者涵盖了工业界的大部分巨头，包括I。G。法本及其美国分公司，克虏伯军火公司，通用电力，德国汽车协会，联合钢铁公司，电报电话公司；当场筹资3百万马克。希特勒在财运上终于告别诸多蝌蚪，遇见了一群牛蛙。这笔钱十分阔绰地解决了竞选资金问题，选完之后还剩了大约60万。　　　　</p>\n<p>除了筹资，更重要的是，这是一个显著的信号，表达了德国工业寡头，以及站在背后的美国金融资本对希特勒上台和进一步统治的认可。就拿占总献金额30%的法本（如果再加上它的美国子公司就占45%了）来说，此时它的董事会包括了华尔街和美国实业界最显赫的一批人：福特汽车公司的老板，纽约联储银行的董事，新泽西标准石油公司的董事，曼哈顿银行总裁，以及弗兰克林罗斯福温泉基金的主席。　　　　<br>风雷动，鱼龙惨，魏玛共和国就这样不知不觉走到了尽头，这个夹在两个铁血帝国时期之间，德国历史上罕见柔仁的民主共和国，既生不逢时又先天不足。它失败的最深刻的根源，是它始终建筑在一个极不稳定的经济基础上，畸形的资本结构，沉重的外债负担，脆弱的货币体系，以及对德国中小企业和国内贸易传统的破坏，使任何一点经济波动都有可能引发灾难性的动荡，最后摧毁上层建筑。从《魏玛宪法》到希特勒上台，它的民主从最完善的文本开始，用最糟糕的实践结束。在历史的吊诡里，人人看到开头却总猜不中这结局，国会大厦巨大的阴影倾斜在柏林的夕阳下，犹如共和国无声的挽歌，的确，它作为殉葬品的命运也马上就要宣判了。</p>\n<p>谁为战争付了钱？　　　　<br>国会纵火案为魏玛共和国钉入了棺材的最后一颗钉子，1934年8月2日，兴登堡总统去世，孤独而衰老的帝国元帅在风雨飘摇中撑了很久终于还是放弃了，漫长的高寿并未给他带来荣光。现在希特勒坐在总统府里，正在对老总统留下的遗嘱——复辟霍亨斯陶格王室——嗤之以鼻，他的最新头衔是元首兼国家总理，在这个国家和这个世界上，再没有任何人能阻止他全速开动国家机器，实现他壮丽而恐怖的千年帝国之梦。　　<br>老朋友得到了回报，就在同一天——8月2日，沙赫特博士成为了内阁经济部长。在此之前，他已经回到帝国银行那间熟悉的主席办公室，把三年前替代他的路德博士赶到了国外当大使。卷土重来如此之迅速，使当初黯然去职的心情都变成了欣慰的回忆，他证明了德国多么需要他，并且凭经济学家的本能开始为一个全新的舞台摩拳擦掌。　　　　</p>\n<p>华尔街故人无恙否？他们用什么眼光考虑这件事呢？　　<br>其实上一节我们已经提到，华尔街通过所控制的德国寡头企业向希特勒提供了支持。然而，华尔街还有更为直接的动作，这就是当时希特勒得到神秘资助的所谓“西德尼?瓦伯格”之谜。　　<br>1933年11月，在荷兰突然出现了一本小册子，其中有一位名为“西德尼。瓦伯格”的银行家与希特勒的数段对话，里面披露了美国最顶端的工业家和金融家，包括洛克菲勒与亨利福特，在希特勒上台前后，通过JP摩根与柴斯银行集团向他提供了数额达到三千二百万美元之巨的资助。这本书在1934年就立刻被查禁了，它所影射的法本公司美国和德国的董事瓦伯格兄弟也矢口否认和这本书有关，但是，书中翔实的细节却和很多现实资料一致，遂成疑云，普遍被人们认为是华尔街的国际投资者们与纳粹合作的一项佐证。</p>\n<p>　　希特勒的上台令民主世界舆论哗然，1933年5月沙赫特访问美国，还没下船就被蜂拥而至的美国记者包围起</p>\n<p>来，围追堵截质问他对反犹暴行的看法，沙赫特被烦得罕见地大发了一次脾气，把记者递给他的一份《纽约时</p>\n<p>报》狠狠扔在了甲板上。开头不妙，他的使命看起来前途暗淡。沙赫特是来要求推迟支付美国银行贷款的，大</p>\n<p>萧条已经延续了三年多，罗斯福新政尚在福祸未卜，大家谁的日子也不好过，美国政府和华尔街还能象前几年</p>\n<p>一样好说话吗？<br>　　　　<br>莎士比亚说过，别借钱给你的朋友，要么你会失去钱，要么失去朋友。沙赫特这次又赌赢了，美国选择了前者。一方面，美国资本已经在德国陷得太深，太多利益攸关彼此纠缠；另一方面，德国重整军备扩大采购的过程，对美国经济恢复是一个良好的刺激。至于买了军火要对付谁，反正不是美国。沙赫特博士给了一个多么容易理解的理由啊，“如果德国能够获得它自己的原料而在经济上得到发展，这只会有助于刺激一般的世界贸易。它将帮助增加消费，促进繁荣，不仅提高德国人民的生活水平，而且将提高整个工业世界的生活水平 “　　<br>沙赫特甚至还把反犹行为的原因归于“一个民族处于经济绝望和可怕困境时的表现”，并且保证“一旦德国享有公平与繁荣后，这些表现就会完全消失”。（沙赫特在《外交事务》上的文章）　　　　</p>\n<p>罗斯福总统对沙赫特印象并不好，他觉得对方傲慢自大；对希特勒也非常不感冒，就在沙赫特访问结束的时候，他还几乎故意任命一位犹太人去柏林当大使。但是令人遗憾，也是我们很少提到的是，罗斯福在他第一任任期里，与绥靖主义者的主张并没有什么本质分歧。在他的施政纲领中国内经济是第一位的，对外交只简单提一个“睦邻关系”，保住拉美后院不起火足矣。这不仅仅为了迎合孤立主义势力，罗斯福本人也是一个灵活的务实主义者，并不介意握脏了手，在他上任不久就和苏联建交了，让欧洲自相钳制，何乐而不为呢。　　　　<br>1933年8月，美国银行协会同希特勒德国就贷款问题进行谈判。美国银行同意德国延期偿还以前的贷款，并且保证今后美国在德国的资本和产业的全部收入只在德国使用，并用此来兴建新的军事企业或者改建原来的军工企业。</p>\n<p>　　纳粹德国没有食言，作为一个好胃口的买家，立刻把这些延期支付的贷款派上了用场，从1933年到1939年，在德国为第二次世界大战做准备的6年时间里，杜邦财团与化学公司、洛克菲勒财团和美孚石油公司、摩根财团及它控制的电报电话公司、福特汽车公司（亨利福特本人由于与纳粹的合作还得到了十字鹰徽勋章）争先恐后跟德国签下了巨额的战略原料和军工项目的订单。仅仅飞机一项，1934年8个月中美国对德国的出口数量就比1933年增加了不止5倍。33年到39年间，在纳粹德国的军事机构中营业的美国公司超过60家。　　<br>在技术输出贸易上也毫不含糊，杜邦公司通过I. G. 法本把氯丁橡胶和飞机防爆剂的技术卖给德国；坦克润滑油的技术是从美孚石油公司得到的；希特勒发展空军的重要帮助来自于美孚在德国设立的一家飞机专用汽油厂；电报电话公司参加了德国新型飞机的研制。后来在战争中，连美国的海军部长都承认是美国向希特勒提供了最先进的飞机发动机。　　　　</p>\n<p>一个不可思议的诡异循环出现了，华尔街借出去的钱，被希特勒拿过来，从华尔街金融资本控制下的工业托拉斯购买军火和技术，得到的利润又用于向德国的军工行业继续扩大投资。金钱的血液周而复始不分昼夜地流动着，结果是一端生长出了武装到牙齿的德国军备，另一端美国的诸多庞大工业帝国，在艰难时世中维持甚至扩大了生产和市场，罗斯福新政能够奏效，也未尝不对此多赖借助。　　 　　</p>\n<p>然而真有这么轻巧的双赢吗？世界上没有任何事情是无缘无故发生的，哪怕是从天上掉下来一块陨石也不例外。人们永远没有完全决定眼前事务的能力，路径依赖的力量常常比想象中大得多。美国与德国战前资本融合的惯性，一步步导向如今的政策，不是当政者不懂养虎遗患、尾大不掉，谁都知道希特勒是什么人，但是形势如此，加深这种合作关系比破坏它更为划算。经济学家梅纳德?凯恩斯说破了残酷的真理：“在长期，大家都死了。”千年田易八百主，所谓长期打算、远大目光往往成了政治家的高调，立竿见影的利益却是人人难以抗拒。金融资本的盲目性尤其明显。金融市场上每一天时间都在用贴现率表达着它的价值，今天能挣的钱就不能留到明天，活在当下是华尔街唯一永恒的真理，其他的，包括战争，都可以往后放。上世纪末东南亚金融危机之后，各国对经济安全人人自危，殊不知金融资本从来就是见血就上拔腿就跑，不择手段不计后果的角色，现在如此，当年也差不多，上演的都是鬼打墙的老故事。　　　　</p>\n<p>既已暗渡了陈仓，就不怕明修它栈道。德国撕毁凡尔赛条约限制，恢复普遍兵役制，扩充常备军，进入莱因非武装区。美国对此听之任之，生意做得更加热火朝天。其实别的国家又何尝不是一样呢？英国和德国也有合作，并且是美国的一个主要竞争对手，对这些举动不过嘴上谴责一下。法国虽然是德国的传统敌人，但是战前正赶上右翼上台正在严防共产党，外加殖民地麻烦一大堆，还指望着希特勒对付苏联。回望第二次世界大战爆发的前夜，我们会目瞪口呆地看到美、英、法、苏争相和自己未来的侵略者眉来眼去，比赛着为它添砖加瓦的奇异景象，希特勒不打这场战争简直都对不起老天的眷顾。　　　　<br>象最深沉的梦魇，清醒者无法动弹地看着深渊越来越逼近，又象一场荒诞派戏剧，各方势力挤在十字路口上等待自己的戈多。经济复兴？遏制共产主义？均衡的欧洲？互不侵犯？　　　　</p>\n<p>戈多没有来，来的是希特勒。纳粹德国带着华尔街的金钱，美英的技术和装备，苏联训练出来的军官，揭开了第二次世界大战的序幕。<br>镀金时代的秘密与巫师的命运　　　　<br>纳粹德国的“复兴奇迹”一直是第三帝国Fans津津乐道的题目。希特勒以前的内阁总理换来换去，愿许得真不少，每次但听环佩响，不见美人来；佳人不来，也就罢了，可是今天通胀明天衰退加上还不完的外债，来的都是这种牛鬼蛇神，真叫人无语凝噎。希特勒上台4年，失业率从高于30%下降到几乎为0，国民经济总值增长超过100%，同时完成了全国高速公路网的建设，重整了重工业基础体系，还装备了一支现代化军队。如果你看过雷妮?里芬斯塔尔那部著名的《奥林匹克》，一定会对1936年德国综合国力和精神状态留下深刻印象，那响彻云霄的欢呼，如林屹立的手臂，气势宏伟的建筑，健美如神祗的运动员，无一不暗示着隐然志在天下的实力与霸气。希特勒的个人威望也达到了顶峰，他甚至不再需要早年那样的演讲才华，只消在公共场合露露小脸，成千上万群众就宛如自动催眠一般立马如醉如痴。　　　　<br>那么，如果这时候希特勒有幸意外死亡的话，是不是就“生得伟大，死得光荣”了，然后以民族救星的形象名垂青史？<br>　　　　<br>希特勒是如何创造经济奇迹的呢？　　　　<br>对比希特勒政府和罗斯福政府在1933年之后的经济政策，不难发现它们何其相似乃尔。同样的国家干涉，兴建公共项目，发行公债，贬值货币，扩大卡特尔组织；甚至连名字都差不多，罗斯福的叫“新政”（New Deal），希特勒的叫“新计划”（New Plan）。诚然，在世界范围经济危机条件下，大家面对的问题大同小异，比较行之有效的也无非国家垄断主义那一套。然而，同样的照方抓药，各国家底不同，人家吃独味人参，你可能只弄得起点参须，贾府的方子刘姥姥看了也是干瞪眼。美国的广阔幅员、丰富资源、生产潜力没有一条德国能望其项背，这且不提，单单说通货这一块，它就是一战最大的获利者，加上延续下来一贯的高保护关税政策，资本对外扩张多年带来的惊人收益，它的国际收支平衡表和战后年年赔款的德国怎么比？有黄金和外汇的保障，人家可以搞货币贬值而不引起通货膨胀，可以玩赤字游戏而不导致财政破产；换了你行吗？<br>　　<br>摆在经济部长沙赫特博士面前的就是这样一顿无米之炊。　　　　<br>然而，和十年之前一样，这个老巫师如同听到召唤的战马，再一次奔向危机时刻的舞台，一样的雄心勃勃，一样的自信不疑。他的确带来了新节目，电光火石间只见他在国际经济舞台上纵横捭阖，原汤化原食，空手套白狼，一系列动作令人眼花缭乱——“德国欠你的钱越多，你就越想和它做生意。”——沙赫特用魔术般的手段创造了信用。<br>　　在一个基本没什么财政准备金的国家里干事，只能使上点无中生有的办法，这个`“生”法有文的，也有武的。武的就是明抢，只不过大盗剪径变成了国家没收，受害者自然是可怜的犹太人；文的就不那么简单了，沙赫特一开始必须有节制地使用印钞机来做启动。　　我查阅的中文史料中，有限地提到沙赫特的几次，大多都说他为了重整纳粹军备，怎么热衷搞通货膨胀，仿佛他是个金融狂人。这个印象之由来，以我自己的猜测，可能和中央银行主席孔祥熙博士有关。他1937年拜访沙赫特，对军备资金问题交谈之后，大概自以为深受启发，抗战后期也效仿人家搞货币增发，结果演砸了，真的变成了通货膨胀。孔博士虽然堂堂名校海龟，贵为两位国家元首的连襟，理财的本事还是比不上敛财的本事。沙赫特开动过印钞机是不假，但是他的政策总体上却是紧银根的，这意味着严格控制物价和外汇汇率，而且将大量增发的银行券的用在非生产领域，也就是基建和军工，尽量减少对一般市场流通的压力，比如著名的“米福”（Mefo）军用券，就是由国家保证，专门支付军火商的，由银行秘密贴现，不入财政报告。这种办法兼顾了解决就业、不造成生产过剩和军事保密要求，将“拖”字诀发挥到了极致。<br>　　<br>沙赫特所创造的信用奇迹还包括，为了避免外汇流失，他同几十个国家谈判了（对德国）“惊人有利”的物物交易（夏伊勒语）。到1936年中，德国已经建了28个清算协定，在与这些国家贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持齐平，这样，这些依赖德国市场的国家（大多是南欧和美洲的原料输出国）没有办法，为了清算马克欠款，只好允许德国继续购货。<br>　　　　<br>沙赫特在“新计划”期间之卖力，确实有几分“士为知己者死”的味道。为了给德国弄到更多外汇，他甚至不惜损害自己在国际金融中的信誉，在进口商品以后千方百计阻挠付款，或者代之以物物交换，连华尔街的老朋友都在指责这种“金融强盗行径”。　　　　<br>可是，随着时光飞转，随着军队强大起来的脚步，这个精明的老巫师没想到的是，希特勒的目标并不是让德国成为一个经济强国和贸易霸主，他把经济全权交给他，是因为他自己根本不感兴趣。赌桌上再有千般计较，总还要按理出牌，然而，他已经等不及了,他要的比沙赫特能给他的更多，更直截了当。　<br>　　　<br>1936年开始，形势看上去正是莺歌燕舞一片大好，沙赫特却开始隐隐感到问题不妙，像一个在舞台上停留过长时间的魔术师，他发觉帽子里已经没有新兔子可以变了。首先是德国在军备上的畸形投资，占用了他千方百计从国际金融界弄来的，和从国内人民牙缝里抠出来的大部分外汇，他主持修订的经济法律严厉到对私藏外汇可以判处死刑，却仍然难以应付军队巨大的钢铁胃袋；另一方面，重整军备的动静实在太大，其他国家虽然有跟着起哄沾光的一面，却也有惊心警惕的时候，德国的国际环境悄然逐步恶化，国际贸易越来越不好做。特别是，华尔街虽然慷慨给了钱和技术，但是像过去杨计划中发生过的一样，它们在合作中试图控制德国伙伴，而为战争做准备的德国工业寡头，还有它们的政治靠山，当然不会答应，政治原因带来的摩擦也影响了经济关系，使沙赫特大为头痛。<br>　　　　<br>沙赫特最深刻的不安来自希特勒和他对经济政策的要求在本质上有分歧。希特勒对经济完全持一种实用主义态度。如果把纳粹党和希特勒本人对经济问题发表的零星高论放在一起看，就会发现简直没有他们没主张过的观点：支持国有化、支持私有化、主张自由竞争、主张计划经济、打击垄断、保护垄断、限制利息、反对限制利息……总而言之，看上去矛盾百出，实际是见人说人话，见鬼说鬼话，为政治要求服务。虽然沙赫特很知趣地在报纸上撰文，说元首“领导了每一个经济计划、参加了每一项法令制度的修订”，其实希特勒在其中的贡献，也就和金日成同志对《卖花姑娘》音乐创作的贡献差不多。沙赫特将高帽子奉送得这么慷慨大方，恰恰因为希特勒当时没太多插手他的工作；而一旦领导打算亲切关怀了，沙赫特与纳粹的蜜月期也就开始面临危机。<br>　　　　<br>1936年秋，戈林被任命为“四年计划”全权代表，这个“四年计划全权机关”与帝国经济部产生了严重的机构重叠，最后不可避免地引向了沙赫特与戈林之间的冲突。沙赫特从这个“四年计划”诞生开始就对它深恶痛绝，不仅因为它的掣肘争权，更因为它是一个完全以战争着眼的，策划德国4年后勉强自给自足的计划。虽然沙赫特肯定不是一个理想主义的自由贸易信奉者，但是国际贸易和金融对德国的致命意义他是再清楚不过了，德国没有广大殖民地作为廉价原料来源和产品市场，去消化国内的经济波动，因此一举一动都和国际金融市场息息相关，要不他那么辛苦节省外汇干什么？一旦风吹草动，马克受到攻击，以当前国内的信用“圆环套圆环”遍地打白条的现实，这场热热闹闹的“经济复兴”搞不好立马变成镜花水月！“四年计划”在他不仅达不到什么自给自足的目的，反而会摧毁辛苦建立的国际贸易成就，并且引发国际金融市场对德国信用的怀疑。　　<br>沙赫特愤然指责戈林“你的外汇政策，你的生产政策和你的财政政策是靠不住的”，而希特勒在这场争执中会支持哪一方呢？看看这位元首风向标式的言论吧。　　<br>“在德国，往往是在政治力量高涨的时候，经济情况才开始改善；反过来，往往在经济成了我国人民生活中唯一内容，窒息了思想力量的时候，国家就趋于崩溃，而 且在很短时间内，把经济生活也拖着一起崩溃……从来没有一个国家是靠和平的经济手段建立的”。　　“避开一切世界工业和世界贸易政 策的尝试，代之以集中一切力量，旨在为它的人民在下一世纪分配获得一块立足的生存空间开辟出一条生存之路……”　　　　<br>另一个使人不安的征兆是，杨计划和道斯计划债券在1935到1936年的价格大幅度下降，道斯债券从79美元下降到37美元，杨债券从59美元下降到29美元。这意味着华尔街对德国发生动荡的深深忧虑。铅云低垂，斜阳诡异，沙赫特独坐在帝国经济部办公室里，看着多年围绕在他鞍前马后的工业家们，蜂拥着向戈林的订单扑去，不祥的预感在心中升起，海天之间一场新的风暴就要来临，他的命运又将如何呢？<br>　　　　<br>1937年8月，沙赫特向希特勒递交了辞呈，12月正式从经济部长任上离职；1939年1月，他被免除帝国银行总裁职务，虽然还保留着内阁成员的虚衔，事实上已经离开了德国的权力中心，虽然他之后的人生依然颇有戏剧性，但已不再对历史发生真正的影响。　　<br>沙赫特的命运是一个富有深意的象征。他终身未加入纳粹党，但是在纳粹上台和准备战争过程中的作用却可能超过了任何纳粹高官。他本人的浮沉，就是国际金融资本与德国政治势力关系的生动历史。如同传说中的双头蛇，政治与经济的逻辑相互推动也相互反噬。沙赫特尽管清楚地知道自己在为侵略战争筹资（这一点无可置辩），而且在奥地利合并和捷克事件中他都把帝国银行的手伸了进去，但是从本质上他是按照国际金融资本——当然也包括德国金融资本——的利益去行动的。然而，“大炮和黄油”是政治发展的逻辑，有自身合理的惯性，对一种成型的政治文化来说，经济力量可以是发动机，却从来不是刹车。何况这“惊险的一跳”在好日子里难道没有露出过征兆吗？希特勒也许是个魔鬼，但很难说是个骗子，他的基本主张——种族主义和生存空间扩展论从来直言不讳，这样的理论基础最后必将引向战争。发现这一点并不需要什么特别的洞察力，只不过，象十日谈里古老的故事一样，希图利用魔鬼的最后难免沦为魔鬼的奴隶，或者，魔鬼和人类本来就没什么真正的界限？　　　　</p>\n<p>纽伦堡的美国人放过了沙赫特，他的祖国却没有原谅他，战后巴伐利亚拒绝他居住，他漫长的后半生背负着纳粹帮凶的骂名。然而华尔街呢？J。P。摩根财团呢？那些显赫的信托银行呢？洛克菲勒、亨利福特、杜邦这些工业帝国呢？伯尔尼和日内瓦赚得钵满盆满的金融家和军火中间商呢？即使在战败的德国，那些曾经不可一世的托拉斯们，总电力公司、法本、联合钢铁，谁又受到任何真正的触动了呢？在两极格局的战后世界中，又一轮金钱和控制的奇妙博弈开始了……　<br>　<br>你看你看世界的脸。　　<br>“波丽娜，她无处不在，她就是社会……”——巴尔扎克《驴皮记》　　　　<br>这篇大而无当的文章结束之前，不妨再对沙赫特苍老的背影目送一程。这个精装的伏冷脱，失去法术的老巫师，最后一次见到希特勒是在1941年一个公开场合上。希特勒的问题依然和华尔街有关，他问他是否能再去美国一次，争取华尔街新的贷款。这次沙赫特没有丝毫犹豫地告诉他，在《租借法案》生效之后，已经完全不可能。　　　　<br>这是他对希特勒说的最后一句话，也是华尔街与纳粹德国这出人间喜剧的最后落幕。　　　　<br>亚尔马。沙赫特1944年被牵扯进谋害希特勒的720事件，被送进达豪集中营。1945年达豪被盟军占领。1948年受审无罪释放后，先后担任印度尼西亚、埃及的经济顾问，1952年在阿以中东战争中作为埃及的顾问，1953年后回到德国重新投入金融界，同时写作回忆录《我的前76年》、《一个老巫师的告白》。1970年6月4日，在希特勒和罗斯福死去整整25年后，93岁高龄的沙赫特去世。<br>　　<br>他象一只从树上掉下来的猫，姿态难看却总能安全地四脚落地，一时的凶险也变成了因祸得福的契机。读他那洋洋洒洒一册又一册的回忆录，你很难相信这个耄耋老人身上有如此过人的精力和记忆力。甚至还在监狱他就和出版商定了合同，在儿子战死，自己等待受审、前途未卜的日子里，我看到这个71岁的老巫师写道：　　<br>“我一直雄心勃勃，现在我依然如此。”　<br>　　　<br>不知为什么，这种过于强烈的生命意志，令我反感，就像对第三帝国那种狞厉嚣张的美。也许唯一例外的是这个细节。当写到他的爱子Jen在苏联战俘营里失踪，文风铺张华丽的沙赫特只淡淡说了一句：他是个温和而内向的孩子，本该是个很好的经济学家。　　<br>可是呢？　　<br>他活到了93岁，然而包括他的孩子在内，几千万年青人死于这场战争。　　<br>他一生梦想着德国的强大复兴，在临死前，他看到的是自己帮助发动的战争制造出的一道柏林墙。　　　　<br>陈词滥调，有时候却真的难以替代：　　<br>愿后人勿复哀后人！</p>\n<p>华尔街借钱给德国购买华尔街控制的美国工业的军火和技术，得到的利润再投入德国军工业以扩大投资。纳粹德国的复兴奇迹奥秘即在于此。对于华尔街金融寡头，这样可以控制德国经济，赚取暴利。<br>　　 但希特勒并不甘心于寄人篱下。他说过，“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义”。依靠华尔街德国重建了完整的工业体系，此时的希特勒意欲在这个基础之上打破英美主导的国际经济与金融体系，建立以德国为核心的欧洲经济新秩序。<br>　　 希特勒所做的第一步就是要将华尔街控制的德国金融体系转移到政府手中。很快，政府便完全控制了德国国家银行，加强了对商业银行的监管。1934年12月5日的德国信贷法使政府可以监督银行业务活动的各个方面，政府不仅能要求知道银行各项办事手续的全部细节，而且能对银行放给私人的贷款实行严格的控制，以保证它们的目的完全符合政府的全盘计划。政?还严格控制金融市场来适应国家的长期目标。比如，新股票在发行前需要通过一个专门委员会来审查其是否可能有利于国家经济建设。<br>　　 纳粹政府严格控制外币使用，管制进口，管制外国人使用德国银行的贷款，管制德国人向外国人出售马克。比如，德国贷款马克给巴西，但这些钱只能用于购买德国货，而不能到德国银行兑换成黄金。<br>　　 严格管制的措施会降低进出口贸易量。沙赫特又和各个国家签署了双边的汇划结算协议。所谓汇划结算协议，就是德国进口商向德国央行账户支付马克，至于出口商是立即得?当地货币付款还是等待一些时日，则取决于德国政府的出口政策。有些商品，外国央行接过限制使用范围的马克后立即向出口商支付当地货币，这将使出口国家国民收入没有变化，不仅是来自德国的进口品不能增加国民收入，而且整个进口品都不能增加国民收入，此即支付原则。还有些商品，德国央行先让出口商等待，一旦德国的某一个进口商能够从德国购买商品之时，该进口商才能用当地货币购买马克，而央行则用这笔当地货币来支付原来的那位出口商。这就是所谓的等待原则。<br>　　 因此，德国可以通过关税与适当的汇率，来限制进口或者促进出口。比如，在进口方面又可搞买家独家垄断，政府对进口商品都征税，或者向进口商卖出外汇，其汇率比从出口商那里买进时高出很多，政府收入得以增加。如果目的是进口而不是出口，以特殊方式即从国外借钱的方式改善国际收支，就可以用补贴汇率自由进口，但按很高的汇率出售外国需要的出口商品，为出口造成困难。为了最大限度地利用垄断的好处，改善贸易比价，对于国外需求不受价格影响的商品，汇率可以提得很高。而对于供应不受价格影响的进口商品，汇率可以压得很低。<br>　　 沙赫特创造了200多种货币、银行券、债券和各种五花八门的信用工具，与汇划结算协议相结合来调控资金的流向。比如旅游马克只能用来支付在德国的火车、旅馆和饭店的账单，机床马克只能购买德产工作母机等机械设备，啤酒马克只能购买德国产的含酒精的饮料，而钟表马克则只能购买德产钟表。通过这种方法，德国有垄断地位的商品如仪器与光学设备，将不会被低廉的马克买走，而只能用来换取真金白银或是德国需要的外国商品。这种?殊的马克其实是放弃了黄金而以某一种物品作为其发行的储备。这是因为当时的黄金储备主要集中在英美两国。<br>　　 此外，大量增发的各种信用工具只能用在基建或军工等生产领域，而不会进入消费品市场，通胀的威胁自然也就消除了。比如，1934～1936年发行的专门支付给军火商的米福债券就是如此。在沙赫特的撮合下，西门子公司、古特霍夫农冶公司、克虏伯公司和莱茵金属公司这4家德国支柱企业成立冶金研究有限公司。出自这家公司的米福债券便由一些资本有限、向德军供应物资的小公司出票，金属研究公司承兑之后到帝国银行去贴现，或者向资本市场出售。1936年，米福债券的未清偿总额达120亿马克，支持了当时德国军备重整一半的费用。到了1938年，沙赫特又发行了供应商国库券来支持军备重整。<br>　　 但经济自有其规律，信用扩张与通胀是一枚硬币的两面。为了防止通胀，除了高税率和控制发放红利外，德国还有种种有关物价和工资的规定。根据1936年10月29日的一项法令，德国设立了一个物价管制委员会。先前授予任何政府部门的监督、批准或规定物价的全部权力，都移交给了物价管制委员会主任。他不仅负责为到达最后消费者手中的商品规定价格，而且?责对生产过程中各个中间阶段中的价格进行监督。<br>　　 从1936年起，德国物价政策的基础就是1936年11月26日的冻结物价法令。根据这项法令，除特别许可的以外，物价管制委员会主任禁止任何物价提高到超过1936年10月17日的水平。由于物价冻结不仅冻结了个别商品的价格，而且冻结了各种商品价格之间的关系。结果德国物价一直保持稳定，批发价格指数（PPI，以1913年为基数100）从1936年到1939年仅从104.1上升到106.9。<br>　　 当然，对英美主导的国际金融秩序，最为釜底抽薪的是易货贸易的国际结算方式。当时国际金融家获利方式仍然停留在19世纪的旧模式，也就是向经济困难的国家放债盈利。如果德国的易货贸易被其他缺乏黄金与外汇的国家所仿效的话，国际金融家不仅很难找到借款人，而且其财富也要严重缩水。随着货币与实物之间关系的脱离，英美主导的国际经济与金融的主导权自然而然地就会被瓦解。<br>　　 仅在1934年，德国就完成了与保加利亚、罗马尼亚关于大豆和石油的易货贸易合同，与匈牙利和南斯拉夫涉及铝矾土和镁的易货合同，与丹麦关于家畜、黄油和猪油的易货贸易合同。德国还和中东欧建立起紧密的贸易关系。20世纪20年代末，德国占匈牙利、罗马尼亚、保加利亚、南斯拉夫、希腊和土耳其总贸易额的15%左右，到了30年代末，这个比例提高到40%。沙赫特禁止德国企业未经政府允许就进行国际贸易。所有国外债权人在德国只允许使用德国马克。<br>　　 为了贯彻这一政策，沙赫特在德国设立了24个监控站，时刻监视着德国商人的贸易活动。根据国家的战略需要，沙赫特将商品划分为不同的等级：粮食、铁矿砂、钨、锑、铬等稀有金属等级最高，其次是煤炭、有色金属、矿物油、化工产品、润滑油以及棉花、羊毛和橡胶等。到1936年，德国已经签订了28个清算协定，在与这些国家的贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持平衡。在“二战”爆发前，德国国际贸易中的83%是通过易货贸易方式进行的。<br>　　 沙赫特的想法是从英美主导的国际金融体系中找到漏洞，循序渐进地让德国也分一杯金融霸权之羹。而希特勒则求快求速，意图一蹴而就。结果到1938年，沙赫特被解职，戈林从沙赫特手中接过对德国经济与金融的控制权，他便将政府的政治目标和军事目标置于德国经济之上。<br>　　 有破则有立，德国企业建立新的经济与金融体系。接替沙赫特经济部长位置的是瓦尔特&#8226;丰克。他是受戈林委托的制订新秩序计划的部长。新经济秩序是将欧洲组成一个单一的经济共同体，在德国的指导下进行运作。德国将成为欧洲大陆的工业中心，周围是一批组织起来供应它所缺少的农产品和矿产品的国家：东南欧将增加农业生产，放弃军备及辅助工业；丹麦将减少养牛和乳类生产，增加谷类和饲料的产量；挪威将致力于在农业上自给自足；甚至?国也将被看做是一个农业国和粮食输出国。<br>　　 为了达到这一目的，德国必须要成为欧洲金融体系的核心，正如丰克所坦然承认的：“我们决不奉行一种会使我们依赖黄金的通货政策，因为我们不能使自己受到一种我们无法决定其价值的交换媒介的约束。”欧洲的货币将与黄金完全脱离，成员国之间的交易将在固定兑换率的基础上进行。德国将双边清算协议扩展为多边贸易制度。按照这种制度，所有的欧洲国家将通过设在柏林的一个中央票据交换所，用德国马克来结算其贸易账目。柏林将成为欧洲的金融中心。<br>　　 “二战”期间，德国便根据既定方针在欧洲打造起新经济秩序的雏形。德国人首先没收和强迫收购被占领国家政府与私人拥有的黄金和国外资产，干涉被占领国家国内流通的货币，把这些货币同德国马克的兑换率人为地定得很低，勒索占领费，征收罚金，以及改造并周密地控制被占领国家的银行系统。<br>　　 1939年9月，德国信贷银行在波兰创立，信贷银行有权将高达10亿马克的款项贷给德国供它在占领区使用，也可发放短期抵押贷款，贴现和接受不计息的转账及存款，以及发行票面额从50芬尼到50马克的纸币。纸币的准备金包括：德国信贷银行由于贷款和贴现的票据而拥有的资产，德国货币的准备金，在德国国家银行和各票据交换所的贷方余额，德国国库债券的准备金，以及给予德国的贷款。这些纸币在被占领国家内按固定的兑换率同该国的货币一起流通，兑换率通常大致相当于入侵前的比率，它们不能随便兑换成德国国家银行的钞票。这是一项必要的规定，用来防止因发行大量德国信贷银行纸币而造成的通胀影响到德国本土。<br>　　 德国还以金融手段控制外国企业，其中德意志银行和德累斯顿银行征服欧洲工业的主要工具之一。它们通过诸如连锁董事会、股份所有权、代表投票制和操纵新的放款等方法，控制有关国家的主要商业银行，从而控制与这些银行有关的工业企业。比如，在捷克斯洛伐克，德意志银行和德累斯顿银行分别接收了波希米亚联合银行和波希米亚贴现银行后，就使德国控制了波尔迪纳尔铸造厂、克拉洛多沃尔水泥厂、布尔诺第一机械厂、波希米亚铜厂、索洛火柴垄断企业、金刚砂厂等该国的主要工业企业。<br>　　 不过，打破甚至摧毁英美金融帝国的唯一的最有力的金融武器是多边清算协议。到1941年年底，德国已同欧洲大陆所有其他国家谈判了清算协定，这些国家彼此之间也进行了很多这样的谈判。后一类协定中有些是通过设在柏林的中央票据交换所结算的。在那段时间，柏林成了欧洲大陆的金融中心，马克成了居统治地位的货币，许多国家开始通过柏林以马克来结算它们的全部国际贸易。就像现在的美国一样，德国则凭借占压倒性优势的军事、政治和经济力量，强迫贷款国提供巨额贷款。换而言之，整个欧洲被迫不断供给德国它所需要的任何可以买卖的东西。<br>　　 通过建立欧洲经济新秩序，德国人将战争造成的通胀全部输出到其他国家。德国信贷银行纸币有意在被征服的国家增加流通的货币量，人为制造通货膨胀。实际上，即便这种纸币被收回，也未消除通胀的压力。原因在于它们只不过由数目相等的本国货币取代而已。柏林的德国票据也起了制造通胀的作用，这等于德国人拿到商品却不付钱。按1939年的物价计算，1940～1944年，德国从被它占领的国家和被它统治的国家至少掠夺了1 040亿马克的财富，约占德国GNP的14%。<br>　　 其他国家的政府为了防止出口商破产，只好通过无限制地批准贷款来垫付货款，结果货币发行量大为增加，通胀恶化，商品供应减少，甚至在希腊等国造成了政府财政的全面崩溃。而在德国，通胀趋势则受到强有力的控制。在外国进行的征敛，增加了可以获得的商品数量而又丝毫未增加流通的货币数量，大大削弱了通胀。</p>\n<p>　　　　从本质上讲，德国、英国与美国之间在金融上的争霸并无善恶之分。其实，希特勒本人并没有发动世界大战的企图。开战之前，德国军费开支占GDP才15%左右，与英国相当。1939年慕尼黑协定签订后。德国已削减了军费开支，结果英国军费比例大为超过德国。一直到1942年斯大林格勒战役开始之前，德国军备生产都一直在下降。结果，即便在战时，德国人的生活水平也未下降，因为希特勒不希望因此而削弱了自己在德国人民中神一般的形象。<br>　　　　自始至终，希特勒的胜利秘诀是政治智慧，而不是军事征服。希特勒并不认为德国有同英美苏三大国的联盟发生长期战争的可能，他自信自己可以通过外交手段达到目的，若不行则通过一系列小规模战争解决德国的生存空间问题。在他看来，在政治手段和进攻波兰的小规模战争之间没有清楚的分界线。希特勒本人也知道，一旦国家综合实力与军事力量成为决定因素时德国便会完蛋。<br>　　　　德国的领土扩张与日本的侵略也有本质性的不同。“光复”与“侵略”只是站在不同立场上的描述同一件事的不同词语。从欧洲历史来看，德意志人的神圣罗马帝国曾统治了欧洲大陆的大部分土地。遗憾的是，德国一直到19世纪中期都未结束分裂状态。俾斯麦虽在1871年创建了新德国，但却把奥地利以及其他德意志人居住区排除在外。希特勒收回萨尔地区，派兵进驻本国的莱因地区，将奥地利，捷克斯洛伐克苏台德地区纳入德国版图。站在德国人的立场看，无非是收复久远的故土。<br>　　　　纳粹德国唯一的遭人诟病的犹太人大屠杀也不是没有辩解的理由。在纳粹统治下的欧洲，食利者阶层的犹太金融家被逐出欧洲经济圈。比如那个风光百余年的罗斯柴尔德家族在欧洲大陆的财富与权势便被纳粹德国破坏殆尽。1938年，《犹太人资产登记法令》颁布后，罗氏家族的财产受到严重冲击。第二年，几乎所有的罗氏家族的慈善与教育机构全部被解散或被国有化，而罗氏家族很多人都沦为难民。维也纳的罗氏家族掌门人路易斯&#8226;冯&#8226;罗斯柴尔德被逮捕和关押，直到他在奥地利的所有资产都被转让给德国政府后才被释放。他在法兰克福的豪华住宅以61万马克的超低价被政府征收，一百多年来价值连城的艺术品则以象征性的230万马克的代价被政府收购。位于捷克的维特科威兹钢铁厂都被赫尔曼&#8226;戈林国家工厂兼并。这些对于欧洲人来说未尝不是一件好事。<br>　　　　刚开始，希特勒也未动过灭绝犹太人的念头。犹太复国主义者曾与纳粹合作，希望将犹太人迁移到某个地区重建国家。但是包括英美在内的世界上绝大部分国家均不接收犹太人。英美列强甚至暗自高兴，希特勒做了他们想做而不愿公开做的事。直到美国对德宣战，德国人认为这是犹太财团鼓动的结果，于是开始屠杀犹太人以示报复。如果说德国是屠杀犹太人的元凶，那么英美两国就是将犹太人送进屠宰场的从犯。<br>　　　　对德国人来说，维持现状不是和平，而是屈服于英美。英美保住一战胜利果实，德国则想消除其失败的影响，突破英美在政治、经济与金融上的霸权。这都无可厚非，正如英国历史学家泰勒所写的：“在主权国家的世界中，每个国家都尽最大的努力谋求它自己的利益，至多由于错误而不是由于罪行受到批评。像往常一样，俾斯麦在谈到1866年奥普战争时发表的意见是正确的：‘奥地利反对我们的要求和我们提出要求一样不是什么错误’……希特勒的目的是使德国成为欧洲的支配性大国，或许更久以后成为世界的支配性大国。其它强国过去追求相似的目的，现在仍然如此。其他强国也把小国看作他们的仆从国。其他强国也试图用武力保卫他们的重大利益。在国际事务中，希特勒除了是一个德国人之外，他没有什么过错。”\n　　</p>\n<p>【附录】</p>\n<p>希特勒演讲：为日耳曼民族而战</p>\n<p>（作者:希特勒 ）</p>\n<p>　　“今天，我们站在这里！站在德国人的土地上！站在柏林，这块我们祖先用鲜血和尊严浇灌的土地上！我的身后，是安德烈.柯里昂的雕像！他是全世界公认的自由斗士！他是全世界的光！”</p>\n<p>“我的面前，站着的是一个民族，一个在屈辱中呻吟的民族！”“那场战争结束之后，我们这个民族的骄傲就没有了！那些战胜者们骑在我们的脖子上作威作福，他们随意践踏我们的尊严，一个欧洲大陆上最高贵的民族地尊严！你们告诉我，你们是选择像本杰明.马丁一样去做一个自由的斗士，还是一个奴隶？！”</p>\n<p>“你们或许要说：希特勒先生，我需要一个工作，一块面包。是地。你的说法很对，生命实在是太重要了。但是我要告诉你们。这世界上还有一种东西比生命更重要，那是自由！那就是尊严！”</p>\n<p>“只要阿尔萨斯和洛林上空一日还飘扬着法国的国旗，我们的尊严就不存在！只要那些法国人、英国人在我们的国土上横行霸道，我们地尊严就不存在！只要在欧洲的版图上，这个叫德国的国家四分五裂积弱不堪。我们地尊严就不存在！只要其他国家的人，在聊天的时候说到德国这个字眼的时候会发出一声轻蔑的笑声，我们的尊严就不存在！”</p>\n<p>“我们需要的，不是一块面包！而是一个生存空间！一个民族的生存空间！这生存空间，不是靠乞求和抗议来实现的，而是靠铁和血来实现的！”</p>\n<p>“别人欺辱我们，哪怕是最弱小的民族也来践踏我们，我们只会叫着：我们表示强烈的愤慨和抗议，这样的人。是没有骨头的！这样的人，是低贱的！我们应该用大炮地震耳欲聋声让敌人颤抖！我们应该碾压他们的尊严、生命，让他们知道我们不是一群只知道抗议的懦夫！”</p>\n<p>“你们要记住，一个只懂得抗议的国家，是一个没有骨头的国家！一个只懂得抗议的政丶府，是一个没有骨头的政丶府！当我们地尊严、领土、生存地空间都遭受践踏的时候，还不知羞耻地抗议地政丶府，我们是不需要的！你们最后也会抛弃它们的！”</p>\n<p>“我很骄傲，在你们这些人中。这样没有骨头的人，少之又少！我的面前，是一个留着千年不屈血液的军团！这血液，曾经在我们祖先的血管里面流淌过，他们没有屈服过！现在，它们在我们的身体里面汩汩奔涌，你们告诉我。你们愿意它冷却吗！？”</p>\n<p>“能够团结人们的。有两件东西：共同的理想和共同的犯罪。我们有雕刻在德意志旗帜上面的伟大理想，我们会为这理想流尽我们的最后一滴血！在今天的柏林。没有任何东西能够拯救我们的祖国，只有这理想！凡尔赛条约，是一个极大的耻辱！我们有拒绝执行它的决心和理由！做你们想做的吧！就像本杰明.马丁拿起枪，就像他带领着他的同胞们高举着那面自由的大旗英勇杀敌一样！假如你们期望战斗，那就去战斗吧！然后我就能够看到你们是七千万奴隶还是七千万坚贞不屈的日耳曼人！”</p>\n<p>“如果有那么一天，我，阿道夫.希特勒，也会想本杰明.马丁那样，举着属于我们德意志的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些德意志的荣耀的祖先们，我可以昂着头颅走到伟大的腓特烈大帝跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的德意志流尽了最后一滴血！”</p>\n<p>“我们不为奴役而战！我们为自由而战！我们不是机器，不是牛马，我们是人！是从来没有屈服过的日耳曼人！”</p>\n<p>“我们以自由的名义团结起来！为一个新的、公平的世界而战！我们为人人有工作而战！为那些奴役我们的人滚出德国人的土地而战！为我们不需要整天喊着抗议而战！为我们的尊严而战！为我们的诺言而战！”</p>\n<p>“为解放这个国家而战！日耳曼人，我们为我们的祖先的荣耀而战！为我们的子孙后代能够骄傲地宣传：我们是从来不屈服的日耳曼人而战！”</p>\n<p>“我的同胞们，德国和德国人民万岁！自由，万岁!”</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"金融之王\"><a href=\"#金融之王\" class=\"headerlink\" title=\"金融之王\"></a>金融之王</h4><h5 id=\"第三帝国的兴起与第二次大战的起源\"><a href=\"#第三帝国的兴起与第二次大战的起源\" class=\"headerlink\" title=\"第三帝国的兴起与第二次大战的起源\"></a>第三帝国的兴起与第二次大战的起源</h5><h6 id=\"希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\"><a href=\"#希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\" class=\"headerlink\" title=\"希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。\"></a>希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。</h6><p>   为了对抗一个共同的敌人而缔结的战争同盟，总是注定了会短命的，因为一旦这个敌人被击败了之后，同盟的重心也就随之而毁灭了。很少有理由可以假定赢得第一次世界大战的英美法三国之间的协约，能够比勒班陀海战以后的神圣同盟或是滑铁卢之战以后的战胜国会议支持更长久的时间。但是与后者作一个比较，则不免具有一个极大的差异：当拿破仑最后失败之后，差不多在一百年的时间当中，“不列颠的和平”始终能在欧洲诸国之间，维持着一个权力平衡的局势。到了第一次大战爆发，这种局势才被破坏了。此后由于美国的参战，于是国际联盟就开始代替了“不列颠的和平”。可是这个工具的设计却完全文不对题，它既不能取消一切足以引起战争的原因，复不能重建一个权力平衡的局势。它硬性的要世界接受一种和平路线，这条路线与历史、地理和经济三方面都是不符合的。国际联盟的毛病是陈义过高，只有空谈，而无实力。所以结果不但不能有益于世界和平的维护，反而更增加了摩擦和冲突的机会。于是终于有“暴君”出现了，他们出现了，他们向它挑战并利用其无能的弱点。<br>　　在这些权力的艺术家之中，有两个人——墨索里尼和希特勒——是具有一种新的哲学思想。他们敢向经济人（Economic Man）的神话挑战，这是资本主义、社会主义和共产主义的共同基本因素，而想把“英雄人”（Heroic Man）的神话来代替它。有一位著名的法国军人昆顿（Rene Quinton），在他所著的《军人的圣经》一书中，对于此种神话曾经有明白的解释。<br>　　“所谓英雄就是一个为旁人而忘记了他自己的人。天之所以生出英雄来，不是为了生活而是为了服务。英雄是与凡人不同的，因为他的生活是具有神意的。战争把人类已经所丧失了的宗教又带回来了。生命的安全足以使神意失效，反之若不惜一死，则人也可以拯救世界的生命。人类的建立者不是人而是思想。”<br>　　从希特勒眼中看来，国际资本主义和马克思主义是完全一样的东西。他认为他们都缺乏牺牲精神，是违反自然的，足以毁灭人类。所以他提出了他的教条，“一个民族，一个国家，一个领袖”。一方面相信雅利安人和条顿族是优秀的，另一方面又对于犹太人表示激烈的仇恨，在他的圣经《我的奋斗》（Mein Kamf）一书中，可以看出来他的思想是与昆顿的理论极为接近：<br>　　“人们不肯为事业而死，但却肯为理想而死。要生存的人却必须要战斗。在这个世界上，凡是不想战斗的人也就没有生存的权利，因为在这个世界上，生活的法律即为永远的斗争。为了恢复日尔曼的权力，你们不应询问：“我们怎样的制造武器？”而应询问：“我们怎样的培养一种精神，使这个民族能够负起武器来？”雅利安人的伟大，其基础并不是他的智力，而是他愿意牺牲一切以来为团体服务的意志。这种心理态度足以强迫私利退后，而让公义出头。这也是任何种类的真正人类文明的第一先决条件。追寻一己私利的人是不值得一顾的，而牺牲自己幸福的英雄则值得歌颂。”<br>　　德鲁克（P．F．Druber）在其所著的《经济人的结束》一书中，对于这种教条曾经有极精辟的批评：<br>　　 “若认为极权主义中的这种号召牺牲的理想，只是一种伪善、自欺之谈或是宣传高调，那才是大错而特错。它是从失望的深渊中长成出来的。正和一八八〇年虚无主义在俄国的流行一样，它可以吸引最高贵的和最勇敢的青年人，今天在德国和意大利的情形也是一样。这些战后一代中的优秀份子拒绝与这个现有的世界妥协，他们觉得这个世界既无值得一死的真正价值，而又无值得一活的活跃思想。”<br>　　除非对于这两种神话——经济人与英雄人——的斗争有所了解，否则对于一九三九年的浩劫也许就无法了解，而会认为这完全是天命了。<br>　　希特勒的父母为奥国人，一八八九年四月二十日，出生于莱茵河上的布劳瑙（Braunau）。当一九一四年第一次大战爆发时，他投入了巴伐里亚第十六步兵团当兵。在所有的新兵中，也许更没有第二个人会像他这样的合于“彻底的无产阶级”的资格。凭着军功，他获得了不少的勋奖，可是说也奇怪，他的阶级却始终只升到了下士为止。<br>　　当一九一八年十一月十一日，德军在康宾森林中投降时，希特勒下士正睡在医院中，他因为受了毒气伤，眼睛已经半瞎了。谁也不会预料到将来有一天，这个默默无名的小兵，会在同一个地点接受法军的投降，并且把他的卍字旗从大西洋插到了伏尔加河上。<br>　　这是什么力量使他能有如此的成就呢？一方面是由于他具有政治天才和特殊的领导能力，但是另一方面，比较最重要的，却是他自信是受了神的指示，来领导日尔曼人民走上复兴的道路。他是一个中了“神毒”的人，他相信散布不公正种子的人，应自食其恶果。<br>　　使他着了魔的即为凡尔赛条约，它与威尔逊十四点的精神是完全不符合。一九二三年，潘卡里侵入鲁尔地区，破坏了德国的币制，扫灭了德国的中等阶级。在一九二四年到了一九三〇年之间，德国的外债增到了七亿五千万镑，使德国人民感到民不聊生。最后美国证券交易的总崩溃，更使一九二九年到一九三一年之间，全世界上都发生了金融上的不景气。<br>　　在一九三〇年，德国人民仰赖政府救济生活的共一千七百五十万人，在一九三一年，共产党的选票增到了五百万张以上。在那一年，有一位美国记者尼克波克（H．R．Knickerbocker）在他所著的《德国——法西斯乎？苏维埃乎？》一书中，估计至少有一千五百万德国人是不能完全吃饱的，选民中有三分之二是仇视资本主义的，而过半数以上是反对现有号称“民主”的政治制度的。次年，希特勒即在这个局面之下获得了胜利。诚如他自己所形容的，在一九一九年，他简直不能算是一个人，当时他加入了一个不知名的政治组织。这个组织自称为“日尔曼劳动党”，一共只有六个党员，他就做了第七名党员。一九三二年，这个党改名为“国家社会日尔曼劳动者党”（National Socialist German Worker’s Party），在七月间的大选中从三干六百万张的选票中，他一共获得了一三、七七九、〇一七张之多。一九三三年一月三十日，德国总统兴登堡命令他以最大政党的领袖身份，出任德国总理并组织一个政府。一年之后，在六月三十日那一天，希特勒开始清党，用一连串的暗杀手段，把异己份子杀死数百人。最后到了八月二日，兴登堡元帅逝世，于是他就取消了总统制，而且任德国人民的元首。<br>　　除非是亲眼目击的人，否则对于希特勒的勃兴，简直会认为是一个难以置信的神话。早在一九三四年，当赫斯（Rudoff Hess）代表全体纳粹党人向希特勒效忠时，其所说的话从麦克风中传到了每一个德国人的耳朵里，在他们的内心中引起了共鸣。<br>　　“这个宣誓使我们把生命寄托在一个人的身上。照我们所相信的，这个人是替天行道的。不要用你们的头脑去寻找希特勒，他是存在于你们的心灵之中。希特勒就是日尔曼，日尔曼就是希特勒。日尔曼就是我们在地球上的上帝。”<br>　　尽管他的敌人曾经宣称这个非常的人物，是一个魔鬼，是一个疯人，但是我们却决不能轻视事实——他曾经扑灭了在德国境内的布尔什维克主义和完成了许多惊人的伟大事业。实际上这个人是具有二重人格的，一方面他也是一个正常的人，另一方面他却是一位“真神”。假使不是如此，则有许多事实就都会无法解释。劳合－乔治总要算是一个智慧超群的人，当他在一九三六年访问过希特勒之后，回到英国时曾经发表他的观感说：“我从来不曾看见过比德国人更快乐的民族。在我所遇见过的许多伟大人物之中，希特勒要算是最伟大的一个。”邱吉尔也曾经说过：“假使我们的国家若是失败了，我希望也能找到这样一个领袖来恢复我们的勇气，和领导我们回到与各国平等的地位。”<br>　　希特勒的目标是拿破仑式的：在德国控制之下，建立一个日尔曼大陆体系。同时，他的手段也与那位大皇帝的相差不远：把德国从国际性资本主义的枷锁之下解放出来，联合所有的日尔曼民族共同组成一个第三帝国，在东欧建立一个所谓“生存空间”。他认为这对于德国的经济安全是有必要性的，正好像拿破仑认为莱茵联邦对于法国的战略安全是有必要性的一样。<br>　　希特勒认为只要国际货币制度还是以黄金为本位的，则一个能够垄断黄金的国家，即可以使缺乏黄金的国家屈服于其意志之下。这个手段就是吸干其外汇的来源，迫使他们必须借债以来维持生产。他的理论是说：“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才又能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义。”所以他决定：（一）拒绝接受国外的借款，以生产为德国货币的基础，而不以黄金为本位。（二）用直接易货的方式以来获得输入品，必要时并补助输出。（三）停止所谓“外汇的自由”——即准许在货币方面实行赌博，并依照政冶情况，把私有的财产由此国移到彼国。（四）当有了可以工作的人力和物资时，就制造货币而不向国外借债。<br>　　因为当时国际金融的生命，就是寄托在向经济困难的国家放债营利的行为之上。所以希特勒的政策简直是切断了它的生命线。假使若是准许他成功了，则其他诸国势必都会起而效尤。若是所有缺乏黄金的国家，都纷纷实行以货易货的办法，则不仅无人借款了，而且黄金也就丧失了它的权力，所有的放债者都只好关店了。<br>　　这支财政性的手枪，尤其是直指在美国的身上，因为它是世界上黄金的主要供给者，而且它的大量生产制度使其必须输出其产品的百分之十来避免失业的危机。此外，又因为希特勒对于犹太人采取野蛮的虐待政策，所以当然得罪了美国的犹太籍的金融界巨子。当希特勒做了德国首揆后还不过六个月，纽约的一位富翁乌特梅耶（Samuel Untermyer）就开始向他挑战了。他主张向纳粹主义展开“圣战”，呼吁对于德国的货物，商船和劳务，都采取经济上的杯葛主义。美国的国务卿赫尔（Corded Hull），也依照一九三四年的贸易协定法案，坚持的主张美国的国外贸易决不能因为外汇管制，政策专卖和易货制度而受到任何的损害。<br>　　从一九三三年到一九三六年之间，希特勒已经使德国的失业人数由六百万人减到一百万人，繁荣与复兴的程度简直使英国人感到害怕。据说在一九三六年，邱吉尔也正像一九〇七年的巴福尔一样，他曾经告诉美国的伍德将军（Gem R．E．Wood）说：“德国是已经变得太强了，我们必须把它击碎”。到了一九三七年九月间，美国又开始发生了一个新的大萧条，其扩展的速度也是非常的惊人。十月十九日，证券市场完全崩溃了，到了十一月间，据调查全部失业人数已达一千一百万之多，另外还有部份失业人数五百五十万。对于这种困难的国内情况，必须要设法分散人民的注意力，尤其是总统大选又已经迫在眉睫了。所以在十月五日，罗斯福总统发表其著名的“检疫演讲词”（Quarantine Speech）。他痛斥现有的恐怖性统治，认为人类文明的基础已经受到严重的威胁，并且呼吁美国人不要幻想以为美国可以幸免，西半球可以不受到攻击。最后提出建议说，增强道义标准的最容易措施，即莫过于对侵略者实行国际性的防疫隔离。不久之后，这个主要的侵略者也被指明了出来。巴鲁赫（Bernord Baruch）曾经向马歇尔将军（Gen. G. C Marshall）说：“我们应该把希特勒这个家伙打倒，不让他的那个玩意儿成功。”什么玩意儿？可能他所指的就是希特勒的易货制度。因为在一九三九年九月间，巴鲁赫曾经把他与美国总统会谈的结论，公开发表如下：“假使我们能够把价格压低，则并无理由说我们就不能够把主顾们争取回来，因为战争的缘故，敌国必须放弃他们的主顾。于是德国人的易货制度就会归于毁灭了。”<br>　　在不列颠，对于易货制度也同样的展开了猛烈的攻击。一九三九年三月九日，驻伦敦的波兰大使报告他的政府说：英国的海外贸易部长哈德逊（R．S．Hudson）曾经向他说过：“不列颠政府决定不放弃在欧洲的任何那一个市场，也决不放弃其经济上的优势以来使德国坐享其利。今天我们正在经济领域之内进行谈判，来摧毁德国人的易货制度。”这个经济战争是已经激烈到如此的程度，所以舍伍德（R.E. Sherwood）在其所编的《霍普金斯白宫文件》一书中，曾经有过下述的一段记录：一九三九年四月间，美国大使馆中驻柏林的代理武官向华盛顿当局报告着说：“目前的情况是已经十分的明显，德国是已经在积极的进行一个战争。这是德国为了其生死存亡而作的经济战争。德国的货物必须要有市场，否则就只好坐以待毙，而德国当然不愿意死亡。”<br>　　当我们考虑到第二次大战的经济原因时，内心里必须要记着，也和第一次大战一样，这种两个不同经济制度之间的斗争是无所谓是非善恶的，而只是具有生存的价值。资本主义为了维持其优势而战，与希特勒为了其易货制度而战，在善恶上来说是没有什么高下之分的。对于他们而言，这都是存亡之所系，这都是贸易竞争的产品——也是工业革命的后果。</p>\n<p>前奏：上帝保佑打败仗的人民　　　　<br>二十世纪二十年代初，一战硝烟远去未久，古老的德国笼罩在一片几乎毫无希望的风雨凄迷中。人们尚未来得及摆脱战败的沮丧和羞辱，严峻的生计问题就紧逼了上来。德国在战争中丧失了总人口的10％和将近七分之一的土地，换来的是每年1320亿金马克的赔款，相当于1921年德国商品出口总值的四分之一。德国拿不出这笔钱，法国就伙着比利时波兰，毫不客气地进占了德国经济命脉鲁尔工业区，是为“鲁尔危机”。正倒着霉的时候，你往往想不到有一天还能更加倒霉，于是手忙脚乱的政府采取了千古不变的饮鸩止渴老办法：增发纸币。　　　　<br>真正的灾难开始了。随着印刷机全速开动，1921年1月31日，世界金融史上前所未有的恶性通货膨胀，如同张开翅膀的死神，扑向了已经奄奄一息的德国经济。美元与马克的比率从1921年1月的1：64，到1923年11月已经崩溃为1：4,200,000,000,000。如此骇人的程度，即使到今天，也只有1946年的墨西哥和1949年的中国可以相提并论（顺便说一下，到目前为止中国还保持着这项领先记录）。　　　　<br>到了这个地步，德国的日常生活可想而知。薪水得按天给，要不然到了月末你会发现本来买面包的钱只能买面包渣了。发工资前大家都要活动一下腿脚，准备好起跑姿势，钱一到手，立刻拿出百米冲刺的激情和速度——冲向市场与杂货店。腿脚慢点的，往往就难以买到足够的生活必需品。农产品和工业品生产都在急遽萎缩，市面上商品短缺，唯一不缺的就是钱，纸钱！没有购买力的纸币像没有生殖力的性器官，叫人想着就伤心，孩子们在街上大捆大捆地拿它们堆房子玩。1923年《每日快报》上刊登过一则轶事：一对老夫妇金婚之喜，市政府发来贺信，通知他们将按照普鲁士风俗得到一笔礼金。第二天，市长带着一众随从隆重而来，庄严地以国家名义赠给他们1,000,000,000,000马克——或者半个便士。　　　　<br>对于德国的悲惨境地，它一战中的对手们反应并不一致。老对头法国自然是盼着这个强邻兼宿敌越倒霉越好，在赔款问题上咬紧牙关毫不让步；苏联因为社会制度被西方排除在战后的“凡尔赛——华盛顿体系”之外，割地赔款全没它的份，又刚刚跟波兰打了一场败仗，希望借助德国的先进军事经验，1922年开始就与德国秘密合作（结果是搬起石头砸了自己20年后的脚）；英国秉承一贯的老奸巨猾，继续“均衡势力”品牌之大陆政策，不希望德国过分削弱而使法国坐大。小国家们有的内部爆发民族革命自顾不暇，有的在老大中间小心翼翼找个位置坐下观看演出，有机会也诈点汤喝喝。　　<br>战败者付出代价，古来皆然。历史上没事就打来打去的欧洲，利益变幻翻云覆雨，沾亲带故反目成仇，一千多年下来戏码反复，不过如此。　　　　<br>然而，这次的确有点不同。　　　　<br>现在的人们讨论一战远远没有二战兴趣浓厚，但是事实上，今天国际关系和文明准则的基础，大部分是由一战奠定的，某种意义上来说，第一次世界大战真正摧毁了传统世界的根基，而二战是一战遗留矛盾的延续和清算。如果说从前欧洲的战争是国王和贵族的战争，那么一战就是第一次现代意义上国家之间的战争，从它的政治根源、战争动员、兵役体制和战后安排上，无不体现出鲜明的现代国家主义特点。不管主动还是被动，战争成为全民对国家的事务的参与，惩罚也成为有理论依据的全民责任。这样，每个人难免要反思一下，打了这个仗，对每个人来说意味着什么？　　　　<br>另外，通过一战，人类在自相残杀方面的创造力表现得没有最强，只有更强。在凡尔登的绞肉机和索姆河的坦克面前，19世纪天真的乐观情绪，对主流古典人文主义的自信土崩瓦解了。新的思潮纷纷登上舞台，直截了当，冷酷无情，与这个铁血强权的时代宾主相得一拍即合。　　　　潘多拉的盒子打开了，古老的欧洲现在到处都是打碎的坛坛罐罐，德国的巴掌挨得最响亮，然而他们要报复的并不仅仅是从普鲁士时代延续下来的那些敌人们。在这个产生过无数哲学巨人的民族，思考活动一向壮丽而可怖，短暂的痛苦过后，将化身为钢铁的洪流，无论说它邪恶还是野蛮，它是从我们自以为是的文明中生长出来的，让我们前所未闻，目瞪口呆。　　　　<br>完成这个过程，它需要的只有一种力量：金钱。　　</p>\n<p>二、帝国银行里的华尔街精英　　　　<br>1923年11月，德国发生了两桩对历史有深远影响的事件。　　<br>第一件是阿道夫?希特勒发动了以失败告终的慕尼黑啤酒馆政变。尽管此前他爱国愤青的风头一时无贰，甚至原陆军总司令、德高望重的鲁登道夫将军都稀里糊涂地被拉上了他的检阅台；在德国普通人眼里，恐怕这位热血沸腾的老兄当时也和一个比较抢镜的行为艺术家差不了多少。在这个动荡不安的年代，又何尝缺乏大胆冒险的事件，和昙花一现的赌徒呢？于是未来的元首只好郁闷地在监狱里写他的奋斗。比较有趣的是，希特勒提到了他对通货膨胀及其原因的看法。　　　　<br>“政府镇定沉着地继续印发这些废纸,因为,如果停止印发的话,政府就完蛋了，因为一旦印刷机停止转动——而这是稳定马克的先决条件——骗局马上就会暴露在光天化日之下。??????如果受惊的人民注意到,他们即使有几十亿马克,也只有挨饿的份儿，那他们一定会作出这个结论:我们不能再听命于一个建筑在骗人的多数决定的玩意儿上面的国家了：我们需要独裁 “ (转引自威廉?夏伊勒《第三帝国的兴亡》)　　　　<br>从这段有意思的话里头，我们能够看到古往今来煽动艺术的精髓。凭心而论，希特勒确实颇有几分洞察力，他看出马克的疯狂贬值被有意利用来应对外债（赔款是用马克计算的），政府也的确难辞其咎，然而由此得出结论——“民主不如独裁”，就莫名其妙了。而煽动的诀窍偏偏就在于此，观点必须震撼，论据必须彪悍——那么从论据到论点到底是什么逻辑，基本上就没多少人注意了。不信你翻翻文革的大字报，保证有所印证。　　　　<br>差不多同时发生的第二件事，可要比那位退役下士的表现吸引力大多了。甚至可以说，停战以来，德国人民第一次听见了好消息。　　</p>\n<p>持续将近三年的恶性通胀，在1923年底开始得到缓解和控制。　　　　<br>历史学家们将这个功绩与1923年11月的一个任命联系起来：46岁的德意志帝国银行董事亚尔马-霍雷斯-格里雷-沙赫特被任命为国家货币流通专员。<br>　　沙赫特1877年1月生于特因利夫（原属德国，现属丹麦），父亲是德裔美国公民，母亲是丹麦裔。他的父亲为纽约公平信托公司工作了将近30年，亚尔马之所以在德国而不是美国出生，只是因为他母亲当时患病必须全家回德国治疗。和今天的众多移民一样，老沙赫特觉得美国的月亮特别圆，为了聊表对第二祖国的热爱之情，居然把一位美国反蓄奴制政治家的名字放进了儿子的姓名中间，这就是他奇怪的中间名的来由。在日耳曼的命名方法里，中间名本应是父名和祖父名，这个独特的做法如同一个奇异的预言，在他的一生中深深刻下了难以磨灭的美国印记。<br>　　小亚尔马聪明而勤奋，具有德意志历史上那些百科全书式学者的天资气质，他先后专门学习过医学、哲学和政治科学，年仅22岁就得到了经济学博士头衔。年轻的沙赫特博士秉承父业，进入德雷斯顿银行。他本人出众的能力加上老头子在金融界广泛的人际关系，沙赫特一帆风顺，很快成为引起关注的金融精英。1916年，他成为德国国家银行的董事之一。1923年，沙赫特临危受命，拯救灾难中的德国货币流通体系。　　<br>货币崩溃的根源在于沉重的赔款负担，沙赫特当然清楚，一切金融改革的举措如果不解决好这个问题，只会引发更可怕的动荡。他上任之后，立刻从两个方面齐头并进：一边寻求外国金融资本的支持，一边改革货币，用新的地产抵押马克（Rentenmark）取代极度滥发的旧马克。　　那么该向谁寻求帮助呢？哪个国家有能力又有意愿帮助德国呢？欧洲的邻居和对手们要么心怀叵测，要么自己也穷得够呛，沙赫特也根本不指望它们，他的目光越过浩瀚的大西洋，精准地投向了自己的精神故乡——美国。　　　　<br>一次大战最重要的后果，既不是霍亨斯陶格、哈布斯堡、罗曼诺夫三大欧洲王室的垮台，也不是共产主义革命的兴起，而是美国作为国际经济政治关系中最强有力，甚至决定性的一端，羽翼丰满，开始闪亮登场。巴黎和会和国际联盟提供了它的出场秀，然而要真正深化美国对世界的控制能力，向欧洲大陆的经济渗透是一个重要途径。德国伸过来的求援之手，与华尔街的金色魔杖正好一拍即合。　　　　<br>二十年代的华尔街，宛如现实版的迪斯尼乐园，不断在狂欢的气氛中迎来繁荣奇迹，几大主要银行财团积累下来的资本迫切要向外扩张。马克思曾有言道，300%的利润下资本就敢冒上绞架的危险，绞架尚且不怕，何况区区一个德国。1924年，以美国银行的查尔斯道斯为首的委员会推出了“道斯计划”，1924-1928年内总计8亿美元贷款流向德国，帮助它偿还凡尔赛条约的赔款，利息收益直接投资于德国市场。同时，国联调停法比两国撤军，接管鲁尔工业区。　　<br>时来天地皆同力，沙赫特一旦心中有底，立刻果断地行动起来，用国家银行黄金储备为基础的新马克，以一比三十亿的悬殊比率兑换旧马克，到1924年8月这个过程基本完成，马克汇率开始在国际市场上稳定下来，国际投机者逐渐停止了对它的攻击。折磨德国的漫长通货膨胀结束了，乱云犹飞，千山已渡，沙赫特经此一役，证明自己不愧为金融奇才！　　　　</p>\n<p>1928年，沙赫特率领德国国家银行代表团，与美国为首的国联赔款委员会谈判签订了“杨计划”，它是道斯计划的延续，德国每年只要付赔款额的1/3，剩下的部分可以推迟。1929年世界经济危机爆发之后，胡佛总统干脆提议暂停德国赔款的90%。等到1933年纳粹上台，就压根一分钱都不给了<br>　　道斯计划和杨计划背后，都站着华尔街金融巨鳄J?P?摩根的庞大身影。道斯计划，据美国乔治华盛顿大学国际关系教授卡罗尔?奎格雷的研究结果，“很大程度上是一个J?P?摩根产物”，而杨计划的这位“杨”——Owen Young，直接就是J?P?摩根派出的代表。这两个计划最大程度保证了美国金融资本的利益，在1934年分业法案之前，像摩根这种巨无霸的金融恐龙一手控制信贷，一手承销证券，去了德国的贷款在华尔街发行成债券，巨额佣金收入滚滚而来，像金雨一样幸福地淋在华尔街精英高贵的脑袋上。　　　　<br>然而，道斯和杨计划的另一个结果，却是双方始料未及的。那就是“迅雷不及掩耳盗铃之势”的美国资本赤裸裸占领了德国实业界，将德国私人资本严重排挤出去。一方面，德国中小企业破产，实业资本流失，造成了大面积失业，刚刚稳定的经济又面对考验，大家伙出得狼窝入虎穴，使纳粹的蛊惑宣传有了民意基础；另一方面，美国资本集中在电力、钢铁、化工几个大的行业中，大展拳脚滚雪球，恰恰是这里生长出的垄断寡头，为希特勒的竞选活动提供了主要资助，进而为他发动的战争承担经济支持。　　　　<br>从沙赫特其人来看，他与华尔街的渊源明显而深刻，他父亲就职的纽约公平信托公司就是被摩根财团控股的。早在1905年，他随同德累斯顿银行董事会访美时，就会晤过J?P?摩根本人。他英语说得比德语都流利，以至于几十年后对他的审判是采用英德双语进行的。从广义上讲，沙赫特是以华尔街为代表的国际金融精英圈子里的一分子，一个“大人物”。资本没有国家之界，只有利益之别，资本家何尝不是一样？纽伦堡法庭上，只有三个被告指控没有成立，当庭释放，当过纳粹财政部长和中央银行首脑，为整个战争筹集资金的沙赫特就是其中之一，苏联代表尖刻地指责“资本家永远不会受惩罚”，此言未必正确，但西方对他偏袒却是毋庸置疑的明显。　　　　<br>然而，成为沟通华尔街金融集团和纳粹德国核心圈子的关键人物，20年代离沙赫特尚颇遥远，就是说起来都匪夷所思。那个粗俗的流浪汉出身，政变未遂的小头目？大概他连帝国银行的门往哪儿开都没搞清呢，在这些衣冠楚楚手握经济命脉的绅士们中间，谁会给他一个正眼呢？然而历史的魅力就在于此，昨日言犹在耳，今朝沧海桑田；聚光灯下，王子与贫儿的游戏不断被命运慷慨刷新，只不过每次付出代价的，永远都是黑暗里的芸芸众生。</p>\n<p>三．资助希特勒的工业寡头们　　　　<br>国王死了，国王万岁。此时一战勇士穷途潦倒，二战豪杰尚未登上舞台，灯光下活跃的是一批当代英雄。德国需要钱，华尔街需要能赚更多钱的钱。货币和货币的交流没有语言文化制度历史种种障碍，是世界上最亲密无间直截了当的尔虞我诈。　　　　<br>1924年到1933年，在道斯计划和杨计划之下，通过华尔街的国际财团经手流入德国的贷款总额为330亿马克，其中的最大三笔款项，分别建立和帮助了三家大工业卡特尔。　　　　<br>“卡特尔”这种垄断形式最早就源于德国，词根也是德语，指的是把小生产厂家由统一定价限量的协议联合起来，控制某一种行业的整个市场，比方说OPEC组织就是一个卡特尔。卡特尔的特点是简单有效，缺点是不够稳定，每人都有破坏协议的动机。但是在德国这种持重守信的地方比较合适，它从汉撒同盟时期开始就有一个悠久的信用传统，背信弃义的事不太流行。美国的资本进来之后，很快就看中了这种垄断形式。银行家们的操纵方法很简单，控股其中最强的一个或几个企业，让它们在一两种基本产品上占绝对优势，进而控制整个卡特尔。　　<br>这三家卡特尔分别是德国通用电力（A.E.G），联合钢铁，I.G.法本，它们分别控制了电力、钢铁和化工行业，把握了德国的工业命脉。到1937年，联合钢铁和IG法本生产的爆炸物加起来占全国总量的95％，著名的克虏伯军火公司也在它们控制之下。这个不仅得益于美国贷款，还有美国的技术。美国的投资者直接进了它们的董事会，顺便说一句，战后他们都没有因为给希特勒的政治献金受到审问。<br>　　这三个卡特尔的美国债主子和经手人皆为华尔街银行中最显贵的名字——迪隆&amp;里德（Dillon Read）; 哈里斯福布斯（Harris，Forbes）；国家城市公司（national city）　　公平信托（Equitable trust）……　　　　<br>美国资本促进了德国工业的迅速卡特尔化，除了上一节提到的，为希特勒上台提供了经济环境和金钱资助之外，这个结果本身也被上台后的纳粹当作宝贵遗产和大好经验继承下来。纳粹的经济政策很重要的一部分就是在工业界大搞卡特尔，用巨额订单喂养它们，整合出几个高效又听话的巨型战争齿轮来，纳粹党人可从来不是自由市场经济的Fans。<br>　　　　<br>这是后话，目前还轮不到希特勒说三道四。中学政治课本告诉我们，垄断资本家阶级挑选了代理人某某，旁边还常给配个图：一个大腹便便穿燕尾服的和一个干瘪猴瘦戴礼帽的，俩家伙正在弹冠相庆。话倒没说错，不过和没说差不多，反正我感兴趣的是某某怎样被招聘录用为资本家代理人的，这种好事怎么才能赶上哪。　　　　<br>希特勒也不是个第一眼帅哥，开始没人觉得他能成气候。当时德国政坛风起云涌，政党林立，国会席位非常分散，导致的直接结果就是投票难以出现优势多数，几个党联盟起来可以有简单多数，但是中间一出个反水的，马上优势就没了，这种状况正好给小党派提供了砝码，在分裂和混乱中找到机会出头。<br>　　1930年，希特勒赢得了选举中的第一次胜利，取得107席，成为德国议会第二大党。这个胜利令人吃惊，也来之不易，1928年国家社会主义工人党才只有可怜的12席，但是毛主席说得好，世上事怕就怕认真二字。</p>\n<p>   希特勒全国奔波，四处演讲(参看附录)，外加到处赠送他的大作《我的奋斗》，功夫不负苦心人，渐渐他的周围也聚集了一些有头有脸的人物，包括他的早期资助者。上面提到过的卡特尔——“联合钢铁”老板弗里茨?蒂森，以及鲁尔煤矿大王埃米尔?寇道夫。这些工业家之所以靠近希特勒，是因为他强烈支持禁止罢工和工会活动。　　<br>老鼠和猫，钱和选票，一样都不能少。希特勒转身讨好工人用的许诺是消灭失业，提高福利。这个诺言当时听来格外动人，因为1929年从美国开始，席卷世界的经济危机爆发了。　　<br>经过6年的资本输出，现在德国总共欠了美国70多亿美元，整个国民经济高度依赖美资。华尔街一崩溃，银行出现挤兑，开始从国外急调资金回国，多米诺骨牌效应立刻把德国拉进了深渊，生产收缩，失业率骤增。那边凡尔赛赔款还没完呢，杨计划规定每年必还的那三分之一，是用商品消费税保证的，结果结结实实转嫁在了民众身上。末世而妖言用，本来希特勒的极右翼主张在主流社会总是被当作笑柄，现在却有不少人真的追随他了，希特勒的煽动迷人之处在于简单直接——不还钱！赔款和债务是由这些外国资本家、犹太佬和卖国贼造成的，老百姓凭什么负责。　　　　<br>然而，听得热血冲脑，怒发冲冠的人们哪里想到，希特勒这时正在紧锣密鼓地想办法扩大外国资本对他的支持。仿佛命运在冥冥之中的安排，正在他选举胜利的前几个月，亚尔马?沙赫特博士从德国国家银行主席的职位上辞职了。　　　　<br>沙赫特辞职和杨计划后续谈判中与政府的摩擦有关，他对政府作出的一些新让步十分不满，在没有通知政府的情况下，他给J-P-摩根写了一封信威胁要退出巴塞尔的国际清算银行。这封信在美国报纸上发表后，德国政府大为震惊和丢脸，财政部长公开和他闹翻了，在兴登堡总统的压力下，沙赫特愤然辞职。　　<br>这次离职对沙赫特的影响是微妙的，首先深觉羞辱，他是第一个没到任期就被赶下台的帝国银行主席；同时也委屈和愤怒，且不说当年力挽狂澜拯救通胀的功劳，就是这两年领着谈判队伍，寸土必争一条一条争取到的利益被政府漠视，也让他觉得寒心。他离职后马上去了美国，应邀在各大学里演讲，会见各界名流尤其是华尔街的同事，抨击凡尔赛条约，鼓吹德国经济复兴。就在这次旅途上，沙赫特读到了《我的奋斗》。　　尽管他评价希特勒的文笔在糟踏德语，但是对里面表达的观点却心中一动。软弱无能的魏玛政府不再让他寄托希望了，那么换一剂猛药如何？　　<br>1930年底，沙赫特会见了纳粹党二号人物戈林，31年初，沙赫特与希特勒见面了。</p>\n<p>　　沙赫特对未来元首的感觉还不错，希特勒在这次会晤中表现得“真诚而谦虚”，他的自信和敢于行动的决心给沙赫特留下了很深印象，滔滔不绝的口才也名不虚传。沙赫特显得很有兴趣地听着，然后给了个小小建议，推荐一位金融记者瓦尔特?丰克给希特勒讲授一些基本的经济学知识（此人后来接替沙赫特担任纳粹经济部长）。我看沙赫特回忆录写到这里，想象博士忍耐着这位对经济学一窍不通还特别能侃的主儿，顿觉情景可笑。沙赫特是何等阅人无数老奸巨滑的人物，怎么会被希特勒那套古怪混乱的理论忽悠了去呢？　　</p>\n<p>答案似乎出现了一点影子，1931年春天，沙赫特会见希特勒的新闻在金融家圈子里不胫而走，人们猜测他政治上向右转的同时，还大胆预测他要借助纳粹的力量竞选下一任德国总统。沙赫特自己的话也加剧了这种猜测，当他的朋友、一位美国女记者问他会不会帮助纳粹统治德国经济之时，沙赫特回答“不，纳粹不会统治，但我会通过他们统治。”　　<br>共谋！考察每一个历史关键时刻的背后，各种目的与意志盘根错节纠集在一起，我们看到只不过是一个合力的表现而已。希特勒、沙赫特，投票给希特勒的德国老百姓还有与纳粹合作的美国资本家，都怀着各自目的处于合力当中。能造时势的英雄，就是在这个巨大的拼图游戏里有幸拿到最后一块图版的人。　　<br>不管出于良好的愿望还是勃勃的野心，在历史的转折关头，沙赫特帮希特勒弄到了那块最后的拼图。　　　　<br>1931年之后，沙赫特开始运用他的声望、人脉和杰出的理财本领，为希特勒经营竞选资金。1932年11月，沙赫特成功发动了一次德国工业和金融界大规模联名上书，由他领衔，要求兴登堡总统任命希特勒为帝国总理。1933年1月底，希特勒戏剧性地当上台，2月宣布竞选总统，沙赫特为他组织了一个晚会，在他的惊人能量作用下，与会者涵盖了工业界的大部分巨头，包括I。G。法本及其美国分公司，克虏伯军火公司，通用电力，德国汽车协会，联合钢铁公司，电报电话公司；当场筹资3百万马克。希特勒在财运上终于告别诸多蝌蚪，遇见了一群牛蛙。这笔钱十分阔绰地解决了竞选资金问题，选完之后还剩了大约60万。　　　　</p>\n<p>除了筹资，更重要的是，这是一个显著的信号，表达了德国工业寡头，以及站在背后的美国金融资本对希特勒上台和进一步统治的认可。就拿占总献金额30%的法本（如果再加上它的美国子公司就占45%了）来说，此时它的董事会包括了华尔街和美国实业界最显赫的一批人：福特汽车公司的老板，纽约联储银行的董事，新泽西标准石油公司的董事，曼哈顿银行总裁，以及弗兰克林罗斯福温泉基金的主席。　　　　<br>风雷动，鱼龙惨，魏玛共和国就这样不知不觉走到了尽头，这个夹在两个铁血帝国时期之间，德国历史上罕见柔仁的民主共和国，既生不逢时又先天不足。它失败的最深刻的根源，是它始终建筑在一个极不稳定的经济基础上，畸形的资本结构，沉重的外债负担，脆弱的货币体系，以及对德国中小企业和国内贸易传统的破坏，使任何一点经济波动都有可能引发灾难性的动荡，最后摧毁上层建筑。从《魏玛宪法》到希特勒上台，它的民主从最完善的文本开始，用最糟糕的实践结束。在历史的吊诡里，人人看到开头却总猜不中这结局，国会大厦巨大的阴影倾斜在柏林的夕阳下，犹如共和国无声的挽歌，的确，它作为殉葬品的命运也马上就要宣判了。</p>\n<p>谁为战争付了钱？　　　　<br>国会纵火案为魏玛共和国钉入了棺材的最后一颗钉子，1934年8月2日，兴登堡总统去世，孤独而衰老的帝国元帅在风雨飘摇中撑了很久终于还是放弃了，漫长的高寿并未给他带来荣光。现在希特勒坐在总统府里，正在对老总统留下的遗嘱——复辟霍亨斯陶格王室——嗤之以鼻，他的最新头衔是元首兼国家总理，在这个国家和这个世界上，再没有任何人能阻止他全速开动国家机器，实现他壮丽而恐怖的千年帝国之梦。　　<br>老朋友得到了回报，就在同一天——8月2日，沙赫特博士成为了内阁经济部长。在此之前，他已经回到帝国银行那间熟悉的主席办公室，把三年前替代他的路德博士赶到了国外当大使。卷土重来如此之迅速，使当初黯然去职的心情都变成了欣慰的回忆，他证明了德国多么需要他，并且凭经济学家的本能开始为一个全新的舞台摩拳擦掌。　　　　</p>\n<p>华尔街故人无恙否？他们用什么眼光考虑这件事呢？　　<br>其实上一节我们已经提到，华尔街通过所控制的德国寡头企业向希特勒提供了支持。然而，华尔街还有更为直接的动作，这就是当时希特勒得到神秘资助的所谓“西德尼?瓦伯格”之谜。　　<br>1933年11月，在荷兰突然出现了一本小册子，其中有一位名为“西德尼。瓦伯格”的银行家与希特勒的数段对话，里面披露了美国最顶端的工业家和金融家，包括洛克菲勒与亨利福特，在希特勒上台前后，通过JP摩根与柴斯银行集团向他提供了数额达到三千二百万美元之巨的资助。这本书在1934年就立刻被查禁了，它所影射的法本公司美国和德国的董事瓦伯格兄弟也矢口否认和这本书有关，但是，书中翔实的细节却和很多现实资料一致，遂成疑云，普遍被人们认为是华尔街的国际投资者们与纳粹合作的一项佐证。</p>\n<p>　　希特勒的上台令民主世界舆论哗然，1933年5月沙赫特访问美国，还没下船就被蜂拥而至的美国记者包围起</p>\n<p>来，围追堵截质问他对反犹暴行的看法，沙赫特被烦得罕见地大发了一次脾气，把记者递给他的一份《纽约时</p>\n<p>报》狠狠扔在了甲板上。开头不妙，他的使命看起来前途暗淡。沙赫特是来要求推迟支付美国银行贷款的，大</p>\n<p>萧条已经延续了三年多，罗斯福新政尚在福祸未卜，大家谁的日子也不好过，美国政府和华尔街还能象前几年</p>\n<p>一样好说话吗？<br>　　　　<br>莎士比亚说过，别借钱给你的朋友，要么你会失去钱，要么失去朋友。沙赫特这次又赌赢了，美国选择了前者。一方面，美国资本已经在德国陷得太深，太多利益攸关彼此纠缠；另一方面，德国重整军备扩大采购的过程，对美国经济恢复是一个良好的刺激。至于买了军火要对付谁，反正不是美国。沙赫特博士给了一个多么容易理解的理由啊，“如果德国能够获得它自己的原料而在经济上得到发展，这只会有助于刺激一般的世界贸易。它将帮助增加消费，促进繁荣，不仅提高德国人民的生活水平，而且将提高整个工业世界的生活水平 “　　<br>沙赫特甚至还把反犹行为的原因归于“一个民族处于经济绝望和可怕困境时的表现”，并且保证“一旦德国享有公平与繁荣后，这些表现就会完全消失”。（沙赫特在《外交事务》上的文章）　　　　</p>\n<p>罗斯福总统对沙赫特印象并不好，他觉得对方傲慢自大；对希特勒也非常不感冒，就在沙赫特访问结束的时候，他还几乎故意任命一位犹太人去柏林当大使。但是令人遗憾，也是我们很少提到的是，罗斯福在他第一任任期里，与绥靖主义者的主张并没有什么本质分歧。在他的施政纲领中国内经济是第一位的，对外交只简单提一个“睦邻关系”，保住拉美后院不起火足矣。这不仅仅为了迎合孤立主义势力，罗斯福本人也是一个灵活的务实主义者，并不介意握脏了手，在他上任不久就和苏联建交了，让欧洲自相钳制，何乐而不为呢。　　　　<br>1933年8月，美国银行协会同希特勒德国就贷款问题进行谈判。美国银行同意德国延期偿还以前的贷款，并且保证今后美国在德国的资本和产业的全部收入只在德国使用，并用此来兴建新的军事企业或者改建原来的军工企业。</p>\n<p>　　纳粹德国没有食言，作为一个好胃口的买家，立刻把这些延期支付的贷款派上了用场，从1933年到1939年，在德国为第二次世界大战做准备的6年时间里，杜邦财团与化学公司、洛克菲勒财团和美孚石油公司、摩根财团及它控制的电报电话公司、福特汽车公司（亨利福特本人由于与纳粹的合作还得到了十字鹰徽勋章）争先恐后跟德国签下了巨额的战略原料和军工项目的订单。仅仅飞机一项，1934年8个月中美国对德国的出口数量就比1933年增加了不止5倍。33年到39年间，在纳粹德国的军事机构中营业的美国公司超过60家。　　<br>在技术输出贸易上也毫不含糊，杜邦公司通过I. G. 法本把氯丁橡胶和飞机防爆剂的技术卖给德国；坦克润滑油的技术是从美孚石油公司得到的；希特勒发展空军的重要帮助来自于美孚在德国设立的一家飞机专用汽油厂；电报电话公司参加了德国新型飞机的研制。后来在战争中，连美国的海军部长都承认是美国向希特勒提供了最先进的飞机发动机。　　　　</p>\n<p>一个不可思议的诡异循环出现了，华尔街借出去的钱，被希特勒拿过来，从华尔街金融资本控制下的工业托拉斯购买军火和技术，得到的利润又用于向德国的军工行业继续扩大投资。金钱的血液周而复始不分昼夜地流动着，结果是一端生长出了武装到牙齿的德国军备，另一端美国的诸多庞大工业帝国，在艰难时世中维持甚至扩大了生产和市场，罗斯福新政能够奏效，也未尝不对此多赖借助。　　 　　</p>\n<p>然而真有这么轻巧的双赢吗？世界上没有任何事情是无缘无故发生的，哪怕是从天上掉下来一块陨石也不例外。人们永远没有完全决定眼前事务的能力，路径依赖的力量常常比想象中大得多。美国与德国战前资本融合的惯性，一步步导向如今的政策，不是当政者不懂养虎遗患、尾大不掉，谁都知道希特勒是什么人，但是形势如此，加深这种合作关系比破坏它更为划算。经济学家梅纳德?凯恩斯说破了残酷的真理：“在长期，大家都死了。”千年田易八百主，所谓长期打算、远大目光往往成了政治家的高调，立竿见影的利益却是人人难以抗拒。金融资本的盲目性尤其明显。金融市场上每一天时间都在用贴现率表达着它的价值，今天能挣的钱就不能留到明天，活在当下是华尔街唯一永恒的真理，其他的，包括战争，都可以往后放。上世纪末东南亚金融危机之后，各国对经济安全人人自危，殊不知金融资本从来就是见血就上拔腿就跑，不择手段不计后果的角色，现在如此，当年也差不多，上演的都是鬼打墙的老故事。　　　　</p>\n<p>既已暗渡了陈仓，就不怕明修它栈道。德国撕毁凡尔赛条约限制，恢复普遍兵役制，扩充常备军，进入莱因非武装区。美国对此听之任之，生意做得更加热火朝天。其实别的国家又何尝不是一样呢？英国和德国也有合作，并且是美国的一个主要竞争对手，对这些举动不过嘴上谴责一下。法国虽然是德国的传统敌人，但是战前正赶上右翼上台正在严防共产党，外加殖民地麻烦一大堆，还指望着希特勒对付苏联。回望第二次世界大战爆发的前夜，我们会目瞪口呆地看到美、英、法、苏争相和自己未来的侵略者眉来眼去，比赛着为它添砖加瓦的奇异景象，希特勒不打这场战争简直都对不起老天的眷顾。　　　　<br>象最深沉的梦魇，清醒者无法动弹地看着深渊越来越逼近，又象一场荒诞派戏剧，各方势力挤在十字路口上等待自己的戈多。经济复兴？遏制共产主义？均衡的欧洲？互不侵犯？　　　　</p>\n<p>戈多没有来，来的是希特勒。纳粹德国带着华尔街的金钱，美英的技术和装备，苏联训练出来的军官，揭开了第二次世界大战的序幕。<br>镀金时代的秘密与巫师的命运　　　　<br>纳粹德国的“复兴奇迹”一直是第三帝国Fans津津乐道的题目。希特勒以前的内阁总理换来换去，愿许得真不少，每次但听环佩响，不见美人来；佳人不来，也就罢了，可是今天通胀明天衰退加上还不完的外债，来的都是这种牛鬼蛇神，真叫人无语凝噎。希特勒上台4年，失业率从高于30%下降到几乎为0，国民经济总值增长超过100%，同时完成了全国高速公路网的建设，重整了重工业基础体系，还装备了一支现代化军队。如果你看过雷妮?里芬斯塔尔那部著名的《奥林匹克》，一定会对1936年德国综合国力和精神状态留下深刻印象，那响彻云霄的欢呼，如林屹立的手臂，气势宏伟的建筑，健美如神祗的运动员，无一不暗示着隐然志在天下的实力与霸气。希特勒的个人威望也达到了顶峰，他甚至不再需要早年那样的演讲才华，只消在公共场合露露小脸，成千上万群众就宛如自动催眠一般立马如醉如痴。　　　　<br>那么，如果这时候希特勒有幸意外死亡的话，是不是就“生得伟大，死得光荣”了，然后以民族救星的形象名垂青史？<br>　　　　<br>希特勒是如何创造经济奇迹的呢？　　　　<br>对比希特勒政府和罗斯福政府在1933年之后的经济政策，不难发现它们何其相似乃尔。同样的国家干涉，兴建公共项目，发行公债，贬值货币，扩大卡特尔组织；甚至连名字都差不多，罗斯福的叫“新政”（New Deal），希特勒的叫“新计划”（New Plan）。诚然，在世界范围经济危机条件下，大家面对的问题大同小异，比较行之有效的也无非国家垄断主义那一套。然而，同样的照方抓药，各国家底不同，人家吃独味人参，你可能只弄得起点参须，贾府的方子刘姥姥看了也是干瞪眼。美国的广阔幅员、丰富资源、生产潜力没有一条德国能望其项背，这且不提，单单说通货这一块，它就是一战最大的获利者，加上延续下来一贯的高保护关税政策，资本对外扩张多年带来的惊人收益，它的国际收支平衡表和战后年年赔款的德国怎么比？有黄金和外汇的保障，人家可以搞货币贬值而不引起通货膨胀，可以玩赤字游戏而不导致财政破产；换了你行吗？<br>　　<br>摆在经济部长沙赫特博士面前的就是这样一顿无米之炊。　　　　<br>然而，和十年之前一样，这个老巫师如同听到召唤的战马，再一次奔向危机时刻的舞台，一样的雄心勃勃，一样的自信不疑。他的确带来了新节目，电光火石间只见他在国际经济舞台上纵横捭阖，原汤化原食，空手套白狼，一系列动作令人眼花缭乱——“德国欠你的钱越多，你就越想和它做生意。”——沙赫特用魔术般的手段创造了信用。<br>　　在一个基本没什么财政准备金的国家里干事，只能使上点无中生有的办法，这个`“生”法有文的，也有武的。武的就是明抢，只不过大盗剪径变成了国家没收，受害者自然是可怜的犹太人；文的就不那么简单了，沙赫特一开始必须有节制地使用印钞机来做启动。　　我查阅的中文史料中，有限地提到沙赫特的几次，大多都说他为了重整纳粹军备，怎么热衷搞通货膨胀，仿佛他是个金融狂人。这个印象之由来，以我自己的猜测，可能和中央银行主席孔祥熙博士有关。他1937年拜访沙赫特，对军备资金问题交谈之后，大概自以为深受启发，抗战后期也效仿人家搞货币增发，结果演砸了，真的变成了通货膨胀。孔博士虽然堂堂名校海龟，贵为两位国家元首的连襟，理财的本事还是比不上敛财的本事。沙赫特开动过印钞机是不假，但是他的政策总体上却是紧银根的，这意味着严格控制物价和外汇汇率，而且将大量增发的银行券的用在非生产领域，也就是基建和军工，尽量减少对一般市场流通的压力，比如著名的“米福”（Mefo）军用券，就是由国家保证，专门支付军火商的，由银行秘密贴现，不入财政报告。这种办法兼顾了解决就业、不造成生产过剩和军事保密要求，将“拖”字诀发挥到了极致。<br>　　<br>沙赫特所创造的信用奇迹还包括，为了避免外汇流失，他同几十个国家谈判了（对德国）“惊人有利”的物物交易（夏伊勒语）。到1936年中，德国已经建了28个清算协定，在与这些国家贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持齐平，这样，这些依赖德国市场的国家（大多是南欧和美洲的原料输出国）没有办法，为了清算马克欠款，只好允许德国继续购货。<br>　　　　<br>沙赫特在“新计划”期间之卖力，确实有几分“士为知己者死”的味道。为了给德国弄到更多外汇，他甚至不惜损害自己在国际金融中的信誉，在进口商品以后千方百计阻挠付款，或者代之以物物交换，连华尔街的老朋友都在指责这种“金融强盗行径”。　　　　<br>可是，随着时光飞转，随着军队强大起来的脚步，这个精明的老巫师没想到的是，希特勒的目标并不是让德国成为一个经济强国和贸易霸主，他把经济全权交给他，是因为他自己根本不感兴趣。赌桌上再有千般计较，总还要按理出牌，然而，他已经等不及了,他要的比沙赫特能给他的更多，更直截了当。　<br>　　　<br>1936年开始，形势看上去正是莺歌燕舞一片大好，沙赫特却开始隐隐感到问题不妙，像一个在舞台上停留过长时间的魔术师，他发觉帽子里已经没有新兔子可以变了。首先是德国在军备上的畸形投资，占用了他千方百计从国际金融界弄来的，和从国内人民牙缝里抠出来的大部分外汇，他主持修订的经济法律严厉到对私藏外汇可以判处死刑，却仍然难以应付军队巨大的钢铁胃袋；另一方面，重整军备的动静实在太大，其他国家虽然有跟着起哄沾光的一面，却也有惊心警惕的时候，德国的国际环境悄然逐步恶化，国际贸易越来越不好做。特别是，华尔街虽然慷慨给了钱和技术，但是像过去杨计划中发生过的一样，它们在合作中试图控制德国伙伴，而为战争做准备的德国工业寡头，还有它们的政治靠山，当然不会答应，政治原因带来的摩擦也影响了经济关系，使沙赫特大为头痛。<br>　　　　<br>沙赫特最深刻的不安来自希特勒和他对经济政策的要求在本质上有分歧。希特勒对经济完全持一种实用主义态度。如果把纳粹党和希特勒本人对经济问题发表的零星高论放在一起看，就会发现简直没有他们没主张过的观点：支持国有化、支持私有化、主张自由竞争、主张计划经济、打击垄断、保护垄断、限制利息、反对限制利息……总而言之，看上去矛盾百出，实际是见人说人话，见鬼说鬼话，为政治要求服务。虽然沙赫特很知趣地在报纸上撰文，说元首“领导了每一个经济计划、参加了每一项法令制度的修订”，其实希特勒在其中的贡献，也就和金日成同志对《卖花姑娘》音乐创作的贡献差不多。沙赫特将高帽子奉送得这么慷慨大方，恰恰因为希特勒当时没太多插手他的工作；而一旦领导打算亲切关怀了，沙赫特与纳粹的蜜月期也就开始面临危机。<br>　　　　<br>1936年秋，戈林被任命为“四年计划”全权代表，这个“四年计划全权机关”与帝国经济部产生了严重的机构重叠，最后不可避免地引向了沙赫特与戈林之间的冲突。沙赫特从这个“四年计划”诞生开始就对它深恶痛绝，不仅因为它的掣肘争权，更因为它是一个完全以战争着眼的，策划德国4年后勉强自给自足的计划。虽然沙赫特肯定不是一个理想主义的自由贸易信奉者，但是国际贸易和金融对德国的致命意义他是再清楚不过了，德国没有广大殖民地作为廉价原料来源和产品市场，去消化国内的经济波动，因此一举一动都和国际金融市场息息相关，要不他那么辛苦节省外汇干什么？一旦风吹草动，马克受到攻击，以当前国内的信用“圆环套圆环”遍地打白条的现实，这场热热闹闹的“经济复兴”搞不好立马变成镜花水月！“四年计划”在他不仅达不到什么自给自足的目的，反而会摧毁辛苦建立的国际贸易成就，并且引发国际金融市场对德国信用的怀疑。　　<br>沙赫特愤然指责戈林“你的外汇政策，你的生产政策和你的财政政策是靠不住的”，而希特勒在这场争执中会支持哪一方呢？看看这位元首风向标式的言论吧。　　<br>“在德国，往往是在政治力量高涨的时候，经济情况才开始改善；反过来，往往在经济成了我国人民生活中唯一内容，窒息了思想力量的时候，国家就趋于崩溃，而 且在很短时间内，把经济生活也拖着一起崩溃……从来没有一个国家是靠和平的经济手段建立的”。　　“避开一切世界工业和世界贸易政 策的尝试，代之以集中一切力量，旨在为它的人民在下一世纪分配获得一块立足的生存空间开辟出一条生存之路……”　　　　<br>另一个使人不安的征兆是，杨计划和道斯计划债券在1935到1936年的价格大幅度下降，道斯债券从79美元下降到37美元，杨债券从59美元下降到29美元。这意味着华尔街对德国发生动荡的深深忧虑。铅云低垂，斜阳诡异，沙赫特独坐在帝国经济部办公室里，看着多年围绕在他鞍前马后的工业家们，蜂拥着向戈林的订单扑去，不祥的预感在心中升起，海天之间一场新的风暴就要来临，他的命运又将如何呢？<br>　　　　<br>1937年8月，沙赫特向希特勒递交了辞呈，12月正式从经济部长任上离职；1939年1月，他被免除帝国银行总裁职务，虽然还保留着内阁成员的虚衔，事实上已经离开了德国的权力中心，虽然他之后的人生依然颇有戏剧性，但已不再对历史发生真正的影响。　　<br>沙赫特的命运是一个富有深意的象征。他终身未加入纳粹党，但是在纳粹上台和准备战争过程中的作用却可能超过了任何纳粹高官。他本人的浮沉，就是国际金融资本与德国政治势力关系的生动历史。如同传说中的双头蛇，政治与经济的逻辑相互推动也相互反噬。沙赫特尽管清楚地知道自己在为侵略战争筹资（这一点无可置辩），而且在奥地利合并和捷克事件中他都把帝国银行的手伸了进去，但是从本质上他是按照国际金融资本——当然也包括德国金融资本——的利益去行动的。然而，“大炮和黄油”是政治发展的逻辑，有自身合理的惯性，对一种成型的政治文化来说，经济力量可以是发动机，却从来不是刹车。何况这“惊险的一跳”在好日子里难道没有露出过征兆吗？希特勒也许是个魔鬼，但很难说是个骗子，他的基本主张——种族主义和生存空间扩展论从来直言不讳，这样的理论基础最后必将引向战争。发现这一点并不需要什么特别的洞察力，只不过，象十日谈里古老的故事一样，希图利用魔鬼的最后难免沦为魔鬼的奴隶，或者，魔鬼和人类本来就没什么真正的界限？　　　　</p>\n<p>纽伦堡的美国人放过了沙赫特，他的祖国却没有原谅他，战后巴伐利亚拒绝他居住，他漫长的后半生背负着纳粹帮凶的骂名。然而华尔街呢？J。P。摩根财团呢？那些显赫的信托银行呢？洛克菲勒、亨利福特、杜邦这些工业帝国呢？伯尔尼和日内瓦赚得钵满盆满的金融家和军火中间商呢？即使在战败的德国，那些曾经不可一世的托拉斯们，总电力公司、法本、联合钢铁，谁又受到任何真正的触动了呢？在两极格局的战后世界中，又一轮金钱和控制的奇妙博弈开始了……　<br>　<br>你看你看世界的脸。　　<br>“波丽娜，她无处不在，她就是社会……”——巴尔扎克《驴皮记》　　　　<br>这篇大而无当的文章结束之前，不妨再对沙赫特苍老的背影目送一程。这个精装的伏冷脱，失去法术的老巫师，最后一次见到希特勒是在1941年一个公开场合上。希特勒的问题依然和华尔街有关，他问他是否能再去美国一次，争取华尔街新的贷款。这次沙赫特没有丝毫犹豫地告诉他，在《租借法案》生效之后，已经完全不可能。　　　　<br>这是他对希特勒说的最后一句话，也是华尔街与纳粹德国这出人间喜剧的最后落幕。　　　　<br>亚尔马。沙赫特1944年被牵扯进谋害希特勒的720事件，被送进达豪集中营。1945年达豪被盟军占领。1948年受审无罪释放后，先后担任印度尼西亚、埃及的经济顾问，1952年在阿以中东战争中作为埃及的顾问，1953年后回到德国重新投入金融界，同时写作回忆录《我的前76年》、《一个老巫师的告白》。1970年6月4日，在希特勒和罗斯福死去整整25年后，93岁高龄的沙赫特去世。<br>　　<br>他象一只从树上掉下来的猫，姿态难看却总能安全地四脚落地，一时的凶险也变成了因祸得福的契机。读他那洋洋洒洒一册又一册的回忆录，你很难相信这个耄耋老人身上有如此过人的精力和记忆力。甚至还在监狱他就和出版商定了合同，在儿子战死，自己等待受审、前途未卜的日子里，我看到这个71岁的老巫师写道：　　<br>“我一直雄心勃勃，现在我依然如此。”　<br>　　　<br>不知为什么，这种过于强烈的生命意志，令我反感，就像对第三帝国那种狞厉嚣张的美。也许唯一例外的是这个细节。当写到他的爱子Jen在苏联战俘营里失踪，文风铺张华丽的沙赫特只淡淡说了一句：他是个温和而内向的孩子，本该是个很好的经济学家。　　<br>可是呢？　　<br>他活到了93岁，然而包括他的孩子在内，几千万年青人死于这场战争。　　<br>他一生梦想着德国的强大复兴，在临死前，他看到的是自己帮助发动的战争制造出的一道柏林墙。　　　　<br>陈词滥调，有时候却真的难以替代：　　<br>愿后人勿复哀后人！</p>\n<p>华尔街借钱给德国购买华尔街控制的美国工业的军火和技术，得到的利润再投入德国军工业以扩大投资。纳粹德国的复兴奇迹奥秘即在于此。对于华尔街金融寡头，这样可以控制德国经济，赚取暴利。<br>　　 但希特勒并不甘心于寄人篱下。他说过，“一个国家并不靠货币的表面价值来维持生活，而是要靠真正的生产，而生产才能使货币获得价值。生产才是货币的真正准备，银行保险箱中存满了黄金并无意义”。依靠华尔街德国重建了完整的工业体系，此时的希特勒意欲在这个基础之上打破英美主导的国际经济与金融体系，建立以德国为核心的欧洲经济新秩序。<br>　　 希特勒所做的第一步就是要将华尔街控制的德国金融体系转移到政府手中。很快，政府便完全控制了德国国家银行，加强了对商业银行的监管。1934年12月5日的德国信贷法使政府可以监督银行业务活动的各个方面，政府不仅能要求知道银行各项办事手续的全部细节，而且能对银行放给私人的贷款实行严格的控制，以保证它们的目的完全符合政府的全盘计划。政?还严格控制金融市场来适应国家的长期目标。比如，新股票在发行前需要通过一个专门委员会来审查其是否可能有利于国家经济建设。<br>　　 纳粹政府严格控制外币使用，管制进口，管制外国人使用德国银行的贷款，管制德国人向外国人出售马克。比如，德国贷款马克给巴西，但这些钱只能用于购买德国货，而不能到德国银行兑换成黄金。<br>　　 严格管制的措施会降低进出口贸易量。沙赫特又和各个国家签署了双边的汇划结算协议。所谓汇划结算协议，就是德国进口商向德国央行账户支付马克，至于出口商是立即得?当地货币付款还是等待一些时日，则取决于德国政府的出口政策。有些商品，外国央行接过限制使用范围的马克后立即向出口商支付当地货币，这将使出口国家国民收入没有变化，不仅是来自德国的进口品不能增加国民收入，而且整个进口品都不能增加国民收入，此即支付原则。还有些商品，德国央行先让出口商等待，一旦德国的某一个进口商能够从德国购买商品之时，该进口商才能用当地货币购买马克，而央行则用这笔当地货币来支付原来的那位出口商。这就是所谓的等待原则。<br>　　 因此，德国可以通过关税与适当的汇率，来限制进口或者促进出口。比如，在进口方面又可搞买家独家垄断，政府对进口商品都征税，或者向进口商卖出外汇，其汇率比从出口商那里买进时高出很多，政府收入得以增加。如果目的是进口而不是出口，以特殊方式即从国外借钱的方式改善国际收支，就可以用补贴汇率自由进口，但按很高的汇率出售外国需要的出口商品，为出口造成困难。为了最大限度地利用垄断的好处，改善贸易比价，对于国外需求不受价格影响的商品，汇率可以提得很高。而对于供应不受价格影响的进口商品，汇率可以压得很低。<br>　　 沙赫特创造了200多种货币、银行券、债券和各种五花八门的信用工具，与汇划结算协议相结合来调控资金的流向。比如旅游马克只能用来支付在德国的火车、旅馆和饭店的账单，机床马克只能购买德产工作母机等机械设备，啤酒马克只能购买德国产的含酒精的饮料，而钟表马克则只能购买德产钟表。通过这种方法，德国有垄断地位的商品如仪器与光学设备，将不会被低廉的马克买走，而只能用来换取真金白银或是德国需要的外国商品。这种?殊的马克其实是放弃了黄金而以某一种物品作为其发行的储备。这是因为当时的黄金储备主要集中在英美两国。<br>　　 此外，大量增发的各种信用工具只能用在基建或军工等生产领域，而不会进入消费品市场，通胀的威胁自然也就消除了。比如，1934～1936年发行的专门支付给军火商的米福债券就是如此。在沙赫特的撮合下，西门子公司、古特霍夫农冶公司、克虏伯公司和莱茵金属公司这4家德国支柱企业成立冶金研究有限公司。出自这家公司的米福债券便由一些资本有限、向德军供应物资的小公司出票，金属研究公司承兑之后到帝国银行去贴现，或者向资本市场出售。1936年，米福债券的未清偿总额达120亿马克，支持了当时德国军备重整一半的费用。到了1938年，沙赫特又发行了供应商国库券来支持军备重整。<br>　　 但经济自有其规律，信用扩张与通胀是一枚硬币的两面。为了防止通胀，除了高税率和控制发放红利外，德国还有种种有关物价和工资的规定。根据1936年10月29日的一项法令，德国设立了一个物价管制委员会。先前授予任何政府部门的监督、批准或规定物价的全部权力，都移交给了物价管制委员会主任。他不仅负责为到达最后消费者手中的商品规定价格，而且?责对生产过程中各个中间阶段中的价格进行监督。<br>　　 从1936年起，德国物价政策的基础就是1936年11月26日的冻结物价法令。根据这项法令，除特别许可的以外，物价管制委员会主任禁止任何物价提高到超过1936年10月17日的水平。由于物价冻结不仅冻结了个别商品的价格，而且冻结了各种商品价格之间的关系。结果德国物价一直保持稳定，批发价格指数（PPI，以1913年为基数100）从1936年到1939年仅从104.1上升到106.9。<br>　　 当然，对英美主导的国际金融秩序，最为釜底抽薪的是易货贸易的国际结算方式。当时国际金融家获利方式仍然停留在19世纪的旧模式，也就是向经济困难的国家放债盈利。如果德国的易货贸易被其他缺乏黄金与外汇的国家所仿效的话，国际金融家不仅很难找到借款人，而且其财富也要严重缩水。随着货币与实物之间关系的脱离，英美主导的国际经济与金融的主导权自然而然地就会被瓦解。<br>　　 仅在1934年，德国就完成了与保加利亚、罗马尼亚关于大豆和石油的易货贸易合同，与匈牙利和南斯拉夫涉及铝矾土和镁的易货合同，与丹麦关于家畜、黄油和猪油的易货贸易合同。德国还和中东欧建立起紧密的贸易关系。20世纪20年代末，德国占匈牙利、罗马尼亚、保加利亚、南斯拉夫、希腊和土耳其总贸易额的15%左右，到了30年代末，这个比例提高到40%。沙赫特禁止德国企业未经政府允许就进行国际贸易。所有国外债权人在德国只允许使用德国马克。<br>　　 为了贯彻这一政策，沙赫特在德国设立了24个监控站，时刻监视着德国商人的贸易活动。根据国家的战略需要，沙赫特将商品划分为不同的等级：粮食、铁矿砂、钨、锑、铬等稀有金属等级最高，其次是煤炭、有色金属、矿物油、化工产品、润滑油以及棉花、羊毛和橡胶等。到1936年，德国已经签订了28个清算协定，在与这些国家的贸易中，德国用马克支付进口款项，并把款额与该国购入德国制成品的款项保持平衡。在“二战”爆发前，德国国际贸易中的83%是通过易货贸易方式进行的。<br>　　 沙赫特的想法是从英美主导的国际金融体系中找到漏洞，循序渐进地让德国也分一杯金融霸权之羹。而希特勒则求快求速，意图一蹴而就。结果到1938年，沙赫特被解职，戈林从沙赫特手中接过对德国经济与金融的控制权，他便将政府的政治目标和军事目标置于德国经济之上。<br>　　 有破则有立，德国企业建立新的经济与金融体系。接替沙赫特经济部长位置的是瓦尔特&#8226;丰克。他是受戈林委托的制订新秩序计划的部长。新经济秩序是将欧洲组成一个单一的经济共同体，在德国的指导下进行运作。德国将成为欧洲大陆的工业中心，周围是一批组织起来供应它所缺少的农产品和矿产品的国家：东南欧将增加农业生产，放弃军备及辅助工业；丹麦将减少养牛和乳类生产，增加谷类和饲料的产量；挪威将致力于在农业上自给自足；甚至?国也将被看做是一个农业国和粮食输出国。<br>　　 为了达到这一目的，德国必须要成为欧洲金融体系的核心，正如丰克所坦然承认的：“我们决不奉行一种会使我们依赖黄金的通货政策，因为我们不能使自己受到一种我们无法决定其价值的交换媒介的约束。”欧洲的货币将与黄金完全脱离，成员国之间的交易将在固定兑换率的基础上进行。德国将双边清算协议扩展为多边贸易制度。按照这种制度，所有的欧洲国家将通过设在柏林的一个中央票据交换所，用德国马克来结算其贸易账目。柏林将成为欧洲的金融中心。<br>　　 “二战”期间，德国便根据既定方针在欧洲打造起新经济秩序的雏形。德国人首先没收和强迫收购被占领国家政府与私人拥有的黄金和国外资产，干涉被占领国家国内流通的货币，把这些货币同德国马克的兑换率人为地定得很低，勒索占领费，征收罚金，以及改造并周密地控制被占领国家的银行系统。<br>　　 1939年9月，德国信贷银行在波兰创立，信贷银行有权将高达10亿马克的款项贷给德国供它在占领区使用，也可发放短期抵押贷款，贴现和接受不计息的转账及存款，以及发行票面额从50芬尼到50马克的纸币。纸币的准备金包括：德国信贷银行由于贷款和贴现的票据而拥有的资产，德国货币的准备金，在德国国家银行和各票据交换所的贷方余额，德国国库债券的准备金，以及给予德国的贷款。这些纸币在被占领国家内按固定的兑换率同该国的货币一起流通，兑换率通常大致相当于入侵前的比率，它们不能随便兑换成德国国家银行的钞票。这是一项必要的规定，用来防止因发行大量德国信贷银行纸币而造成的通胀影响到德国本土。<br>　　 德国还以金融手段控制外国企业，其中德意志银行和德累斯顿银行征服欧洲工业的主要工具之一。它们通过诸如连锁董事会、股份所有权、代表投票制和操纵新的放款等方法，控制有关国家的主要商业银行，从而控制与这些银行有关的工业企业。比如，在捷克斯洛伐克，德意志银行和德累斯顿银行分别接收了波希米亚联合银行和波希米亚贴现银行后，就使德国控制了波尔迪纳尔铸造厂、克拉洛多沃尔水泥厂、布尔诺第一机械厂、波希米亚铜厂、索洛火柴垄断企业、金刚砂厂等该国的主要工业企业。<br>　　 不过，打破甚至摧毁英美金融帝国的唯一的最有力的金融武器是多边清算协议。到1941年年底，德国已同欧洲大陆所有其他国家谈判了清算协定，这些国家彼此之间也进行了很多这样的谈判。后一类协定中有些是通过设在柏林的中央票据交换所结算的。在那段时间，柏林成了欧洲大陆的金融中心，马克成了居统治地位的货币，许多国家开始通过柏林以马克来结算它们的全部国际贸易。就像现在的美国一样，德国则凭借占压倒性优势的军事、政治和经济力量，强迫贷款国提供巨额贷款。换而言之，整个欧洲被迫不断供给德国它所需要的任何可以买卖的东西。<br>　　 通过建立欧洲经济新秩序，德国人将战争造成的通胀全部输出到其他国家。德国信贷银行纸币有意在被征服的国家增加流通的货币量，人为制造通货膨胀。实际上，即便这种纸币被收回，也未消除通胀的压力。原因在于它们只不过由数目相等的本国货币取代而已。柏林的德国票据也起了制造通胀的作用，这等于德国人拿到商品却不付钱。按1939年的物价计算，1940～1944年，德国从被它占领的国家和被它统治的国家至少掠夺了1 040亿马克的财富，约占德国GNP的14%。<br>　　 其他国家的政府为了防止出口商破产，只好通过无限制地批准贷款来垫付货款，结果货币发行量大为增加，通胀恶化，商品供应减少，甚至在希腊等国造成了政府财政的全面崩溃。而在德国，通胀趋势则受到强有力的控制。在外国进行的征敛，增加了可以获得的商品数量而又丝毫未增加流通的货币数量，大大削弱了通胀。</p>\n<p>　　　　从本质上讲，德国、英国与美国之间在金融上的争霸并无善恶之分。其实，希特勒本人并没有发动世界大战的企图。开战之前，德国军费开支占GDP才15%左右，与英国相当。1939年慕尼黑协定签订后。德国已削减了军费开支，结果英国军费比例大为超过德国。一直到1942年斯大林格勒战役开始之前，德国军备生产都一直在下降。结果，即便在战时，德国人的生活水平也未下降，因为希特勒不希望因此而削弱了自己在德国人民中神一般的形象。<br>　　　　自始至终，希特勒的胜利秘诀是政治智慧，而不是军事征服。希特勒并不认为德国有同英美苏三大国的联盟发生长期战争的可能，他自信自己可以通过外交手段达到目的，若不行则通过一系列小规模战争解决德国的生存空间问题。在他看来，在政治手段和进攻波兰的小规模战争之间没有清楚的分界线。希特勒本人也知道，一旦国家综合实力与军事力量成为决定因素时德国便会完蛋。<br>　　　　德国的领土扩张与日本的侵略也有本质性的不同。“光复”与“侵略”只是站在不同立场上的描述同一件事的不同词语。从欧洲历史来看，德意志人的神圣罗马帝国曾统治了欧洲大陆的大部分土地。遗憾的是，德国一直到19世纪中期都未结束分裂状态。俾斯麦虽在1871年创建了新德国，但却把奥地利以及其他德意志人居住区排除在外。希特勒收回萨尔地区，派兵进驻本国的莱因地区，将奥地利，捷克斯洛伐克苏台德地区纳入德国版图。站在德国人的立场看，无非是收复久远的故土。<br>　　　　纳粹德国唯一的遭人诟病的犹太人大屠杀也不是没有辩解的理由。在纳粹统治下的欧洲，食利者阶层的犹太金融家被逐出欧洲经济圈。比如那个风光百余年的罗斯柴尔德家族在欧洲大陆的财富与权势便被纳粹德国破坏殆尽。1938年，《犹太人资产登记法令》颁布后，罗氏家族的财产受到严重冲击。第二年，几乎所有的罗氏家族的慈善与教育机构全部被解散或被国有化，而罗氏家族很多人都沦为难民。维也纳的罗氏家族掌门人路易斯&#8226;冯&#8226;罗斯柴尔德被逮捕和关押，直到他在奥地利的所有资产都被转让给德国政府后才被释放。他在法兰克福的豪华住宅以61万马克的超低价被政府征收，一百多年来价值连城的艺术品则以象征性的230万马克的代价被政府收购。位于捷克的维特科威兹钢铁厂都被赫尔曼&#8226;戈林国家工厂兼并。这些对于欧洲人来说未尝不是一件好事。<br>　　　　刚开始，希特勒也未动过灭绝犹太人的念头。犹太复国主义者曾与纳粹合作，希望将犹太人迁移到某个地区重建国家。但是包括英美在内的世界上绝大部分国家均不接收犹太人。英美列强甚至暗自高兴，希特勒做了他们想做而不愿公开做的事。直到美国对德宣战，德国人认为这是犹太财团鼓动的结果，于是开始屠杀犹太人以示报复。如果说德国是屠杀犹太人的元凶，那么英美两国就是将犹太人送进屠宰场的从犯。<br>　　　　对德国人来说，维持现状不是和平，而是屈服于英美。英美保住一战胜利果实，德国则想消除其失败的影响，突破英美在政治、经济与金融上的霸权。这都无可厚非，正如英国历史学家泰勒所写的：“在主权国家的世界中，每个国家都尽最大的努力谋求它自己的利益，至多由于错误而不是由于罪行受到批评。像往常一样，俾斯麦在谈到1866年奥普战争时发表的意见是正确的：‘奥地利反对我们的要求和我们提出要求一样不是什么错误’……希特勒的目的是使德国成为欧洲的支配性大国，或许更久以后成为世界的支配性大国。其它强国过去追求相似的目的，现在仍然如此。其他强国也把小国看作他们的仆从国。其他强国也试图用武力保卫他们的重大利益。在国际事务中，希特勒除了是一个德国人之外，他没有什么过错。”\n　　</p>\n<p>【附录】</p>\n<p>希特勒演讲：为日耳曼民族而战</p>\n<p>（作者:希特勒 ）</p>\n<p>　　“今天，我们站在这里！站在德国人的土地上！站在柏林，这块我们祖先用鲜血和尊严浇灌的土地上！我的身后，是安德烈.柯里昂的雕像！他是全世界公认的自由斗士！他是全世界的光！”</p>\n<p>“我的面前，站着的是一个民族，一个在屈辱中呻吟的民族！”“那场战争结束之后，我们这个民族的骄傲就没有了！那些战胜者们骑在我们的脖子上作威作福，他们随意践踏我们的尊严，一个欧洲大陆上最高贵的民族地尊严！你们告诉我，你们是选择像本杰明.马丁一样去做一个自由的斗士，还是一个奴隶？！”</p>\n<p>“你们或许要说：希特勒先生，我需要一个工作，一块面包。是地。你的说法很对，生命实在是太重要了。但是我要告诉你们。这世界上还有一种东西比生命更重要，那是自由！那就是尊严！”</p>\n<p>“只要阿尔萨斯和洛林上空一日还飘扬着法国的国旗，我们的尊严就不存在！只要那些法国人、英国人在我们的国土上横行霸道，我们地尊严就不存在！只要在欧洲的版图上，这个叫德国的国家四分五裂积弱不堪。我们地尊严就不存在！只要其他国家的人，在聊天的时候说到德国这个字眼的时候会发出一声轻蔑的笑声，我们的尊严就不存在！”</p>\n<p>“我们需要的，不是一块面包！而是一个生存空间！一个民族的生存空间！这生存空间，不是靠乞求和抗议来实现的，而是靠铁和血来实现的！”</p>\n<p>“别人欺辱我们，哪怕是最弱小的民族也来践踏我们，我们只会叫着：我们表示强烈的愤慨和抗议，这样的人。是没有骨头的！这样的人，是低贱的！我们应该用大炮地震耳欲聋声让敌人颤抖！我们应该碾压他们的尊严、生命，让他们知道我们不是一群只知道抗议的懦夫！”</p>\n<p>“你们要记住，一个只懂得抗议的国家，是一个没有骨头的国家！一个只懂得抗议的政丶府，是一个没有骨头的政丶府！当我们地尊严、领土、生存地空间都遭受践踏的时候，还不知羞耻地抗议地政丶府，我们是不需要的！你们最后也会抛弃它们的！”</p>\n<p>“我很骄傲，在你们这些人中。这样没有骨头的人，少之又少！我的面前，是一个留着千年不屈血液的军团！这血液，曾经在我们祖先的血管里面流淌过，他们没有屈服过！现在，它们在我们的身体里面汩汩奔涌，你们告诉我。你们愿意它冷却吗！？”</p>\n<p>“能够团结人们的。有两件东西：共同的理想和共同的犯罪。我们有雕刻在德意志旗帜上面的伟大理想，我们会为这理想流尽我们的最后一滴血！在今天的柏林。没有任何东西能够拯救我们的祖国，只有这理想！凡尔赛条约，是一个极大的耻辱！我们有拒绝执行它的决心和理由！做你们想做的吧！就像本杰明.马丁拿起枪，就像他带领着他的同胞们高举着那面自由的大旗英勇杀敌一样！假如你们期望战斗，那就去战斗吧！然后我就能够看到你们是七千万奴隶还是七千万坚贞不屈的日耳曼人！”</p>\n<p>“如果有那么一天，我，阿道夫.希特勒，也会想本杰明.马丁那样，举着属于我们德意志的大旗冲在最前方！哪怕是战死，我也会微笑着进入天堂！我会见到那些德意志的荣耀的祖先们，我可以昂着头颅走到伟大的腓特烈大帝跟前，我可以骄傲地对他说：我，你的子孙，没有给你丢脸，我为伟大的德意志流尽了最后一滴血！”</p>\n<p>“我们不为奴役而战！我们为自由而战！我们不是机器，不是牛马，我们是人！是从来没有屈服过的日耳曼人！”</p>\n<p>“我们以自由的名义团结起来！为一个新的、公平的世界而战！我们为人人有工作而战！为那些奴役我们的人滚出德国人的土地而战！为我们不需要整天喊着抗议而战！为我们的尊严而战！为我们的诺言而战！”</p>\n<p>“为解放这个国家而战！日耳曼人，我们为我们的祖先的荣耀而战！为我们的子孙后代能够骄傲地宣传：我们是从来不屈服的日耳曼人而战！”</p>\n<p>“我的同胞们，德国和德国人民万岁！自由，万岁!”</p>\n"},{"title":"决策思维","_content":"\n<!-- (https://www.notion.so/ebbc7595fd3f4792a2ee95a94437a87a) -->\n\n### 读后随感\n\n> 一来，提出了 GPA（目标、优先级、可选方案） + IPO（信息、人员、客观推理）的决策框架，非常 MECE —— 即便不论实际效用，结构精巧就具备独特的美感；\n>\n> 二来，常有洞悉本质的妙论，比如 “没有分配资源，就没有真正做决策” 、 “决策是为了达到目标、而非解决问题” 都颇发人深省；\n>\n> 三来，每章末尾都附有常见错误清单，极具实用性 —— 正如芒格所说，如果我知道我会死在哪里，那我就永远不会去那个地方。”\n\n以上三段话出自 Loudly Thinking。我因此翻阅了这本书，实在不虚此行。且谈谈这本书对投资决策的启发。\n\n💡 「更好的决定就是用更少的资源达到同样的目标；最差的决定就是用了很多的资源还达不到目标。」\n\n正如巴菲特所说，“我们的赚钱方式是遇到 3 米高的跨栏就躲开，专挑 30 厘米的跨栏，腿轻轻一抬，就迈过去了。” 这句话隐含着用更少的时间资源达到同样的目标。\n\n巴菲特又言，“以四毛的价格买值一元的股票，保留有相当大的折扣，从而减低风险。” 这句话隐含着用更少的金钱资源达到同样的目标。\n\n💡 「所有的数据都是关于过去的，所有的决定都是关乎未来的。越理性，往往越容易往后看事实。」\n\n使用统计意义上的规律的前提是，过去的频率等于未来的概率。比如扔硬币。但是在投资领域，一旦人们将过去的经验作用在未来时，未来的状态也发生改变了。\n\n所以巴菲特表述到，“预测无法透露未来，只能暴露预测者的无知。”\n\n 💡 「以问题为起点，就输在起跑线上了，并会结束于更多的、另外的问题；以目标为起点去思考决定才可能达到目标。」\n\n追求局部最优还是全局最优？研究资产不应被过多的细节纠缠，而应该看到更大的图景。\n\n 💡 「决定者要做 “选择题”，而不是做 “是非题”。」\n\n不要思考买还是卖。而是思考是否把一个资产换成另一个资产。不是 “做还是不做，要还是不要”，而是 “在我的认知体系内可以有的选择中，这是不是大概率最优的选择”。\n\n 💡 「决定（分配资源）是一个不断进步的过程。它需要：第一，随时观察环境情势；第二，随时思考价值主张；第三，经常做有风险管理的创新实验，向目标迈进。」\n\n证伪主义，贝叶斯决策。\n\n 💡 「资源是会增加的，随着我们每一个阶段性目标的实现，我们的资源就会增加，这时，我们就可以继续追求下一个阶段性目标，把我们的跑道继续延伸下去，或拓宽一些。」\n\n低成本获取高价值的信息，以创造更多选择权 ；有更多选择权，就更有时间和资源去建设自身的信息获取和整合的能力，从而增加更多选择 ； 有了更多选择，才发现可以不做那些原来以为必须要做的事。\n\n 💡 「底线是与目标相互辉映的，底线的作用是防止我们自己的选择会摧毁达到目标的可能性。不考虑有可能穿越底线的方案，才有可能达到目标。」\n\n<!-- https://twitter.com/JamesClear/status/1017384660912037888\n -->\nJames Clear on 推特： “a. 金融财富 (钱) b. 社交财富 (地位) c. 时间财富 (自由) d. 生理财富 (健康) 小心任何用一和二来引诱你，但是剥夺了三和四的工作。”\n\n 💡 「在优先级的轻重缓急上，不要先考虑紧急不紧急，而要先考虑重要不重要。不重要的事，何必在乎紧急与否。永远先做最重要的事。如果几件事的重要程度相当，不妨从它们可能造成的影响或风险的角度来区分轻重，先做正面影响大、风险小的事情。」\n\n最想拖延的事，往往是最重要的事。但是，缺乏行动力，很多时候本质还是来源于大脑对细节一无所知，缺乏一个相对细化的理解和期待。这时候不应当着急蛮干，而应当先尽量获取更多信息，获得对短期更加清晰的期待值，这样才能激励自己动起来。\n\n 💡 「第一类，正面价值高、风险 / 成本低的方案应该作为首选，可以 “马上做” 客观推理；第二类，风险 / 成本高、正面价值低的方案应该暂缓，现在暂不考虑。还有另外两类方案：第三类，正面价值高、风险 / 成本也高的方案。譬如说，送人上月球的登月计划，对希望在科技新浪潮中领先的美国来说，是具有非常重要的正面价值和影响的，但是它的成本和风险也非常大。如果我们确信它的正面价值，并愿意接受风险 / 成本的话，就需要通过创新、实验，分步去征服，直到最后成功。第四类，正面价值相对低，但风险 / 成本也相对低的方案，可以考虑选择几个。」\n\n几乎可以一字不漏的用在投资上。正面价值高、风险 / 成本也高的方案，应该投入大量的时间去理解。但只有等其越过临界点后才值得投入时间。\n\n 💡 「利用信息处理未知有三个方法。第一，把未知变成已知。第二，把未知转化成可能的风险，然后降低、控制、管理风险。第三，如果风险也是未知的，那么我们应该尽可能做可逆性的决定，以便在风险出现或增大时可以退出。另外需要强调的是，一定要设立未来的检查点。」\n\n\n\n对于有悠长历史的资产，应了解其历史以作为参照。对于新资产，应考虑资产配置，或通过期权实现反脆弱。\n\n------\n\n<!-- 顺便附上 [张潇雨](https://www.notion.so/eb4c7f6694fb40b1a3802db929bf29bd) 总结的「做决策的核心原则」： -->\n\n1. 好的决策都带有「非对称回报」属性。也就是决策错误带来的问题和风险有下限，但决策正确带来的收益无上限；\n2. 可逆程度低的大决策要尽可能收集信息，谨慎做；不太重要的小决策要快速做，错了好过拖着；\n3. 最好的决策者不是总能做对生死攸关的大决策，而是从不把自己放置在这个局面里。他们靠之前做的无数个正确的小决策前进 —— 正如「善战者无赫赫之功」；\n4. 最好的决策本质是「先胜而后求战」，做出的那一刻就已经知道结局了；\n5. 决策的激进与保守不在于决策的内容本身，而在于你是否能承担其带来的最坏结果；\n6. 但决策的质量不取决于某次结果，单次结果的好坏只是决策质量的概率化表现；\n7. 最好少做那些需要你再做很多次决策的决策，每多做一次决策就增加了决策错误的概率；\n8. 做好两难决策最重要的一件事是：接受你注定无法获得一个完美选择的事实。否则这个决策在定义上就不是两难决策；\n9. 好的决策者把不需要自己做的决策全部交给他人来做，并帮助他们成为一个更好的决策者；\n10. 没有好决策供选择的时候，可以不做决策。然后静静地等待一个可以做好决策的机会。","source":"_posts/投资决策.md","raw":"---\ntitle: 决策思维\n---\n\n<!-- (https://www.notion.so/ebbc7595fd3f4792a2ee95a94437a87a) -->\n\n### 读后随感\n\n> 一来，提出了 GPA（目标、优先级、可选方案） + IPO（信息、人员、客观推理）的决策框架，非常 MECE —— 即便不论实际效用，结构精巧就具备独特的美感；\n>\n> 二来，常有洞悉本质的妙论，比如 “没有分配资源，就没有真正做决策” 、 “决策是为了达到目标、而非解决问题” 都颇发人深省；\n>\n> 三来，每章末尾都附有常见错误清单，极具实用性 —— 正如芒格所说，如果我知道我会死在哪里，那我就永远不会去那个地方。”\n\n以上三段话出自 Loudly Thinking。我因此翻阅了这本书，实在不虚此行。且谈谈这本书对投资决策的启发。\n\n💡 「更好的决定就是用更少的资源达到同样的目标；最差的决定就是用了很多的资源还达不到目标。」\n\n正如巴菲特所说，“我们的赚钱方式是遇到 3 米高的跨栏就躲开，专挑 30 厘米的跨栏，腿轻轻一抬，就迈过去了。” 这句话隐含着用更少的时间资源达到同样的目标。\n\n巴菲特又言，“以四毛的价格买值一元的股票，保留有相当大的折扣，从而减低风险。” 这句话隐含着用更少的金钱资源达到同样的目标。\n\n💡 「所有的数据都是关于过去的，所有的决定都是关乎未来的。越理性，往往越容易往后看事实。」\n\n使用统计意义上的规律的前提是，过去的频率等于未来的概率。比如扔硬币。但是在投资领域，一旦人们将过去的经验作用在未来时，未来的状态也发生改变了。\n\n所以巴菲特表述到，“预测无法透露未来，只能暴露预测者的无知。”\n\n 💡 「以问题为起点，就输在起跑线上了，并会结束于更多的、另外的问题；以目标为起点去思考决定才可能达到目标。」\n\n追求局部最优还是全局最优？研究资产不应被过多的细节纠缠，而应该看到更大的图景。\n\n 💡 「决定者要做 “选择题”，而不是做 “是非题”。」\n\n不要思考买还是卖。而是思考是否把一个资产换成另一个资产。不是 “做还是不做，要还是不要”，而是 “在我的认知体系内可以有的选择中，这是不是大概率最优的选择”。\n\n 💡 「决定（分配资源）是一个不断进步的过程。它需要：第一，随时观察环境情势；第二，随时思考价值主张；第三，经常做有风险管理的创新实验，向目标迈进。」\n\n证伪主义，贝叶斯决策。\n\n 💡 「资源是会增加的，随着我们每一个阶段性目标的实现，我们的资源就会增加，这时，我们就可以继续追求下一个阶段性目标，把我们的跑道继续延伸下去，或拓宽一些。」\n\n低成本获取高价值的信息，以创造更多选择权 ；有更多选择权，就更有时间和资源去建设自身的信息获取和整合的能力，从而增加更多选择 ； 有了更多选择，才发现可以不做那些原来以为必须要做的事。\n\n 💡 「底线是与目标相互辉映的，底线的作用是防止我们自己的选择会摧毁达到目标的可能性。不考虑有可能穿越底线的方案，才有可能达到目标。」\n\n<!-- https://twitter.com/JamesClear/status/1017384660912037888\n -->\nJames Clear on 推特： “a. 金融财富 (钱) b. 社交财富 (地位) c. 时间财富 (自由) d. 生理财富 (健康) 小心任何用一和二来引诱你，但是剥夺了三和四的工作。”\n\n 💡 「在优先级的轻重缓急上，不要先考虑紧急不紧急，而要先考虑重要不重要。不重要的事，何必在乎紧急与否。永远先做最重要的事。如果几件事的重要程度相当，不妨从它们可能造成的影响或风险的角度来区分轻重，先做正面影响大、风险小的事情。」\n\n最想拖延的事，往往是最重要的事。但是，缺乏行动力，很多时候本质还是来源于大脑对细节一无所知，缺乏一个相对细化的理解和期待。这时候不应当着急蛮干，而应当先尽量获取更多信息，获得对短期更加清晰的期待值，这样才能激励自己动起来。\n\n 💡 「第一类，正面价值高、风险 / 成本低的方案应该作为首选，可以 “马上做” 客观推理；第二类，风险 / 成本高、正面价值低的方案应该暂缓，现在暂不考虑。还有另外两类方案：第三类，正面价值高、风险 / 成本也高的方案。譬如说，送人上月球的登月计划，对希望在科技新浪潮中领先的美国来说，是具有非常重要的正面价值和影响的，但是它的成本和风险也非常大。如果我们确信它的正面价值，并愿意接受风险 / 成本的话，就需要通过创新、实验，分步去征服，直到最后成功。第四类，正面价值相对低，但风险 / 成本也相对低的方案，可以考虑选择几个。」\n\n几乎可以一字不漏的用在投资上。正面价值高、风险 / 成本也高的方案，应该投入大量的时间去理解。但只有等其越过临界点后才值得投入时间。\n\n 💡 「利用信息处理未知有三个方法。第一，把未知变成已知。第二，把未知转化成可能的风险，然后降低、控制、管理风险。第三，如果风险也是未知的，那么我们应该尽可能做可逆性的决定，以便在风险出现或增大时可以退出。另外需要强调的是，一定要设立未来的检查点。」\n\n\n\n对于有悠长历史的资产，应了解其历史以作为参照。对于新资产，应考虑资产配置，或通过期权实现反脆弱。\n\n------\n\n<!-- 顺便附上 [张潇雨](https://www.notion.so/eb4c7f6694fb40b1a3802db929bf29bd) 总结的「做决策的核心原则」： -->\n\n1. 好的决策都带有「非对称回报」属性。也就是决策错误带来的问题和风险有下限，但决策正确带来的收益无上限；\n2. 可逆程度低的大决策要尽可能收集信息，谨慎做；不太重要的小决策要快速做，错了好过拖着；\n3. 最好的决策者不是总能做对生死攸关的大决策，而是从不把自己放置在这个局面里。他们靠之前做的无数个正确的小决策前进 —— 正如「善战者无赫赫之功」；\n4. 最好的决策本质是「先胜而后求战」，做出的那一刻就已经知道结局了；\n5. 决策的激进与保守不在于决策的内容本身，而在于你是否能承担其带来的最坏结果；\n6. 但决策的质量不取决于某次结果，单次结果的好坏只是决策质量的概率化表现；\n7. 最好少做那些需要你再做很多次决策的决策，每多做一次决策就增加了决策错误的概率；\n8. 做好两难决策最重要的一件事是：接受你注定无法获得一个完美选择的事实。否则这个决策在定义上就不是两难决策；\n9. 好的决策者把不需要自己做的决策全部交给他人来做，并帮助他们成为一个更好的决策者；\n10. 没有好决策供选择的时候，可以不做决策。然后静静地等待一个可以做好决策的机会。","slug":"投资决策","published":1,"date":"2022-04-11T01:37:49.801Z","updated":"2022-04-12T09:55:32.684Z","_id":"cl1vyx51j0000k70m2w1nbbbn","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- (https://www.notion.so/ebbc7595fd3f4792a2ee95a94437a87a) -->\n\n<h3 id=\"读后随感\"><a href=\"#读后随感\" class=\"headerlink\" title=\"读后随感\"></a>读后随感</h3><blockquote>\n<p>一来，提出了 GPA（目标、优先级、可选方案） + IPO（信息、人员、客观推理）的决策框架，非常 MECE —— 即便不论实际效用，结构精巧就具备独特的美感；</p>\n<p>二来，常有洞悉本质的妙论，比如 “没有分配资源，就没有真正做决策” 、 “决策是为了达到目标、而非解决问题” 都颇发人深省；</p>\n<p>三来，每章末尾都附有常见错误清单，极具实用性 —— 正如芒格所说，如果我知道我会死在哪里，那我就永远不会去那个地方。”</p>\n</blockquote>\n<p>以上三段话出自 Loudly Thinking。我因此翻阅了这本书，实在不虚此行。且谈谈这本书对投资决策的启发。</p>\n<p>💡 「更好的决定就是用更少的资源达到同样的目标；最差的决定就是用了很多的资源还达不到目标。」</p>\n<p>正如巴菲特所说，“我们的赚钱方式是遇到 3 米高的跨栏就躲开，专挑 30 厘米的跨栏，腿轻轻一抬，就迈过去了。” 这句话隐含着用更少的时间资源达到同样的目标。</p>\n<p>巴菲特又言，“以四毛的价格买值一元的股票，保留有相当大的折扣，从而减低风险。” 这句话隐含着用更少的金钱资源达到同样的目标。</p>\n<p>💡 「所有的数据都是关于过去的，所有的决定都是关乎未来的。越理性，往往越容易往后看事实。」</p>\n<p>使用统计意义上的规律的前提是，过去的频率等于未来的概率。比如扔硬币。但是在投资领域，一旦人们将过去的经验作用在未来时，未来的状态也发生改变了。</p>\n<p>所以巴菲特表述到，“预测无法透露未来，只能暴露预测者的无知。”</p>\n<p> 💡 「以问题为起点，就输在起跑线上了，并会结束于更多的、另外的问题；以目标为起点去思考决定才可能达到目标。」</p>\n<p>追求局部最优还是全局最优？研究资产不应被过多的细节纠缠，而应该看到更大的图景。</p>\n<p> 💡 「决定者要做 “选择题”，而不是做 “是非题”。」</p>\n<p>不要思考买还是卖。而是思考是否把一个资产换成另一个资产。不是 “做还是不做，要还是不要”，而是 “在我的认知体系内可以有的选择中，这是不是大概率最优的选择”。</p>\n<p> 💡 「决定（分配资源）是一个不断进步的过程。它需要：第一，随时观察环境情势；第二，随时思考价值主张；第三，经常做有风险管理的创新实验，向目标迈进。」</p>\n<p>证伪主义，贝叶斯决策。</p>\n<p> 💡 「资源是会增加的，随着我们每一个阶段性目标的实现，我们的资源就会增加，这时，我们就可以继续追求下一个阶段性目标，把我们的跑道继续延伸下去，或拓宽一些。」</p>\n<p>低成本获取高价值的信息，以创造更多选择权 ；有更多选择权，就更有时间和资源去建设自身的信息获取和整合的能力，从而增加更多选择 ； 有了更多选择，才发现可以不做那些原来以为必须要做的事。</p>\n<p> 💡 「底线是与目标相互辉映的，底线的作用是防止我们自己的选择会摧毁达到目标的可能性。不考虑有可能穿越底线的方案，才有可能达到目标。」</p>\n<!-- https://twitter.com/JamesClear/status/1017384660912037888\n -->\n<p>James Clear on 推特： “a. 金融财富 (钱) b. 社交财富 (地位) c. 时间财富 (自由) d. 生理财富 (健康) 小心任何用一和二来引诱你，但是剥夺了三和四的工作。”</p>\n<p> 💡 「在优先级的轻重缓急上，不要先考虑紧急不紧急，而要先考虑重要不重要。不重要的事，何必在乎紧急与否。永远先做最重要的事。如果几件事的重要程度相当，不妨从它们可能造成的影响或风险的角度来区分轻重，先做正面影响大、风险小的事情。」</p>\n<p>最想拖延的事，往往是最重要的事。但是，缺乏行动力，很多时候本质还是来源于大脑对细节一无所知，缺乏一个相对细化的理解和期待。这时候不应当着急蛮干，而应当先尽量获取更多信息，获得对短期更加清晰的期待值，这样才能激励自己动起来。</p>\n<p> 💡 「第一类，正面价值高、风险 / 成本低的方案应该作为首选，可以 “马上做” 客观推理；第二类，风险 / 成本高、正面价值低的方案应该暂缓，现在暂不考虑。还有另外两类方案：第三类，正面价值高、风险 / 成本也高的方案。譬如说，送人上月球的登月计划，对希望在科技新浪潮中领先的美国来说，是具有非常重要的正面价值和影响的，但是它的成本和风险也非常大。如果我们确信它的正面价值，并愿意接受风险 / 成本的话，就需要通过创新、实验，分步去征服，直到最后成功。第四类，正面价值相对低，但风险 / 成本也相对低的方案，可以考虑选择几个。」</p>\n<p>几乎可以一字不漏的用在投资上。正面价值高、风险 / 成本也高的方案，应该投入大量的时间去理解。但只有等其越过临界点后才值得投入时间。</p>\n<p> 💡 「利用信息处理未知有三个方法。第一，把未知变成已知。第二，把未知转化成可能的风险，然后降低、控制、管理风险。第三，如果风险也是未知的，那么我们应该尽可能做可逆性的决定，以便在风险出现或增大时可以退出。另外需要强调的是，一定要设立未来的检查点。」</p>\n<p>对于有悠长历史的资产，应了解其历史以作为参照。对于新资产，应考虑资产配置，或通过期权实现反脆弱。</p>\n<hr>\n<!-- 顺便附上 [张潇雨](https://www.notion.so/eb4c7f6694fb40b1a3802db929bf29bd) 总结的「做决策的核心原则」： -->\n\n<ol>\n<li>好的决策都带有「非对称回报」属性。也就是决策错误带来的问题和风险有下限，但决策正确带来的收益无上限；</li>\n<li>可逆程度低的大决策要尽可能收集信息，谨慎做；不太重要的小决策要快速做，错了好过拖着；</li>\n<li>最好的决策者不是总能做对生死攸关的大决策，而是从不把自己放置在这个局面里。他们靠之前做的无数个正确的小决策前进 —— 正如「善战者无赫赫之功」；</li>\n<li>最好的决策本质是「先胜而后求战」，做出的那一刻就已经知道结局了；</li>\n<li>决策的激进与保守不在于决策的内容本身，而在于你是否能承担其带来的最坏结果；</li>\n<li>但决策的质量不取决于某次结果，单次结果的好坏只是决策质量的概率化表现；</li>\n<li>最好少做那些需要你再做很多次决策的决策，每多做一次决策就增加了决策错误的概率；</li>\n<li>做好两难决策最重要的一件事是：接受你注定无法获得一个完美选择的事实。否则这个决策在定义上就不是两难决策；</li>\n<li>好的决策者把不需要自己做的决策全部交给他人来做，并帮助他们成为一个更好的决策者；</li>\n<li>没有好决策供选择的时候，可以不做决策。然后静静地等待一个可以做好决策的机会。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!-- (https://www.notion.so/ebbc7595fd3f4792a2ee95a94437a87a) -->\n\n<h3 id=\"读后随感\"><a href=\"#读后随感\" class=\"headerlink\" title=\"读后随感\"></a>读后随感</h3><blockquote>\n<p>一来，提出了 GPA（目标、优先级、可选方案） + IPO（信息、人员、客观推理）的决策框架，非常 MECE —— 即便不论实际效用，结构精巧就具备独特的美感；</p>\n<p>二来，常有洞悉本质的妙论，比如 “没有分配资源，就没有真正做决策” 、 “决策是为了达到目标、而非解决问题” 都颇发人深省；</p>\n<p>三来，每章末尾都附有常见错误清单，极具实用性 —— 正如芒格所说，如果我知道我会死在哪里，那我就永远不会去那个地方。”</p>\n</blockquote>\n<p>以上三段话出自 Loudly Thinking。我因此翻阅了这本书，实在不虚此行。且谈谈这本书对投资决策的启发。</p>\n<p>💡 「更好的决定就是用更少的资源达到同样的目标；最差的决定就是用了很多的资源还达不到目标。」</p>\n<p>正如巴菲特所说，“我们的赚钱方式是遇到 3 米高的跨栏就躲开，专挑 30 厘米的跨栏，腿轻轻一抬，就迈过去了。” 这句话隐含着用更少的时间资源达到同样的目标。</p>\n<p>巴菲特又言，“以四毛的价格买值一元的股票，保留有相当大的折扣，从而减低风险。” 这句话隐含着用更少的金钱资源达到同样的目标。</p>\n<p>💡 「所有的数据都是关于过去的，所有的决定都是关乎未来的。越理性，往往越容易往后看事实。」</p>\n<p>使用统计意义上的规律的前提是，过去的频率等于未来的概率。比如扔硬币。但是在投资领域，一旦人们将过去的经验作用在未来时，未来的状态也发生改变了。</p>\n<p>所以巴菲特表述到，“预测无法透露未来，只能暴露预测者的无知。”</p>\n<p> 💡 「以问题为起点，就输在起跑线上了，并会结束于更多的、另外的问题；以目标为起点去思考决定才可能达到目标。」</p>\n<p>追求局部最优还是全局最优？研究资产不应被过多的细节纠缠，而应该看到更大的图景。</p>\n<p> 💡 「决定者要做 “选择题”，而不是做 “是非题”。」</p>\n<p>不要思考买还是卖。而是思考是否把一个资产换成另一个资产。不是 “做还是不做，要还是不要”，而是 “在我的认知体系内可以有的选择中，这是不是大概率最优的选择”。</p>\n<p> 💡 「决定（分配资源）是一个不断进步的过程。它需要：第一，随时观察环境情势；第二，随时思考价值主张；第三，经常做有风险管理的创新实验，向目标迈进。」</p>\n<p>证伪主义，贝叶斯决策。</p>\n<p> 💡 「资源是会增加的，随着我们每一个阶段性目标的实现，我们的资源就会增加，这时，我们就可以继续追求下一个阶段性目标，把我们的跑道继续延伸下去，或拓宽一些。」</p>\n<p>低成本获取高价值的信息，以创造更多选择权 ；有更多选择权，就更有时间和资源去建设自身的信息获取和整合的能力，从而增加更多选择 ； 有了更多选择，才发现可以不做那些原来以为必须要做的事。</p>\n<p> 💡 「底线是与目标相互辉映的，底线的作用是防止我们自己的选择会摧毁达到目标的可能性。不考虑有可能穿越底线的方案，才有可能达到目标。」</p>\n<!-- https://twitter.com/JamesClear/status/1017384660912037888\n -->\n<p>James Clear on 推特： “a. 金融财富 (钱) b. 社交财富 (地位) c. 时间财富 (自由) d. 生理财富 (健康) 小心任何用一和二来引诱你，但是剥夺了三和四的工作。”</p>\n<p> 💡 「在优先级的轻重缓急上，不要先考虑紧急不紧急，而要先考虑重要不重要。不重要的事，何必在乎紧急与否。永远先做最重要的事。如果几件事的重要程度相当，不妨从它们可能造成的影响或风险的角度来区分轻重，先做正面影响大、风险小的事情。」</p>\n<p>最想拖延的事，往往是最重要的事。但是，缺乏行动力，很多时候本质还是来源于大脑对细节一无所知，缺乏一个相对细化的理解和期待。这时候不应当着急蛮干，而应当先尽量获取更多信息，获得对短期更加清晰的期待值，这样才能激励自己动起来。</p>\n<p> 💡 「第一类，正面价值高、风险 / 成本低的方案应该作为首选，可以 “马上做” 客观推理；第二类，风险 / 成本高、正面价值低的方案应该暂缓，现在暂不考虑。还有另外两类方案：第三类，正面价值高、风险 / 成本也高的方案。譬如说，送人上月球的登月计划，对希望在科技新浪潮中领先的美国来说，是具有非常重要的正面价值和影响的，但是它的成本和风险也非常大。如果我们确信它的正面价值，并愿意接受风险 / 成本的话，就需要通过创新、实验，分步去征服，直到最后成功。第四类，正面价值相对低，但风险 / 成本也相对低的方案，可以考虑选择几个。」</p>\n<p>几乎可以一字不漏的用在投资上。正面价值高、风险 / 成本也高的方案，应该投入大量的时间去理解。但只有等其越过临界点后才值得投入时间。</p>\n<p> 💡 「利用信息处理未知有三个方法。第一，把未知变成已知。第二，把未知转化成可能的风险，然后降低、控制、管理风险。第三，如果风险也是未知的，那么我们应该尽可能做可逆性的决定，以便在风险出现或增大时可以退出。另外需要强调的是，一定要设立未来的检查点。」</p>\n<p>对于有悠长历史的资产，应了解其历史以作为参照。对于新资产，应考虑资产配置，或通过期权实现反脆弱。</p>\n<hr>\n<!-- 顺便附上 [张潇雨](https://www.notion.so/eb4c7f6694fb40b1a3802db929bf29bd) 总结的「做决策的核心原则」： -->\n\n<ol>\n<li>好的决策都带有「非对称回报」属性。也就是决策错误带来的问题和风险有下限，但决策正确带来的收益无上限；</li>\n<li>可逆程度低的大决策要尽可能收集信息，谨慎做；不太重要的小决策要快速做，错了好过拖着；</li>\n<li>最好的决策者不是总能做对生死攸关的大决策，而是从不把自己放置在这个局面里。他们靠之前做的无数个正确的小决策前进 —— 正如「善战者无赫赫之功」；</li>\n<li>最好的决策本质是「先胜而后求战」，做出的那一刻就已经知道结局了；</li>\n<li>决策的激进与保守不在于决策的内容本身，而在于你是否能承担其带来的最坏结果；</li>\n<li>但决策的质量不取决于某次结果，单次结果的好坏只是决策质量的概率化表现；</li>\n<li>最好少做那些需要你再做很多次决策的决策，每多做一次决策就增加了决策错误的概率；</li>\n<li>做好两难决策最重要的一件事是：接受你注定无法获得一个完美选择的事实。否则这个决策在定义上就不是两难决策；</li>\n<li>好的决策者把不需要自己做的决策全部交给他人来做，并帮助他们成为一个更好的决策者；</li>\n<li>没有好决策供选择的时候，可以不做决策。然后静静地等待一个可以做好决策的机会。</li>\n</ol>\n"},{"title":"汤质——逻辑中类比的思考","_content":"\n# 类比——哲学特质\n\n## 1.什么是时间？\n\n逝者如斯夫，不舍昼夜 —— 孔子\n\n## 2.已知域 =>未知域\n\n基于老概念，理解新概念。\n\n***属性类比，结构类比，关系类比***\n\n***(形容词，名次，动/介词)***\n\n```\n持久的 时间 在消失\n```\n\n👆👆👆 👆👆👆👆\n\n```\n漫长的 流水 在流逝\n```\n\n通过身边常见的事物，去理解不常见或抽象的东西。——具象层面，客观物质\n\n没有一个概念可以被孤立的定义——先有了他人，才有的自我\n\n将老概念的概念关系网络(结构)映射到了新概念\n\n#### 什么是物化?\n\n认识到心理内容的过程，相当于看见物理实体的过程，视觉，触觉，嗅觉，味觉等属性类比会迁移到认知过程。=> 表达想法时，认知的缺陷(词穷)，可以用物理实体的属性去填充。\n\n```\n描述女性的形容词，甜，盐 .etc\n```\n\n#### **什么是类比**\n\n类比是一种隐喻化的方式，将心理内容内容隐喻为物理实体。——抽象层面，心理世界，**抽象概念需要一个锚定**\n\n将心理内容类比为物理实体，\n\n```\n丢掉垃圾 <=> 丢掉思想包袱\n思想包袱(心理内容)  <=> 垃圾(物理实体)\n```\n\n通过对熟悉的，形容词、名词等物理属性的属性、关系、结构，迁移到心理世界中，形成对于心理内容的认知。\n\n```\n放下你的执念、重拾你的信心、端正好你的态度，调整你的好状态、这件事儿你是不是扛得住\n```\n\n理解世界，建构语言——《我们赖以生存的隐喻》\n\n#### **什么是隐喻**\n\n心理内容及物理实体的隐喻，是非常核心的隐喻，这两者之间的关联方式，和观测到的物理世界中的实体与万物的交互方式一样。\n\neg:\n\n\"如果心理内容是物理实体的话，我们的语言，就是存放这个物理实体的容器\"\n\n```\n他的话里充满了思想\n```\n\n这里存在隐秘的类比，即它的语言，是一个容器，里面满满存放的是他的思想。\n\n**我们认识到一个心理内容的过程，相当于我们看见一个物理实体的过程**\n\n```\n我看见了 => \"我认识到了这个心理内容/一个抽象概念/读懂了这篇文章/认识了这个人“\n```\n\n```\n我还没有想清楚(一个想法) => 我还没有看清楚(一个实体)\n我的观点很模糊(属性类比)\n```\n\n 又甚者是，复杂心理内容和复杂物理实体之间隐喻:\n\n```\n构建一个庞大的理论体系 <=> 建设一个庞大的建筑\n你的理论根基不牢 <=> 你的房子地基不牢\n你的论据支撑不了你的观点 <=> 你的地基支撑不住你的建筑\n```\n\n即可知，语言即容器，思想即建筑\n\n以**物体和物质来理解我们的经验**，使得我们可以挑选出部分经验，并把他们当成一个统一种类中的离散实体或物质。\n\n一旦我们能够把我们的经验看成实体，我就能够**指称它们，将其归类、分组以及量化**，从而能够通过此途径进行推理。\n\n——《我们赖以生存的隐喻》\n\n#### 结构类比的例子：\n\n这些例子，通过具体来反应抽象的部分特征\n\n***爱情 <=> 战争***\n\n***生活 <=> 赌博***\n\n***社会 <=> 熔炉，人<=> 锻造物***\n\n***学习成长 <=> 田径比赛***\n\n结构隐喻(结构类比) 为我们***拓展其意义***，提供了最丰富的资源。它能让我们***以一个***高度结构化的清晰界定的***概念，来构建另一个概念***\n\n——《我们赖以生存的隐喻》\n\n*[触类旁通，不言而喻]*\n\n#### 两个可以进行类比的对象之间，怎样构成结构映射的关系\n\n \t\t===>>> 双边互动、强势弱势、支配被支配的关系 <<<=== \n\n爱情\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t战争\n\n​\t\t\t===========>>> 战争式的爱情关系<<<=========== \n\n​\t\t\t========>>> 存在胜利者签订某种契约<<<========= \n\n​\t\t\t========>>> 炫耀实力，经常性的威慑<<<=========\n\n​\t\t\t========>>> 偶尔会有摩擦冲突、动手<<<=========\n\n​\t\t\t=======>>> 存在蜜月期、冷战期等阶段<<<=========\n\n------------\n\n学习成长\t==>>> 多人运动、单向行进、世俗的评分机制，过程疲劳枯燥<<<=== \t田径比赛\n\n*[过度简化了学习成长的理解，又过度强化了竞争意识，将部分抽象的特征具象化，比如盲人摸到的象腿]*\n\n--------------\n\n**对于一个抽象概念，具象的对象是弹性的**，是**融合**的。\n\neg.***爱情 <=> 共同加工的艺术品***\n\n爱情\t======>>> 需要有共同的审美、用欣赏的目光去看待、需要耐心、需要长时间的磨合、<<<====== 共同加工的艺术品\n\neg.***学习成长 <=> 马拉松***\n\n## 3.原型范畴\n\n**田径比赛** 是 **学习成长** 的原型\n\n**战争** 是 **爱情** 的原型\n\n**物理实体** 是 **心理实体** 的原型\n\n```\n原型的属性、关系、结构，被我们类比投向到了另外一个对象，这个对象就变成了原型的摹本，就理解了这个对象。\n```\n\n------------\n\n#### 原型范畴论\n\n```\n原型是一个范畴的典型实例，其他成员是基于它们被感知到的与原型相似而被纳入统一范畴的。\n范畴以原型成员为中心，通过家族相似性不断向外扩展的，词义也具有这样的特点，以中心意义为基础，不断扩展形成了一个意义链，构成了一个语义网络。\n```\n\n***家族相似性理论***\n\n“丢掉” 是 “放弃” 的父\n\n“小学” 是 “中学” 的弟弟\n\n它们之间都有亲缘关系，但没有明确的层次和等级，它们的相对关系，是在我们日常交流/语言游戏的时候被暂时性的确定的。\n\n这个理论，解释性很强。\n\n**我们就是围绕着这些原型，来构建出信念网络的，那些越早出现在生命中的原型，它的位置越靠中间，它的关联的节点越多，对我们的控制和影响就越大。**\n\n家庭是最早出现的原型之一——原生家庭：是我们原型的发源地。：\n\n**家庭** <=> **社会**\n\n将家庭有关的信念网络去映射社会，去理解社会，\n\n[普世 <=> 具体抽象]\n\n```\n一个人试图寻找他所面临的情况的本质时，它的范畴库就是过滤和感知这个世界的媒介。\n```\n\n***自我的原型：***\n\n如何进行自我评价——**我们假设自己是别人，别人会怎么评价我们，我是别人的时候，我怎么评价自己。**\n\n而这个**别人**，是以自我为原型，所类比出来的**他我**，一个摹本\n\n别人对我的一个评价标准，其实是我对别人评价标准的一个翻版。 **推己及人 <=> 以己度人**\n\n[镜中人，镜像序列，禅宗，道家一生二]\n\n原型和类比，基于相似性之间的经验迁移，给了我们无边无际的发散空间，又让我们锁死在了我们的信念网络之中。\n\n围绕着原型，在无边的概念网络中，建立了一个半封闭的空间，让我们理性可以在其中搞笑的运行。\n\n[正因为有限，所以有限]\n\n将旧情景的理解，迁移到了有相似性的新情景中，获得了一种触类旁通，不言而喻的高效的认知。但是，**原型会限制我们的理解，约束我们的想象力**，导致一些非理性的错误，受困于固有的错误，甚至被某些阴影封印住我们的能力和可能性。我们都是悬挂在自己编织的概念网络上的动物。\n\n","source":"_posts/类比——哲学特质.md","raw":"---\ntitle: 汤质——逻辑中类比的思考\n---\n\n# 类比——哲学特质\n\n## 1.什么是时间？\n\n逝者如斯夫，不舍昼夜 —— 孔子\n\n## 2.已知域 =>未知域\n\n基于老概念，理解新概念。\n\n***属性类比，结构类比，关系类比***\n\n***(形容词，名次，动/介词)***\n\n```\n持久的 时间 在消失\n```\n\n👆👆👆 👆👆👆👆\n\n```\n漫长的 流水 在流逝\n```\n\n通过身边常见的事物，去理解不常见或抽象的东西。——具象层面，客观物质\n\n没有一个概念可以被孤立的定义——先有了他人，才有的自我\n\n将老概念的概念关系网络(结构)映射到了新概念\n\n#### 什么是物化?\n\n认识到心理内容的过程，相当于看见物理实体的过程，视觉，触觉，嗅觉，味觉等属性类比会迁移到认知过程。=> 表达想法时，认知的缺陷(词穷)，可以用物理实体的属性去填充。\n\n```\n描述女性的形容词，甜，盐 .etc\n```\n\n#### **什么是类比**\n\n类比是一种隐喻化的方式，将心理内容内容隐喻为物理实体。——抽象层面，心理世界，**抽象概念需要一个锚定**\n\n将心理内容类比为物理实体，\n\n```\n丢掉垃圾 <=> 丢掉思想包袱\n思想包袱(心理内容)  <=> 垃圾(物理实体)\n```\n\n通过对熟悉的，形容词、名词等物理属性的属性、关系、结构，迁移到心理世界中，形成对于心理内容的认知。\n\n```\n放下你的执念、重拾你的信心、端正好你的态度，调整你的好状态、这件事儿你是不是扛得住\n```\n\n理解世界，建构语言——《我们赖以生存的隐喻》\n\n#### **什么是隐喻**\n\n心理内容及物理实体的隐喻，是非常核心的隐喻，这两者之间的关联方式，和观测到的物理世界中的实体与万物的交互方式一样。\n\neg:\n\n\"如果心理内容是物理实体的话，我们的语言，就是存放这个物理实体的容器\"\n\n```\n他的话里充满了思想\n```\n\n这里存在隐秘的类比，即它的语言，是一个容器，里面满满存放的是他的思想。\n\n**我们认识到一个心理内容的过程，相当于我们看见一个物理实体的过程**\n\n```\n我看见了 => \"我认识到了这个心理内容/一个抽象概念/读懂了这篇文章/认识了这个人“\n```\n\n```\n我还没有想清楚(一个想法) => 我还没有看清楚(一个实体)\n我的观点很模糊(属性类比)\n```\n\n 又甚者是，复杂心理内容和复杂物理实体之间隐喻:\n\n```\n构建一个庞大的理论体系 <=> 建设一个庞大的建筑\n你的理论根基不牢 <=> 你的房子地基不牢\n你的论据支撑不了你的观点 <=> 你的地基支撑不住你的建筑\n```\n\n即可知，语言即容器，思想即建筑\n\n以**物体和物质来理解我们的经验**，使得我们可以挑选出部分经验，并把他们当成一个统一种类中的离散实体或物质。\n\n一旦我们能够把我们的经验看成实体，我就能够**指称它们，将其归类、分组以及量化**，从而能够通过此途径进行推理。\n\n——《我们赖以生存的隐喻》\n\n#### 结构类比的例子：\n\n这些例子，通过具体来反应抽象的部分特征\n\n***爱情 <=> 战争***\n\n***生活 <=> 赌博***\n\n***社会 <=> 熔炉，人<=> 锻造物***\n\n***学习成长 <=> 田径比赛***\n\n结构隐喻(结构类比) 为我们***拓展其意义***，提供了最丰富的资源。它能让我们***以一个***高度结构化的清晰界定的***概念，来构建另一个概念***\n\n——《我们赖以生存的隐喻》\n\n*[触类旁通，不言而喻]*\n\n#### 两个可以进行类比的对象之间，怎样构成结构映射的关系\n\n \t\t===>>> 双边互动、强势弱势、支配被支配的关系 <<<=== \n\n爱情\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t战争\n\n​\t\t\t===========>>> 战争式的爱情关系<<<=========== \n\n​\t\t\t========>>> 存在胜利者签订某种契约<<<========= \n\n​\t\t\t========>>> 炫耀实力，经常性的威慑<<<=========\n\n​\t\t\t========>>> 偶尔会有摩擦冲突、动手<<<=========\n\n​\t\t\t=======>>> 存在蜜月期、冷战期等阶段<<<=========\n\n------------\n\n学习成长\t==>>> 多人运动、单向行进、世俗的评分机制，过程疲劳枯燥<<<=== \t田径比赛\n\n*[过度简化了学习成长的理解，又过度强化了竞争意识，将部分抽象的特征具象化，比如盲人摸到的象腿]*\n\n--------------\n\n**对于一个抽象概念，具象的对象是弹性的**，是**融合**的。\n\neg.***爱情 <=> 共同加工的艺术品***\n\n爱情\t======>>> 需要有共同的审美、用欣赏的目光去看待、需要耐心、需要长时间的磨合、<<<====== 共同加工的艺术品\n\neg.***学习成长 <=> 马拉松***\n\n## 3.原型范畴\n\n**田径比赛** 是 **学习成长** 的原型\n\n**战争** 是 **爱情** 的原型\n\n**物理实体** 是 **心理实体** 的原型\n\n```\n原型的属性、关系、结构，被我们类比投向到了另外一个对象，这个对象就变成了原型的摹本，就理解了这个对象。\n```\n\n------------\n\n#### 原型范畴论\n\n```\n原型是一个范畴的典型实例，其他成员是基于它们被感知到的与原型相似而被纳入统一范畴的。\n范畴以原型成员为中心，通过家族相似性不断向外扩展的，词义也具有这样的特点，以中心意义为基础，不断扩展形成了一个意义链，构成了一个语义网络。\n```\n\n***家族相似性理论***\n\n“丢掉” 是 “放弃” 的父\n\n“小学” 是 “中学” 的弟弟\n\n它们之间都有亲缘关系，但没有明确的层次和等级，它们的相对关系，是在我们日常交流/语言游戏的时候被暂时性的确定的。\n\n这个理论，解释性很强。\n\n**我们就是围绕着这些原型，来构建出信念网络的，那些越早出现在生命中的原型，它的位置越靠中间，它的关联的节点越多，对我们的控制和影响就越大。**\n\n家庭是最早出现的原型之一——原生家庭：是我们原型的发源地。：\n\n**家庭** <=> **社会**\n\n将家庭有关的信念网络去映射社会，去理解社会，\n\n[普世 <=> 具体抽象]\n\n```\n一个人试图寻找他所面临的情况的本质时，它的范畴库就是过滤和感知这个世界的媒介。\n```\n\n***自我的原型：***\n\n如何进行自我评价——**我们假设自己是别人，别人会怎么评价我们，我是别人的时候，我怎么评价自己。**\n\n而这个**别人**，是以自我为原型，所类比出来的**他我**，一个摹本\n\n别人对我的一个评价标准，其实是我对别人评价标准的一个翻版。 **推己及人 <=> 以己度人**\n\n[镜中人，镜像序列，禅宗，道家一生二]\n\n原型和类比，基于相似性之间的经验迁移，给了我们无边无际的发散空间，又让我们锁死在了我们的信念网络之中。\n\n围绕着原型，在无边的概念网络中，建立了一个半封闭的空间，让我们理性可以在其中搞笑的运行。\n\n[正因为有限，所以有限]\n\n将旧情景的理解，迁移到了有相似性的新情景中，获得了一种触类旁通，不言而喻的高效的认知。但是，**原型会限制我们的理解，约束我们的想象力**，导致一些非理性的错误，受困于固有的错误，甚至被某些阴影封印住我们的能力和可能性。我们都是悬挂在自己编织的概念网络上的动物。\n\n","slug":"类比——哲学特质","published":1,"date":"2021-05-27T23:18:08.866Z","updated":"2022-04-12T09:56:30.580Z","_id":"cl1vyydpw0001k70m3f35547j","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"类比——哲学特质\"><a href=\"#类比——哲学特质\" class=\"headerlink\" title=\"类比——哲学特质\"></a>类比——哲学特质</h1><h2 id=\"1-什么是时间？\"><a href=\"#1-什么是时间？\" class=\"headerlink\" title=\"1.什么是时间？\"></a>1.什么是时间？</h2><p>逝者如斯夫，不舍昼夜 —— 孔子</p>\n<h2 id=\"2-已知域-gt-未知域\"><a href=\"#2-已知域-gt-未知域\" class=\"headerlink\" title=\"2.已知域 =&gt;未知域\"></a>2.已知域 =&gt;未知域</h2><p>基于老概念，理解新概念。</p>\n<p><em><strong>属性类比，结构类比，关系类比</strong></em></p>\n<p><em><strong>(形容词，名次，动/介词)</strong></em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">持久的 时间 在消失</span><br></pre></td></tr></table></figure>\n\n<p>👆👆👆 👆👆👆👆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">漫长的 流水 在流逝</span><br></pre></td></tr></table></figure>\n\n<p>通过身边常见的事物，去理解不常见或抽象的东西。——具象层面，客观物质</p>\n<p>没有一个概念可以被孤立的定义——先有了他人，才有的自我</p>\n<p>将老概念的概念关系网络(结构)映射到了新概念</p>\n<h4 id=\"什么是物化\"><a href=\"#什么是物化\" class=\"headerlink\" title=\"什么是物化?\"></a>什么是物化?</h4><p>认识到心理内容的过程，相当于看见物理实体的过程，视觉，触觉，嗅觉，味觉等属性类比会迁移到认知过程。=&gt; 表达想法时，认知的缺陷(词穷)，可以用物理实体的属性去填充。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述女性的形容词，甜，盐 .etc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是类比\"><a href=\"#什么是类比\" class=\"headerlink\" title=\"什么是类比\"></a><strong>什么是类比</strong></h4><p>类比是一种隐喻化的方式，将心理内容内容隐喻为物理实体。——抽象层面，心理世界，<strong>抽象概念需要一个锚定</strong></p>\n<p>将心理内容类比为物理实体，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">丢掉垃圾 &lt;&#x3D;&gt; 丢掉思想包袱</span><br><span class=\"line\">思想包袱(心理内容)  &lt;&#x3D;&gt; 垃圾(物理实体)</span><br></pre></td></tr></table></figure>\n\n<p>通过对熟悉的，形容词、名词等物理属性的属性、关系、结构，迁移到心理世界中，形成对于心理内容的认知。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">放下你的执念、重拾你的信心、端正好你的态度，调整你的好状态、这件事儿你是不是扛得住</span><br></pre></td></tr></table></figure>\n\n<p>理解世界，建构语言——《我们赖以生存的隐喻》</p>\n<h4 id=\"什么是隐喻\"><a href=\"#什么是隐喻\" class=\"headerlink\" title=\"什么是隐喻\"></a><strong>什么是隐喻</strong></h4><p>心理内容及物理实体的隐喻，是非常核心的隐喻，这两者之间的关联方式，和观测到的物理世界中的实体与万物的交互方式一样。</p>\n<p>eg:</p>\n<p>“如果心理内容是物理实体的话，我们的语言，就是存放这个物理实体的容器”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">他的话里充满了思想</span><br></pre></td></tr></table></figure>\n\n<p>这里存在隐秘的类比，即它的语言，是一个容器，里面满满存放的是他的思想。</p>\n<p><strong>我们认识到一个心理内容的过程，相当于我们看见一个物理实体的过程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我看见了 &#x3D;&gt; &quot;我认识到了这个心理内容&#x2F;一个抽象概念&#x2F;读懂了这篇文章&#x2F;认识了这个人“</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我还没有想清楚(一个想法) &#x3D;&gt; 我还没有看清楚(一个实体)</span><br><span class=\"line\">我的观点很模糊(属性类比)</span><br></pre></td></tr></table></figure>\n\n<p> 又甚者是，复杂心理内容和复杂物理实体之间隐喻:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构建一个庞大的理论体系 &lt;&#x3D;&gt; 建设一个庞大的建筑</span><br><span class=\"line\">你的理论根基不牢 &lt;&#x3D;&gt; 你的房子地基不牢</span><br><span class=\"line\">你的论据支撑不了你的观点 &lt;&#x3D;&gt; 你的地基支撑不住你的建筑</span><br></pre></td></tr></table></figure>\n\n<p>即可知，语言即容器，思想即建筑</p>\n<p>以<strong>物体和物质来理解我们的经验</strong>，使得我们可以挑选出部分经验，并把他们当成一个统一种类中的离散实体或物质。</p>\n<p>一旦我们能够把我们的经验看成实体，我就能够<strong>指称它们，将其归类、分组以及量化</strong>，从而能够通过此途径进行推理。</p>\n<p>——《我们赖以生存的隐喻》</p>\n<h4 id=\"结构类比的例子：\"><a href=\"#结构类比的例子：\" class=\"headerlink\" title=\"结构类比的例子：\"></a>结构类比的例子：</h4><p>这些例子，通过具体来反应抽象的部分特征</p>\n<p><em><strong>爱情 &lt;=&gt; 战争</strong></em></p>\n<p><em><strong>生活 &lt;=&gt; 赌博</strong></em></p>\n<p><em><strong>社会 &lt;=&gt; 熔炉，人&lt;=&gt; 锻造物</strong></em></p>\n<p><em><strong>学习成长 &lt;=&gt; 田径比赛</strong></em></p>\n<p>结构隐喻(结构类比) 为我们<em><strong>拓展其意义</strong></em>，提供了最丰富的资源。它能让我们<em><strong>以一个</strong></em>高度结构化的清晰界定的<em><strong>概念，来构建另一个概念</strong></em></p>\n<p>——《我们赖以生存的隐喻》</p>\n<p><em>[触类旁通，不言而喻]</em></p>\n<h4 id=\"两个可以进行类比的对象之间，怎样构成结构映射的关系\"><a href=\"#两个可以进行类比的对象之间，怎样构成结构映射的关系\" class=\"headerlink\" title=\"两个可以进行类比的对象之间，怎样构成结构映射的关系\"></a>两个可以进行类比的对象之间，怎样构成结构映射的关系</h4><pre><code>     ===&gt;&gt;&gt; 双边互动、强势弱势、支配被支配的关系 &lt;&lt;&lt;=== \n</code></pre>\n<p>爱情                                                                                                    战争</p>\n<p>​            ===========&gt;&gt;&gt; 战争式的爱情关系&lt;&lt;&lt;=========== </p>\n<p>​            ========&gt;&gt;&gt; 存在胜利者签订某种契约&lt;&lt;&lt;========= </p>\n<p>​            ========&gt;&gt;&gt; 炫耀实力，经常性的威慑&lt;&lt;&lt;=========</p>\n<p>​            ========&gt;&gt;&gt; 偶尔会有摩擦冲突、动手&lt;&lt;&lt;=========</p>\n<p>​            =======&gt;&gt;&gt; 存在蜜月期、冷战期等阶段&lt;&lt;&lt;=========</p>\n<hr>\n<p>学习成长    ==&gt;&gt;&gt; 多人运动、单向行进、世俗的评分机制，过程疲劳枯燥&lt;&lt;&lt;===     田径比赛</p>\n<p><em>[过度简化了学习成长的理解，又过度强化了竞争意识，将部分抽象的特征具象化，比如盲人摸到的象腿]</em></p>\n<hr>\n<p><strong>对于一个抽象概念，具象的对象是弹性的</strong>，是<strong>融合</strong>的。</p>\n<p>eg.<em><strong>爱情 &lt;=&gt; 共同加工的艺术品</strong></em></p>\n<p>爱情    ======&gt;&gt;&gt; 需要有共同的审美、用欣赏的目光去看待、需要耐心、需要长时间的磨合、&lt;&lt;&lt;====== 共同加工的艺术品</p>\n<p>eg.<em><strong>学习成长 &lt;=&gt; 马拉松</strong></em></p>\n<h2 id=\"3-原型范畴\"><a href=\"#3-原型范畴\" class=\"headerlink\" title=\"3.原型范畴\"></a>3.原型范畴</h2><p><strong>田径比赛</strong> 是 <strong>学习成长</strong> 的原型</p>\n<p><strong>战争</strong> 是 <strong>爱情</strong> 的原型</p>\n<p><strong>物理实体</strong> 是 <strong>心理实体</strong> 的原型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型的属性、关系、结构，被我们类比投向到了另外一个对象，这个对象就变成了原型的摹本，就理解了这个对象。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"原型范畴论\"><a href=\"#原型范畴论\" class=\"headerlink\" title=\"原型范畴论\"></a>原型范畴论</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型是一个范畴的典型实例，其他成员是基于它们被感知到的与原型相似而被纳入统一范畴的。</span><br><span class=\"line\">范畴以原型成员为中心，通过家族相似性不断向外扩展的，词义也具有这样的特点，以中心意义为基础，不断扩展形成了一个意义链，构成了一个语义网络。</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>家族相似性理论</strong></em></p>\n<p>“丢掉” 是 “放弃” 的父</p>\n<p>“小学” 是 “中学” 的弟弟</p>\n<p>它们之间都有亲缘关系，但没有明确的层次和等级，它们的相对关系，是在我们日常交流/语言游戏的时候被暂时性的确定的。</p>\n<p>这个理论，解释性很强。</p>\n<p><strong>我们就是围绕着这些原型，来构建出信念网络的，那些越早出现在生命中的原型，它的位置越靠中间，它的关联的节点越多，对我们的控制和影响就越大。</strong></p>\n<p>家庭是最早出现的原型之一——原生家庭：是我们原型的发源地。：</p>\n<p><strong>家庭</strong> &lt;=&gt; <strong>社会</strong></p>\n<p>将家庭有关的信念网络去映射社会，去理解社会，</p>\n<p>[普世 &lt;=&gt; 具体抽象]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个人试图寻找他所面临的情况的本质时，它的范畴库就是过滤和感知这个世界的媒介。</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>自我的原型：</strong></em></p>\n<p>如何进行自我评价——<strong>我们假设自己是别人，别人会怎么评价我们，我是别人的时候，我怎么评价自己。</strong></p>\n<p>而这个<strong>别人</strong>，是以自我为原型，所类比出来的<strong>他我</strong>，一个摹本</p>\n<p>别人对我的一个评价标准，其实是我对别人评价标准的一个翻版。 <strong>推己及人 &lt;=&gt; 以己度人</strong></p>\n<p>[镜中人，镜像序列，禅宗，道家一生二]</p>\n<p>原型和类比，基于相似性之间的经验迁移，给了我们无边无际的发散空间，又让我们锁死在了我们的信念网络之中。</p>\n<p>围绕着原型，在无边的概念网络中，建立了一个半封闭的空间，让我们理性可以在其中搞笑的运行。</p>\n<p>[正因为有限，所以有限]</p>\n<p>将旧情景的理解，迁移到了有相似性的新情景中，获得了一种触类旁通，不言而喻的高效的认知。但是，<strong>原型会限制我们的理解，约束我们的想象力</strong>，导致一些非理性的错误，受困于固有的错误，甚至被某些阴影封印住我们的能力和可能性。我们都是悬挂在自己编织的概念网络上的动物。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"类比——哲学特质\"><a href=\"#类比——哲学特质\" class=\"headerlink\" title=\"类比——哲学特质\"></a>类比——哲学特质</h1><h2 id=\"1-什么是时间？\"><a href=\"#1-什么是时间？\" class=\"headerlink\" title=\"1.什么是时间？\"></a>1.什么是时间？</h2><p>逝者如斯夫，不舍昼夜 —— 孔子</p>\n<h2 id=\"2-已知域-gt-未知域\"><a href=\"#2-已知域-gt-未知域\" class=\"headerlink\" title=\"2.已知域 =&gt;未知域\"></a>2.已知域 =&gt;未知域</h2><p>基于老概念，理解新概念。</p>\n<p><em><strong>属性类比，结构类比，关系类比</strong></em></p>\n<p><em><strong>(形容词，名次，动/介词)</strong></em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">持久的 时间 在消失</span><br></pre></td></tr></table></figure>\n\n<p>👆👆👆 👆👆👆👆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">漫长的 流水 在流逝</span><br></pre></td></tr></table></figure>\n\n<p>通过身边常见的事物，去理解不常见或抽象的东西。——具象层面，客观物质</p>\n<p>没有一个概念可以被孤立的定义——先有了他人，才有的自我</p>\n<p>将老概念的概念关系网络(结构)映射到了新概念</p>\n<h4 id=\"什么是物化\"><a href=\"#什么是物化\" class=\"headerlink\" title=\"什么是物化?\"></a>什么是物化?</h4><p>认识到心理内容的过程，相当于看见物理实体的过程，视觉，触觉，嗅觉，味觉等属性类比会迁移到认知过程。=&gt; 表达想法时，认知的缺陷(词穷)，可以用物理实体的属性去填充。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述女性的形容词，甜，盐 .etc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是类比\"><a href=\"#什么是类比\" class=\"headerlink\" title=\"什么是类比\"></a><strong>什么是类比</strong></h4><p>类比是一种隐喻化的方式，将心理内容内容隐喻为物理实体。——抽象层面，心理世界，<strong>抽象概念需要一个锚定</strong></p>\n<p>将心理内容类比为物理实体，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">丢掉垃圾 &lt;&#x3D;&gt; 丢掉思想包袱</span><br><span class=\"line\">思想包袱(心理内容)  &lt;&#x3D;&gt; 垃圾(物理实体)</span><br></pre></td></tr></table></figure>\n\n<p>通过对熟悉的，形容词、名词等物理属性的属性、关系、结构，迁移到心理世界中，形成对于心理内容的认知。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">放下你的执念、重拾你的信心、端正好你的态度，调整你的好状态、这件事儿你是不是扛得住</span><br></pre></td></tr></table></figure>\n\n<p>理解世界，建构语言——《我们赖以生存的隐喻》</p>\n<h4 id=\"什么是隐喻\"><a href=\"#什么是隐喻\" class=\"headerlink\" title=\"什么是隐喻\"></a><strong>什么是隐喻</strong></h4><p>心理内容及物理实体的隐喻，是非常核心的隐喻，这两者之间的关联方式，和观测到的物理世界中的实体与万物的交互方式一样。</p>\n<p>eg:</p>\n<p>“如果心理内容是物理实体的话，我们的语言，就是存放这个物理实体的容器”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">他的话里充满了思想</span><br></pre></td></tr></table></figure>\n\n<p>这里存在隐秘的类比，即它的语言，是一个容器，里面满满存放的是他的思想。</p>\n<p><strong>我们认识到一个心理内容的过程，相当于我们看见一个物理实体的过程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我看见了 &#x3D;&gt; &quot;我认识到了这个心理内容&#x2F;一个抽象概念&#x2F;读懂了这篇文章&#x2F;认识了这个人“</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我还没有想清楚(一个想法) &#x3D;&gt; 我还没有看清楚(一个实体)</span><br><span class=\"line\">我的观点很模糊(属性类比)</span><br></pre></td></tr></table></figure>\n\n<p> 又甚者是，复杂心理内容和复杂物理实体之间隐喻:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构建一个庞大的理论体系 &lt;&#x3D;&gt; 建设一个庞大的建筑</span><br><span class=\"line\">你的理论根基不牢 &lt;&#x3D;&gt; 你的房子地基不牢</span><br><span class=\"line\">你的论据支撑不了你的观点 &lt;&#x3D;&gt; 你的地基支撑不住你的建筑</span><br></pre></td></tr></table></figure>\n\n<p>即可知，语言即容器，思想即建筑</p>\n<p>以<strong>物体和物质来理解我们的经验</strong>，使得我们可以挑选出部分经验，并把他们当成一个统一种类中的离散实体或物质。</p>\n<p>一旦我们能够把我们的经验看成实体，我就能够<strong>指称它们，将其归类、分组以及量化</strong>，从而能够通过此途径进行推理。</p>\n<p>——《我们赖以生存的隐喻》</p>\n<h4 id=\"结构类比的例子：\"><a href=\"#结构类比的例子：\" class=\"headerlink\" title=\"结构类比的例子：\"></a>结构类比的例子：</h4><p>这些例子，通过具体来反应抽象的部分特征</p>\n<p><em><strong>爱情 &lt;=&gt; 战争</strong></em></p>\n<p><em><strong>生活 &lt;=&gt; 赌博</strong></em></p>\n<p><em><strong>社会 &lt;=&gt; 熔炉，人&lt;=&gt; 锻造物</strong></em></p>\n<p><em><strong>学习成长 &lt;=&gt; 田径比赛</strong></em></p>\n<p>结构隐喻(结构类比) 为我们<em><strong>拓展其意义</strong></em>，提供了最丰富的资源。它能让我们<em><strong>以一个</strong></em>高度结构化的清晰界定的<em><strong>概念，来构建另一个概念</strong></em></p>\n<p>——《我们赖以生存的隐喻》</p>\n<p><em>[触类旁通，不言而喻]</em></p>\n<h4 id=\"两个可以进行类比的对象之间，怎样构成结构映射的关系\"><a href=\"#两个可以进行类比的对象之间，怎样构成结构映射的关系\" class=\"headerlink\" title=\"两个可以进行类比的对象之间，怎样构成结构映射的关系\"></a>两个可以进行类比的对象之间，怎样构成结构映射的关系</h4><pre><code>     ===&gt;&gt;&gt; 双边互动、强势弱势、支配被支配的关系 &lt;&lt;&lt;=== \n</code></pre>\n<p>爱情                                                                                                    战争</p>\n<p>​            ===========&gt;&gt;&gt; 战争式的爱情关系&lt;&lt;&lt;=========== </p>\n<p>​            ========&gt;&gt;&gt; 存在胜利者签订某种契约&lt;&lt;&lt;========= </p>\n<p>​            ========&gt;&gt;&gt; 炫耀实力，经常性的威慑&lt;&lt;&lt;=========</p>\n<p>​            ========&gt;&gt;&gt; 偶尔会有摩擦冲突、动手&lt;&lt;&lt;=========</p>\n<p>​            =======&gt;&gt;&gt; 存在蜜月期、冷战期等阶段&lt;&lt;&lt;=========</p>\n<hr>\n<p>学习成长    ==&gt;&gt;&gt; 多人运动、单向行进、世俗的评分机制，过程疲劳枯燥&lt;&lt;&lt;===     田径比赛</p>\n<p><em>[过度简化了学习成长的理解，又过度强化了竞争意识，将部分抽象的特征具象化，比如盲人摸到的象腿]</em></p>\n<hr>\n<p><strong>对于一个抽象概念，具象的对象是弹性的</strong>，是<strong>融合</strong>的。</p>\n<p>eg.<em><strong>爱情 &lt;=&gt; 共同加工的艺术品</strong></em></p>\n<p>爱情    ======&gt;&gt;&gt; 需要有共同的审美、用欣赏的目光去看待、需要耐心、需要长时间的磨合、&lt;&lt;&lt;====== 共同加工的艺术品</p>\n<p>eg.<em><strong>学习成长 &lt;=&gt; 马拉松</strong></em></p>\n<h2 id=\"3-原型范畴\"><a href=\"#3-原型范畴\" class=\"headerlink\" title=\"3.原型范畴\"></a>3.原型范畴</h2><p><strong>田径比赛</strong> 是 <strong>学习成长</strong> 的原型</p>\n<p><strong>战争</strong> 是 <strong>爱情</strong> 的原型</p>\n<p><strong>物理实体</strong> 是 <strong>心理实体</strong> 的原型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型的属性、关系、结构，被我们类比投向到了另外一个对象，这个对象就变成了原型的摹本，就理解了这个对象。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"原型范畴论\"><a href=\"#原型范畴论\" class=\"headerlink\" title=\"原型范畴论\"></a>原型范畴论</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型是一个范畴的典型实例，其他成员是基于它们被感知到的与原型相似而被纳入统一范畴的。</span><br><span class=\"line\">范畴以原型成员为中心，通过家族相似性不断向外扩展的，词义也具有这样的特点，以中心意义为基础，不断扩展形成了一个意义链，构成了一个语义网络。</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>家族相似性理论</strong></em></p>\n<p>“丢掉” 是 “放弃” 的父</p>\n<p>“小学” 是 “中学” 的弟弟</p>\n<p>它们之间都有亲缘关系，但没有明确的层次和等级，它们的相对关系，是在我们日常交流/语言游戏的时候被暂时性的确定的。</p>\n<p>这个理论，解释性很强。</p>\n<p><strong>我们就是围绕着这些原型，来构建出信念网络的，那些越早出现在生命中的原型，它的位置越靠中间，它的关联的节点越多，对我们的控制和影响就越大。</strong></p>\n<p>家庭是最早出现的原型之一——原生家庭：是我们原型的发源地。：</p>\n<p><strong>家庭</strong> &lt;=&gt; <strong>社会</strong></p>\n<p>将家庭有关的信念网络去映射社会，去理解社会，</p>\n<p>[普世 &lt;=&gt; 具体抽象]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个人试图寻找他所面临的情况的本质时，它的范畴库就是过滤和感知这个世界的媒介。</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>自我的原型：</strong></em></p>\n<p>如何进行自我评价——<strong>我们假设自己是别人，别人会怎么评价我们，我是别人的时候，我怎么评价自己。</strong></p>\n<p>而这个<strong>别人</strong>，是以自我为原型，所类比出来的<strong>他我</strong>，一个摹本</p>\n<p>别人对我的一个评价标准，其实是我对别人评价标准的一个翻版。 <strong>推己及人 &lt;=&gt; 以己度人</strong></p>\n<p>[镜中人，镜像序列，禅宗，道家一生二]</p>\n<p>原型和类比，基于相似性之间的经验迁移，给了我们无边无际的发散空间，又让我们锁死在了我们的信念网络之中。</p>\n<p>围绕着原型，在无边的概念网络中，建立了一个半封闭的空间，让我们理性可以在其中搞笑的运行。</p>\n<p>[正因为有限，所以有限]</p>\n<p>将旧情景的理解，迁移到了有相似性的新情景中，获得了一种触类旁通，不言而喻的高效的认知。但是，<strong>原型会限制我们的理解，约束我们的想象力</strong>，导致一些非理性的错误，受困于固有的错误，甚至被某些阴影封印住我们的能力和可能性。我们都是悬挂在自己编织的概念网络上的动物。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}